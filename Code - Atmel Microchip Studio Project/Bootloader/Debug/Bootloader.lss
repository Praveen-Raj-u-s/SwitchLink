
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d46c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000d46c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c74  200000bc  0000d528  000200bc  2**2
                  ALLOC
  3 .stack        00002000  20000d30  0000e19c  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d92c  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000623a  00000000  00000000  0006da69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b3f  00000000  00000000  00073ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010b0  00000000  00000000  000797e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e80  00000000  00000000  0007a892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021906  00000000  00000000  0007b712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019b51  00000000  00000000  0009d018  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093e41  00000000  00000000  000b6b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003ee4  00000000  00000000  0014a9ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 2d 00 20 b1 6e 00 00 a9 6f 00 00 a9 6f 00 00     0-. .n...o...o..
	...
      2c:	a9 6f 00 00 00 00 00 00 00 00 00 00 a9 6f 00 00     .o...........o..
      3c:	e5 01 00 00 a9 6f 00 00 a9 6f 00 00 a9 6f 00 00     .....o...o...o..
      4c:	a9 6f 00 00 a9 6f 00 00 a9 6f 00 00 a9 6f 00 00     .o...o...o...o..
      5c:	a9 6f 00 00 a9 6f 00 00 3d 41 00 00 55 41 00 00     .o...o..=A..UA..
      6c:	6d 41 00 00 85 41 00 00 9d 41 00 00 b5 41 00 00     mA...A...A...A..
      7c:	a9 6f 00 00 a9 6f 00 00 a9 6f 00 00 a9 6f 00 00     .o...o...o...o..
      8c:	a9 6f 00 00 a9 6f 00 00 00 00 00 00 00 00 00 00     .o...o..........
      9c:	a9 6f 00 00 a9 6f 00 00 a9 6f 00 00 a9 6f 00 00     .o...o...o...o..
      ac:	a9 6f 00 00 00 00 00 00                             .o......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	0000d46c 	.word	0x0000d46c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	0000d46c 	.word	0x0000d46c
     10c:	0000d46c 	.word	0x0000d46c
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006a65 	.word	0x00006a65
     190:	20000000 	.word	0x20000000
     194:	0000b5bd 	.word	0x0000b5bd
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000d8 	.word	0x200000d8

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000d8 	.word	0x200000d8

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b12      	ldr	r3, [pc, #72]	; (34c <system_board_init+0x54>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <system_board_init+0x58>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0e      	ldr	r3, [pc, #56]	; (354 <system_board_init+0x5c>)
     31c:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2201      	movs	r2, #1
     322:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA07, &pin_conf);
     324:	1d3b      	adds	r3, r7, #4
     326:	0019      	movs	r1, r3
     328:	2007      	movs	r0, #7
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <system_board_init+0x58>)
     32c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     32e:	1d3b      	adds	r3, r7, #4
     330:	2200      	movs	r2, #0
     332:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     334:	1d3b      	adds	r3, r7, #4
     336:	2201      	movs	r2, #1
     338:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     33a:	1d3b      	adds	r3, r7, #4
     33c:	0019      	movs	r1, r3
     33e:	2037      	movs	r0, #55	; 0x37
     340:	4b03      	ldr	r3, [pc, #12]	; (350 <system_board_init+0x58>)
     342:	4798      	blx	r3
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	b002      	add	sp, #8
     34a:	bd80      	pop	{r7, pc}
     34c:	00000281 	.word	0x00000281
     350:	0000356d 	.word	0x0000356d
     354:	000002a5 	.word	0x000002a5

00000358 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     358:	b580      	push	{r7, lr}
     35a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     35c:	4b04      	ldr	r3, [pc, #16]	; (370 <system_interrupt_enable_global+0x18>)
     35e:	2201      	movs	r2, #1
     360:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     362:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     366:	b662      	cpsie	i
}
     368:	46c0      	nop			; (mov r8, r8)
     36a:	46bd      	mov	sp, r7
     36c:	bd80      	pop	{r7, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	20000009 	.word	0x20000009

00000374 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     374:	b580      	push	{r7, lr}
     376:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     378:	b672      	cpsid	i
     37a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     37e:	4b03      	ldr	r3, [pc, #12]	; (38c <system_interrupt_disable_global+0x18>)
     380:	2200      	movs	r2, #0
     382:	701a      	strb	r2, [r3, #0]
}
     384:	46c0      	nop			; (mov r8, r8)
     386:	46bd      	mov	sp, r7
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	20000009 	.word	0x20000009

00000390 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     390:	b580      	push	{r7, lr}
     392:	b084      	sub	sp, #16
     394:	af00      	add	r7, sp, #0
     396:	60f8      	str	r0, [r7, #12]
     398:	60b9      	str	r1, [r7, #8]
     39a:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	2203      	movs	r2, #3
     3a0:	4013      	ands	r3, r2
     3a2:	d001      	beq.n	3a8 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
     3a4:	2318      	movs	r3, #24
     3a6:	e040      	b.n	42a <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
     3a8:	4b22      	ldr	r3, [pc, #136]	; (434 <dsu_crc32_cal+0xa4>)
     3aa:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3ac:	2322      	movs	r3, #34	; 0x22
     3ae:	425b      	negs	r3, r3
     3b0:	0019      	movs	r1, r3
     3b2:	2021      	movs	r0, #33	; 0x21
     3b4:	4b20      	ldr	r3, [pc, #128]	; (438 <dsu_crc32_cal+0xa8>)
     3b6:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
     3b8:	4a20      	ldr	r2, [pc, #128]	; (43c <dsu_crc32_cal+0xac>)
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	681b      	ldr	r3, [r3, #0]
     3be:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
     3c0:	4b1e      	ldr	r3, [pc, #120]	; (43c <dsu_crc32_cal+0xac>)
     3c2:	68fa      	ldr	r2, [r7, #12]
     3c4:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
     3c6:	4b1d      	ldr	r3, [pc, #116]	; (43c <dsu_crc32_cal+0xac>)
     3c8:	68ba      	ldr	r2, [r7, #8]
     3ca:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
     3cc:	4a1b      	ldr	r2, [pc, #108]	; (43c <dsu_crc32_cal+0xac>)
     3ce:	7813      	ldrb	r3, [r2, #0]
     3d0:	2104      	movs	r1, #4
     3d2:	430b      	orrs	r3, r1
     3d4:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	4b18      	ldr	r3, [pc, #96]	; (43c <dsu_crc32_cal+0xac>)
     3da:	785b      	ldrb	r3, [r3, #1]
     3dc:	b2db      	uxtb	r3, r3
     3de:	001a      	movs	r2, r3
     3e0:	2301      	movs	r3, #1
     3e2:	4013      	ands	r3, r2
     3e4:	2b01      	cmp	r3, #1
     3e6:	d1f7      	bne.n	3d8 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     3e8:	4b14      	ldr	r3, [pc, #80]	; (43c <dsu_crc32_cal+0xac>)
     3ea:	785b      	ldrb	r3, [r3, #1]
     3ec:	b2db      	uxtb	r3, r3
     3ee:	001a      	movs	r2, r3
     3f0:	2304      	movs	r3, #4
     3f2:	4013      	ands	r3, r2
     3f4:	d009      	beq.n	40a <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3f6:	2322      	movs	r3, #34	; 0x22
     3f8:	425b      	negs	r3, r3
     3fa:	0019      	movs	r1, r3
     3fc:	2021      	movs	r0, #33	; 0x21
     3fe:	4b10      	ldr	r3, [pc, #64]	; (440 <dsu_crc32_cal+0xb0>)
     400:	4798      	blx	r3
		system_interrupt_enable_global();
     402:	4b10      	ldr	r3, [pc, #64]	; (444 <dsu_crc32_cal+0xb4>)
     404:	4798      	blx	r3
		return STATUS_ERR_IO;
     406:	2310      	movs	r3, #16
     408:	e00f      	b.n	42a <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
     40a:	4b0c      	ldr	r3, [pc, #48]	; (43c <dsu_crc32_cal+0xac>)
     40c:	68da      	ldr	r2, [r3, #12]
     40e:	687b      	ldr	r3, [r7, #4]
     410:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     412:	4b0a      	ldr	r3, [pc, #40]	; (43c <dsu_crc32_cal+0xac>)
     414:	2201      	movs	r2, #1
     416:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     418:	2322      	movs	r3, #34	; 0x22
     41a:	425b      	negs	r3, r3
     41c:	0019      	movs	r1, r3
     41e:	2021      	movs	r0, #33	; 0x21
     420:	4b07      	ldr	r3, [pc, #28]	; (440 <dsu_crc32_cal+0xb0>)
     422:	4798      	blx	r3
	system_interrupt_enable_global();
     424:	4b07      	ldr	r3, [pc, #28]	; (444 <dsu_crc32_cal+0xb4>)
     426:	4798      	blx	r3
	return STATUS_OK;
     428:	2300      	movs	r3, #0
     42a:	0018      	movs	r0, r3
     42c:	46bd      	mov	sp, r7
     42e:	b004      	add	sp, #16
     430:	bd80      	pop	{r7, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	00000375 	.word	0x00000375
     438:	00000a61 	.word	0x00000a61
     43c:	41002000 	.word	0x41002000
     440:	000009c9 	.word	0x000009c9
     444:	00000359 	.word	0x00000359

00000448 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     448:	b580      	push	{r7, lr}
     44a:	b082      	sub	sp, #8
     44c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <nvm_is_ready+0x24>)
     450:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     452:	687b      	ldr	r3, [r7, #4]
     454:	7d1b      	ldrb	r3, [r3, #20]
     456:	b2db      	uxtb	r3, r3
     458:	001a      	movs	r2, r3
     45a:	2301      	movs	r3, #1
     45c:	4013      	ands	r3, r2
     45e:	1e5a      	subs	r2, r3, #1
     460:	4193      	sbcs	r3, r2
     462:	b2db      	uxtb	r3, r3
}
     464:	0018      	movs	r0, r3
     466:	46bd      	mov	sp, r7
     468:	b002      	add	sp, #8
     46a:	bd80      	pop	{r7, pc}
     46c:	41004000 	.word	0x41004000

00000470 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     470:	b580      	push	{r7, lr}
     472:	b082      	sub	sp, #8
     474:	af00      	add	r7, sp, #0
     476:	0002      	movs	r2, r0
     478:	6039      	str	r1, [r7, #0]
     47a:	1dfb      	adds	r3, r7, #7
     47c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     47e:	1dfb      	adds	r3, r7, #7
     480:	781b      	ldrb	r3, [r3, #0]
     482:	2b01      	cmp	r3, #1
     484:	d00a      	beq.n	49c <system_apb_clock_set_mask+0x2c>
     486:	2b02      	cmp	r3, #2
     488:	d00f      	beq.n	4aa <system_apb_clock_set_mask+0x3a>
     48a:	2b00      	cmp	r3, #0
     48c:	d114      	bne.n	4b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     48e:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <system_apb_clock_set_mask+0x58>)
     490:	4a0d      	ldr	r2, [pc, #52]	; (4c8 <system_apb_clock_set_mask+0x58>)
     492:	6991      	ldr	r1, [r2, #24]
     494:	683a      	ldr	r2, [r7, #0]
     496:	430a      	orrs	r2, r1
     498:	619a      	str	r2, [r3, #24]
			break;
     49a:	e00f      	b.n	4bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     49c:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <system_apb_clock_set_mask+0x58>)
     49e:	4a0a      	ldr	r2, [pc, #40]	; (4c8 <system_apb_clock_set_mask+0x58>)
     4a0:	69d1      	ldr	r1, [r2, #28]
     4a2:	683a      	ldr	r2, [r7, #0]
     4a4:	430a      	orrs	r2, r1
     4a6:	61da      	str	r2, [r3, #28]
			break;
     4a8:	e008      	b.n	4bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4aa:	4b07      	ldr	r3, [pc, #28]	; (4c8 <system_apb_clock_set_mask+0x58>)
     4ac:	4a06      	ldr	r2, [pc, #24]	; (4c8 <system_apb_clock_set_mask+0x58>)
     4ae:	6a11      	ldr	r1, [r2, #32]
     4b0:	683a      	ldr	r2, [r7, #0]
     4b2:	430a      	orrs	r2, r1
     4b4:	621a      	str	r2, [r3, #32]
			break;
     4b6:	e001      	b.n	4bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4b8:	2317      	movs	r3, #23
     4ba:	e000      	b.n	4be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     4bc:	2300      	movs	r3, #0
}
     4be:	0018      	movs	r0, r3
     4c0:	46bd      	mov	sp, r7
     4c2:	b002      	add	sp, #8
     4c4:	bd80      	pop	{r7, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	40000400 	.word	0x40000400

000004cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     4cc:	b580      	push	{r7, lr}
     4ce:	b084      	sub	sp, #16
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4d4:	4b2f      	ldr	r3, [pc, #188]	; (594 <nvm_set_config+0xc8>)
     4d6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     4d8:	2104      	movs	r1, #4
     4da:	2001      	movs	r0, #1
     4dc:	4b2e      	ldr	r3, [pc, #184]	; (598 <nvm_set_config+0xcc>)
     4de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4e0:	68fb      	ldr	r3, [r7, #12]
     4e2:	2220      	movs	r2, #32
     4e4:	32ff      	adds	r2, #255	; 0xff
     4e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4e8:	4b2c      	ldr	r3, [pc, #176]	; (59c <nvm_set_config+0xd0>)
     4ea:	4798      	blx	r3
     4ec:	0003      	movs	r3, r0
     4ee:	001a      	movs	r2, r3
     4f0:	2301      	movs	r3, #1
     4f2:	4053      	eors	r3, r2
     4f4:	b2db      	uxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	d001      	beq.n	4fe <nvm_set_config+0x32>
		return STATUS_BUSY;
     4fa:	2305      	movs	r3, #5
     4fc:	e045      	b.n	58a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	781b      	ldrb	r3, [r3, #0]
     502:	021b      	lsls	r3, r3, #8
     504:	001a      	movs	r2, r3
     506:	23c0      	movs	r3, #192	; 0xc0
     508:	009b      	lsls	r3, r3, #2
     50a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	785b      	ldrb	r3, [r3, #1]
     510:	01db      	lsls	r3, r3, #7
     512:	0019      	movs	r1, r3
     514:	23ff      	movs	r3, #255	; 0xff
     516:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     518:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     51a:	687b      	ldr	r3, [r7, #4]
     51c:	789b      	ldrb	r3, [r3, #2]
     51e:	005b      	lsls	r3, r3, #1
     520:	0019      	movs	r1, r3
     522:	231e      	movs	r3, #30
     524:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     526:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     528:	687b      	ldr	r3, [r7, #4]
     52a:	78db      	ldrb	r3, [r3, #3]
     52c:	049b      	lsls	r3, r3, #18
     52e:	0019      	movs	r1, r3
     530:	2380      	movs	r3, #128	; 0x80
     532:	02db      	lsls	r3, r3, #11
     534:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     536:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     538:	687b      	ldr	r3, [r7, #4]
     53a:	791b      	ldrb	r3, [r3, #4]
     53c:	041b      	lsls	r3, r3, #16
     53e:	0019      	movs	r1, r3
     540:	23c0      	movs	r3, #192	; 0xc0
     542:	029b      	lsls	r3, r3, #10
     544:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     546:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	035b      	lsls	r3, r3, #13
     552:	0f5b      	lsrs	r3, r3, #29
     554:	b2db      	uxtb	r3, r3
     556:	001a      	movs	r2, r3
     558:	2308      	movs	r3, #8
     55a:	4093      	lsls	r3, r2
     55c:	b29a      	uxth	r2, r3
     55e:	4b10      	ldr	r3, [pc, #64]	; (5a0 <nvm_set_config+0xd4>)
     560:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     562:	68fb      	ldr	r3, [r7, #12]
     564:	689b      	ldr	r3, [r3, #8]
     566:	b29a      	uxth	r2, r3
     568:	4b0d      	ldr	r3, [pc, #52]	; (5a0 <nvm_set_config+0xd4>)
     56a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	785a      	ldrb	r2, [r3, #1]
     570:	4b0b      	ldr	r3, [pc, #44]	; (5a0 <nvm_set_config+0xd4>)
     572:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     574:	68fb      	ldr	r3, [r7, #12]
     576:	8b1b      	ldrh	r3, [r3, #24]
     578:	b29b      	uxth	r3, r3
     57a:	001a      	movs	r2, r3
     57c:	2380      	movs	r3, #128	; 0x80
     57e:	005b      	lsls	r3, r3, #1
     580:	4013      	ands	r3, r2
     582:	d001      	beq.n	588 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     584:	2310      	movs	r3, #16
     586:	e000      	b.n	58a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     588:	2300      	movs	r3, #0
}
     58a:	0018      	movs	r0, r3
     58c:	46bd      	mov	sp, r7
     58e:	b004      	add	sp, #16
     590:	bd80      	pop	{r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	41004000 	.word	0x41004000
     598:	00000471 	.word	0x00000471
     59c:	00000449 	.word	0x00000449
     5a0:	200000dc 	.word	0x200000dc

000005a4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b086      	sub	sp, #24
     5a8:	af00      	add	r7, sp, #0
     5aa:	60b9      	str	r1, [r7, #8]
     5ac:	607a      	str	r2, [r7, #4]
     5ae:	230f      	movs	r3, #15
     5b0:	18fb      	adds	r3, r7, r3
     5b2:	1c02      	adds	r2, r0, #0
     5b4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5b6:	4b3a      	ldr	r3, [pc, #232]	; (6a0 <nvm_execute_command+0xfc>)
     5b8:	881b      	ldrh	r3, [r3, #0]
     5ba:	001a      	movs	r2, r3
     5bc:	4b38      	ldr	r3, [pc, #224]	; (6a0 <nvm_execute_command+0xfc>)
     5be:	885b      	ldrh	r3, [r3, #2]
     5c0:	435a      	muls	r2, r3
     5c2:	68bb      	ldr	r3, [r7, #8]
     5c4:	429a      	cmp	r2, r3
     5c6:	d209      	bcs.n	5dc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     5c8:	68bb      	ldr	r3, [r7, #8]
     5ca:	4a36      	ldr	r2, [pc, #216]	; (6a4 <nvm_execute_command+0x100>)
     5cc:	4293      	cmp	r3, r2
     5ce:	d903      	bls.n	5d8 <nvm_execute_command+0x34>
     5d0:	68bb      	ldr	r3, [r7, #8]
     5d2:	4a35      	ldr	r2, [pc, #212]	; (6a8 <nvm_execute_command+0x104>)
     5d4:	4293      	cmp	r3, r2
     5d6:	d901      	bls.n	5dc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     5d8:	2318      	movs	r3, #24
     5da:	e05c      	b.n	696 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     5dc:	4b33      	ldr	r3, [pc, #204]	; (6ac <nvm_execute_command+0x108>)
     5de:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     5e0:	697b      	ldr	r3, [r7, #20]
     5e2:	685b      	ldr	r3, [r3, #4]
     5e4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     5e6:	693b      	ldr	r3, [r7, #16]
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	02d2      	lsls	r2, r2, #11
     5ec:	431a      	orrs	r2, r3
     5ee:	697b      	ldr	r3, [r7, #20]
     5f0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5f2:	697b      	ldr	r3, [r7, #20]
     5f4:	2220      	movs	r2, #32
     5f6:	32ff      	adds	r2, #255	; 0xff
     5f8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     5fa:	4b2d      	ldr	r3, [pc, #180]	; (6b0 <nvm_execute_command+0x10c>)
     5fc:	4798      	blx	r3
     5fe:	0003      	movs	r3, r0
     600:	001a      	movs	r2, r3
     602:	2301      	movs	r3, #1
     604:	4053      	eors	r3, r2
     606:	b2db      	uxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	d004      	beq.n	616 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     60c:	697b      	ldr	r3, [r7, #20]
     60e:	693a      	ldr	r2, [r7, #16]
     610:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     612:	2305      	movs	r3, #5
     614:	e03f      	b.n	696 <nvm_execute_command+0xf2>
	}

	switch (command) {
     616:	230f      	movs	r3, #15
     618:	18fb      	adds	r3, r7, r3
     61a:	781b      	ldrb	r3, [r3, #0]
     61c:	2b45      	cmp	r3, #69	; 0x45
     61e:	d81d      	bhi.n	65c <nvm_execute_command+0xb8>
     620:	009a      	lsls	r2, r3, #2
     622:	4b24      	ldr	r3, [pc, #144]	; (6b4 <nvm_execute_command+0x110>)
     624:	18d3      	adds	r3, r2, r3
     626:	681b      	ldr	r3, [r3, #0]
     628:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	8b1b      	ldrh	r3, [r3, #24]
     62e:	b29b      	uxth	r3, r3
     630:	001a      	movs	r2, r3
     632:	2380      	movs	r3, #128	; 0x80
     634:	005b      	lsls	r3, r3, #1
     636:	4013      	ands	r3, r2
     638:	d004      	beq.n	644 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     63a:	697b      	ldr	r3, [r7, #20]
     63c:	693a      	ldr	r2, [r7, #16]
     63e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     640:	2310      	movs	r3, #16
     642:	e028      	b.n	696 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     644:	68bb      	ldr	r3, [r7, #8]
     646:	089b      	lsrs	r3, r3, #2
     648:	005a      	lsls	r2, r3, #1
     64a:	697b      	ldr	r3, [r7, #20]
     64c:	61da      	str	r2, [r3, #28]
			break;
     64e:	e00b      	b.n	668 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     650:	68bb      	ldr	r3, [r7, #8]
     652:	089b      	lsrs	r3, r3, #2
     654:	005a      	lsls	r2, r3, #1
     656:	697b      	ldr	r3, [r7, #20]
     658:	61da      	str	r2, [r3, #28]
			break;
     65a:	e005      	b.n	668 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     65c:	697b      	ldr	r3, [r7, #20]
     65e:	693a      	ldr	r2, [r7, #16]
     660:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     662:	2317      	movs	r3, #23
     664:	e017      	b.n	696 <nvm_execute_command+0xf2>
			break;
     666:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     668:	230f      	movs	r3, #15
     66a:	18fb      	adds	r3, r7, r3
     66c:	781b      	ldrb	r3, [r3, #0]
     66e:	b29b      	uxth	r3, r3
     670:	4a11      	ldr	r2, [pc, #68]	; (6b8 <nvm_execute_command+0x114>)
     672:	4313      	orrs	r3, r2
     674:	b29a      	uxth	r2, r3
     676:	697b      	ldr	r3, [r7, #20]
     678:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	4b0c      	ldr	r3, [pc, #48]	; (6b0 <nvm_execute_command+0x10c>)
     67e:	4798      	blx	r3
     680:	0003      	movs	r3, r0
     682:	001a      	movs	r2, r3
     684:	2301      	movs	r3, #1
     686:	4053      	eors	r3, r2
     688:	b2db      	uxtb	r3, r3
     68a:	2b00      	cmp	r3, #0
     68c:	d1f6      	bne.n	67c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     68e:	697b      	ldr	r3, [r7, #20]
     690:	693a      	ldr	r2, [r7, #16]
     692:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     694:	2300      	movs	r3, #0
}
     696:	0018      	movs	r0, r3
     698:	46bd      	mov	sp, r7
     69a:	b006      	add	sp, #24
     69c:	bd80      	pop	{r7, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	200000dc 	.word	0x200000dc
     6a4:	00803fff 	.word	0x00803fff
     6a8:	00806000 	.word	0x00806000
     6ac:	41004000 	.word	0x41004000
     6b0:	00000449 	.word	0x00000449
     6b4:	0000c80c 	.word	0x0000c80c
     6b8:	ffffa500 	.word	0xffffa500

000006bc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b088      	sub	sp, #32
     6c0:	af00      	add	r7, sp, #0
     6c2:	60f8      	str	r0, [r7, #12]
     6c4:	60b9      	str	r1, [r7, #8]
     6c6:	1dbb      	adds	r3, r7, #6
     6c8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     6ca:	4b4a      	ldr	r3, [pc, #296]	; (7f4 <nvm_write_buffer+0x138>)
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	001a      	movs	r2, r3
     6d0:	4b48      	ldr	r3, [pc, #288]	; (7f4 <nvm_write_buffer+0x138>)
     6d2:	885b      	ldrh	r3, [r3, #2]
     6d4:	435a      	muls	r2, r3
	if (destination_address >
     6d6:	68fb      	ldr	r3, [r7, #12]
     6d8:	429a      	cmp	r2, r3
     6da:	d201      	bcs.n	6e0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     6dc:	2318      	movs	r3, #24
     6de:	e084      	b.n	7ea <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     6e0:	4b44      	ldr	r3, [pc, #272]	; (7f4 <nvm_write_buffer+0x138>)
     6e2:	881b      	ldrh	r3, [r3, #0]
     6e4:	3b01      	subs	r3, #1
     6e6:	001a      	movs	r2, r3
     6e8:	68fb      	ldr	r3, [r7, #12]
     6ea:	4013      	ands	r3, r2
     6ec:	d001      	beq.n	6f2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     6ee:	2318      	movs	r3, #24
     6f0:	e07b      	b.n	7ea <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     6f2:	4b40      	ldr	r3, [pc, #256]	; (7f4 <nvm_write_buffer+0x138>)
     6f4:	881b      	ldrh	r3, [r3, #0]
     6f6:	1dba      	adds	r2, r7, #6
     6f8:	8812      	ldrh	r2, [r2, #0]
     6fa:	429a      	cmp	r2, r3
     6fc:	d901      	bls.n	702 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     6fe:	2317      	movs	r3, #23
     700:	e073      	b.n	7ea <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     702:	4b3d      	ldr	r3, [pc, #244]	; (7f8 <nvm_write_buffer+0x13c>)
     704:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     706:	4b3d      	ldr	r3, [pc, #244]	; (7fc <nvm_write_buffer+0x140>)
     708:	4798      	blx	r3
     70a:	0003      	movs	r3, r0
     70c:	001a      	movs	r2, r3
     70e:	2301      	movs	r3, #1
     710:	4053      	eors	r3, r2
     712:	b2db      	uxtb	r3, r3
     714:	2b00      	cmp	r3, #0
     716:	d001      	beq.n	71c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     718:	2305      	movs	r3, #5
     71a:	e066      	b.n	7ea <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     71c:	697b      	ldr	r3, [r7, #20]
     71e:	4a38      	ldr	r2, [pc, #224]	; (800 <nvm_write_buffer+0x144>)
     720:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     722:	46c0      	nop			; (mov r8, r8)
     724:	4b35      	ldr	r3, [pc, #212]	; (7fc <nvm_write_buffer+0x140>)
     726:	4798      	blx	r3
     728:	0003      	movs	r3, r0
     72a:	001a      	movs	r2, r3
     72c:	2301      	movs	r3, #1
     72e:	4053      	eors	r3, r2
     730:	b2db      	uxtb	r3, r3
     732:	2b00      	cmp	r3, #0
     734:	d1f6      	bne.n	724 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     736:	697b      	ldr	r3, [r7, #20]
     738:	2220      	movs	r2, #32
     73a:	32ff      	adds	r2, #255	; 0xff
     73c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	085b      	lsrs	r3, r3, #1
     742:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     744:	231a      	movs	r3, #26
     746:	18fb      	adds	r3, r7, r3
     748:	2200      	movs	r2, #0
     74a:	801a      	strh	r2, [r3, #0]
     74c:	e032      	b.n	7b4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     74e:	231a      	movs	r3, #26
     750:	18fb      	adds	r3, r7, r3
     752:	881b      	ldrh	r3, [r3, #0]
     754:	68ba      	ldr	r2, [r7, #8]
     756:	18d3      	adds	r3, r2, r3
     758:	781a      	ldrb	r2, [r3, #0]
     75a:	2318      	movs	r3, #24
     75c:	18fb      	adds	r3, r7, r3
     75e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     760:	231a      	movs	r3, #26
     762:	18fb      	adds	r3, r7, r3
     764:	881a      	ldrh	r2, [r3, #0]
     766:	1dbb      	adds	r3, r7, #6
     768:	881b      	ldrh	r3, [r3, #0]
     76a:	3b01      	subs	r3, #1
     76c:	429a      	cmp	r2, r3
     76e:	da11      	bge.n	794 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     770:	231a      	movs	r3, #26
     772:	18fb      	adds	r3, r7, r3
     774:	881b      	ldrh	r3, [r3, #0]
     776:	3301      	adds	r3, #1
     778:	68ba      	ldr	r2, [r7, #8]
     77a:	18d3      	adds	r3, r2, r3
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	021b      	lsls	r3, r3, #8
     780:	b21a      	sxth	r2, r3
     782:	2318      	movs	r3, #24
     784:	18fb      	adds	r3, r7, r3
     786:	2100      	movs	r1, #0
     788:	5e5b      	ldrsh	r3, [r3, r1]
     78a:	4313      	orrs	r3, r2
     78c:	b21a      	sxth	r2, r3
     78e:	2318      	movs	r3, #24
     790:	18fb      	adds	r3, r7, r3
     792:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     794:	69fb      	ldr	r3, [r7, #28]
     796:	1c5a      	adds	r2, r3, #1
     798:	61fa      	str	r2, [r7, #28]
     79a:	005b      	lsls	r3, r3, #1
     79c:	001a      	movs	r2, r3
     79e:	2318      	movs	r3, #24
     7a0:	18fb      	adds	r3, r7, r3
     7a2:	881b      	ldrh	r3, [r3, #0]
     7a4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     7a6:	231a      	movs	r3, #26
     7a8:	18fb      	adds	r3, r7, r3
     7aa:	221a      	movs	r2, #26
     7ac:	18ba      	adds	r2, r7, r2
     7ae:	8812      	ldrh	r2, [r2, #0]
     7b0:	3202      	adds	r2, #2
     7b2:	801a      	strh	r2, [r3, #0]
     7b4:	231a      	movs	r3, #26
     7b6:	18fa      	adds	r2, r7, r3
     7b8:	1dbb      	adds	r3, r7, #6
     7ba:	8812      	ldrh	r2, [r2, #0]
     7bc:	881b      	ldrh	r3, [r3, #0]
     7be:	429a      	cmp	r2, r3
     7c0:	d3c5      	bcc.n	74e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <nvm_write_buffer+0x138>)
     7c4:	791b      	ldrb	r3, [r3, #4]
     7c6:	2201      	movs	r2, #1
     7c8:	4053      	eors	r3, r2
     7ca:	b2db      	uxtb	r3, r3
     7cc:	2b00      	cmp	r3, #0
     7ce:	d00b      	beq.n	7e8 <nvm_write_buffer+0x12c>
     7d0:	1dbb      	adds	r3, r7, #6
     7d2:	881b      	ldrh	r3, [r3, #0]
     7d4:	2b3f      	cmp	r3, #63	; 0x3f
     7d6:	d807      	bhi.n	7e8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     7d8:	68fb      	ldr	r3, [r7, #12]
     7da:	2200      	movs	r2, #0
     7dc:	0019      	movs	r1, r3
     7de:	2004      	movs	r0, #4
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <nvm_write_buffer+0x148>)
     7e2:	4798      	blx	r3
     7e4:	0003      	movs	r3, r0
     7e6:	e000      	b.n	7ea <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     7e8:	2300      	movs	r3, #0
}
     7ea:	0018      	movs	r0, r3
     7ec:	46bd      	mov	sp, r7
     7ee:	b008      	add	sp, #32
     7f0:	bd80      	pop	{r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	200000dc 	.word	0x200000dc
     7f8:	41004000 	.word	0x41004000
     7fc:	00000449 	.word	0x00000449
     800:	ffffa544 	.word	0xffffa544
     804:	000005a5 	.word	0x000005a5

00000808 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     808:	b580      	push	{r7, lr}
     80a:	b084      	sub	sp, #16
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     810:	4b23      	ldr	r3, [pc, #140]	; (8a0 <nvm_erase_row+0x98>)
     812:	881b      	ldrh	r3, [r3, #0]
     814:	001a      	movs	r2, r3
     816:	4b22      	ldr	r3, [pc, #136]	; (8a0 <nvm_erase_row+0x98>)
     818:	885b      	ldrh	r3, [r3, #2]
     81a:	435a      	muls	r2, r3
	if (row_address >
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	429a      	cmp	r2, r3
     820:	d201      	bcs.n	826 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     822:	2318      	movs	r3, #24
     824:	e037      	b.n	896 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     826:	4b1e      	ldr	r3, [pc, #120]	; (8a0 <nvm_erase_row+0x98>)
     828:	881b      	ldrh	r3, [r3, #0]
     82a:	009b      	lsls	r3, r3, #2
     82c:	3b01      	subs	r3, #1
     82e:	001a      	movs	r2, r3
     830:	687b      	ldr	r3, [r7, #4]
     832:	4013      	ands	r3, r2
     834:	d001      	beq.n	83a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     836:	2318      	movs	r3, #24
     838:	e02d      	b.n	896 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     83a:	4b1a      	ldr	r3, [pc, #104]	; (8a4 <nvm_erase_row+0x9c>)
     83c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     83e:	4b1a      	ldr	r3, [pc, #104]	; (8a8 <nvm_erase_row+0xa0>)
     840:	4798      	blx	r3
     842:	0003      	movs	r3, r0
     844:	001a      	movs	r2, r3
     846:	2301      	movs	r3, #1
     848:	4053      	eors	r3, r2
     84a:	b2db      	uxtb	r3, r3
     84c:	2b00      	cmp	r3, #0
     84e:	d001      	beq.n	854 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     850:	2305      	movs	r3, #5
     852:	e020      	b.n	896 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     854:	68fb      	ldr	r3, [r7, #12]
     856:	2220      	movs	r2, #32
     858:	32ff      	adds	r2, #255	; 0xff
     85a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	089b      	lsrs	r3, r3, #2
     860:	005a      	lsls	r2, r3, #1
     862:	68fb      	ldr	r3, [r7, #12]
     864:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     866:	68fb      	ldr	r3, [r7, #12]
     868:	4a10      	ldr	r2, [pc, #64]	; (8ac <nvm_erase_row+0xa4>)
     86a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     86c:	46c0      	nop			; (mov r8, r8)
     86e:	4b0e      	ldr	r3, [pc, #56]	; (8a8 <nvm_erase_row+0xa0>)
     870:	4798      	blx	r3
     872:	0003      	movs	r3, r0
     874:	001a      	movs	r2, r3
     876:	2301      	movs	r3, #1
     878:	4053      	eors	r3, r2
     87a:	b2db      	uxtb	r3, r3
     87c:	2b00      	cmp	r3, #0
     87e:	d1f6      	bne.n	86e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     880:	68fb      	ldr	r3, [r7, #12]
     882:	8b1b      	ldrh	r3, [r3, #24]
     884:	b29b      	uxth	r3, r3
     886:	b2db      	uxtb	r3, r3
     888:	001a      	movs	r2, r3
     88a:	231c      	movs	r3, #28
     88c:	4013      	ands	r3, r2
     88e:	d001      	beq.n	894 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     890:	2304      	movs	r3, #4
     892:	e000      	b.n	896 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     894:	2300      	movs	r3, #0
}
     896:	0018      	movs	r0, r3
     898:	46bd      	mov	sp, r7
     89a:	b004      	add	sp, #16
     89c:	bd80      	pop	{r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	200000dc 	.word	0x200000dc
     8a4:	41004000 	.word	0x41004000
     8a8:	00000449 	.word	0x00000449
     8ac:	ffffa502 	.word	0xffffa502

000008b0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b086      	sub	sp, #24
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     8b8:	4b2a      	ldr	r3, [pc, #168]	; (964 <nvm_get_parameters+0xb4>)
     8ba:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     8bc:	697b      	ldr	r3, [r7, #20]
     8be:	2220      	movs	r2, #32
     8c0:	32ff      	adds	r2, #255	; 0xff
     8c2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     8c4:	697b      	ldr	r3, [r7, #20]
     8c6:	689b      	ldr	r3, [r3, #8]
     8c8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     8ca:	693b      	ldr	r3, [r7, #16]
     8cc:	0c1b      	lsrs	r3, r3, #16
     8ce:	2207      	movs	r2, #7
     8d0:	4013      	ands	r3, r2
     8d2:	2208      	movs	r2, #8
     8d4:	409a      	lsls	r2, r3
     8d6:	0013      	movs	r3, r2
	parameters->page_size =
     8d8:	b2da      	uxtb	r2, r3
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     8de:	693b      	ldr	r3, [r7, #16]
     8e0:	b29a      	uxth	r2, r3
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     8e6:	4b20      	ldr	r3, [pc, #128]	; (968 <nvm_get_parameters+0xb8>)
     8e8:	881b      	ldrh	r3, [r3, #0]
     8ea:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
     8ec:	091b      	lsrs	r3, r3, #4
     8ee:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
     8f0:	230e      	movs	r3, #14
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	2107      	movs	r1, #7
     8f6:	400a      	ands	r2, r1
     8f8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     8fa:	230e      	movs	r3, #14
     8fc:	18fb      	adds	r3, r7, r3
     8fe:	881b      	ldrh	r3, [r3, #0]
     900:	2b07      	cmp	r3, #7
     902:	d103      	bne.n	90c <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
     904:	687b      	ldr	r3, [r7, #4]
     906:	2200      	movs	r2, #0
     908:	605a      	str	r2, [r3, #4]
     90a:	e00a      	b.n	922 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     90c:	230e      	movs	r3, #14
     90e:	18fb      	adds	r3, r7, r3
     910:	881b      	ldrh	r3, [r3, #0]
     912:	2206      	movs	r2, #6
     914:	1ad3      	subs	r3, r2, r3
     916:	2204      	movs	r2, #4
     918:	409a      	lsls	r2, r3
     91a:	0013      	movs	r3, r2
     91c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
     91e:	687b      	ldr	r3, [r7, #4]
     920:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     922:	4b11      	ldr	r3, [pc, #68]	; (968 <nvm_get_parameters+0xb8>)
     924:	881b      	ldrh	r3, [r3, #0]
     926:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
     928:	230c      	movs	r3, #12
     92a:	18fb      	adds	r3, r7, r3
     92c:	2107      	movs	r1, #7
     92e:	400a      	ands	r2, r1
     930:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     932:	230c      	movs	r3, #12
     934:	18fb      	adds	r3, r7, r3
     936:	881b      	ldrh	r3, [r3, #0]
     938:	2b07      	cmp	r3, #7
     93a:	d103      	bne.n	944 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	2200      	movs	r2, #0
     940:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
     942:	e00a      	b.n	95a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     944:	230c      	movs	r3, #12
     946:	18fb      	adds	r3, r7, r3
     948:	881b      	ldrh	r3, [r3, #0]
     94a:	2207      	movs	r2, #7
     94c:	1ad3      	subs	r3, r2, r3
     94e:	2204      	movs	r2, #4
     950:	409a      	lsls	r2, r3
     952:	0013      	movs	r3, r2
     954:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
     956:	687b      	ldr	r3, [r7, #4]
     958:	609a      	str	r2, [r3, #8]
}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	46bd      	mov	sp, r7
     95e:	b006      	add	sp, #24
     960:	bd80      	pop	{r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	41004000 	.word	0x41004000
     968:	00804000 	.word	0x00804000

0000096c <system_apb_clock_set_mask>:
{
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	0002      	movs	r2, r0
     974:	6039      	str	r1, [r7, #0]
     976:	1dfb      	adds	r3, r7, #7
     978:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     97a:	1dfb      	adds	r3, r7, #7
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	2b01      	cmp	r3, #1
     980:	d00a      	beq.n	998 <system_apb_clock_set_mask+0x2c>
     982:	2b02      	cmp	r3, #2
     984:	d00f      	beq.n	9a6 <system_apb_clock_set_mask+0x3a>
     986:	2b00      	cmp	r3, #0
     988:	d114      	bne.n	9b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     98a:	4b0e      	ldr	r3, [pc, #56]	; (9c4 <system_apb_clock_set_mask+0x58>)
     98c:	4a0d      	ldr	r2, [pc, #52]	; (9c4 <system_apb_clock_set_mask+0x58>)
     98e:	6991      	ldr	r1, [r2, #24]
     990:	683a      	ldr	r2, [r7, #0]
     992:	430a      	orrs	r2, r1
     994:	619a      	str	r2, [r3, #24]
			break;
     996:	e00f      	b.n	9b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     998:	4b0a      	ldr	r3, [pc, #40]	; (9c4 <system_apb_clock_set_mask+0x58>)
     99a:	4a0a      	ldr	r2, [pc, #40]	; (9c4 <system_apb_clock_set_mask+0x58>)
     99c:	69d1      	ldr	r1, [r2, #28]
     99e:	683a      	ldr	r2, [r7, #0]
     9a0:	430a      	orrs	r2, r1
     9a2:	61da      	str	r2, [r3, #28]
			break;
     9a4:	e008      	b.n	9b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     9a6:	4b07      	ldr	r3, [pc, #28]	; (9c4 <system_apb_clock_set_mask+0x58>)
     9a8:	4a06      	ldr	r2, [pc, #24]	; (9c4 <system_apb_clock_set_mask+0x58>)
     9aa:	6a11      	ldr	r1, [r2, #32]
     9ac:	683a      	ldr	r2, [r7, #0]
     9ae:	430a      	orrs	r2, r1
     9b0:	621a      	str	r2, [r3, #32]
			break;
     9b2:	e001      	b.n	9b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     9b4:	2317      	movs	r3, #23
     9b6:	e000      	b.n	9ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     9b8:	2300      	movs	r3, #0
}
     9ba:	0018      	movs	r0, r3
     9bc:	46bd      	mov	sp, r7
     9be:	b002      	add	sp, #8
     9c0:	bd80      	pop	{r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	40000400 	.word	0x40000400

000009c8 <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b084      	sub	sp, #16
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	b2da      	uxtb	r2, r3
     9d6:	230f      	movs	r3, #15
     9d8:	18fb      	adds	r3, r7, r3
     9da:	211f      	movs	r1, #31
     9dc:	400a      	ands	r2, r1
     9de:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	095a      	lsrs	r2, r3, #5
     9e4:	230e      	movs	r3, #14
     9e6:	18fb      	adds	r3, r7, r3
     9e8:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	43da      	mvns	r2, r3
     9ee:	683b      	ldr	r3, [r7, #0]
     9f0:	429a      	cmp	r2, r3
     9f2:	d001      	beq.n	9f8 <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     9f4:	2317      	movs	r3, #23
     9f6:	e02d      	b.n	a54 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
     9f8:	230e      	movs	r3, #14
     9fa:	18fb      	adds	r3, r7, r3
     9fc:	781b      	ldrb	r3, [r3, #0]
     9fe:	2b01      	cmp	r3, #1
     a00:	d00d      	beq.n	a1e <system_peripheral_lock+0x56>
     a02:	2b02      	cmp	r3, #2
     a04:	d015      	beq.n	a32 <system_peripheral_lock+0x6a>
     a06:	2b00      	cmp	r3, #0
     a08:	d121      	bne.n	a4e <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
     a0a:	2380      	movs	r3, #128	; 0x80
     a0c:	05db      	lsls	r3, r3, #23
     a0e:	220f      	movs	r2, #15
     a10:	18ba      	adds	r2, r7, r2
     a12:	7812      	ldrb	r2, [r2, #0]
     a14:	2101      	movs	r1, #1
     a16:	4091      	lsls	r1, r2
     a18:	000a      	movs	r2, r1
     a1a:	605a      	str	r2, [r3, #4]
			break;
     a1c:	e019      	b.n	a52 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
     a1e:	2382      	movs	r3, #130	; 0x82
     a20:	05db      	lsls	r3, r3, #23
     a22:	220f      	movs	r2, #15
     a24:	18ba      	adds	r2, r7, r2
     a26:	7812      	ldrb	r2, [r2, #0]
     a28:	2101      	movs	r1, #1
     a2a:	4091      	lsls	r1, r2
     a2c:	000a      	movs	r2, r1
     a2e:	605a      	str	r2, [r3, #4]
			break;
     a30:	e00f      	b.n	a52 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     a32:	2101      	movs	r1, #1
     a34:	2002      	movs	r0, #2
     a36:	4b09      	ldr	r3, [pc, #36]	; (a5c <system_peripheral_lock+0x94>)
     a38:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
     a3a:	2384      	movs	r3, #132	; 0x84
     a3c:	05db      	lsls	r3, r3, #23
     a3e:	220f      	movs	r2, #15
     a40:	18ba      	adds	r2, r7, r2
     a42:	7812      	ldrb	r2, [r2, #0]
     a44:	2101      	movs	r1, #1
     a46:	4091      	lsls	r1, r2
     a48:	000a      	movs	r2, r1
     a4a:	605a      	str	r2, [r3, #4]
			break;
     a4c:	e001      	b.n	a52 <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a4e:	2317      	movs	r3, #23
     a50:	e000      	b.n	a54 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
     a52:	2300      	movs	r3, #0
}
     a54:	0018      	movs	r0, r3
     a56:	46bd      	mov	sp, r7
     a58:	b004      	add	sp, #16
     a5a:	bd80      	pop	{r7, pc}
     a5c:	0000096d 	.word	0x0000096d

00000a60 <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     a60:	b580      	push	{r7, lr}
     a62:	b084      	sub	sp, #16
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
     a68:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	b2da      	uxtb	r2, r3
     a6e:	230f      	movs	r3, #15
     a70:	18fb      	adds	r3, r7, r3
     a72:	211f      	movs	r1, #31
     a74:	400a      	ands	r2, r1
     a76:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	095a      	lsrs	r2, r3, #5
     a7c:	230e      	movs	r3, #14
     a7e:	18fb      	adds	r3, r7, r3
     a80:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	43da      	mvns	r2, r3
     a86:	683b      	ldr	r3, [r7, #0]
     a88:	429a      	cmp	r2, r3
     a8a:	d001      	beq.n	a90 <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a8c:	2317      	movs	r3, #23
     a8e:	e02d      	b.n	aec <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
     a90:	230e      	movs	r3, #14
     a92:	18fb      	adds	r3, r7, r3
     a94:	781b      	ldrb	r3, [r3, #0]
     a96:	2b01      	cmp	r3, #1
     a98:	d00d      	beq.n	ab6 <system_peripheral_unlock+0x56>
     a9a:	2b02      	cmp	r3, #2
     a9c:	d015      	beq.n	aca <system_peripheral_unlock+0x6a>
     a9e:	2b00      	cmp	r3, #0
     aa0:	d121      	bne.n	ae6 <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     aa2:	2380      	movs	r3, #128	; 0x80
     aa4:	05db      	lsls	r3, r3, #23
     aa6:	220f      	movs	r2, #15
     aa8:	18ba      	adds	r2, r7, r2
     aaa:	7812      	ldrb	r2, [r2, #0]
     aac:	2101      	movs	r1, #1
     aae:	4091      	lsls	r1, r2
     ab0:	000a      	movs	r2, r1
     ab2:	601a      	str	r2, [r3, #0]
			break;
     ab4:	e019      	b.n	aea <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     ab6:	2382      	movs	r3, #130	; 0x82
     ab8:	05db      	lsls	r3, r3, #23
     aba:	220f      	movs	r2, #15
     abc:	18ba      	adds	r2, r7, r2
     abe:	7812      	ldrb	r2, [r2, #0]
     ac0:	2101      	movs	r1, #1
     ac2:	4091      	lsls	r1, r2
     ac4:	000a      	movs	r2, r1
     ac6:	601a      	str	r2, [r3, #0]
			break;
     ac8:	e00f      	b.n	aea <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     aca:	2101      	movs	r1, #1
     acc:	2002      	movs	r0, #2
     ace:	4b09      	ldr	r3, [pc, #36]	; (af4 <system_peripheral_unlock+0x94>)
     ad0:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     ad2:	2384      	movs	r3, #132	; 0x84
     ad4:	05db      	lsls	r3, r3, #23
     ad6:	220f      	movs	r2, #15
     ad8:	18ba      	adds	r2, r7, r2
     ada:	7812      	ldrb	r2, [r2, #0]
     adc:	2101      	movs	r1, #1
     ade:	4091      	lsls	r1, r2
     ae0:	000a      	movs	r2, r1
     ae2:	601a      	str	r2, [r3, #0]
			break;
     ae4:	e001      	b.n	aea <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ae6:	2317      	movs	r3, #23
     ae8:	e000      	b.n	aec <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
     aea:	2300      	movs	r3, #0
}
     aec:	0018      	movs	r0, r3
     aee:	46bd      	mov	sp, r7
     af0:	b004      	add	sp, #16
     af2:	bd80      	pop	{r7, pc}
     af4:	0000096d 	.word	0x0000096d

00000af8 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     af8:	b590      	push	{r4, r7, lr}
     afa:	b083      	sub	sp, #12
     afc:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     afe:	4b16      	ldr	r3, [pc, #88]	; (b58 <SdCard_Initiate+0x60>)
     b00:	4798      	blx	r3
     b02:	0003      	movs	r3, r0
     b04:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     b06:	1dfc      	adds	r4, r7, #7
     b08:	2000      	movs	r0, #0
     b0a:	4b14      	ldr	r3, [pc, #80]	; (b5c <SdCard_Initiate+0x64>)
     b0c:	4798      	blx	r3
     b0e:	0003      	movs	r3, r0
     b10:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     b12:	1dfb      	adds	r3, r7, #7
     b14:	781b      	ldrb	r3, [r3, #0]
     b16:	2b01      	cmp	r3, #1
     b18:	d106      	bne.n	b28 <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	2000      	movs	r0, #0
     b1e:	4b10      	ldr	r3, [pc, #64]	; (b60 <SdCard_Initiate+0x68>)
     b20:	4798      	blx	r3
     b22:	0003      	movs	r3, r0
     b24:	2b02      	cmp	r3, #2
     b26:	d1f9      	bne.n	b1c <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     b28:	4b0b      	ldr	r3, [pc, #44]	; (b58 <SdCard_Initiate+0x60>)
     b2a:	4798      	blx	r3
     b2c:	0002      	movs	r2, r0
     b2e:	683b      	ldr	r3, [r7, #0]
     b30:	1ad2      	subs	r2, r2, r3
     b32:	23fa      	movs	r3, #250	; 0xfa
     b34:	005b      	lsls	r3, r3, #1
     b36:	429a      	cmp	r2, r3
     b38:	d903      	bls.n	b42 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     b3a:	1dfb      	adds	r3, r7, #7
     b3c:	2201      	movs	r2, #1
     b3e:	701a      	strb	r2, [r3, #0]
		break;
     b40:	e003      	b.n	b4a <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     b42:	1dfb      	adds	r3, r7, #7
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	2b00      	cmp	r3, #0
     b48:	d1dd      	bne.n	b06 <SdCard_Initiate+0xe>

return status;
     b4a:	1dfb      	adds	r3, r7, #7
     b4c:	781b      	ldrb	r3, [r3, #0]
}
     b4e:	0018      	movs	r0, r3
     b50:	46bd      	mov	sp, r7
     b52:	b003      	add	sp, #12
     b54:	bd90      	pop	{r4, r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	000001d1 	.word	0x000001d1
     b5c:	000023a1 	.word	0x000023a1
     b60:	00001f15 	.word	0x00001f15

00000b64 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     b64:	b580      	push	{r7, lr}
     b66:	b082      	sub	sp, #8
     b68:	af00      	add	r7, sp, #0
     b6a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     b6c:	687b      	ldr	r3, [r7, #4]
     b6e:	7c1b      	ldrb	r3, [r3, #16]
     b70:	2b00      	cmp	r3, #0
     b72:	d00b      	beq.n	b8c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	689b      	ldr	r3, [r3, #8]
     b78:	1c5a      	adds	r2, r3, #1
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	68d9      	ldr	r1, [r3, #12]
     b7e:	4b10      	ldr	r3, [pc, #64]	; (bc0 <advance_pointer+0x5c>)
     b80:	0010      	movs	r0, r2
     b82:	4798      	blx	r3
     b84:	000b      	movs	r3, r1
     b86:	001a      	movs	r2, r3
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	685b      	ldr	r3, [r3, #4]
     b90:	1c5a      	adds	r2, r3, #1
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	68d9      	ldr	r1, [r3, #12]
     b96:	4b0a      	ldr	r3, [pc, #40]	; (bc0 <advance_pointer+0x5c>)
     b98:	0010      	movs	r0, r2
     b9a:	4798      	blx	r3
     b9c:	000b      	movs	r3, r1
     b9e:	001a      	movs	r2, r3
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	685a      	ldr	r2, [r3, #4]
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	689b      	ldr	r3, [r3, #8]
     bac:	1ad3      	subs	r3, r2, r3
     bae:	425a      	negs	r2, r3
     bb0:	4153      	adcs	r3, r2
     bb2:	b2da      	uxtb	r2, r3
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	741a      	strb	r2, [r3, #16]
 }
     bb8:	46c0      	nop			; (mov r8, r8)
     bba:	46bd      	mov	sp, r7
     bbc:	b002      	add	sp, #8
     bbe:	bd80      	pop	{r7, pc}
     bc0:	0000b6c9 	.word	0x0000b6c9

00000bc4 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     bc4:	b580      	push	{r7, lr}
     bc6:	b082      	sub	sp, #8
     bc8:	af00      	add	r7, sp, #0
     bca:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	2200      	movs	r2, #0
     bd0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	689b      	ldr	r3, [r3, #8]
     bd6:	1c5a      	adds	r2, r3, #1
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	68d9      	ldr	r1, [r3, #12]
     bdc:	4b05      	ldr	r3, [pc, #20]	; (bf4 <retreat_pointer+0x30>)
     bde:	0010      	movs	r0, r2
     be0:	4798      	blx	r3
     be2:	000b      	movs	r3, r1
     be4:	001a      	movs	r2, r3
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	609a      	str	r2, [r3, #8]
 }
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	46bd      	mov	sp, r7
     bee:	b002      	add	sp, #8
     bf0:	bd80      	pop	{r7, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	0000b6c9 	.word	0x0000b6c9

00000bf8 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     bf8:	b580      	push	{r7, lr}
     bfa:	b084      	sub	sp, #16
     bfc:	af00      	add	r7, sp, #0
     bfe:	6078      	str	r0, [r7, #4]
     c00:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     c02:	2014      	movs	r0, #20
     c04:	4b09      	ldr	r3, [pc, #36]	; (c2c <circular_buf_init+0x34>)
     c06:	4798      	blx	r3
     c08:	0003      	movs	r3, r0
     c0a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	687a      	ldr	r2, [r7, #4]
     c10:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     c12:	68fb      	ldr	r3, [r7, #12]
     c14:	683a      	ldr	r2, [r7, #0]
     c16:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     c18:	68fb      	ldr	r3, [r7, #12]
     c1a:	0018      	movs	r0, r3
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <circular_buf_init+0x38>)
     c1e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     c20:	68fb      	ldr	r3, [r7, #12]
 }
     c22:	0018      	movs	r0, r3
     c24:	46bd      	mov	sp, r7
     c26:	b004      	add	sp, #16
     c28:	bd80      	pop	{r7, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	0000b945 	.word	0x0000b945
     c30:	00000c35 	.word	0x00000c35

00000c34 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
     c3a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	2200      	movs	r2, #0
     c40:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	2200      	movs	r2, #0
     c46:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	2200      	movs	r2, #0
     c4c:	741a      	strb	r2, [r3, #16]
 }
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46bd      	mov	sp, r7
     c52:	b002      	add	sp, #8
     c54:	bd80      	pop	{r7, pc}
	...

00000c58 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     c58:	b580      	push	{r7, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	af00      	add	r7, sp, #0
     c5e:	6078      	str	r0, [r7, #4]
     c60:	000a      	movs	r2, r1
     c62:	1cfb      	adds	r3, r7, #3
     c64:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	681a      	ldr	r2, [r3, #0]
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	685b      	ldr	r3, [r3, #4]
     c6e:	18d3      	adds	r3, r2, r3
     c70:	1cfa      	adds	r2, r7, #3
     c72:	7812      	ldrb	r2, [r2, #0]
     c74:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	0018      	movs	r0, r3
     c7a:	4b03      	ldr	r3, [pc, #12]	; (c88 <circular_buf_put+0x30>)
     c7c:	4798      	blx	r3
 }
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46bd      	mov	sp, r7
     c82:	b002      	add	sp, #8
     c84:	bd80      	pop	{r7, pc}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00000b65 	.word	0x00000b65

00000c8c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     c8c:	b580      	push	{r7, lr}
     c8e:	b084      	sub	sp, #16
     c90:	af00      	add	r7, sp, #0
     c92:	6078      	str	r0, [r7, #4]
     c94:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     c96:	2301      	movs	r3, #1
     c98:	425b      	negs	r3, r3
     c9a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	0018      	movs	r0, r3
     ca0:	4b0d      	ldr	r3, [pc, #52]	; (cd8 <circular_buf_get+0x4c>)
     ca2:	4798      	blx	r3
     ca4:	0003      	movs	r3, r0
     ca6:	001a      	movs	r2, r3
     ca8:	2301      	movs	r3, #1
     caa:	4053      	eors	r3, r2
     cac:	b2db      	uxtb	r3, r3
     cae:	2b00      	cmp	r3, #0
     cb0:	d00d      	beq.n	cce <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	681a      	ldr	r2, [r3, #0]
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	689b      	ldr	r3, [r3, #8]
     cba:	18d3      	adds	r3, r2, r3
     cbc:	781a      	ldrb	r2, [r3, #0]
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	0018      	movs	r0, r3
     cc6:	4b05      	ldr	r3, [pc, #20]	; (cdc <circular_buf_get+0x50>)
     cc8:	4798      	blx	r3

		 r = 0;
     cca:	2300      	movs	r3, #0
     ccc:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     cce:	68fb      	ldr	r3, [r7, #12]
 }
     cd0:	0018      	movs	r0, r3
     cd2:	46bd      	mov	sp, r7
     cd4:	b004      	add	sp, #16
     cd6:	bd80      	pop	{r7, pc}
     cd8:	00000ce1 	.word	0x00000ce1
     cdc:	00000bc5 	.word	0x00000bc5

00000ce0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     ce0:	b580      	push	{r7, lr}
     ce2:	b082      	sub	sp, #8
     ce4:	af00      	add	r7, sp, #0
     ce6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	7c1b      	ldrb	r3, [r3, #16]
     cec:	2201      	movs	r2, #1
     cee:	4053      	eors	r3, r2
     cf0:	b2db      	uxtb	r3, r3
     cf2:	2b00      	cmp	r3, #0
     cf4:	d007      	beq.n	d06 <circular_buf_empty+0x26>
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	685a      	ldr	r2, [r3, #4]
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	689b      	ldr	r3, [r3, #8]
     cfe:	429a      	cmp	r2, r3
     d00:	d101      	bne.n	d06 <circular_buf_empty+0x26>
     d02:	2301      	movs	r3, #1
     d04:	e000      	b.n	d08 <circular_buf_empty+0x28>
     d06:	2300      	movs	r3, #0
     d08:	1c1a      	adds	r2, r3, #0
     d0a:	2301      	movs	r3, #1
     d0c:	4013      	ands	r3, r2
     d0e:	b2db      	uxtb	r3, r3
 }
     d10:	0018      	movs	r0, r3
     d12:	46bd      	mov	sp, r7
     d14:	b002      	add	sp, #8
     d16:	bd80      	pop	{r7, pc}

00000d18 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	0002      	movs	r2, r0
     d20:	1dfb      	adds	r3, r7, #7
     d22:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <system_interrupt_enable+0x28>)
     d26:	1dfa      	adds	r2, r7, #7
     d28:	7812      	ldrb	r2, [r2, #0]
     d2a:	0011      	movs	r1, r2
     d2c:	221f      	movs	r2, #31
     d2e:	400a      	ands	r2, r1
     d30:	2101      	movs	r1, #1
     d32:	4091      	lsls	r1, r2
     d34:	000a      	movs	r2, r1
     d36:	601a      	str	r2, [r3, #0]
}
     d38:	46c0      	nop			; (mov r8, r8)
     d3a:	46bd      	mov	sp, r7
     d3c:	b002      	add	sp, #8
     d3e:	bd80      	pop	{r7, pc}
     d40:	e000e100 	.word	0xe000e100

00000d44 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
     d4a:	0002      	movs	r2, r0
     d4c:	1dfb      	adds	r3, r7, #7
     d4e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d50:	4a07      	ldr	r2, [pc, #28]	; (d70 <system_interrupt_disable+0x2c>)
     d52:	1dfb      	adds	r3, r7, #7
     d54:	781b      	ldrb	r3, [r3, #0]
     d56:	0019      	movs	r1, r3
     d58:	231f      	movs	r3, #31
     d5a:	400b      	ands	r3, r1
     d5c:	2101      	movs	r1, #1
     d5e:	4099      	lsls	r1, r3
     d60:	000b      	movs	r3, r1
     d62:	0019      	movs	r1, r3
     d64:	2380      	movs	r3, #128	; 0x80
     d66:	50d1      	str	r1, [r2, r3]
}
     d68:	46c0      	nop			; (mov r8, r8)
     d6a:	46bd      	mov	sp, r7
     d6c:	b002      	add	sp, #8
     d6e:	bd80      	pop	{r7, pc}
     d70:	e000e100 	.word	0xe000e100

00000d74 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     d74:	b580      	push	{r7, lr}
     d76:	b084      	sub	sp, #16
     d78:	af00      	add	r7, sp, #0
     d7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	69db      	ldr	r3, [r3, #28]
     d86:	1e5a      	subs	r2, r3, #1
     d88:	4193      	sbcs	r3, r2
     d8a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     d8c:	0018      	movs	r0, r3
     d8e:	46bd      	mov	sp, r7
     d90:	b004      	add	sp, #16
     d92:	bd80      	pop	{r7, pc}

00000d94 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     d94:	b580      	push	{r7, lr}
     d96:	b082      	sub	sp, #8
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d9c:	46c0      	nop			; (mov r8, r8)
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	0018      	movs	r0, r3
     da2:	4b04      	ldr	r3, [pc, #16]	; (db4 <_usart_wait_for_sync+0x20>)
     da4:	4798      	blx	r3
     da6:	1e03      	subs	r3, r0, #0
     da8:	d1f9      	bne.n	d9e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	46bd      	mov	sp, r7
     dae:	b002      	add	sp, #8
     db0:	bd80      	pop	{r7, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00000d75 	.word	0x00000d75

00000db8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     db8:	b580      	push	{r7, lr}
     dba:	b082      	sub	sp, #8
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	2280      	movs	r2, #128	; 0x80
     dc4:	05d2      	lsls	r2, r2, #23
     dc6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     dc8:	687b      	ldr	r3, [r7, #4]
     dca:	2200      	movs	r2, #0
     dcc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	22ff      	movs	r2, #255	; 0xff
     dd2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	2200      	movs	r2, #0
     dd8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	2200      	movs	r2, #0
     dde:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2296      	movs	r2, #150	; 0x96
     de4:	0192      	lsls	r2, r2, #6
     de6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	2224      	movs	r2, #36	; 0x24
     dec:	2101      	movs	r1, #1
     dee:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	2225      	movs	r2, #37	; 0x25
     df4:	2101      	movs	r1, #1
     df6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2226      	movs	r2, #38	; 0x26
     dfc:	2100      	movs	r1, #0
     dfe:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	2227      	movs	r2, #39	; 0x27
     e04:	2100      	movs	r1, #0
     e06:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	2200      	movs	r2, #0
     e0c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	2288      	movs	r2, #136	; 0x88
     e12:	0352      	lsls	r2, r2, #13
     e14:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	222c      	movs	r2, #44	; 0x2c
     e1a:	2100      	movs	r1, #0
     e1c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	222d      	movs	r2, #45	; 0x2d
     e22:	2100      	movs	r1, #0
     e24:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	2200      	movs	r2, #0
     e2a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	2200      	movs	r2, #0
     e30:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	2200      	movs	r2, #0
     e36:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	2200      	movs	r2, #0
     e3c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	2200      	movs	r2, #0
     e42:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	2200      	movs	r2, #0
     e48:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	2200      	movs	r2, #0
     e4e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	2200      	movs	r2, #0
     e54:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	2200      	movs	r2, #0
     e5a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	2200      	movs	r2, #0
     e60:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	2213      	movs	r2, #19
     e66:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	2200      	movs	r2, #0
     e6c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	46bd      	mov	sp, r7
     e72:	b002      	add	sp, #8
     e74:	bd80      	pop	{r7, pc}
	...

00000e78 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     e78:	b580      	push	{r7, lr}
     e7a:	b084      	sub	sp, #16
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	0018      	movs	r0, r3
     e8c:	4b09      	ldr	r3, [pc, #36]	; (eb4 <usart_enable+0x3c>)
     e8e:	4798      	blx	r3
     e90:	0003      	movs	r3, r0
     e92:	0018      	movs	r0, r3
     e94:	4b08      	ldr	r3, [pc, #32]	; (eb8 <usart_enable+0x40>)
     e96:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	0018      	movs	r0, r3
     e9c:	4b07      	ldr	r3, [pc, #28]	; (ebc <usart_enable+0x44>)
     e9e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	2202      	movs	r2, #2
     ea6:	431a      	orrs	r2, r3
     ea8:	68fb      	ldr	r3, [r7, #12]
     eaa:	601a      	str	r2, [r3, #0]
}
     eac:	46c0      	nop			; (mov r8, r8)
     eae:	46bd      	mov	sp, r7
     eb0:	b004      	add	sp, #16
     eb2:	bd80      	pop	{r7, pc}
     eb4:	000040f9 	.word	0x000040f9
     eb8:	00000d19 	.word	0x00000d19
     ebc:	00000d95 	.word	0x00000d95

00000ec0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b084      	sub	sp, #16
     ec4:	af00      	add	r7, sp, #0
     ec6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	681b      	ldr	r3, [r3, #0]
     ed2:	0018      	movs	r0, r3
     ed4:	4b0a      	ldr	r3, [pc, #40]	; (f00 <usart_disable+0x40>)
     ed6:	4798      	blx	r3
     ed8:	0003      	movs	r3, r0
     eda:	0018      	movs	r0, r3
     edc:	4b09      	ldr	r3, [pc, #36]	; (f04 <usart_disable+0x44>)
     ede:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ee0:	687b      	ldr	r3, [r7, #4]
     ee2:	0018      	movs	r0, r3
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <usart_disable+0x48>)
     ee6:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     ee8:	68fb      	ldr	r3, [r7, #12]
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	2202      	movs	r2, #2
     eee:	4393      	bics	r3, r2
     ef0:	001a      	movs	r2, r3
     ef2:	68fb      	ldr	r3, [r7, #12]
     ef4:	601a      	str	r2, [r3, #0]
}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	46bd      	mov	sp, r7
     efa:	b004      	add	sp, #16
     efc:	bd80      	pop	{r7, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	000040f9 	.word	0x000040f9
     f04:	00000d45 	.word	0x00000d45
     f08:	00000d95 	.word	0x00000d95

00000f0c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	b082      	sub	sp, #8
     f10:	af00      	add	r7, sp, #0
     f12:	6078      	str	r0, [r7, #4]
     f14:	000a      	movs	r2, r1
     f16:	1cfb      	adds	r3, r7, #3
     f18:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	2231      	movs	r2, #49	; 0x31
     f1e:	5c9b      	ldrb	r3, [r3, r2]
     f20:	b25a      	sxtb	r2, r3
     f22:	1cfb      	adds	r3, r7, #3
     f24:	781b      	ldrb	r3, [r3, #0]
     f26:	2101      	movs	r1, #1
     f28:	4099      	lsls	r1, r3
     f2a:	000b      	movs	r3, r1
     f2c:	b25b      	sxtb	r3, r3
     f2e:	4313      	orrs	r3, r2
     f30:	b25b      	sxtb	r3, r3
     f32:	b2d9      	uxtb	r1, r3
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	2231      	movs	r2, #49	; 0x31
     f38:	5499      	strb	r1, [r3, r2]

}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	46bd      	mov	sp, r7
     f3e:	b002      	add	sp, #8
     f40:	bd80      	pop	{r7, pc}
	...

00000f44 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     f44:	b580      	push	{r7, lr}
     f46:	b082      	sub	sp, #8
     f48:	af00      	add	r7, sp, #0
     f4a:	6078      	str	r0, [r7, #4]
     f4c:	000a      	movs	r2, r1
     f4e:	1cfb      	adds	r3, r7, #3
     f50:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	1cfb      	adds	r3, r7, #3
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	b29a      	uxth	r2, r3
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	0011      	movs	r1, r2
     f5e:	0018      	movs	r0, r3
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <usart_serial_putchar+0x30>)
     f62:	4798      	blx	r3
     f64:	1e03      	subs	r3, r0, #0
     f66:	d1f5      	bne.n	f54 <usart_serial_putchar+0x10>

	return STATUS_OK;
     f68:	2300      	movs	r3, #0
}
     f6a:	0018      	movs	r0, r3
     f6c:	46bd      	mov	sp, r7
     f6e:	b002      	add	sp, #8
     f70:	bd80      	pop	{r7, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	00005811 	.word	0x00005811

00000f78 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     f78:	b580      	push	{r7, lr}
     f7a:	b084      	sub	sp, #16
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
     f80:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     f82:	230e      	movs	r3, #14
     f84:	18fb      	adds	r3, r7, r3
     f86:	2200      	movs	r2, #0
     f88:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	230e      	movs	r3, #14
     f8e:	18fa      	adds	r2, r7, r3
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	0011      	movs	r1, r2
     f94:	0018      	movs	r0, r3
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <usart_serial_getchar+0x3c>)
     f98:	4798      	blx	r3
     f9a:	1e03      	subs	r3, r0, #0
     f9c:	d1f6      	bne.n	f8c <usart_serial_getchar+0x14>

	*c = temp;
     f9e:	230e      	movs	r3, #14
     fa0:	18fb      	adds	r3, r7, r3
     fa2:	881b      	ldrh	r3, [r3, #0]
     fa4:	b2da      	uxtb	r2, r3
     fa6:	683b      	ldr	r3, [r7, #0]
     fa8:	701a      	strb	r2, [r3, #0]
}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	46bd      	mov	sp, r7
     fae:	b004      	add	sp, #16
     fb0:	bd80      	pop	{r7, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00005875 	.word	0x00005875

00000fb8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     fb8:	b580      	push	{r7, lr}
     fba:	b084      	sub	sp, #16
     fbc:	af00      	add	r7, sp, #0
     fbe:	60f8      	str	r0, [r7, #12]
     fc0:	60b9      	str	r1, [r7, #8]
     fc2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     fc4:	4b0d      	ldr	r3, [pc, #52]	; (ffc <stdio_serial_init+0x44>)
     fc6:	68fa      	ldr	r2, [r7, #12]
     fc8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     fca:	4b0d      	ldr	r3, [pc, #52]	; (1000 <stdio_serial_init+0x48>)
     fcc:	4a0d      	ldr	r2, [pc, #52]	; (1004 <stdio_serial_init+0x4c>)
     fce:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     fd0:	4b0d      	ldr	r3, [pc, #52]	; (1008 <stdio_serial_init+0x50>)
     fd2:	4a0e      	ldr	r2, [pc, #56]	; (100c <stdio_serial_init+0x54>)
     fd4:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     fd6:	4b0e      	ldr	r3, [pc, #56]	; (1010 <stdio_serial_init+0x58>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	689b      	ldr	r3, [r3, #8]
     fdc:	2100      	movs	r1, #0
     fde:	0018      	movs	r0, r3
     fe0:	4b0c      	ldr	r3, [pc, #48]	; (1014 <stdio_serial_init+0x5c>)
     fe2:	4798      	blx	r3
	setbuf(stdin, NULL);
     fe4:	4b0a      	ldr	r3, [pc, #40]	; (1010 <stdio_serial_init+0x58>)
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	685b      	ldr	r3, [r3, #4]
     fea:	2100      	movs	r1, #0
     fec:	0018      	movs	r0, r3
     fee:	4b09      	ldr	r3, [pc, #36]	; (1014 <stdio_serial_init+0x5c>)
     ff0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	46bd      	mov	sp, r7
     ff6:	b004      	add	sp, #16
     ff8:	bd80      	pop	{r7, pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	20000a20 	.word	0x20000a20
    1000:	20000a1c 	.word	0x20000a1c
    1004:	00000f45 	.word	0x00000f45
    1008:	20000a18 	.word	0x20000a18
    100c:	00000f79 	.word	0x00000f79
    1010:	20000058 	.word	0x20000058
    1014:	0000baf1 	.word	0x0000baf1

00001018 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 *****************************************************************************/
void InitializeSerialConsole() {
    1018:	b580      	push	{r7, lr}
    101a:	af00      	add	r7, sp, #0

    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
    101c:	2380      	movs	r3, #128	; 0x80
    101e:	00da      	lsls	r2, r3, #3
    1020:	4b0f      	ldr	r3, [pc, #60]	; (1060 <InitializeSerialConsole+0x48>)
    1022:	0011      	movs	r1, r2
    1024:	0018      	movs	r0, r3
    1026:	4b0f      	ldr	r3, [pc, #60]	; (1064 <InitializeSerialConsole+0x4c>)
    1028:	4798      	blx	r3
    102a:	0002      	movs	r2, r0
    102c:	4b0e      	ldr	r3, [pc, #56]	; (1068 <InitializeSerialConsole+0x50>)
    102e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, TX_BUFFER_SIZE);
    1030:	2380      	movs	r3, #128	; 0x80
    1032:	00da      	lsls	r2, r3, #3
    1034:	4b0d      	ldr	r3, [pc, #52]	; (106c <InitializeSerialConsole+0x54>)
    1036:	0011      	movs	r1, r2
    1038:	0018      	movs	r0, r3
    103a:	4b0a      	ldr	r3, [pc, #40]	; (1064 <InitializeSerialConsole+0x4c>)
    103c:	4798      	blx	r3
    103e:	0002      	movs	r2, r0
    1040:	4b0b      	ldr	r3, [pc, #44]	; (1070 <InitializeSerialConsole+0x58>)
    1042:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    1044:	4b0b      	ldr	r3, [pc, #44]	; (1074 <InitializeSerialConsole+0x5c>)
    1046:	4798      	blx	r3
    configure_usart_callbacks();
    1048:	4b0b      	ldr	r3, [pc, #44]	; (1078 <InitializeSerialConsole+0x60>)
    104a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
    104c:	490b      	ldr	r1, [pc, #44]	; (107c <InitializeSerialConsole+0x64>)
    104e:	4b0c      	ldr	r3, [pc, #48]	; (1080 <InitializeSerialConsole+0x68>)
    1050:	2201      	movs	r2, #1
    1052:	0018      	movs	r0, r3
    1054:	4b0b      	ldr	r3, [pc, #44]	; (1084 <InitializeSerialConsole+0x6c>)
    1056:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    1058:	46c0      	nop			; (mov r8, r8)
    105a:	46bd      	mov	sp, r7
    105c:	bd80      	pop	{r7, pc}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	200005f0 	.word	0x200005f0
    1064:	00000bf9 	.word	0x00000bf9
    1068:	200001e8 	.word	0x200001e8
    106c:	200001f0 	.word	0x200001f0
    1070:	200009f4 	.word	0x200009f4
    1074:	0000114d 	.word	0x0000114d
    1078:	000011d5 	.word	0x000011d5
    107c:	200001ec 	.word	0x200001ec
    1080:	200001b4 	.word	0x200001b4
    1084:	00005b31 	.word	0x00005b31

00001088 <DeinitializeSerialConsole>:

/**
 * @fn			void DeinitializeSerialConsole(void)
 *****************************************************************************/
void DeinitializeSerialConsole() { usart_disable(&usart_instance); }
    1088:	b580      	push	{r7, lr}
    108a:	af00      	add	r7, sp, #0
    108c:	4b03      	ldr	r3, [pc, #12]	; (109c <DeinitializeSerialConsole+0x14>)
    108e:	0018      	movs	r0, r3
    1090:	4b03      	ldr	r3, [pc, #12]	; (10a0 <DeinitializeSerialConsole+0x18>)
    1092:	4798      	blx	r3
    1094:	46c0      	nop			; (mov r8, r8)
    1096:	46bd      	mov	sp, r7
    1098:	bd80      	pop	{r7, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	200001b4 	.word	0x200001b4
    10a0:	00000ec1 	.word	0x00000ec1

000010a4 <SerialConsoleWriteString>:
 * @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the
 *				text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @note		Use to send a string of characters to the user via UART
 *****************************************************************************/
void SerialConsoleWriteString(char *string) {
    10a4:	b580      	push	{r7, lr}
    10a6:	b084      	sub	sp, #16
    10a8:	af00      	add	r7, sp, #0
    10aa:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d02a      	beq.n	1108 <SerialConsoleWriteString+0x64>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    10b2:	2300      	movs	r3, #0
    10b4:	60fb      	str	r3, [r7, #12]
    10b6:	e00b      	b.n	10d0 <SerialConsoleWriteString+0x2c>
            circular_buf_put(cbufTx, string[iter]);
    10b8:	4b15      	ldr	r3, [pc, #84]	; (1110 <SerialConsoleWriteString+0x6c>)
    10ba:	6818      	ldr	r0, [r3, #0]
    10bc:	687a      	ldr	r2, [r7, #4]
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	18d3      	adds	r3, r2, r3
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	0019      	movs	r1, r3
    10c6:	4b13      	ldr	r3, [pc, #76]	; (1114 <SerialConsoleWriteString+0x70>)
    10c8:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	3301      	adds	r3, #1
    10ce:	60fb      	str	r3, [r7, #12]
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	0018      	movs	r0, r3
    10d4:	4b10      	ldr	r3, [pc, #64]	; (1118 <SerialConsoleWriteString+0x74>)
    10d6:	4798      	blx	r3
    10d8:	0002      	movs	r2, r0
    10da:	68fb      	ldr	r3, [r7, #12]
    10dc:	429a      	cmp	r2, r3
    10de:	d8eb      	bhi.n	10b8 <SerialConsoleWriteString+0x14>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    10e0:	4b0e      	ldr	r3, [pc, #56]	; (111c <SerialConsoleWriteString+0x78>)
    10e2:	2101      	movs	r1, #1
    10e4:	0018      	movs	r0, r3
    10e6:	4b0e      	ldr	r3, [pc, #56]	; (1120 <SerialConsoleWriteString+0x7c>)
    10e8:	4798      	blx	r3
    10ea:	1e03      	subs	r3, r0, #0
    10ec:	d10c      	bne.n	1108 <SerialConsoleWriteString+0x64>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
    10ee:	4b08      	ldr	r3, [pc, #32]	; (1110 <SerialConsoleWriteString+0x6c>)
    10f0:	681b      	ldr	r3, [r3, #0]
    10f2:	4a0c      	ldr	r2, [pc, #48]	; (1124 <SerialConsoleWriteString+0x80>)
    10f4:	0011      	movs	r1, r2
    10f6:	0018      	movs	r0, r3
    10f8:	4b0b      	ldr	r3, [pc, #44]	; (1128 <SerialConsoleWriteString+0x84>)
    10fa:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    10fc:	4909      	ldr	r1, [pc, #36]	; (1124 <SerialConsoleWriteString+0x80>)
    10fe:	4b07      	ldr	r3, [pc, #28]	; (111c <SerialConsoleWriteString+0x78>)
    1100:	2201      	movs	r2, #1
    1102:	0018      	movs	r0, r3
    1104:	4b09      	ldr	r3, [pc, #36]	; (112c <SerialConsoleWriteString+0x88>)
    1106:	4798      	blx	r3
        }
    }
}
    1108:	46c0      	nop			; (mov r8, r8)
    110a:	46bd      	mov	sp, r7
    110c:	b004      	add	sp, #16
    110e:	bd80      	pop	{r7, pc}
    1110:	200009f4 	.word	0x200009f4
    1114:	00000c59 	.word	0x00000c59
    1118:	0000bcc1 	.word	0x0000bcc1
    111c:	200001b4 	.word	0x200001b4
    1120:	00005b79 	.word	0x00005b79
    1124:	200009f0 	.word	0x200009f0
    1128:	00000c8d 	.word	0x00000c8d
    112c:	00005ae9 	.word	0x00005ae9

00001130 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 *****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...){};
    1130:	b40e      	push	{r1, r2, r3}
    1132:	b580      	push	{r7, lr}
    1134:	b083      	sub	sp, #12
    1136:	af00      	add	r7, sp, #0
    1138:	0002      	movs	r2, r0
    113a:	1dfb      	adds	r3, r7, #7
    113c:	701a      	strb	r2, [r3, #0]
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	46bd      	mov	sp, r7
    1142:	b003      	add	sp, #12
    1144:	bc80      	pop	{r7}
    1146:	bc08      	pop	{r3}
    1148:	b003      	add	sp, #12
    114a:	4718      	bx	r3

0000114c <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 *****************************************************************************/
static void configure_usart(void) {
    114c:	b580      	push	{r7, lr}
    114e:	b090      	sub	sp, #64	; 0x40
    1150:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    1152:	003b      	movs	r3, r7
    1154:	0018      	movs	r0, r3
    1156:	4b17      	ldr	r3, [pc, #92]	; (11b4 <configure_usart+0x68>)
    1158:	4798      	blx	r3

    config_usart.baudrate = 115200;
    115a:	003b      	movs	r3, r7
    115c:	22e1      	movs	r2, #225	; 0xe1
    115e:	0252      	lsls	r2, r2, #9
    1160:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1162:	003b      	movs	r3, r7
    1164:	22c4      	movs	r2, #196	; 0xc4
    1166:	0392      	lsls	r2, r2, #14
    1168:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    116a:	003b      	movs	r3, r7
    116c:	2201      	movs	r2, #1
    116e:	4252      	negs	r2, r2
    1170:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1172:	003b      	movs	r3, r7
    1174:	2201      	movs	r2, #1
    1176:	4252      	negs	r2, r2
    1178:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    117a:	003b      	movs	r3, r7
    117c:	4a0e      	ldr	r2, [pc, #56]	; (11b8 <configure_usart+0x6c>)
    117e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1180:	003b      	movs	r3, r7
    1182:	4a0e      	ldr	r2, [pc, #56]	; (11bc <configure_usart+0x70>)
    1184:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	003a      	movs	r2, r7
    118a:	490d      	ldr	r1, [pc, #52]	; (11c0 <configure_usart+0x74>)
    118c:	4b0d      	ldr	r3, [pc, #52]	; (11c4 <configure_usart+0x78>)
    118e:	0018      	movs	r0, r3
    1190:	4b0d      	ldr	r3, [pc, #52]	; (11c8 <configure_usart+0x7c>)
    1192:	4798      	blx	r3
    1194:	1e03      	subs	r3, r0, #0
    1196:	d1f7      	bne.n	1188 <configure_usart+0x3c>
    }
    stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    1198:	003a      	movs	r2, r7
    119a:	4909      	ldr	r1, [pc, #36]	; (11c0 <configure_usart+0x74>)
    119c:	4b09      	ldr	r3, [pc, #36]	; (11c4 <configure_usart+0x78>)
    119e:	0018      	movs	r0, r3
    11a0:	4b0a      	ldr	r3, [pc, #40]	; (11cc <configure_usart+0x80>)
    11a2:	4798      	blx	r3
    usart_enable(&usart_instance);
    11a4:	4b07      	ldr	r3, [pc, #28]	; (11c4 <configure_usart+0x78>)
    11a6:	0018      	movs	r0, r3
    11a8:	4b09      	ldr	r3, [pc, #36]	; (11d0 <configure_usart+0x84>)
    11aa:	4798      	blx	r3
}
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	46bd      	mov	sp, r7
    11b0:	b010      	add	sp, #64	; 0x40
    11b2:	bd80      	pop	{r7, pc}
    11b4:	00000db9 	.word	0x00000db9
    11b8:	002a0003 	.word	0x002a0003
    11bc:	002b0003 	.word	0x002b0003
    11c0:	42001800 	.word	0x42001800
    11c4:	200001b4 	.word	0x200001b4
    11c8:	0000559d 	.word	0x0000559d
    11cc:	00000fb9 	.word	0x00000fb9
    11d0:	00000e79 	.word	0x00000e79

000011d4 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 *****************************************************************************/
static void configure_usart_callbacks(void) {
    11d4:	b580      	push	{r7, lr}
    11d6:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    11d8:	490c      	ldr	r1, [pc, #48]	; (120c <configure_usart_callbacks+0x38>)
    11da:	4b0d      	ldr	r3, [pc, #52]	; (1210 <configure_usart_callbacks+0x3c>)
    11dc:	2200      	movs	r2, #0
    11de:	0018      	movs	r0, r3
    11e0:	4b0c      	ldr	r3, [pc, #48]	; (1214 <configure_usart_callbacks+0x40>)
    11e2:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    11e4:	490c      	ldr	r1, [pc, #48]	; (1218 <configure_usart_callbacks+0x44>)
    11e6:	4b0a      	ldr	r3, [pc, #40]	; (1210 <configure_usart_callbacks+0x3c>)
    11e8:	2201      	movs	r2, #1
    11ea:	0018      	movs	r0, r3
    11ec:	4b09      	ldr	r3, [pc, #36]	; (1214 <configure_usart_callbacks+0x40>)
    11ee:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    11f0:	4b07      	ldr	r3, [pc, #28]	; (1210 <configure_usart_callbacks+0x3c>)
    11f2:	2100      	movs	r1, #0
    11f4:	0018      	movs	r0, r3
    11f6:	4b09      	ldr	r3, [pc, #36]	; (121c <configure_usart_callbacks+0x48>)
    11f8:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    11fa:	4b05      	ldr	r3, [pc, #20]	; (1210 <configure_usart_callbacks+0x3c>)
    11fc:	2101      	movs	r1, #1
    11fe:	0018      	movs	r0, r3
    1200:	4b06      	ldr	r3, [pc, #24]	; (121c <configure_usart_callbacks+0x48>)
    1202:	4798      	blx	r3
}
    1204:	46c0      	nop			; (mov r8, r8)
    1206:	46bd      	mov	sp, r7
    1208:	bd80      	pop	{r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	00001231 	.word	0x00001231
    1210:	200001b4 	.word	0x200001b4
    1214:	00005aa1 	.word	0x00005aa1
    1218:	00001221 	.word	0x00001221
    121c:	00000f0d 	.word	0x00000f0d

00001220 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module) {}
    1220:	b580      	push	{r7, lr}
    1222:	b082      	sub	sp, #8
    1224:	af00      	add	r7, sp, #0
    1226:	6078      	str	r0, [r7, #4]
    1228:	46c0      	nop			; (mov r8, r8)
    122a:	46bd      	mov	sp, r7
    122c:	b002      	add	sp, #8
    122e:	bd80      	pop	{r7, pc}

00001230 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module) {
    1230:	b580      	push	{r7, lr}
    1232:	b082      	sub	sp, #8
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
    1238:	4b09      	ldr	r3, [pc, #36]	; (1260 <usart_write_callback+0x30>)
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	4a09      	ldr	r2, [pc, #36]	; (1264 <usart_write_callback+0x34>)
    123e:	0011      	movs	r1, r2
    1240:	0018      	movs	r0, r3
    1242:	4b09      	ldr	r3, [pc, #36]	; (1268 <usart_write_callback+0x38>)
    1244:	4798      	blx	r3
    1246:	0003      	movs	r3, r0
    1248:	3301      	adds	r3, #1
    124a:	d005      	beq.n	1258 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    124c:	4905      	ldr	r1, [pc, #20]	; (1264 <usart_write_callback+0x34>)
    124e:	4b07      	ldr	r3, [pc, #28]	; (126c <usart_write_callback+0x3c>)
    1250:	2201      	movs	r2, #1
    1252:	0018      	movs	r0, r3
    1254:	4b06      	ldr	r3, [pc, #24]	; (1270 <usart_write_callback+0x40>)
    1256:	4798      	blx	r3
    }
}
    1258:	46c0      	nop			; (mov r8, r8)
    125a:	46bd      	mov	sp, r7
    125c:	b002      	add	sp, #8
    125e:	bd80      	pop	{r7, pc}
    1260:	200009f4 	.word	0x200009f4
    1264:	200009f0 	.word	0x200009f0
    1268:	00000c8d 	.word	0x00000c8d
    126c:	200001b4 	.word	0x200001b4
    1270:	00005ae9 	.word	0x00005ae9

00001274 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    1274:	b590      	push	{r4, r7, lr}
    1276:	b087      	sub	sp, #28
    1278:	af00      	add	r7, sp, #0
    127a:	60f8      	str	r0, [r7, #12]
    127c:	000c      	movs	r4, r1
    127e:	0010      	movs	r0, r2
    1280:	0019      	movs	r1, r3
    1282:	230a      	movs	r3, #10
    1284:	18fb      	adds	r3, r7, r3
    1286:	1c22      	adds	r2, r4, #0
    1288:	801a      	strh	r2, [r3, #0]
    128a:	2308      	movs	r3, #8
    128c:	18fb      	adds	r3, r7, r3
    128e:	1c02      	adds	r2, r0, #0
    1290:	801a      	strh	r2, [r3, #0]
    1292:	1dfb      	adds	r3, r7, #7
    1294:	1c0a      	adds	r2, r1, #0
    1296:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    1298:	230a      	movs	r3, #10
    129a:	18fb      	adds	r3, r7, r3
    129c:	881a      	ldrh	r2, [r3, #0]
    129e:	2308      	movs	r3, #8
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	881b      	ldrh	r3, [r3, #0]
    12a4:	1ad3      	subs	r3, r2, r3
    12a6:	3307      	adds	r3, #7
    12a8:	2b00      	cmp	r3, #0
    12aa:	da00      	bge.n	12ae <SDMMC_UNSTUFF_BITS+0x3a>
    12ac:	3307      	adds	r3, #7
    12ae:	10db      	asrs	r3, r3, #3
    12b0:	3b01      	subs	r3, #1
    12b2:	68fa      	ldr	r2, [r7, #12]
    12b4:	18d3      	adds	r3, r2, r3
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	0019      	movs	r1, r3
    12ba:	2308      	movs	r3, #8
    12bc:	18fb      	adds	r3, r7, r3
    12be:	881b      	ldrh	r3, [r3, #0]
    12c0:	2207      	movs	r2, #7
    12c2:	4013      	ands	r3, r2
    12c4:	4119      	asrs	r1, r3
    12c6:	000b      	movs	r3, r1
    12c8:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    12ca:	2308      	movs	r3, #8
    12cc:	18fb      	adds	r3, r7, r3
    12ce:	881b      	ldrh	r3, [r3, #0]
    12d0:	2207      	movs	r2, #7
    12d2:	401a      	ands	r2, r3
    12d4:	1dfb      	adds	r3, r7, #7
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	18d3      	adds	r3, r2, r3
    12da:	2b08      	cmp	r3, #8
    12dc:	dd1c      	ble.n	1318 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    12de:	230a      	movs	r3, #10
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	881a      	ldrh	r2, [r3, #0]
    12e4:	2308      	movs	r3, #8
    12e6:	18fb      	adds	r3, r7, r3
    12e8:	881b      	ldrh	r3, [r3, #0]
    12ea:	1ad3      	subs	r3, r2, r3
    12ec:	3307      	adds	r3, #7
    12ee:	2b00      	cmp	r3, #0
    12f0:	da00      	bge.n	12f4 <SDMMC_UNSTUFF_BITS+0x80>
    12f2:	3307      	adds	r3, #7
    12f4:	10db      	asrs	r3, r3, #3
    12f6:	3b02      	subs	r3, #2
    12f8:	68fa      	ldr	r2, [r7, #12]
    12fa:	18d3      	adds	r3, r2, r3
    12fc:	781b      	ldrb	r3, [r3, #0]
    12fe:	0019      	movs	r1, r3
    1300:	2308      	movs	r3, #8
    1302:	18fb      	adds	r3, r7, r3
    1304:	881b      	ldrh	r3, [r3, #0]
    1306:	2207      	movs	r2, #7
    1308:	4013      	ands	r3, r2
    130a:	2208      	movs	r2, #8
    130c:	1ad3      	subs	r3, r2, r3
    130e:	4099      	lsls	r1, r3
    1310:	000b      	movs	r3, r1
    1312:	697a      	ldr	r2, [r7, #20]
    1314:	4313      	orrs	r3, r2
    1316:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    1318:	2308      	movs	r3, #8
    131a:	18fb      	adds	r3, r7, r3
    131c:	881b      	ldrh	r3, [r3, #0]
    131e:	2207      	movs	r2, #7
    1320:	401a      	ands	r2, r3
    1322:	1dfb      	adds	r3, r7, #7
    1324:	781b      	ldrb	r3, [r3, #0]
    1326:	18d3      	adds	r3, r2, r3
    1328:	2b10      	cmp	r3, #16
    132a:	dd1c      	ble.n	1366 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    132c:	230a      	movs	r3, #10
    132e:	18fb      	adds	r3, r7, r3
    1330:	881a      	ldrh	r2, [r3, #0]
    1332:	2308      	movs	r3, #8
    1334:	18fb      	adds	r3, r7, r3
    1336:	881b      	ldrh	r3, [r3, #0]
    1338:	1ad3      	subs	r3, r2, r3
    133a:	3307      	adds	r3, #7
    133c:	2b00      	cmp	r3, #0
    133e:	da00      	bge.n	1342 <SDMMC_UNSTUFF_BITS+0xce>
    1340:	3307      	adds	r3, #7
    1342:	10db      	asrs	r3, r3, #3
    1344:	3b03      	subs	r3, #3
    1346:	68fa      	ldr	r2, [r7, #12]
    1348:	18d3      	adds	r3, r2, r3
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	0019      	movs	r1, r3
    134e:	2308      	movs	r3, #8
    1350:	18fb      	adds	r3, r7, r3
    1352:	881b      	ldrh	r3, [r3, #0]
    1354:	2207      	movs	r2, #7
    1356:	4013      	ands	r3, r2
    1358:	2210      	movs	r2, #16
    135a:	1ad3      	subs	r3, r2, r3
    135c:	4099      	lsls	r1, r3
    135e:	000b      	movs	r3, r1
    1360:	697a      	ldr	r2, [r7, #20]
    1362:	4313      	orrs	r3, r2
    1364:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    1366:	2308      	movs	r3, #8
    1368:	18fb      	adds	r3, r7, r3
    136a:	881b      	ldrh	r3, [r3, #0]
    136c:	2207      	movs	r2, #7
    136e:	401a      	ands	r2, r3
    1370:	1dfb      	adds	r3, r7, #7
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	18d3      	adds	r3, r2, r3
    1376:	2b10      	cmp	r3, #16
    1378:	dd1c      	ble.n	13b4 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    137a:	230a      	movs	r3, #10
    137c:	18fb      	adds	r3, r7, r3
    137e:	881a      	ldrh	r2, [r3, #0]
    1380:	2308      	movs	r3, #8
    1382:	18fb      	adds	r3, r7, r3
    1384:	881b      	ldrh	r3, [r3, #0]
    1386:	1ad3      	subs	r3, r2, r3
    1388:	3307      	adds	r3, #7
    138a:	2b00      	cmp	r3, #0
    138c:	da00      	bge.n	1390 <SDMMC_UNSTUFF_BITS+0x11c>
    138e:	3307      	adds	r3, #7
    1390:	10db      	asrs	r3, r3, #3
    1392:	3b03      	subs	r3, #3
    1394:	68fa      	ldr	r2, [r7, #12]
    1396:	18d3      	adds	r3, r2, r3
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	0019      	movs	r1, r3
    139c:	2308      	movs	r3, #8
    139e:	18fb      	adds	r3, r7, r3
    13a0:	881b      	ldrh	r3, [r3, #0]
    13a2:	2207      	movs	r2, #7
    13a4:	4013      	ands	r3, r2
    13a6:	2210      	movs	r2, #16
    13a8:	1ad3      	subs	r3, r2, r3
    13aa:	4099      	lsls	r1, r3
    13ac:	000b      	movs	r3, r1
    13ae:	697a      	ldr	r2, [r7, #20]
    13b0:	4313      	orrs	r3, r2
    13b2:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    13b4:	1dfb      	adds	r3, r7, #7
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	2201      	movs	r2, #1
    13ba:	409a      	lsls	r2, r3
    13bc:	0013      	movs	r3, r2
    13be:	1e5a      	subs	r2, r3, #1
    13c0:	697b      	ldr	r3, [r7, #20]
    13c2:	4013      	ands	r3, r2
    13c4:	617b      	str	r3, [r7, #20]
	return value;
    13c6:	697b      	ldr	r3, [r7, #20]
}
    13c8:	0018      	movs	r0, r3
    13ca:	46bd      	mov	sp, r7
    13cc:	b007      	add	sp, #28
    13ce:	bd90      	pop	{r4, r7, pc}

000013d0 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b082      	sub	sp, #8
    13d4:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    13d6:	4b23      	ldr	r3, [pc, #140]	; (1464 <mmc_spi_op_cond+0x94>)
    13d8:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    13da:	4b23      	ldr	r3, [pc, #140]	; (1468 <mmc_spi_op_cond+0x98>)
    13dc:	2100      	movs	r1, #0
    13de:	0018      	movs	r0, r3
    13e0:	4b22      	ldr	r3, [pc, #136]	; (146c <mmc_spi_op_cond+0x9c>)
    13e2:	4798      	blx	r3
    13e4:	0003      	movs	r3, r0
    13e6:	001a      	movs	r2, r3
    13e8:	2301      	movs	r3, #1
    13ea:	4053      	eors	r3, r2
    13ec:	b2db      	uxtb	r3, r3
    13ee:	2b00      	cmp	r3, #0
    13f0:	d001      	beq.n	13f6 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    13f2:	2300      	movs	r3, #0
    13f4:	e031      	b.n	145a <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    13f6:	4b1e      	ldr	r3, [pc, #120]	; (1470 <mmc_spi_op_cond+0xa0>)
    13f8:	4798      	blx	r3
    13fa:	0003      	movs	r3, r0
    13fc:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    13fe:	683b      	ldr	r3, [r7, #0]
    1400:	2201      	movs	r2, #1
    1402:	4013      	ands	r3, r2
    1404:	d006      	beq.n	1414 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	1e5a      	subs	r2, r3, #1
    140a:	607a      	str	r2, [r7, #4]
    140c:	2b00      	cmp	r3, #0
    140e:	d1e4      	bne.n	13da <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    1410:	2300      	movs	r3, #0
    1412:	e022      	b.n	145a <mmc_spi_op_cond+0x8a>
			break;
    1414:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    1416:	4b17      	ldr	r3, [pc, #92]	; (1474 <mmc_spi_op_cond+0xa4>)
    1418:	2100      	movs	r1, #0
    141a:	0018      	movs	r0, r3
    141c:	4b13      	ldr	r3, [pc, #76]	; (146c <mmc_spi_op_cond+0x9c>)
    141e:	4798      	blx	r3
    1420:	0003      	movs	r3, r0
    1422:	001a      	movs	r2, r3
    1424:	2301      	movs	r3, #1
    1426:	4053      	eors	r3, r2
    1428:	b2db      	uxtb	r3, r3
    142a:	2b00      	cmp	r3, #0
    142c:	d001      	beq.n	1432 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    142e:	2300      	movs	r3, #0
    1430:	e013      	b.n	145a <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    1432:	4b0f      	ldr	r3, [pc, #60]	; (1470 <mmc_spi_op_cond+0xa0>)
    1434:	4798      	blx	r3
    1436:	0002      	movs	r2, r0
    1438:	23c0      	movs	r3, #192	; 0xc0
    143a:	05db      	lsls	r3, r3, #23
    143c:	401a      	ands	r2, r3
    143e:	2380      	movs	r3, #128	; 0x80
    1440:	05db      	lsls	r3, r3, #23
    1442:	429a      	cmp	r2, r3
    1444:	d108      	bne.n	1458 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    1446:	4b0c      	ldr	r3, [pc, #48]	; (1478 <mmc_spi_op_cond+0xa8>)
    1448:	681a      	ldr	r2, [r3, #0]
    144a:	4b0b      	ldr	r3, [pc, #44]	; (1478 <mmc_spi_op_cond+0xa8>)
    144c:	681b      	ldr	r3, [r3, #0]
    144e:	7adb      	ldrb	r3, [r3, #11]
    1450:	2108      	movs	r1, #8
    1452:	430b      	orrs	r3, r1
    1454:	b2db      	uxtb	r3, r3
    1456:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    1458:	2301      	movs	r3, #1
}
    145a:	0018      	movs	r0, r3
    145c:	46bd      	mov	sp, r7
    145e:	b002      	add	sp, #8
    1460:	bd80      	pop	{r7, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	00001bee 	.word	0x00001bee
    1468:	00001101 	.word	0x00001101
    146c:	00002e69 	.word	0x00002e69
    1470:	000030a9 	.word	0x000030a9
    1474:	0000053a 	.word	0x0000053a
    1478:	20000108 	.word	0x20000108

0000147c <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    147c:	b580      	push	{r7, lr}
    147e:	b086      	sub	sp, #24
    1480:	af00      	add	r7, sp, #0
    1482:	0002      	movs	r2, r0
    1484:	1dfb      	adds	r3, r7, #7
    1486:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    1488:	4b2e      	ldr	r3, [pc, #184]	; (1544 <sd_spi_op_cond+0xc8>)
    148a:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    148c:	4b2e      	ldr	r3, [pc, #184]	; (1548 <sd_spi_op_cond+0xcc>)
    148e:	2100      	movs	r1, #0
    1490:	0018      	movs	r0, r3
    1492:	4b2e      	ldr	r3, [pc, #184]	; (154c <sd_spi_op_cond+0xd0>)
    1494:	4798      	blx	r3
    1496:	0003      	movs	r3, r0
    1498:	001a      	movs	r2, r3
    149a:	2301      	movs	r3, #1
    149c:	4053      	eors	r3, r2
    149e:	b2db      	uxtb	r3, r3
    14a0:	2b00      	cmp	r3, #0
    14a2:	d001      	beq.n	14a8 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    14a4:	2300      	movs	r3, #0
    14a6:	e048      	b.n	153a <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    14a8:	2300      	movs	r3, #0
    14aa:	617b      	str	r3, [r7, #20]
		if (v2) {
    14ac:	1dfb      	adds	r3, r7, #7
    14ae:	781b      	ldrb	r3, [r3, #0]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d004      	beq.n	14be <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    14b4:	697b      	ldr	r3, [r7, #20]
    14b6:	2280      	movs	r2, #128	; 0x80
    14b8:	05d2      	lsls	r2, r2, #23
    14ba:	4313      	orrs	r3, r2
    14bc:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    14be:	697b      	ldr	r3, [r7, #20]
    14c0:	4a23      	ldr	r2, [pc, #140]	; (1550 <sd_spi_op_cond+0xd4>)
    14c2:	0019      	movs	r1, r3
    14c4:	0010      	movs	r0, r2
    14c6:	4b21      	ldr	r3, [pc, #132]	; (154c <sd_spi_op_cond+0xd0>)
    14c8:	4798      	blx	r3
    14ca:	0003      	movs	r3, r0
    14cc:	001a      	movs	r2, r3
    14ce:	2301      	movs	r3, #1
    14d0:	4053      	eors	r3, r2
    14d2:	b2db      	uxtb	r3, r3
    14d4:	2b00      	cmp	r3, #0
    14d6:	d001      	beq.n	14dc <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    14d8:	2300      	movs	r3, #0
    14da:	e02e      	b.n	153a <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    14dc:	4b1d      	ldr	r3, [pc, #116]	; (1554 <sd_spi_op_cond+0xd8>)
    14de:	4798      	blx	r3
    14e0:	0003      	movs	r3, r0
    14e2:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	2201      	movs	r2, #1
    14e8:	4013      	ands	r3, r2
    14ea:	d006      	beq.n	14fa <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    14ec:	693b      	ldr	r3, [r7, #16]
    14ee:	1e5a      	subs	r2, r3, #1
    14f0:	613a      	str	r2, [r7, #16]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d1ca      	bne.n	148c <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    14f6:	2300      	movs	r3, #0
    14f8:	e01f      	b.n	153a <sd_spi_op_cond+0xbe>
			break;
    14fa:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    14fc:	4b16      	ldr	r3, [pc, #88]	; (1558 <sd_spi_op_cond+0xdc>)
    14fe:	2100      	movs	r1, #0
    1500:	0018      	movs	r0, r3
    1502:	4b12      	ldr	r3, [pc, #72]	; (154c <sd_spi_op_cond+0xd0>)
    1504:	4798      	blx	r3
    1506:	0003      	movs	r3, r0
    1508:	001a      	movs	r2, r3
    150a:	2301      	movs	r3, #1
    150c:	4053      	eors	r3, r2
    150e:	b2db      	uxtb	r3, r3
    1510:	2b00      	cmp	r3, #0
    1512:	d001      	beq.n	1518 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1514:	2300      	movs	r3, #0
    1516:	e010      	b.n	153a <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    1518:	4b0e      	ldr	r3, [pc, #56]	; (1554 <sd_spi_op_cond+0xd8>)
    151a:	4798      	blx	r3
    151c:	0002      	movs	r2, r0
    151e:	2380      	movs	r3, #128	; 0x80
    1520:	05db      	lsls	r3, r3, #23
    1522:	4013      	ands	r3, r2
    1524:	d008      	beq.n	1538 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    1526:	4b0d      	ldr	r3, [pc, #52]	; (155c <sd_spi_op_cond+0xe0>)
    1528:	681a      	ldr	r2, [r3, #0]
    152a:	4b0c      	ldr	r3, [pc, #48]	; (155c <sd_spi_op_cond+0xe0>)
    152c:	681b      	ldr	r3, [r3, #0]
    152e:	7adb      	ldrb	r3, [r3, #11]
    1530:	2108      	movs	r1, #8
    1532:	430b      	orrs	r3, r1
    1534:	b2db      	uxtb	r3, r3
    1536:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    1538:	2301      	movs	r3, #1
}
    153a:	0018      	movs	r0, r3
    153c:	46bd      	mov	sp, r7
    153e:	b006      	add	sp, #24
    1540:	bd80      	pop	{r7, pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	00001bee 	.word	0x00001bee
    1548:	00001137 	.word	0x00001137
    154c:	00002e69 	.word	0x00002e69
    1550:	00001129 	.word	0x00001129
    1554:	000030a9 	.word	0x000030a9
    1558:	0000053a 	.word	0x0000053a
    155c:	20000108 	.word	0x20000108

00001560 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    1560:	b580      	push	{r7, lr}
    1562:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    1564:	2301      	movs	r3, #1
}
    1566:	0018      	movs	r0, r3
    1568:	46bd      	mov	sp, r7
    156a:	bd80      	pop	{r7, pc}

0000156c <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    156c:	b580      	push	{r7, lr}
    156e:	b084      	sub	sp, #16
    1570:	af00      	add	r7, sp, #0
    1572:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	2200      	movs	r2, #0
    1578:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    157a:	23d5      	movs	r3, #213	; 0xd5
    157c:	005b      	lsls	r3, r3, #1
    157e:	4a14      	ldr	r2, [pc, #80]	; (15d0 <sd_cmd8+0x64>)
    1580:	0019      	movs	r1, r3
    1582:	0010      	movs	r0, r2
    1584:	4b13      	ldr	r3, [pc, #76]	; (15d4 <sd_cmd8+0x68>)
    1586:	4798      	blx	r3
    1588:	0003      	movs	r3, r0
    158a:	001a      	movs	r2, r3
    158c:	2301      	movs	r3, #1
    158e:	4053      	eors	r3, r2
    1590:	b2db      	uxtb	r3, r3
    1592:	2b00      	cmp	r3, #0
    1594:	d001      	beq.n	159a <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    1596:	2301      	movs	r3, #1
    1598:	e015      	b.n	15c6 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    159a:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <sd_cmd8+0x6c>)
    159c:	4798      	blx	r3
    159e:	0003      	movs	r3, r0
    15a0:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	3301      	adds	r3, #1
    15a6:	d101      	bne.n	15ac <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    15a8:	2301      	movs	r3, #1
    15aa:	e00c      	b.n	15c6 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    15ac:	68fb      	ldr	r3, [r7, #12]
    15ae:	051b      	lsls	r3, r3, #20
    15b0:	0d1a      	lsrs	r2, r3, #20
    15b2:	23d5      	movs	r3, #213	; 0xd5
    15b4:	005b      	lsls	r3, r3, #1
    15b6:	429a      	cmp	r2, r3
    15b8:	d001      	beq.n	15be <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    15ba:	2300      	movs	r3, #0
    15bc:	e003      	b.n	15c6 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	2201      	movs	r2, #1
    15c2:	701a      	strb	r2, [r3, #0]
	return true;
    15c4:	2301      	movs	r3, #1
}
    15c6:	0018      	movs	r0, r3
    15c8:	46bd      	mov	sp, r7
    15ca:	b004      	add	sp, #16
    15cc:	bd80      	pop	{r7, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00005508 	.word	0x00005508
    15d4:	00002e69 	.word	0x00002e69
    15d8:	000030a9 	.word	0x000030a9

000015dc <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    15dc:	b590      	push	{r4, r7, lr}
    15de:	b089      	sub	sp, #36	; 0x24
    15e0:	af02      	add	r7, sp, #8
    15e2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    15e4:	2380      	movs	r3, #128	; 0x80
    15e6:	009a      	lsls	r2, r3, #2
    15e8:	4841      	ldr	r0, [pc, #260]	; (16f0 <mmc_cmd8+0x114>)
    15ea:	2300      	movs	r3, #0
    15ec:	9300      	str	r3, [sp, #0]
    15ee:	2301      	movs	r3, #1
    15f0:	2100      	movs	r1, #0
    15f2:	4c40      	ldr	r4, [pc, #256]	; (16f4 <mmc_cmd8+0x118>)
    15f4:	47a0      	blx	r4
    15f6:	0003      	movs	r3, r0
    15f8:	001a      	movs	r2, r3
    15fa:	2301      	movs	r3, #1
    15fc:	4053      	eors	r3, r2
    15fe:	b2db      	uxtb	r3, r3
    1600:	2b00      	cmp	r3, #0
    1602:	d001      	beq.n	1608 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1604:	2300      	movs	r3, #0
    1606:	e06e      	b.n	16e6 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1608:	2316      	movs	r3, #22
    160a:	18fb      	adds	r3, r7, r3
    160c:	2200      	movs	r2, #0
    160e:	801a      	strh	r2, [r3, #0]
    1610:	e014      	b.n	163c <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    1612:	2310      	movs	r3, #16
    1614:	18fb      	adds	r3, r7, r3
    1616:	0018      	movs	r0, r3
    1618:	4b37      	ldr	r3, [pc, #220]	; (16f8 <mmc_cmd8+0x11c>)
    161a:	4798      	blx	r3
    161c:	0003      	movs	r3, r0
    161e:	001a      	movs	r2, r3
    1620:	2301      	movs	r3, #1
    1622:	4053      	eors	r3, r2
    1624:	b2db      	uxtb	r3, r3
    1626:	2b00      	cmp	r3, #0
    1628:	d001      	beq.n	162e <mmc_cmd8+0x52>
			return false;
    162a:	2300      	movs	r3, #0
    162c:	e05b      	b.n	16e6 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    162e:	2316      	movs	r3, #22
    1630:	18fb      	adds	r3, r7, r3
    1632:	881a      	ldrh	r2, [r3, #0]
    1634:	2316      	movs	r3, #22
    1636:	18fb      	adds	r3, r7, r3
    1638:	3201      	adds	r2, #1
    163a:	801a      	strh	r2, [r3, #0]
    163c:	2316      	movs	r3, #22
    163e:	18fb      	adds	r3, r7, r3
    1640:	881b      	ldrh	r3, [r3, #0]
    1642:	2b31      	cmp	r3, #49	; 0x31
    1644:	d9e5      	bls.n	1612 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    1646:	693b      	ldr	r3, [r7, #16]
    1648:	b2db      	uxtb	r3, r3
    164a:	2202      	movs	r2, #2
    164c:	4013      	ands	r3, r2
    164e:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1654:	4b29      	ldr	r3, [pc, #164]	; (16fc <mmc_cmd8+0x120>)
    1656:	681b      	ldr	r3, [r3, #0]
    1658:	330e      	adds	r3, #14
    165a:	0018      	movs	r0, r3
    165c:	230c      	movs	r3, #12
    165e:	223e      	movs	r2, #62	; 0x3e
    1660:	2180      	movs	r1, #128	; 0x80
    1662:	4c27      	ldr	r4, [pc, #156]	; (1700 <mmc_cmd8+0x124>)
    1664:	47a0      	blx	r4
    1666:	0002      	movs	r2, r0
    1668:	4b26      	ldr	r3, [pc, #152]	; (1704 <mmc_cmd8+0x128>)
    166a:	429a      	cmp	r2, r3
    166c:	d135      	bne.n	16da <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    166e:	e014      	b.n	169a <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    1670:	230c      	movs	r3, #12
    1672:	18fb      	adds	r3, r7, r3
    1674:	0018      	movs	r0, r3
    1676:	4b20      	ldr	r3, [pc, #128]	; (16f8 <mmc_cmd8+0x11c>)
    1678:	4798      	blx	r3
    167a:	0003      	movs	r3, r0
    167c:	001a      	movs	r2, r3
    167e:	2301      	movs	r3, #1
    1680:	4053      	eors	r3, r2
    1682:	b2db      	uxtb	r3, r3
    1684:	2b00      	cmp	r3, #0
    1686:	d001      	beq.n	168c <mmc_cmd8+0xb0>
				return false;
    1688:	2300      	movs	r3, #0
    168a:	e02c      	b.n	16e6 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    168c:	2316      	movs	r3, #22
    168e:	18fb      	adds	r3, r7, r3
    1690:	881a      	ldrh	r2, [r3, #0]
    1692:	2316      	movs	r3, #22
    1694:	18fb      	adds	r3, r7, r3
    1696:	3201      	adds	r2, #1
    1698:	801a      	strh	r2, [r3, #0]
    169a:	2316      	movs	r3, #22
    169c:	18fb      	adds	r3, r7, r3
    169e:	881b      	ldrh	r3, [r3, #0]
    16a0:	2b35      	cmp	r3, #53	; 0x35
    16a2:	d9e5      	bls.n	1670 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    16a4:	4b15      	ldr	r3, [pc, #84]	; (16fc <mmc_cmd8+0x120>)
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	68fa      	ldr	r2, [r7, #12]
    16aa:	0852      	lsrs	r2, r2, #1
    16ac:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    16ae:	e014      	b.n	16da <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    16b0:	230c      	movs	r3, #12
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	0018      	movs	r0, r3
    16b6:	4b10      	ldr	r3, [pc, #64]	; (16f8 <mmc_cmd8+0x11c>)
    16b8:	4798      	blx	r3
    16ba:	0003      	movs	r3, r0
    16bc:	001a      	movs	r2, r3
    16be:	2301      	movs	r3, #1
    16c0:	4053      	eors	r3, r2
    16c2:	b2db      	uxtb	r3, r3
    16c4:	2b00      	cmp	r3, #0
    16c6:	d001      	beq.n	16cc <mmc_cmd8+0xf0>
			return false;
    16c8:	2300      	movs	r3, #0
    16ca:	e00c      	b.n	16e6 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    16cc:	2316      	movs	r3, #22
    16ce:	18fb      	adds	r3, r7, r3
    16d0:	881a      	ldrh	r2, [r3, #0]
    16d2:	2316      	movs	r3, #22
    16d4:	18fb      	adds	r3, r7, r3
    16d6:	3201      	adds	r2, #1
    16d8:	801a      	strh	r2, [r3, #0]
    16da:	2316      	movs	r3, #22
    16dc:	18fb      	adds	r3, r7, r3
    16de:	881b      	ldrh	r3, [r3, #0]
    16e0:	2b7f      	cmp	r3, #127	; 0x7f
    16e2:	d9e5      	bls.n	16b0 <mmc_cmd8+0xd4>
		}
	}
	return true;
    16e4:	2301      	movs	r3, #1
}
    16e6:	0018      	movs	r0, r3
    16e8:	46bd      	mov	sp, r7
    16ea:	b007      	add	sp, #28
    16ec:	bd90      	pop	{r4, r7, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00081108 	.word	0x00081108
    16f4:	00002e91 	.word	0x00002e91
    16f8:	000030bd 	.word	0x000030bd
    16fc:	20000108 	.word	0x20000108
    1700:	00001275 	.word	0x00001275
    1704:	00000fff 	.word	0x00000fff

00001708 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    1708:	b590      	push	{r4, r7, lr}
    170a:	b083      	sub	sp, #12
    170c:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    170e:	4b15      	ldr	r3, [pc, #84]	; (1764 <sd_mmc_cmd9_spi+0x5c>)
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	891b      	ldrh	r3, [r3, #8]
    1714:	0419      	lsls	r1, r3, #16
    1716:	4814      	ldr	r0, [pc, #80]	; (1768 <sd_mmc_cmd9_spi+0x60>)
    1718:	2301      	movs	r3, #1
    171a:	9300      	str	r3, [sp, #0]
    171c:	2301      	movs	r3, #1
    171e:	2210      	movs	r2, #16
    1720:	4c12      	ldr	r4, [pc, #72]	; (176c <sd_mmc_cmd9_spi+0x64>)
    1722:	47a0      	blx	r4
    1724:	0003      	movs	r3, r0
    1726:	001a      	movs	r2, r3
    1728:	2301      	movs	r3, #1
    172a:	4053      	eors	r3, r2
    172c:	b2db      	uxtb	r3, r3
    172e:	2b00      	cmp	r3, #0
    1730:	d001      	beq.n	1736 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    1732:	2300      	movs	r3, #0
    1734:	e012      	b.n	175c <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    1736:	4b0b      	ldr	r3, [pc, #44]	; (1764 <sd_mmc_cmd9_spi+0x5c>)
    1738:	681b      	ldr	r3, [r3, #0]
    173a:	330e      	adds	r3, #14
    173c:	2101      	movs	r1, #1
    173e:	0018      	movs	r0, r3
    1740:	4b0b      	ldr	r3, [pc, #44]	; (1770 <sd_mmc_cmd9_spi+0x68>)
    1742:	4798      	blx	r3
    1744:	0003      	movs	r3, r0
    1746:	001a      	movs	r2, r3
    1748:	2301      	movs	r3, #1
    174a:	4053      	eors	r3, r2
    174c:	b2db      	uxtb	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	d001      	beq.n	1756 <sd_mmc_cmd9_spi+0x4e>
		return false;
    1752:	2300      	movs	r3, #0
    1754:	e002      	b.n	175c <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    1756:	4b07      	ldr	r3, [pc, #28]	; (1774 <sd_mmc_cmd9_spi+0x6c>)
    1758:	4798      	blx	r3
    175a:	0003      	movs	r3, r0
}
    175c:	0018      	movs	r0, r3
    175e:	46bd      	mov	sp, r7
    1760:	b001      	add	sp, #4
    1762:	bd90      	pop	{r4, r7, pc}
    1764:	20000108 	.word	0x20000108
    1768:	00081109 	.word	0x00081109
    176c:	00002e91 	.word	0x00002e91
    1770:	00003161 	.word	0x00003161
    1774:	00003205 	.word	0x00003205

00001778 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    1778:	b5b0      	push	{r4, r5, r7, lr}
    177a:	b084      	sub	sp, #16
    177c:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    177e:	4b45      	ldr	r3, [pc, #276]	; (1894 <mmc_decode_csd+0x11c>)
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	330e      	adds	r3, #14
    1784:	0018      	movs	r0, r3
    1786:	2304      	movs	r3, #4
    1788:	227a      	movs	r2, #122	; 0x7a
    178a:	2180      	movs	r1, #128	; 0x80
    178c:	4c42      	ldr	r4, [pc, #264]	; (1898 <mmc_decode_csd+0x120>)
    178e:	47a0      	blx	r4
    1790:	0003      	movs	r3, r0
    1792:	2b02      	cmp	r3, #2
    1794:	d011      	beq.n	17ba <mmc_decode_csd+0x42>
    1796:	d802      	bhi.n	179e <mmc_decode_csd+0x26>
    1798:	2b01      	cmp	r3, #1
    179a:	d009      	beq.n	17b0 <mmc_decode_csd+0x38>
    179c:	e003      	b.n	17a6 <mmc_decode_csd+0x2e>
    179e:	2b03      	cmp	r3, #3
    17a0:	d010      	beq.n	17c4 <mmc_decode_csd+0x4c>
    17a2:	2b04      	cmp	r3, #4
    17a4:	d013      	beq.n	17ce <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    17a6:	4b3b      	ldr	r3, [pc, #236]	; (1894 <mmc_decode_csd+0x11c>)
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	2212      	movs	r2, #18
    17ac:	731a      	strb	r2, [r3, #12]
		break;
    17ae:	e013      	b.n	17d8 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    17b0:	4b38      	ldr	r3, [pc, #224]	; (1894 <mmc_decode_csd+0x11c>)
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	2214      	movs	r2, #20
    17b6:	731a      	strb	r2, [r3, #12]
		break;
    17b8:	e00e      	b.n	17d8 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    17ba:	4b36      	ldr	r3, [pc, #216]	; (1894 <mmc_decode_csd+0x11c>)
    17bc:	681b      	ldr	r3, [r3, #0]
    17be:	2222      	movs	r2, #34	; 0x22
    17c0:	731a      	strb	r2, [r3, #12]
		break;
    17c2:	e009      	b.n	17d8 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    17c4:	4b33      	ldr	r3, [pc, #204]	; (1894 <mmc_decode_csd+0x11c>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	2230      	movs	r2, #48	; 0x30
    17ca:	731a      	strb	r2, [r3, #12]
		break;
    17cc:	e004      	b.n	17d8 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    17ce:	4b31      	ldr	r3, [pc, #196]	; (1894 <mmc_decode_csd+0x11c>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	2240      	movs	r2, #64	; 0x40
    17d4:	731a      	strb	r2, [r3, #12]
		break;
    17d6:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    17d8:	4b2e      	ldr	r3, [pc, #184]	; (1894 <mmc_decode_csd+0x11c>)
    17da:	681b      	ldr	r3, [r3, #0]
    17dc:	330e      	adds	r3, #14
    17de:	0018      	movs	r0, r3
    17e0:	2308      	movs	r3, #8
    17e2:	2260      	movs	r2, #96	; 0x60
    17e4:	2180      	movs	r1, #128	; 0x80
    17e6:	4c2c      	ldr	r4, [pc, #176]	; (1898 <mmc_decode_csd+0x120>)
    17e8:	47a0      	blx	r4
    17ea:	0003      	movs	r3, r0
    17ec:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	2207      	movs	r2, #7
    17f2:	401a      	ands	r2, r3
    17f4:	4b29      	ldr	r3, [pc, #164]	; (189c <mmc_decode_csd+0x124>)
    17f6:	0092      	lsls	r2, r2, #2
    17f8:	58d3      	ldr	r3, [r2, r3]
    17fa:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    17fc:	68fb      	ldr	r3, [r7, #12]
    17fe:	08db      	lsrs	r3, r3, #3
    1800:	220f      	movs	r2, #15
    1802:	401a      	ands	r2, r3
    1804:	4b26      	ldr	r3, [pc, #152]	; (18a0 <mmc_decode_csd+0x128>)
    1806:	0092      	lsls	r2, r2, #2
    1808:	58d3      	ldr	r3, [r2, r3]
    180a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    180c:	4b21      	ldr	r3, [pc, #132]	; (1894 <mmc_decode_csd+0x11c>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	68ba      	ldr	r2, [r7, #8]
    1812:	6879      	ldr	r1, [r7, #4]
    1814:	434a      	muls	r2, r1
    1816:	21fa      	movs	r1, #250	; 0xfa
    1818:	0089      	lsls	r1, r1, #2
    181a:	434a      	muls	r2, r1
    181c:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    181e:	4b1d      	ldr	r3, [pc, #116]	; (1894 <mmc_decode_csd+0x11c>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	330e      	adds	r3, #14
    1824:	0018      	movs	r0, r3
    1826:	230c      	movs	r3, #12
    1828:	223e      	movs	r2, #62	; 0x3e
    182a:	2180      	movs	r1, #128	; 0x80
    182c:	4c1a      	ldr	r4, [pc, #104]	; (1898 <mmc_decode_csd+0x120>)
    182e:	47a0      	blx	r4
    1830:	0002      	movs	r2, r0
    1832:	4b1c      	ldr	r3, [pc, #112]	; (18a4 <mmc_decode_csd+0x12c>)
    1834:	429a      	cmp	r2, r3
    1836:	d028      	beq.n	188a <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1838:	4b16      	ldr	r3, [pc, #88]	; (1894 <mmc_decode_csd+0x11c>)
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	330e      	adds	r3, #14
    183e:	0018      	movs	r0, r3
    1840:	230c      	movs	r3, #12
    1842:	223e      	movs	r2, #62	; 0x3e
    1844:	2180      	movs	r1, #128	; 0x80
    1846:	4c14      	ldr	r4, [pc, #80]	; (1898 <mmc_decode_csd+0x120>)
    1848:	47a0      	blx	r4
    184a:	0003      	movs	r3, r0
    184c:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    184e:	4b11      	ldr	r3, [pc, #68]	; (1894 <mmc_decode_csd+0x11c>)
    1850:	681b      	ldr	r3, [r3, #0]
    1852:	330e      	adds	r3, #14
    1854:	0018      	movs	r0, r3
    1856:	2303      	movs	r3, #3
    1858:	222f      	movs	r2, #47	; 0x2f
    185a:	2180      	movs	r1, #128	; 0x80
    185c:	4d0e      	ldr	r5, [pc, #56]	; (1898 <mmc_decode_csd+0x120>)
    185e:	47a8      	blx	r5
    1860:	0003      	movs	r3, r0
    1862:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1864:	409c      	lsls	r4, r3
    1866:	0023      	movs	r3, r4
    1868:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    186a:	4b0a      	ldr	r3, [pc, #40]	; (1894 <mmc_decode_csd+0x11c>)
    186c:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    186e:	4b09      	ldr	r3, [pc, #36]	; (1894 <mmc_decode_csd+0x11c>)
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	330e      	adds	r3, #14
    1874:	0018      	movs	r0, r3
    1876:	2304      	movs	r3, #4
    1878:	2250      	movs	r2, #80	; 0x50
    187a:	2180      	movs	r1, #128	; 0x80
    187c:	4d06      	ldr	r5, [pc, #24]	; (1898 <mmc_decode_csd+0x120>)
    187e:	47a8      	blx	r5
    1880:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1882:	683b      	ldr	r3, [r7, #0]
    1884:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1886:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1888:	6063      	str	r3, [r4, #4]
	}
}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	46bd      	mov	sp, r7
    188e:	b004      	add	sp, #16
    1890:	bdb0      	pop	{r4, r5, r7, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	20000108 	.word	0x20000108
    1898:	00001275 	.word	0x00001275
    189c:	0000c924 	.word	0x0000c924
    18a0:	0000c980 	.word	0x0000c980
    18a4:	00000fff 	.word	0x00000fff

000018a8 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    18a8:	b5b0      	push	{r4, r5, r7, lr}
    18aa:	b084      	sub	sp, #16
    18ac:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    18ae:	4b35      	ldr	r3, [pc, #212]	; (1984 <sd_decode_csd+0xdc>)
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	330e      	adds	r3, #14
    18b4:	0018      	movs	r0, r3
    18b6:	2308      	movs	r3, #8
    18b8:	2260      	movs	r2, #96	; 0x60
    18ba:	2180      	movs	r1, #128	; 0x80
    18bc:	4c32      	ldr	r4, [pc, #200]	; (1988 <sd_decode_csd+0xe0>)
    18be:	47a0      	blx	r4
    18c0:	0003      	movs	r3, r0
    18c2:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    18c4:	68fb      	ldr	r3, [r7, #12]
    18c6:	2207      	movs	r2, #7
    18c8:	401a      	ands	r2, r3
    18ca:	4b30      	ldr	r3, [pc, #192]	; (198c <sd_decode_csd+0xe4>)
    18cc:	0092      	lsls	r2, r2, #2
    18ce:	58d3      	ldr	r3, [r2, r3]
    18d0:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    18d2:	68fb      	ldr	r3, [r7, #12]
    18d4:	08db      	lsrs	r3, r3, #3
    18d6:	220f      	movs	r2, #15
    18d8:	401a      	ands	r2, r3
    18da:	4b2d      	ldr	r3, [pc, #180]	; (1990 <sd_decode_csd+0xe8>)
    18dc:	0092      	lsls	r2, r2, #2
    18de:	58d3      	ldr	r3, [r2, r3]
    18e0:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    18e2:	4b28      	ldr	r3, [pc, #160]	; (1984 <sd_decode_csd+0xdc>)
    18e4:	681b      	ldr	r3, [r3, #0]
    18e6:	68ba      	ldr	r2, [r7, #8]
    18e8:	6879      	ldr	r1, [r7, #4]
    18ea:	434a      	muls	r2, r1
    18ec:	21fa      	movs	r1, #250	; 0xfa
    18ee:	0089      	lsls	r1, r1, #2
    18f0:	434a      	muls	r2, r1
    18f2:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    18f4:	4b23      	ldr	r3, [pc, #140]	; (1984 <sd_decode_csd+0xdc>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	330e      	adds	r3, #14
    18fa:	0018      	movs	r0, r3
    18fc:	2302      	movs	r3, #2
    18fe:	227e      	movs	r2, #126	; 0x7e
    1900:	2180      	movs	r1, #128	; 0x80
    1902:	4c21      	ldr	r4, [pc, #132]	; (1988 <sd_decode_csd+0xe0>)
    1904:	47a0      	blx	r4
    1906:	1e03      	subs	r3, r0, #0
    1908:	d00f      	beq.n	192a <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    190a:	4b1e      	ldr	r3, [pc, #120]	; (1984 <sd_decode_csd+0xdc>)
    190c:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    190e:	4b1d      	ldr	r3, [pc, #116]	; (1984 <sd_decode_csd+0xdc>)
    1910:	681b      	ldr	r3, [r3, #0]
    1912:	330e      	adds	r3, #14
    1914:	0018      	movs	r0, r3
    1916:	2316      	movs	r3, #22
    1918:	2230      	movs	r2, #48	; 0x30
    191a:	2180      	movs	r1, #128	; 0x80
    191c:	4d1a      	ldr	r5, [pc, #104]	; (1988 <sd_decode_csd+0xe0>)
    191e:	47a8      	blx	r5
    1920:	0003      	movs	r3, r0
				* 512;
    1922:	3301      	adds	r3, #1
    1924:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    1926:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    1928:	e028      	b.n	197c <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    192a:	4b16      	ldr	r3, [pc, #88]	; (1984 <sd_decode_csd+0xdc>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	330e      	adds	r3, #14
    1930:	0018      	movs	r0, r3
    1932:	230c      	movs	r3, #12
    1934:	223e      	movs	r2, #62	; 0x3e
    1936:	2180      	movs	r1, #128	; 0x80
    1938:	4c13      	ldr	r4, [pc, #76]	; (1988 <sd_decode_csd+0xe0>)
    193a:	47a0      	blx	r4
    193c:	0003      	movs	r3, r0
    193e:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1940:	4b10      	ldr	r3, [pc, #64]	; (1984 <sd_decode_csd+0xdc>)
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	330e      	adds	r3, #14
    1946:	0018      	movs	r0, r3
    1948:	2303      	movs	r3, #3
    194a:	222f      	movs	r2, #47	; 0x2f
    194c:	2180      	movs	r1, #128	; 0x80
    194e:	4d0e      	ldr	r5, [pc, #56]	; (1988 <sd_decode_csd+0xe0>)
    1950:	47a8      	blx	r5
    1952:	0003      	movs	r3, r0
    1954:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    1956:	409c      	lsls	r4, r3
    1958:	0023      	movs	r3, r4
    195a:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    195c:	4b09      	ldr	r3, [pc, #36]	; (1984 <sd_decode_csd+0xdc>)
    195e:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <sd_decode_csd+0xdc>)
    1962:	681b      	ldr	r3, [r3, #0]
    1964:	330e      	adds	r3, #14
    1966:	0018      	movs	r0, r3
    1968:	2304      	movs	r3, #4
    196a:	2250      	movs	r2, #80	; 0x50
    196c:	2180      	movs	r1, #128	; 0x80
    196e:	4d06      	ldr	r5, [pc, #24]	; (1988 <sd_decode_csd+0xe0>)
    1970:	47a8      	blx	r5
    1972:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1974:	683b      	ldr	r3, [r7, #0]
    1976:	4093      	lsls	r3, r2
				/ 1024;
    1978:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    197a:	6063      	str	r3, [r4, #4]
}
    197c:	46c0      	nop			; (mov r8, r8)
    197e:	46bd      	mov	sp, r7
    1980:	b004      	add	sp, #16
    1982:	bdb0      	pop	{r4, r5, r7, pc}
    1984:	20000108 	.word	0x20000108
    1988:	00001275 	.word	0x00001275
    198c:	0000c924 	.word	0x0000c924
    1990:	0000c940 	.word	0x0000c940

00001994 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    1994:	b580      	push	{r7, lr}
    1996:	b082      	sub	sp, #8
    1998:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    199a:	4b11      	ldr	r3, [pc, #68]	; (19e0 <sd_mmc_cmd13+0x4c>)
    199c:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    199e:	4b11      	ldr	r3, [pc, #68]	; (19e4 <sd_mmc_cmd13+0x50>)
    19a0:	2100      	movs	r1, #0
    19a2:	0018      	movs	r0, r3
    19a4:	4b10      	ldr	r3, [pc, #64]	; (19e8 <sd_mmc_cmd13+0x54>)
    19a6:	4798      	blx	r3
    19a8:	0003      	movs	r3, r0
    19aa:	001a      	movs	r2, r3
    19ac:	2301      	movs	r3, #1
    19ae:	4053      	eors	r3, r2
    19b0:	b2db      	uxtb	r3, r3
    19b2:	2b00      	cmp	r3, #0
    19b4:	d001      	beq.n	19ba <sd_mmc_cmd13+0x26>
				return false;
    19b6:	2300      	movs	r3, #0
    19b8:	e00e      	b.n	19d8 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    19ba:	4b0c      	ldr	r3, [pc, #48]	; (19ec <sd_mmc_cmd13+0x58>)
    19bc:	4798      	blx	r3
    19be:	0002      	movs	r2, r0
    19c0:	23ff      	movs	r3, #255	; 0xff
    19c2:	4013      	ands	r3, r2
    19c4:	d006      	beq.n	19d4 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	1e5a      	subs	r2, r3, #1
    19ca:	607a      	str	r2, [r7, #4]
    19cc:	2b00      	cmp	r3, #0
    19ce:	d1e6      	bne.n	199e <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    19d0:	2300      	movs	r3, #0
    19d2:	e001      	b.n	19d8 <sd_mmc_cmd13+0x44>
				break;
    19d4:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    19d6:	2301      	movs	r3, #1
}
    19d8:	0018      	movs	r0, r3
    19da:	46bd      	mov	sp, r7
    19dc:	b002      	add	sp, #8
    19de:	bd80      	pop	{r7, pc}
    19e0:	00030d40 	.word	0x00030d40
    19e4:	00001b0d 	.word	0x00001b0d
    19e8:	00002e69 	.word	0x00002e69
    19ec:	000030a9 	.word	0x000030a9

000019f0 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    19f0:	b590      	push	{r4, r7, lr}
    19f2:	b085      	sub	sp, #20
    19f4:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    19f6:	4b38      	ldr	r3, [pc, #224]	; (1ad8 <sd_acmd51+0xe8>)
    19f8:	681b      	ldr	r3, [r3, #0]
    19fa:	891b      	ldrh	r3, [r3, #8]
    19fc:	041b      	lsls	r3, r3, #16
    19fe:	4a37      	ldr	r2, [pc, #220]	; (1adc <sd_acmd51+0xec>)
    1a00:	0019      	movs	r1, r3
    1a02:	0010      	movs	r0, r2
    1a04:	4b36      	ldr	r3, [pc, #216]	; (1ae0 <sd_acmd51+0xf0>)
    1a06:	4798      	blx	r3
    1a08:	0003      	movs	r3, r0
    1a0a:	001a      	movs	r2, r3
    1a0c:	2301      	movs	r3, #1
    1a0e:	4053      	eors	r3, r2
    1a10:	b2db      	uxtb	r3, r3
    1a12:	2b00      	cmp	r3, #0
    1a14:	d001      	beq.n	1a1a <sd_acmd51+0x2a>
		return false;
    1a16:	2300      	movs	r3, #0
    1a18:	e059      	b.n	1ace <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    1a1a:	4832      	ldr	r0, [pc, #200]	; (1ae4 <sd_acmd51+0xf4>)
    1a1c:	2301      	movs	r3, #1
    1a1e:	9300      	str	r3, [sp, #0]
    1a20:	2301      	movs	r3, #1
    1a22:	2208      	movs	r2, #8
    1a24:	2100      	movs	r1, #0
    1a26:	4c30      	ldr	r4, [pc, #192]	; (1ae8 <sd_acmd51+0xf8>)
    1a28:	47a0      	blx	r4
    1a2a:	0003      	movs	r3, r0
    1a2c:	001a      	movs	r2, r3
    1a2e:	2301      	movs	r3, #1
    1a30:	4053      	eors	r3, r2
    1a32:	b2db      	uxtb	r3, r3
    1a34:	2b00      	cmp	r3, #0
    1a36:	d001      	beq.n	1a3c <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    1a38:	2300      	movs	r3, #0
    1a3a:	e048      	b.n	1ace <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1a3c:	003b      	movs	r3, r7
    1a3e:	2101      	movs	r1, #1
    1a40:	0018      	movs	r0, r3
    1a42:	4b2a      	ldr	r3, [pc, #168]	; (1aec <sd_acmd51+0xfc>)
    1a44:	4798      	blx	r3
    1a46:	0003      	movs	r3, r0
    1a48:	001a      	movs	r2, r3
    1a4a:	2301      	movs	r3, #1
    1a4c:	4053      	eors	r3, r2
    1a4e:	b2db      	uxtb	r3, r3
    1a50:	2b00      	cmp	r3, #0
    1a52:	d001      	beq.n	1a58 <sd_acmd51+0x68>
		return false;
    1a54:	2300      	movs	r3, #0
    1a56:	e03a      	b.n	1ace <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1a58:	4b25      	ldr	r3, [pc, #148]	; (1af0 <sd_acmd51+0x100>)
    1a5a:	4798      	blx	r3
    1a5c:	0003      	movs	r3, r0
    1a5e:	001a      	movs	r2, r3
    1a60:	2301      	movs	r3, #1
    1a62:	4053      	eors	r3, r2
    1a64:	b2db      	uxtb	r3, r3
    1a66:	2b00      	cmp	r3, #0
    1a68:	d001      	beq.n	1a6e <sd_acmd51+0x7e>
		return false;
    1a6a:	2300      	movs	r3, #0
    1a6c:	e02f      	b.n	1ace <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1a6e:	0038      	movs	r0, r7
    1a70:	2304      	movs	r3, #4
    1a72:	2238      	movs	r2, #56	; 0x38
    1a74:	2140      	movs	r1, #64	; 0x40
    1a76:	4c1f      	ldr	r4, [pc, #124]	; (1af4 <sd_acmd51+0x104>)
    1a78:	47a0      	blx	r4
    1a7a:	0003      	movs	r3, r0
    1a7c:	2b01      	cmp	r3, #1
    1a7e:	d008      	beq.n	1a92 <sd_acmd51+0xa2>
    1a80:	d302      	bcc.n	1a88 <sd_acmd51+0x98>
    1a82:	2b02      	cmp	r3, #2
    1a84:	d00a      	beq.n	1a9c <sd_acmd51+0xac>
    1a86:	e01c      	b.n	1ac2 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1a88:	4b13      	ldr	r3, [pc, #76]	; (1ad8 <sd_acmd51+0xe8>)
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	2210      	movs	r2, #16
    1a8e:	731a      	strb	r2, [r3, #12]
		break;
    1a90:	e01c      	b.n	1acc <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    1a92:	4b11      	ldr	r3, [pc, #68]	; (1ad8 <sd_acmd51+0xe8>)
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	221a      	movs	r2, #26
    1a98:	731a      	strb	r2, [r3, #12]
		break;
    1a9a:	e017      	b.n	1acc <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1a9c:	0038      	movs	r0, r7
    1a9e:	2301      	movs	r3, #1
    1aa0:	222f      	movs	r2, #47	; 0x2f
    1aa2:	2140      	movs	r1, #64	; 0x40
    1aa4:	4c13      	ldr	r4, [pc, #76]	; (1af4 <sd_acmd51+0x104>)
    1aa6:	47a0      	blx	r4
    1aa8:	0003      	movs	r3, r0
    1aaa:	2b01      	cmp	r3, #1
    1aac:	d104      	bne.n	1ab8 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1aae:	4b0a      	ldr	r3, [pc, #40]	; (1ad8 <sd_acmd51+0xe8>)
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	2230      	movs	r2, #48	; 0x30
    1ab4:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    1ab6:	e009      	b.n	1acc <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1ab8:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <sd_acmd51+0xe8>)
    1aba:	681b      	ldr	r3, [r3, #0]
    1abc:	2220      	movs	r2, #32
    1abe:	731a      	strb	r2, [r3, #12]
		break;
    1ac0:	e004      	b.n	1acc <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1ac2:	4b05      	ldr	r3, [pc, #20]	; (1ad8 <sd_acmd51+0xe8>)
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	2210      	movs	r2, #16
    1ac8:	731a      	strb	r2, [r3, #12]
		break;
    1aca:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1acc:	2301      	movs	r3, #1
}
    1ace:	0018      	movs	r0, r3
    1ad0:	46bd      	mov	sp, r7
    1ad2:	b003      	add	sp, #12
    1ad4:	bd90      	pop	{r4, r7, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	20000108 	.word	0x20000108
    1adc:	00001137 	.word	0x00001137
    1ae0:	00002e69 	.word	0x00002e69
    1ae4:	00081133 	.word	0x00081133
    1ae8:	00002e91 	.word	0x00002e91
    1aec:	00003161 	.word	0x00003161
    1af0:	00003205 	.word	0x00003205
    1af4:	00001275 	.word	0x00001275

00001af8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b082      	sub	sp, #8
    1afc:	af00      	add	r7, sp, #0
    1afe:	0002      	movs	r2, r0
    1b00:	1dfb      	adds	r3, r7, #7
    1b02:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1b04:	1dfb      	adds	r3, r7, #7
    1b06:	781b      	ldrb	r3, [r3, #0]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d001      	beq.n	1b10 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1b0c:	2304      	movs	r3, #4
    1b0e:	e047      	b.n	1ba0 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    1b10:	1dfb      	adds	r3, r7, #7
    1b12:	781b      	ldrb	r3, [r3, #0]
    1b14:	4a24      	ldr	r2, [pc, #144]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b16:	015b      	lsls	r3, r3, #5
    1b18:	18d3      	adds	r3, r2, r3
    1b1a:	330a      	adds	r3, #10
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	2b04      	cmp	r3, #4
    1b20:	d008      	beq.n	1b34 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    1b22:	1dfb      	adds	r3, r7, #7
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	4a20      	ldr	r2, [pc, #128]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b28:	015b      	lsls	r3, r3, #5
    1b2a:	18d3      	adds	r3, r2, r3
    1b2c:	330a      	adds	r3, #10
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	2b03      	cmp	r3, #3
    1b32:	d11d      	bne.n	1b70 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1b34:	1dfb      	adds	r3, r7, #7
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	4a1b      	ldr	r2, [pc, #108]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b3a:	015b      	lsls	r3, r3, #5
    1b3c:	18d3      	adds	r3, r2, r3
    1b3e:	330a      	adds	r3, #10
    1b40:	2202      	movs	r2, #2
    1b42:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1b44:	1dfb      	adds	r3, r7, #7
    1b46:	781a      	ldrb	r2, [r3, #0]
    1b48:	4b17      	ldr	r3, [pc, #92]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b4a:	0152      	lsls	r2, r2, #5
    1b4c:	4917      	ldr	r1, [pc, #92]	; (1bac <sd_mmc_select_slot+0xb4>)
    1b4e:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1b50:	1dfb      	adds	r3, r7, #7
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	4a14      	ldr	r2, [pc, #80]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b56:	015b      	lsls	r3, r3, #5
    1b58:	18d3      	adds	r3, r2, r3
    1b5a:	330d      	adds	r3, #13
    1b5c:	2201      	movs	r2, #1
    1b5e:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1b60:	1dfb      	adds	r3, r7, #7
    1b62:	781b      	ldrb	r3, [r3, #0]
    1b64:	4a10      	ldr	r2, [pc, #64]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b66:	015b      	lsls	r3, r3, #5
    1b68:	18d3      	adds	r3, r2, r3
    1b6a:	331e      	adds	r3, #30
    1b6c:	2200      	movs	r2, #0
    1b6e:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1b70:	4b0f      	ldr	r3, [pc, #60]	; (1bb0 <sd_mmc_select_slot+0xb8>)
    1b72:	1dfa      	adds	r2, r7, #7
    1b74:	7812      	ldrb	r2, [r2, #0]
    1b76:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1b78:	1dfb      	adds	r3, r7, #7
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	015a      	lsls	r2, r3, #5
    1b7e:	4b0a      	ldr	r3, [pc, #40]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b80:	18d2      	adds	r2, r2, r3
    1b82:	4b0c      	ldr	r3, [pc, #48]	; (1bb4 <sd_mmc_select_slot+0xbc>)
    1b84:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1b86:	4b0c      	ldr	r3, [pc, #48]	; (1bb8 <sd_mmc_select_slot+0xc0>)
    1b88:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1b8a:	1dfb      	adds	r3, r7, #7
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	4a06      	ldr	r2, [pc, #24]	; (1ba8 <sd_mmc_select_slot+0xb0>)
    1b90:	015b      	lsls	r3, r3, #5
    1b92:	18d3      	adds	r3, r2, r3
    1b94:	330a      	adds	r3, #10
    1b96:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1b98:	3b02      	subs	r3, #2
    1b9a:	425a      	negs	r2, r3
    1b9c:	4153      	adcs	r3, r2
    1b9e:	b2db      	uxtb	r3, r3
}
    1ba0:	0018      	movs	r0, r3
    1ba2:	46bd      	mov	sp, r7
    1ba4:	b002      	add	sp, #8
    1ba6:	bd80      	pop	{r7, pc}
    1ba8:	200000e4 	.word	0x200000e4
    1bac:	00061a80 	.word	0x00061a80
    1bb0:	20000104 	.word	0x20000104
    1bb4:	20000108 	.word	0x20000108
    1bb8:	00001bbd 	.word	0x00001bbd

00001bbc <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1bbc:	b5b0      	push	{r4, r5, r7, lr}
    1bbe:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1bc0:	4b09      	ldr	r3, [pc, #36]	; (1be8 <sd_mmc_configure_slot+0x2c>)
    1bc2:	7818      	ldrb	r0, [r3, #0]
    1bc4:	4b09      	ldr	r3, [pc, #36]	; (1bec <sd_mmc_configure_slot+0x30>)
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1bca:	4b08      	ldr	r3, [pc, #32]	; (1bec <sd_mmc_configure_slot+0x30>)
    1bcc:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1bce:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1bd0:	4b06      	ldr	r3, [pc, #24]	; (1bec <sd_mmc_configure_slot+0x30>)
    1bd2:	681b      	ldr	r3, [r3, #0]
    1bd4:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1bd6:	1e5c      	subs	r4, r3, #1
    1bd8:	41a3      	sbcs	r3, r4
    1bda:	b2db      	uxtb	r3, r3
    1bdc:	4c04      	ldr	r4, [pc, #16]	; (1bf0 <sd_mmc_configure_slot+0x34>)
    1bde:	47a0      	blx	r4
}
    1be0:	46c0      	nop			; (mov r8, r8)
    1be2:	46bd      	mov	sp, r7
    1be4:	bdb0      	pop	{r4, r5, r7, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	20000104 	.word	0x20000104
    1bec:	20000108 	.word	0x20000108
    1bf0:	00002d51 	.word	0x00002d51

00001bf4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    1bf4:	b580      	push	{r7, lr}
    1bf6:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1bf8:	4b05      	ldr	r3, [pc, #20]	; (1c10 <sd_mmc_deselect_slot+0x1c>)
    1bfa:	781b      	ldrb	r3, [r3, #0]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d104      	bne.n	1c0a <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    1c00:	4b03      	ldr	r3, [pc, #12]	; (1c10 <sd_mmc_deselect_slot+0x1c>)
    1c02:	781b      	ldrb	r3, [r3, #0]
    1c04:	0018      	movs	r0, r3
    1c06:	4b03      	ldr	r3, [pc, #12]	; (1c14 <sd_mmc_deselect_slot+0x20>)
    1c08:	4798      	blx	r3
	}
}
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	46bd      	mov	sp, r7
    1c0e:	bd80      	pop	{r7, pc}
    1c10:	20000104 	.word	0x20000104
    1c14:	00002dd9 	.word	0x00002dd9

00001c18 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b082      	sub	sp, #8
    1c1c:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    1c1e:	1dfb      	adds	r3, r7, #7
    1c20:	2200      	movs	r2, #0
    1c22:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1c24:	4b59      	ldr	r3, [pc, #356]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	2201      	movs	r2, #1
    1c2a:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1c2c:	4b57      	ldr	r3, [pc, #348]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	2200      	movs	r2, #0
    1c32:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1c34:	4b55      	ldr	r3, [pc, #340]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1c36:	681b      	ldr	r3, [r3, #0]
    1c38:	2200      	movs	r2, #0
    1c3a:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1c3c:	4b54      	ldr	r3, [pc, #336]	; (1d90 <sd_mmc_spi_card_init+0x178>)
    1c3e:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1c40:	2388      	movs	r3, #136	; 0x88
    1c42:	015b      	lsls	r3, r3, #5
    1c44:	2100      	movs	r1, #0
    1c46:	0018      	movs	r0, r3
    1c48:	4b52      	ldr	r3, [pc, #328]	; (1d94 <sd_mmc_spi_card_init+0x17c>)
    1c4a:	4798      	blx	r3
    1c4c:	0003      	movs	r3, r0
    1c4e:	001a      	movs	r2, r3
    1c50:	2301      	movs	r3, #1
    1c52:	4053      	eors	r3, r2
    1c54:	b2db      	uxtb	r3, r3
    1c56:	2b00      	cmp	r3, #0
    1c58:	d001      	beq.n	1c5e <sd_mmc_spi_card_init+0x46>
		return false;
    1c5a:	2300      	movs	r3, #0
    1c5c:	e092      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1c5e:	1dfb      	adds	r3, r7, #7
    1c60:	0018      	movs	r0, r3
    1c62:	4b4d      	ldr	r3, [pc, #308]	; (1d98 <sd_mmc_spi_card_init+0x180>)
    1c64:	4798      	blx	r3
    1c66:	0003      	movs	r3, r0
    1c68:	001a      	movs	r2, r3
    1c6a:	2301      	movs	r3, #1
    1c6c:	4053      	eors	r3, r2
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	d001      	beq.n	1c78 <sd_mmc_spi_card_init+0x60>
		return false;
    1c74:	2300      	movs	r3, #0
    1c76:	e085      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1c78:	4b48      	ldr	r3, [pc, #288]	; (1d9c <sd_mmc_spi_card_init+0x184>)
    1c7a:	4798      	blx	r3
    1c7c:	0003      	movs	r3, r0
    1c7e:	001a      	movs	r2, r3
    1c80:	2301      	movs	r3, #1
    1c82:	4053      	eors	r3, r2
    1c84:	b2db      	uxtb	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	d001      	beq.n	1c8e <sd_mmc_spi_card_init+0x76>
		return false;
    1c8a:	2300      	movs	r3, #0
    1c8c:	e07a      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c8e:	4b3f      	ldr	r3, [pc, #252]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	7adb      	ldrb	r3, [r3, #11]
    1c94:	001a      	movs	r2, r3
    1c96:	2301      	movs	r3, #1
    1c98:	4013      	ands	r3, r2
    1c9a:	d021      	beq.n	1ce0 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1c9c:	1dfb      	adds	r3, r7, #7
    1c9e:	781b      	ldrb	r3, [r3, #0]
    1ca0:	0018      	movs	r0, r3
    1ca2:	4b3f      	ldr	r3, [pc, #252]	; (1da0 <sd_mmc_spi_card_init+0x188>)
    1ca4:	4798      	blx	r3
    1ca6:	0003      	movs	r3, r0
    1ca8:	001a      	movs	r2, r3
    1caa:	2301      	movs	r3, #1
    1cac:	4053      	eors	r3, r2
    1cae:	b2db      	uxtb	r3, r3
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d007      	beq.n	1cc4 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1cb4:	4b35      	ldr	r3, [pc, #212]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	2202      	movs	r2, #2
    1cba:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1cbc:	4b39      	ldr	r3, [pc, #228]	; (1da4 <sd_mmc_spi_card_init+0x18c>)
    1cbe:	4798      	blx	r3
    1cc0:	0003      	movs	r3, r0
    1cc2:	e05f      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1cc4:	4b38      	ldr	r3, [pc, #224]	; (1da8 <sd_mmc_spi_card_init+0x190>)
    1cc6:	2100      	movs	r1, #0
    1cc8:	0018      	movs	r0, r3
    1cca:	4b32      	ldr	r3, [pc, #200]	; (1d94 <sd_mmc_spi_card_init+0x17c>)
    1ccc:	4798      	blx	r3
    1cce:	0003      	movs	r3, r0
    1cd0:	001a      	movs	r2, r3
    1cd2:	2301      	movs	r3, #1
    1cd4:	4053      	eors	r3, r2
    1cd6:	b2db      	uxtb	r3, r3
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d001      	beq.n	1ce0 <sd_mmc_spi_card_init+0xc8>
			return false;
    1cdc:	2300      	movs	r3, #0
    1cde:	e051      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1ce0:	4b2a      	ldr	r3, [pc, #168]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1ce2:	681b      	ldr	r3, [r3, #0]
    1ce4:	7adb      	ldrb	r3, [r3, #11]
    1ce6:	001a      	movs	r2, r3
    1ce8:	2301      	movs	r3, #1
    1cea:	4013      	ands	r3, r2
    1cec:	d017      	beq.n	1d1e <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1cee:	4b2f      	ldr	r3, [pc, #188]	; (1dac <sd_mmc_spi_card_init+0x194>)
    1cf0:	4798      	blx	r3
    1cf2:	0003      	movs	r3, r0
    1cf4:	001a      	movs	r2, r3
    1cf6:	2301      	movs	r3, #1
    1cf8:	4053      	eors	r3, r2
    1cfa:	b2db      	uxtb	r3, r3
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d001      	beq.n	1d04 <sd_mmc_spi_card_init+0xec>
			return false;
    1d00:	2300      	movs	r3, #0
    1d02:	e03f      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1d04:	4b2a      	ldr	r3, [pc, #168]	; (1db0 <sd_mmc_spi_card_init+0x198>)
    1d06:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1d08:	4b2a      	ldr	r3, [pc, #168]	; (1db4 <sd_mmc_spi_card_init+0x19c>)
    1d0a:	4798      	blx	r3
    1d0c:	0003      	movs	r3, r0
    1d0e:	001a      	movs	r2, r3
    1d10:	2301      	movs	r3, #1
    1d12:	4053      	eors	r3, r2
    1d14:	b2db      	uxtb	r3, r3
    1d16:	2b00      	cmp	r3, #0
    1d18:	d001      	beq.n	1d1e <sd_mmc_spi_card_init+0x106>
			return false;
    1d1a:	2300      	movs	r3, #0
    1d1c:	e032      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1d1e:	4b1b      	ldr	r3, [pc, #108]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	7adb      	ldrb	r3, [r3, #11]
    1d24:	001a      	movs	r2, r3
    1d26:	2301      	movs	r3, #1
    1d28:	4013      	ands	r3, r2
    1d2a:	d016      	beq.n	1d5a <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1d2c:	4b17      	ldr	r3, [pc, #92]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1d2e:	681b      	ldr	r3, [r3, #0]
    1d30:	7adb      	ldrb	r3, [r3, #11]
    1d32:	001a      	movs	r2, r3
    1d34:	2308      	movs	r3, #8
    1d36:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1d38:	d10f      	bne.n	1d5a <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1d3a:	2380      	movs	r3, #128	; 0x80
    1d3c:	009b      	lsls	r3, r3, #2
    1d3e:	4a1e      	ldr	r2, [pc, #120]	; (1db8 <sd_mmc_spi_card_init+0x1a0>)
    1d40:	0019      	movs	r1, r3
    1d42:	0010      	movs	r0, r2
    1d44:	4b13      	ldr	r3, [pc, #76]	; (1d94 <sd_mmc_spi_card_init+0x17c>)
    1d46:	4798      	blx	r3
    1d48:	0003      	movs	r3, r0
    1d4a:	001a      	movs	r2, r3
    1d4c:	2301      	movs	r3, #1
    1d4e:	4053      	eors	r3, r2
    1d50:	b2db      	uxtb	r3, r3
    1d52:	2b00      	cmp	r3, #0
    1d54:	d001      	beq.n	1d5a <sd_mmc_spi_card_init+0x142>
			return false;
    1d56:	2300      	movs	r3, #0
    1d58:	e014      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1d5a:	4b0c      	ldr	r3, [pc, #48]	; (1d8c <sd_mmc_spi_card_init+0x174>)
    1d5c:	681b      	ldr	r3, [r3, #0]
    1d5e:	7adb      	ldrb	r3, [r3, #11]
    1d60:	001a      	movs	r2, r3
    1d62:	2301      	movs	r3, #1
    1d64:	4013      	ands	r3, r2
    1d66:	d00a      	beq.n	1d7e <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1d68:	4b14      	ldr	r3, [pc, #80]	; (1dbc <sd_mmc_spi_card_init+0x1a4>)
    1d6a:	4798      	blx	r3
    1d6c:	0003      	movs	r3, r0
    1d6e:	001a      	movs	r2, r3
    1d70:	2301      	movs	r3, #1
    1d72:	4053      	eors	r3, r2
    1d74:	b2db      	uxtb	r3, r3
    1d76:	2b00      	cmp	r3, #0
    1d78:	d001      	beq.n	1d7e <sd_mmc_spi_card_init+0x166>
			return false;
    1d7a:	2300      	movs	r3, #0
    1d7c:	e002      	b.n	1d84 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1d7e:	4b10      	ldr	r3, [pc, #64]	; (1dc0 <sd_mmc_spi_card_init+0x1a8>)
    1d80:	4798      	blx	r3
	return true;
    1d82:	2301      	movs	r3, #1
}
    1d84:	0018      	movs	r0, r3
    1d86:	46bd      	mov	sp, r7
    1d88:	b002      	add	sp, #8
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	20000108 	.word	0x20000108
    1d90:	00002e1d 	.word	0x00002e1d
    1d94:	00002e69 	.word	0x00002e69
    1d98:	0000156d 	.word	0x0000156d
    1d9c:	00001561 	.word	0x00001561
    1da0:	0000147d 	.word	0x0000147d
    1da4:	00001dc5 	.word	0x00001dc5
    1da8:	0000113b 	.word	0x0000113b
    1dac:	00001709 	.word	0x00001709
    1db0:	000018a9 	.word	0x000018a9
    1db4:	000019f1 	.word	0x000019f1
    1db8:	00001110 	.word	0x00001110
    1dbc:	00001995 	.word	0x00001995
    1dc0:	00001bbd 	.word	0x00001bbd

00001dc4 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1dca:	2388      	movs	r3, #136	; 0x88
    1dcc:	015b      	lsls	r3, r3, #5
    1dce:	2100      	movs	r1, #0
    1dd0:	0018      	movs	r0, r3
    1dd2:	4b32      	ldr	r3, [pc, #200]	; (1e9c <sd_mmc_spi_install_mmc+0xd8>)
    1dd4:	4798      	blx	r3
    1dd6:	0003      	movs	r3, r0
    1dd8:	001a      	movs	r2, r3
    1dda:	2301      	movs	r3, #1
    1ddc:	4053      	eors	r3, r2
    1dde:	b2db      	uxtb	r3, r3
    1de0:	2b00      	cmp	r3, #0
    1de2:	d001      	beq.n	1de8 <sd_mmc_spi_install_mmc+0x24>
		return false;
    1de4:	2300      	movs	r3, #0
    1de6:	e055      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1de8:	4b2d      	ldr	r3, [pc, #180]	; (1ea0 <sd_mmc_spi_install_mmc+0xdc>)
    1dea:	4798      	blx	r3
    1dec:	0003      	movs	r3, r0
    1dee:	001a      	movs	r2, r3
    1df0:	2301      	movs	r3, #1
    1df2:	4053      	eors	r3, r2
    1df4:	b2db      	uxtb	r3, r3
    1df6:	2b00      	cmp	r3, #0
    1df8:	d001      	beq.n	1dfe <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1dfa:	2300      	movs	r3, #0
    1dfc:	e04a      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1dfe:	4b29      	ldr	r3, [pc, #164]	; (1ea4 <sd_mmc_spi_install_mmc+0xe0>)
    1e00:	2100      	movs	r1, #0
    1e02:	0018      	movs	r0, r3
    1e04:	4b25      	ldr	r3, [pc, #148]	; (1e9c <sd_mmc_spi_install_mmc+0xd8>)
    1e06:	4798      	blx	r3
    1e08:	0003      	movs	r3, r0
    1e0a:	001a      	movs	r2, r3
    1e0c:	2301      	movs	r3, #1
    1e0e:	4053      	eors	r3, r2
    1e10:	b2db      	uxtb	r3, r3
    1e12:	2b00      	cmp	r3, #0
    1e14:	d001      	beq.n	1e1a <sd_mmc_spi_install_mmc+0x56>
		return false;
    1e16:	2300      	movs	r3, #0
    1e18:	e03c      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1e1a:	4b23      	ldr	r3, [pc, #140]	; (1ea8 <sd_mmc_spi_install_mmc+0xe4>)
    1e1c:	4798      	blx	r3
    1e1e:	0003      	movs	r3, r0
    1e20:	001a      	movs	r2, r3
    1e22:	2301      	movs	r3, #1
    1e24:	4053      	eors	r3, r2
    1e26:	b2db      	uxtb	r3, r3
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d001      	beq.n	1e30 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1e2c:	2300      	movs	r3, #0
    1e2e:	e031      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1e30:	4b1e      	ldr	r3, [pc, #120]	; (1eac <sd_mmc_spi_install_mmc+0xe8>)
    1e32:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1e34:	4b1e      	ldr	r3, [pc, #120]	; (1eb0 <sd_mmc_spi_install_mmc+0xec>)
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	7b1b      	ldrb	r3, [r3, #12]
    1e3a:	2b3f      	cmp	r3, #63	; 0x3f
    1e3c:	d90c      	bls.n	1e58 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1e3e:	1dfb      	adds	r3, r7, #7
    1e40:	0018      	movs	r0, r3
    1e42:	4b1c      	ldr	r3, [pc, #112]	; (1eb4 <sd_mmc_spi_install_mmc+0xf0>)
    1e44:	4798      	blx	r3
    1e46:	0003      	movs	r3, r0
    1e48:	001a      	movs	r2, r3
    1e4a:	2301      	movs	r3, #1
    1e4c:	4053      	eors	r3, r2
    1e4e:	b2db      	uxtb	r3, r3
    1e50:	2b00      	cmp	r3, #0
    1e52:	d001      	beq.n	1e58 <sd_mmc_spi_install_mmc+0x94>
			return false;
    1e54:	2300      	movs	r3, #0
    1e56:	e01d      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1e58:	2380      	movs	r3, #128	; 0x80
    1e5a:	009b      	lsls	r3, r3, #2
    1e5c:	4a16      	ldr	r2, [pc, #88]	; (1eb8 <sd_mmc_spi_install_mmc+0xf4>)
    1e5e:	0019      	movs	r1, r3
    1e60:	0010      	movs	r0, r2
    1e62:	4b0e      	ldr	r3, [pc, #56]	; (1e9c <sd_mmc_spi_install_mmc+0xd8>)
    1e64:	4798      	blx	r3
    1e66:	0003      	movs	r3, r0
    1e68:	001a      	movs	r2, r3
    1e6a:	2301      	movs	r3, #1
    1e6c:	4053      	eors	r3, r2
    1e6e:	b2db      	uxtb	r3, r3
    1e70:	2b00      	cmp	r3, #0
    1e72:	d001      	beq.n	1e78 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1e74:	2300      	movs	r3, #0
    1e76:	e00d      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1e78:	4b10      	ldr	r3, [pc, #64]	; (1ebc <sd_mmc_spi_install_mmc+0xf8>)
    1e7a:	4798      	blx	r3
    1e7c:	0003      	movs	r3, r0
    1e7e:	001a      	movs	r2, r3
    1e80:	2301      	movs	r3, #1
    1e82:	4053      	eors	r3, r2
    1e84:	b2db      	uxtb	r3, r3
    1e86:	2b00      	cmp	r3, #0
    1e88:	d001      	beq.n	1e8e <sd_mmc_spi_install_mmc+0xca>
		return false;
    1e8a:	2300      	movs	r3, #0
    1e8c:	e002      	b.n	1e94 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1e8e:	4b0c      	ldr	r3, [pc, #48]	; (1ec0 <sd_mmc_spi_install_mmc+0xfc>)
    1e90:	4798      	blx	r3
	return true;
    1e92:	2301      	movs	r3, #1
}
    1e94:	0018      	movs	r0, r3
    1e96:	46bd      	mov	sp, r7
    1e98:	b002      	add	sp, #8
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	00002e69 	.word	0x00002e69
    1ea0:	000013d1 	.word	0x000013d1
    1ea4:	0000113b 	.word	0x0000113b
    1ea8:	00001709 	.word	0x00001709
    1eac:	00001779 	.word	0x00001779
    1eb0:	20000108 	.word	0x20000108
    1eb4:	000015dd 	.word	0x000015dd
    1eb8:	00001110 	.word	0x00001110
    1ebc:	00001995 	.word	0x00001995
    1ec0:	00001bbd 	.word	0x00001bbd

00001ec4 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b082      	sub	sp, #8
    1ec8:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1eca:	1dfb      	adds	r3, r7, #7
    1ecc:	2200      	movs	r2, #0
    1ece:	701a      	strb	r2, [r3, #0]
    1ed0:	e00c      	b.n	1eec <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1ed2:	1dfb      	adds	r3, r7, #7
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	4a0c      	ldr	r2, [pc, #48]	; (1f08 <sd_mmc_init+0x44>)
    1ed8:	015b      	lsls	r3, r3, #5
    1eda:	18d3      	adds	r3, r2, r3
    1edc:	330a      	adds	r3, #10
    1ede:	2204      	movs	r2, #4
    1ee0:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1ee2:	1dfb      	adds	r3, r7, #7
    1ee4:	781a      	ldrb	r2, [r3, #0]
    1ee6:	1dfb      	adds	r3, r7, #7
    1ee8:	3201      	adds	r2, #1
    1eea:	701a      	strb	r2, [r3, #0]
    1eec:	1dfb      	adds	r3, r7, #7
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d0ee      	beq.n	1ed2 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1ef4:	4b05      	ldr	r3, [pc, #20]	; (1f0c <sd_mmc_init+0x48>)
    1ef6:	22ff      	movs	r2, #255	; 0xff
    1ef8:	701a      	strb	r2, [r3, #0]
	driver_init();
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <sd_mmc_init+0x4c>)
    1efc:	4798      	blx	r3
}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	46bd      	mov	sp, r7
    1f02:	b002      	add	sp, #8
    1f04:	bd80      	pop	{r7, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	200000e4 	.word	0x200000e4
    1f0c:	20000104 	.word	0x20000104
    1f10:	00002c89 	.word	0x00002c89

00001f14 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1f14:	b590      	push	{r4, r7, lr}
    1f16:	b085      	sub	sp, #20
    1f18:	af00      	add	r7, sp, #0
    1f1a:	0002      	movs	r2, r0
    1f1c:	1dfb      	adds	r3, r7, #7
    1f1e:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1f20:	230f      	movs	r3, #15
    1f22:	18fc      	adds	r4, r7, r3
    1f24:	1dfb      	adds	r3, r7, #7
    1f26:	781b      	ldrb	r3, [r3, #0]
    1f28:	0018      	movs	r0, r3
    1f2a:	4b13      	ldr	r3, [pc, #76]	; (1f78 <sd_mmc_check+0x64>)
    1f2c:	4798      	blx	r3
    1f2e:	0003      	movs	r3, r0
    1f30:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1f32:	230f      	movs	r3, #15
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	781b      	ldrb	r3, [r3, #0]
    1f38:	2b01      	cmp	r3, #1
    1f3a:	d005      	beq.n	1f48 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1f3c:	4b0f      	ldr	r3, [pc, #60]	; (1f7c <sd_mmc_check+0x68>)
    1f3e:	4798      	blx	r3
		return sd_mmc_err;
    1f40:	230f      	movs	r3, #15
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	e012      	b.n	1f6e <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1f48:	4b0d      	ldr	r3, [pc, #52]	; (1f80 <sd_mmc_check+0x6c>)
    1f4a:	4798      	blx	r3
    1f4c:	1e03      	subs	r3, r0, #0
    1f4e:	d007      	beq.n	1f60 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1f50:	4b0c      	ldr	r3, [pc, #48]	; (1f84 <sd_mmc_check+0x70>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	2200      	movs	r2, #0
    1f56:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1f58:	4b08      	ldr	r3, [pc, #32]	; (1f7c <sd_mmc_check+0x68>)
    1f5a:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1f5c:	2301      	movs	r3, #1
    1f5e:	e006      	b.n	1f6e <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1f60:	4b08      	ldr	r3, [pc, #32]	; (1f84 <sd_mmc_check+0x70>)
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	2203      	movs	r2, #3
    1f66:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1f68:	4b04      	ldr	r3, [pc, #16]	; (1f7c <sd_mmc_check+0x68>)
    1f6a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1f6c:	2303      	movs	r3, #3
}
    1f6e:	0018      	movs	r0, r3
    1f70:	46bd      	mov	sp, r7
    1f72:	b005      	add	sp, #20
    1f74:	bd90      	pop	{r4, r7, pc}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	00001af9 	.word	0x00001af9
    1f7c:	00001bf5 	.word	0x00001bf5
    1f80:	00001c19 	.word	0x00001c19
    1f84:	20000108 	.word	0x20000108

00001f88 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	b082      	sub	sp, #8
    1f8c:	af00      	add	r7, sp, #0
    1f8e:	0002      	movs	r2, r0
    1f90:	1dfb      	adds	r3, r7, #7
    1f92:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1f94:	1dfb      	adds	r3, r7, #7
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	0018      	movs	r0, r3
    1f9a:	4b07      	ldr	r3, [pc, #28]	; (1fb8 <sd_mmc_get_type+0x30>)
    1f9c:	4798      	blx	r3
    1f9e:	1e03      	subs	r3, r0, #0
    1fa0:	d001      	beq.n	1fa6 <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1fa2:	2300      	movs	r3, #0
    1fa4:	e004      	b.n	1fb0 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1fa6:	4b05      	ldr	r3, [pc, #20]	; (1fbc <sd_mmc_get_type+0x34>)
    1fa8:	4798      	blx	r3
	return sd_mmc_card->type;
    1faa:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <sd_mmc_get_type+0x38>)
    1fac:	681b      	ldr	r3, [r3, #0]
    1fae:	7adb      	ldrb	r3, [r3, #11]
}
    1fb0:	0018      	movs	r0, r3
    1fb2:	46bd      	mov	sp, r7
    1fb4:	b002      	add	sp, #8
    1fb6:	bd80      	pop	{r7, pc}
    1fb8:	00001af9 	.word	0x00001af9
    1fbc:	00001bf5 	.word	0x00001bf5
    1fc0:	20000108 	.word	0x20000108

00001fc4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	b082      	sub	sp, #8
    1fc8:	af00      	add	r7, sp, #0
    1fca:	0002      	movs	r2, r0
    1fcc:	1dfb      	adds	r3, r7, #7
    1fce:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1fd0:	1dfb      	adds	r3, r7, #7
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	0018      	movs	r0, r3
    1fd6:	4b07      	ldr	r3, [pc, #28]	; (1ff4 <sd_mmc_get_capacity+0x30>)
    1fd8:	4798      	blx	r3
    1fda:	1e03      	subs	r3, r0, #0
    1fdc:	d001      	beq.n	1fe2 <sd_mmc_get_capacity+0x1e>
		return 0;
    1fde:	2300      	movs	r3, #0
    1fe0:	e004      	b.n	1fec <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <sd_mmc_get_capacity+0x34>)
    1fe4:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1fe6:	4b05      	ldr	r3, [pc, #20]	; (1ffc <sd_mmc_get_capacity+0x38>)
    1fe8:	681b      	ldr	r3, [r3, #0]
    1fea:	685b      	ldr	r3, [r3, #4]
}
    1fec:	0018      	movs	r0, r3
    1fee:	46bd      	mov	sp, r7
    1ff0:	b002      	add	sp, #8
    1ff2:	bd80      	pop	{r7, pc}
    1ff4:	00001af9 	.word	0x00001af9
    1ff8:	00001bf5 	.word	0x00001bf5
    1ffc:	20000108 	.word	0x20000108

00002000 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    2000:	b580      	push	{r7, lr}
    2002:	b082      	sub	sp, #8
    2004:	af00      	add	r7, sp, #0
    2006:	0002      	movs	r2, r0
    2008:	1dfb      	adds	r3, r7, #7
    200a:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    200c:	2300      	movs	r3, #0
}
    200e:	0018      	movs	r0, r3
    2010:	46bd      	mov	sp, r7
    2012:	b002      	add	sp, #8
    2014:	bd80      	pop	{r7, pc}
	...

00002018 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    2018:	b590      	push	{r4, r7, lr}
    201a:	b089      	sub	sp, #36	; 0x24
    201c:	af02      	add	r7, sp, #8
    201e:	6039      	str	r1, [r7, #0]
    2020:	0011      	movs	r1, r2
    2022:	1dfb      	adds	r3, r7, #7
    2024:	1c02      	adds	r2, r0, #0
    2026:	701a      	strb	r2, [r3, #0]
    2028:	1d3b      	adds	r3, r7, #4
    202a:	1c0a      	adds	r2, r1, #0
    202c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    202e:	230f      	movs	r3, #15
    2030:	18fc      	adds	r4, r7, r3
    2032:	1dfb      	adds	r3, r7, #7
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	0018      	movs	r0, r3
    2038:	4b29      	ldr	r3, [pc, #164]	; (20e0 <sd_mmc_init_read_blocks+0xc8>)
    203a:	4798      	blx	r3
    203c:	0003      	movs	r3, r0
    203e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    2040:	230f      	movs	r3, #15
    2042:	18fb      	adds	r3, r7, r3
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	2b00      	cmp	r3, #0
    2048:	d003      	beq.n	2052 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    204a:	230f      	movs	r3, #15
    204c:	18fb      	adds	r3, r7, r3
    204e:	781b      	ldrb	r3, [r3, #0]
    2050:	e041      	b.n	20d6 <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    2052:	4b24      	ldr	r3, [pc, #144]	; (20e4 <sd_mmc_init_read_blocks+0xcc>)
    2054:	4798      	blx	r3
    2056:	0003      	movs	r3, r0
    2058:	001a      	movs	r2, r3
    205a:	2301      	movs	r3, #1
    205c:	4053      	eors	r3, r2
    205e:	b2db      	uxtb	r3, r3
    2060:	2b00      	cmp	r3, #0
    2062:	d003      	beq.n	206c <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    2064:	4b20      	ldr	r3, [pc, #128]	; (20e8 <sd_mmc_init_read_blocks+0xd0>)
    2066:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    2068:	2305      	movs	r3, #5
    206a:	e034      	b.n	20d6 <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    206c:	1d3b      	adds	r3, r7, #4
    206e:	881b      	ldrh	r3, [r3, #0]
    2070:	2b01      	cmp	r3, #1
    2072:	d902      	bls.n	207a <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    2074:	4b1d      	ldr	r3, [pc, #116]	; (20ec <sd_mmc_init_read_blocks+0xd4>)
    2076:	617b      	str	r3, [r7, #20]
    2078:	e001      	b.n	207e <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    207a:	4b1d      	ldr	r3, [pc, #116]	; (20f0 <sd_mmc_init_read_blocks+0xd8>)
    207c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    207e:	4b1d      	ldr	r3, [pc, #116]	; (20f4 <sd_mmc_init_read_blocks+0xdc>)
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	7adb      	ldrb	r3, [r3, #11]
    2084:	001a      	movs	r2, r3
    2086:	2308      	movs	r3, #8
    2088:	4013      	ands	r3, r2
    208a:	d002      	beq.n	2092 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    208c:	683b      	ldr	r3, [r7, #0]
    208e:	613b      	str	r3, [r7, #16]
    2090:	e002      	b.n	2098 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    2092:	683b      	ldr	r3, [r7, #0]
    2094:	025b      	lsls	r3, r3, #9
    2096:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    2098:	1d3b      	adds	r3, r7, #4
    209a:	881c      	ldrh	r4, [r3, #0]
    209c:	2380      	movs	r3, #128	; 0x80
    209e:	009a      	lsls	r2, r3, #2
    20a0:	6939      	ldr	r1, [r7, #16]
    20a2:	6978      	ldr	r0, [r7, #20]
    20a4:	2301      	movs	r3, #1
    20a6:	9300      	str	r3, [sp, #0]
    20a8:	0023      	movs	r3, r4
    20aa:	4c13      	ldr	r4, [pc, #76]	; (20f8 <sd_mmc_init_read_blocks+0xe0>)
    20ac:	47a0      	blx	r4
    20ae:	0003      	movs	r3, r0
    20b0:	001a      	movs	r2, r3
    20b2:	2301      	movs	r3, #1
    20b4:	4053      	eors	r3, r2
    20b6:	b2db      	uxtb	r3, r3
    20b8:	2b00      	cmp	r3, #0
    20ba:	d003      	beq.n	20c4 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    20bc:	4b0a      	ldr	r3, [pc, #40]	; (20e8 <sd_mmc_init_read_blocks+0xd0>)
    20be:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    20c0:	2305      	movs	r3, #5
    20c2:	e008      	b.n	20d6 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    20c4:	4b0d      	ldr	r3, [pc, #52]	; (20fc <sd_mmc_init_read_blocks+0xe4>)
    20c6:	1d3a      	adds	r2, r7, #4
    20c8:	8812      	ldrh	r2, [r2, #0]
    20ca:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    20cc:	4b0c      	ldr	r3, [pc, #48]	; (2100 <sd_mmc_init_read_blocks+0xe8>)
    20ce:	1d3a      	adds	r2, r7, #4
    20d0:	8812      	ldrh	r2, [r2, #0]
    20d2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    20d4:	2300      	movs	r3, #0
}
    20d6:	0018      	movs	r0, r3
    20d8:	46bd      	mov	sp, r7
    20da:	b007      	add	sp, #28
    20dc:	bd90      	pop	{r4, r7, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	00001af9 	.word	0x00001af9
    20e4:	00001995 	.word	0x00001995
    20e8:	00001bf5 	.word	0x00001bf5
    20ec:	00101112 	.word	0x00101112
    20f0:	00081111 	.word	0x00081111
    20f4:	20000108 	.word	0x20000108
    20f8:	00002e91 	.word	0x00002e91
    20fc:	2000010e 	.word	0x2000010e
    2100:	2000010c 	.word	0x2000010c

00002104 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    2104:	b580      	push	{r7, lr}
    2106:	b082      	sub	sp, #8
    2108:	af00      	add	r7, sp, #0
    210a:	6078      	str	r0, [r7, #4]
    210c:	000a      	movs	r2, r1
    210e:	1cbb      	adds	r3, r7, #2
    2110:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    2112:	1cbb      	adds	r3, r7, #2
    2114:	881a      	ldrh	r2, [r3, #0]
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	0011      	movs	r1, r2
    211a:	0018      	movs	r0, r3
    211c:	4b0d      	ldr	r3, [pc, #52]	; (2154 <sd_mmc_start_read_blocks+0x50>)
    211e:	4798      	blx	r3
    2120:	0003      	movs	r3, r0
    2122:	001a      	movs	r2, r3
    2124:	2301      	movs	r3, #1
    2126:	4053      	eors	r3, r2
    2128:	b2db      	uxtb	r3, r3
    212a:	2b00      	cmp	r3, #0
    212c:	d004      	beq.n	2138 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    212e:	4b0a      	ldr	r3, [pc, #40]	; (2158 <sd_mmc_start_read_blocks+0x54>)
    2130:	2200      	movs	r2, #0
    2132:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2134:	2305      	movs	r3, #5
    2136:	e008      	b.n	214a <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2138:	4b07      	ldr	r3, [pc, #28]	; (2158 <sd_mmc_start_read_blocks+0x54>)
    213a:	881a      	ldrh	r2, [r3, #0]
    213c:	1cbb      	adds	r3, r7, #2
    213e:	881b      	ldrh	r3, [r3, #0]
    2140:	1ad3      	subs	r3, r2, r3
    2142:	b29a      	uxth	r2, r3
    2144:	4b04      	ldr	r3, [pc, #16]	; (2158 <sd_mmc_start_read_blocks+0x54>)
    2146:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2148:	2300      	movs	r3, #0
}
    214a:	0018      	movs	r0, r3
    214c:	46bd      	mov	sp, r7
    214e:	b002      	add	sp, #8
    2150:	bd80      	pop	{r7, pc}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	00003161 	.word	0x00003161
    2158:	2000010e 	.word	0x2000010e

0000215c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    215c:	b580      	push	{r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	af00      	add	r7, sp, #0
    2162:	0002      	movs	r2, r0
    2164:	1dfb      	adds	r3, r7, #7
    2166:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    2168:	4b1c      	ldr	r3, [pc, #112]	; (21dc <sd_mmc_wait_end_of_read_blocks+0x80>)
    216a:	4798      	blx	r3
    216c:	0003      	movs	r3, r0
    216e:	001a      	movs	r2, r3
    2170:	2301      	movs	r3, #1
    2172:	4053      	eors	r3, r2
    2174:	b2db      	uxtb	r3, r3
    2176:	2b00      	cmp	r3, #0
    2178:	d001      	beq.n	217e <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    217a:	2305      	movs	r3, #5
    217c:	e029      	b.n	21d2 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    217e:	1dfb      	adds	r3, r7, #7
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d003      	beq.n	218e <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    2186:	4b16      	ldr	r3, [pc, #88]	; (21e0 <sd_mmc_wait_end_of_read_blocks+0x84>)
    2188:	2200      	movs	r2, #0
    218a:	801a      	strh	r2, [r3, #0]
    218c:	e005      	b.n	219a <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    218e:	4b14      	ldr	r3, [pc, #80]	; (21e0 <sd_mmc_wait_end_of_read_blocks+0x84>)
    2190:	881b      	ldrh	r3, [r3, #0]
    2192:	2b00      	cmp	r3, #0
    2194:	d001      	beq.n	219a <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    2196:	2300      	movs	r3, #0
    2198:	e01b      	b.n	21d2 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    219a:	4b12      	ldr	r3, [pc, #72]	; (21e4 <sd_mmc_wait_end_of_read_blocks+0x88>)
    219c:	881b      	ldrh	r3, [r3, #0]
    219e:	2b01      	cmp	r3, #1
    21a0:	d103      	bne.n	21aa <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    21a2:	4b11      	ldr	r3, [pc, #68]	; (21e8 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    21a4:	4798      	blx	r3
		return SD_MMC_OK;
    21a6:	2300      	movs	r3, #0
    21a8:	e013      	b.n	21d2 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    21aa:	4b10      	ldr	r3, [pc, #64]	; (21ec <sd_mmc_wait_end_of_read_blocks+0x90>)
    21ac:	2100      	movs	r1, #0
    21ae:	0018      	movs	r0, r3
    21b0:	4b0f      	ldr	r3, [pc, #60]	; (21f0 <sd_mmc_wait_end_of_read_blocks+0x94>)
    21b2:	4798      	blx	r3
    21b4:	0003      	movs	r3, r0
    21b6:	001a      	movs	r2, r3
    21b8:	2301      	movs	r3, #1
    21ba:	4053      	eors	r3, r2
    21bc:	b2db      	uxtb	r3, r3
    21be:	2b00      	cmp	r3, #0
    21c0:	d004      	beq.n	21cc <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    21c2:	4b0a      	ldr	r3, [pc, #40]	; (21ec <sd_mmc_wait_end_of_read_blocks+0x90>)
    21c4:	2100      	movs	r1, #0
    21c6:	0018      	movs	r0, r3
    21c8:	4b09      	ldr	r3, [pc, #36]	; (21f0 <sd_mmc_wait_end_of_read_blocks+0x94>)
    21ca:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    21ce:	4798      	blx	r3
	return SD_MMC_OK;
    21d0:	2300      	movs	r3, #0
}
    21d2:	0018      	movs	r0, r3
    21d4:	46bd      	mov	sp, r7
    21d6:	b002      	add	sp, #8
    21d8:	bd80      	pop	{r7, pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	00003205 	.word	0x00003205
    21e0:	2000010e 	.word	0x2000010e
    21e4:	2000010c 	.word	0x2000010c
    21e8:	00001bf5 	.word	0x00001bf5
    21ec:	0000310c 	.word	0x0000310c
    21f0:	00002e69 	.word	0x00002e69

000021f4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    21f4:	b590      	push	{r4, r7, lr}
    21f6:	b089      	sub	sp, #36	; 0x24
    21f8:	af02      	add	r7, sp, #8
    21fa:	6039      	str	r1, [r7, #0]
    21fc:	0011      	movs	r1, r2
    21fe:	1dfb      	adds	r3, r7, #7
    2200:	1c02      	adds	r2, r0, #0
    2202:	701a      	strb	r2, [r3, #0]
    2204:	1d3b      	adds	r3, r7, #4
    2206:	1c0a      	adds	r2, r1, #0
    2208:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    220a:	230f      	movs	r3, #15
    220c:	18fc      	adds	r4, r7, r3
    220e:	1dfb      	adds	r3, r7, #7
    2210:	781b      	ldrb	r3, [r3, #0]
    2212:	0018      	movs	r0, r3
    2214:	4b28      	ldr	r3, [pc, #160]	; (22b8 <sd_mmc_init_write_blocks+0xc4>)
    2216:	4798      	blx	r3
    2218:	0003      	movs	r3, r0
    221a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    221c:	230f      	movs	r3, #15
    221e:	18fb      	adds	r3, r7, r3
    2220:	781b      	ldrb	r3, [r3, #0]
    2222:	2b00      	cmp	r3, #0
    2224:	d003      	beq.n	222e <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    2226:	230f      	movs	r3, #15
    2228:	18fb      	adds	r3, r7, r3
    222a:	781b      	ldrb	r3, [r3, #0]
    222c:	e03f      	b.n	22ae <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    222e:	1dfb      	adds	r3, r7, #7
    2230:	781b      	ldrb	r3, [r3, #0]
    2232:	0018      	movs	r0, r3
    2234:	4b21      	ldr	r3, [pc, #132]	; (22bc <sd_mmc_init_write_blocks+0xc8>)
    2236:	4798      	blx	r3
    2238:	1e03      	subs	r3, r0, #0
    223a:	d003      	beq.n	2244 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    223c:	4b20      	ldr	r3, [pc, #128]	; (22c0 <sd_mmc_init_write_blocks+0xcc>)
    223e:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    2240:	2307      	movs	r3, #7
    2242:	e034      	b.n	22ae <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    2244:	1d3b      	adds	r3, r7, #4
    2246:	881b      	ldrh	r3, [r3, #0]
    2248:	2b01      	cmp	r3, #1
    224a:	d902      	bls.n	2252 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    224c:	4b1d      	ldr	r3, [pc, #116]	; (22c4 <sd_mmc_init_write_blocks+0xd0>)
    224e:	617b      	str	r3, [r7, #20]
    2250:	e001      	b.n	2256 <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    2252:	4b1d      	ldr	r3, [pc, #116]	; (22c8 <sd_mmc_init_write_blocks+0xd4>)
    2254:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    2256:	4b1d      	ldr	r3, [pc, #116]	; (22cc <sd_mmc_init_write_blocks+0xd8>)
    2258:	681b      	ldr	r3, [r3, #0]
    225a:	7adb      	ldrb	r3, [r3, #11]
    225c:	001a      	movs	r2, r3
    225e:	2308      	movs	r3, #8
    2260:	4013      	ands	r3, r2
    2262:	d002      	beq.n	226a <sd_mmc_init_write_blocks+0x76>
		arg = start;
    2264:	683b      	ldr	r3, [r7, #0]
    2266:	613b      	str	r3, [r7, #16]
    2268:	e002      	b.n	2270 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    226a:	683b      	ldr	r3, [r7, #0]
    226c:	025b      	lsls	r3, r3, #9
    226e:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    2270:	1d3b      	adds	r3, r7, #4
    2272:	881c      	ldrh	r4, [r3, #0]
    2274:	2380      	movs	r3, #128	; 0x80
    2276:	009a      	lsls	r2, r3, #2
    2278:	6939      	ldr	r1, [r7, #16]
    227a:	6978      	ldr	r0, [r7, #20]
    227c:	2301      	movs	r3, #1
    227e:	9300      	str	r3, [sp, #0]
    2280:	0023      	movs	r3, r4
    2282:	4c13      	ldr	r4, [pc, #76]	; (22d0 <sd_mmc_init_write_blocks+0xdc>)
    2284:	47a0      	blx	r4
    2286:	0003      	movs	r3, r0
    2288:	001a      	movs	r2, r3
    228a:	2301      	movs	r3, #1
    228c:	4053      	eors	r3, r2
    228e:	b2db      	uxtb	r3, r3
    2290:	2b00      	cmp	r3, #0
    2292:	d003      	beq.n	229c <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    2294:	4b0a      	ldr	r3, [pc, #40]	; (22c0 <sd_mmc_init_write_blocks+0xcc>)
    2296:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    2298:	2305      	movs	r3, #5
    229a:	e008      	b.n	22ae <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    229c:	4b0d      	ldr	r3, [pc, #52]	; (22d4 <sd_mmc_init_write_blocks+0xe0>)
    229e:	1d3a      	adds	r2, r7, #4
    22a0:	8812      	ldrh	r2, [r2, #0]
    22a2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    22a4:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <sd_mmc_init_write_blocks+0xe4>)
    22a6:	1d3a      	adds	r2, r7, #4
    22a8:	8812      	ldrh	r2, [r2, #0]
    22aa:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    22ac:	2300      	movs	r3, #0
}
    22ae:	0018      	movs	r0, r3
    22b0:	46bd      	mov	sp, r7
    22b2:	b007      	add	sp, #28
    22b4:	bd90      	pop	{r4, r7, pc}
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	00001af9 	.word	0x00001af9
    22bc:	00002001 	.word	0x00002001
    22c0:	00001bf5 	.word	0x00001bf5
    22c4:	00109119 	.word	0x00109119
    22c8:	00089118 	.word	0x00089118
    22cc:	20000108 	.word	0x20000108
    22d0:	00002e91 	.word	0x00002e91
    22d4:	2000010e 	.word	0x2000010e
    22d8:	2000010c 	.word	0x2000010c

000022dc <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
    22e4:	000a      	movs	r2, r1
    22e6:	1cbb      	adds	r3, r7, #2
    22e8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    22ea:	1cbb      	adds	r3, r7, #2
    22ec:	881a      	ldrh	r2, [r3, #0]
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	0011      	movs	r1, r2
    22f2:	0018      	movs	r0, r3
    22f4:	4b0d      	ldr	r3, [pc, #52]	; (232c <sd_mmc_start_write_blocks+0x50>)
    22f6:	4798      	blx	r3
    22f8:	0003      	movs	r3, r0
    22fa:	001a      	movs	r2, r3
    22fc:	2301      	movs	r3, #1
    22fe:	4053      	eors	r3, r2
    2300:	b2db      	uxtb	r3, r3
    2302:	2b00      	cmp	r3, #0
    2304:	d004      	beq.n	2310 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    2306:	4b0a      	ldr	r3, [pc, #40]	; (2330 <sd_mmc_start_write_blocks+0x54>)
    2308:	2200      	movs	r2, #0
    230a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    230c:	2305      	movs	r3, #5
    230e:	e008      	b.n	2322 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2310:	4b07      	ldr	r3, [pc, #28]	; (2330 <sd_mmc_start_write_blocks+0x54>)
    2312:	881a      	ldrh	r2, [r3, #0]
    2314:	1cbb      	adds	r3, r7, #2
    2316:	881b      	ldrh	r3, [r3, #0]
    2318:	1ad3      	subs	r3, r2, r3
    231a:	b29a      	uxth	r2, r3
    231c:	4b04      	ldr	r3, [pc, #16]	; (2330 <sd_mmc_start_write_blocks+0x54>)
    231e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2320:	2300      	movs	r3, #0
}
    2322:	0018      	movs	r0, r3
    2324:	46bd      	mov	sp, r7
    2326:	b002      	add	sp, #8
    2328:	bd80      	pop	{r7, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	00003211 	.word	0x00003211
    2330:	2000010e 	.word	0x2000010e

00002334 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    2334:	b580      	push	{r7, lr}
    2336:	b082      	sub	sp, #8
    2338:	af00      	add	r7, sp, #0
    233a:	0002      	movs	r2, r0
    233c:	1dfb      	adds	r3, r7, #7
    233e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2340:	4b13      	ldr	r3, [pc, #76]	; (2390 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    2342:	4798      	blx	r3
    2344:	0003      	movs	r3, r0
    2346:	001a      	movs	r2, r3
    2348:	2301      	movs	r3, #1
    234a:	4053      	eors	r3, r2
    234c:	b2db      	uxtb	r3, r3
    234e:	2b00      	cmp	r3, #0
    2350:	d001      	beq.n	2356 <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    2352:	2305      	movs	r3, #5
    2354:	e018      	b.n	2388 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    2356:	1dfb      	adds	r3, r7, #7
    2358:	781b      	ldrb	r3, [r3, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d003      	beq.n	2366 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    235e:	4b0d      	ldr	r3, [pc, #52]	; (2394 <sd_mmc_wait_end_of_write_blocks+0x60>)
    2360:	2200      	movs	r2, #0
    2362:	801a      	strh	r2, [r3, #0]
    2364:	e005      	b.n	2372 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    2366:	4b0b      	ldr	r3, [pc, #44]	; (2394 <sd_mmc_wait_end_of_write_blocks+0x60>)
    2368:	881b      	ldrh	r3, [r3, #0]
    236a:	2b00      	cmp	r3, #0
    236c:	d001      	beq.n	2372 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    236e:	2300      	movs	r3, #0
    2370:	e00a      	b.n	2388 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    2372:	4b09      	ldr	r3, [pc, #36]	; (2398 <sd_mmc_wait_end_of_write_blocks+0x64>)
    2374:	881b      	ldrh	r3, [r3, #0]
    2376:	2b01      	cmp	r3, #1
    2378:	d103      	bne.n	2382 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    237a:	4b08      	ldr	r3, [pc, #32]	; (239c <sd_mmc_wait_end_of_write_blocks+0x68>)
    237c:	4798      	blx	r3
		return SD_MMC_OK;
    237e:	2300      	movs	r3, #0
    2380:	e002      	b.n	2388 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    2382:	4b06      	ldr	r3, [pc, #24]	; (239c <sd_mmc_wait_end_of_write_blocks+0x68>)
    2384:	4798      	blx	r3
	return SD_MMC_OK;
    2386:	2300      	movs	r3, #0
}
    2388:	0018      	movs	r0, r3
    238a:	46bd      	mov	sp, r7
    238c:	b002      	add	sp, #8
    238e:	bd80      	pop	{r7, pc}
    2390:	000032d1 	.word	0x000032d1
    2394:	2000010e 	.word	0x2000010e
    2398:	2000010c 	.word	0x2000010c
    239c:	00001bf5 	.word	0x00001bf5

000023a0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b082      	sub	sp, #8
    23a4:	af00      	add	r7, sp, #0
    23a6:	0002      	movs	r2, r0
    23a8:	1dfb      	adds	r3, r7, #7
    23aa:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    23ac:	1dfb      	adds	r3, r7, #7
    23ae:	781b      	ldrb	r3, [r3, #0]
    23b0:	0018      	movs	r0, r3
    23b2:	4b16      	ldr	r3, [pc, #88]	; (240c <sd_mmc_test_unit_ready+0x6c>)
    23b4:	4798      	blx	r3
    23b6:	0003      	movs	r3, r0
    23b8:	2b01      	cmp	r3, #1
    23ba:	d019      	beq.n	23f0 <sd_mmc_test_unit_ready+0x50>
    23bc:	2b02      	cmp	r3, #2
    23be:	d019      	beq.n	23f4 <sd_mmc_test_unit_ready+0x54>
    23c0:	2b00      	cmp	r3, #0
    23c2:	d11e      	bne.n	2402 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    23c4:	1dfb      	adds	r3, r7, #7
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	4a11      	ldr	r2, [pc, #68]	; (2410 <sd_mmc_test_unit_ready+0x70>)
    23ca:	5cd3      	ldrb	r3, [r2, r3]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d001      	beq.n	23d4 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    23d0:	2302      	movs	r3, #2
    23d2:	e017      	b.n	2404 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    23d4:	1dfb      	adds	r3, r7, #7
    23d6:	781b      	ldrb	r3, [r3, #0]
    23d8:	0018      	movs	r0, r3
    23da:	4b0e      	ldr	r3, [pc, #56]	; (2414 <sd_mmc_test_unit_ready+0x74>)
    23dc:	4798      	blx	r3
    23de:	0003      	movs	r3, r0
    23e0:	001a      	movs	r2, r3
    23e2:	2303      	movs	r3, #3
    23e4:	4013      	ands	r3, r2
    23e6:	d001      	beq.n	23ec <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    23e8:	2300      	movs	r3, #0
    23ea:	e00b      	b.n	2404 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    23ec:	2302      	movs	r3, #2
    23ee:	e009      	b.n	2404 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    23f0:	2303      	movs	r3, #3
    23f2:	e007      	b.n	2404 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    23f4:	1dfb      	adds	r3, r7, #7
    23f6:	781b      	ldrb	r3, [r3, #0]
    23f8:	4a05      	ldr	r2, [pc, #20]	; (2410 <sd_mmc_test_unit_ready+0x70>)
    23fa:	2100      	movs	r1, #0
    23fc:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    23fe:	2302      	movs	r3, #2
    2400:	e000      	b.n	2404 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    2402:	2301      	movs	r3, #1
	}
}
    2404:	0018      	movs	r0, r3
    2406:	46bd      	mov	sp, r7
    2408:	b002      	add	sp, #8
    240a:	bd80      	pop	{r7, pc}
    240c:	00001f15 	.word	0x00001f15
    2410:	20000110 	.word	0x20000110
    2414:	00001f89 	.word	0x00001f89

00002418 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    2418:	b580      	push	{r7, lr}
    241a:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    241c:	2000      	movs	r0, #0
    241e:	4b03      	ldr	r3, [pc, #12]	; (242c <sd_mmc_test_unit_ready_0+0x14>)
    2420:	4798      	blx	r3
    2422:	0003      	movs	r3, r0
}
    2424:	0018      	movs	r0, r3
    2426:	46bd      	mov	sp, r7
    2428:	bd80      	pop	{r7, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	000023a1 	.word	0x000023a1

00002430 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    2430:	b580      	push	{r7, lr}
    2432:	b082      	sub	sp, #8
    2434:	af00      	add	r7, sp, #0
    2436:	0002      	movs	r2, r0
    2438:	6039      	str	r1, [r7, #0]
    243a:	1dfb      	adds	r3, r7, #7
    243c:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    243e:	1dfb      	adds	r3, r7, #7
    2440:	781b      	ldrb	r3, [r3, #0]
    2442:	0018      	movs	r0, r3
    2444:	4b08      	ldr	r3, [pc, #32]	; (2468 <sd_mmc_read_capacity+0x38>)
    2446:	4798      	blx	r3
    2448:	0003      	movs	r3, r0
    244a:	005b      	lsls	r3, r3, #1
    244c:	1e5a      	subs	r2, r3, #1
    244e:	683b      	ldr	r3, [r7, #0]
    2450:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    2452:	1dfb      	adds	r3, r7, #7
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	0018      	movs	r0, r3
    2458:	4b04      	ldr	r3, [pc, #16]	; (246c <sd_mmc_read_capacity+0x3c>)
    245a:	4798      	blx	r3
    245c:	0003      	movs	r3, r0
}
    245e:	0018      	movs	r0, r3
    2460:	46bd      	mov	sp, r7
    2462:	b002      	add	sp, #8
    2464:	bd80      	pop	{r7, pc}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	00001fc5 	.word	0x00001fc5
    246c:	000023a1 	.word	0x000023a1

00002470 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    2470:	b580      	push	{r7, lr}
    2472:	b082      	sub	sp, #8
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	0019      	movs	r1, r3
    247c:	2000      	movs	r0, #0
    247e:	4b03      	ldr	r3, [pc, #12]	; (248c <sd_mmc_read_capacity_0+0x1c>)
    2480:	4798      	blx	r3
    2482:	0003      	movs	r3, r0
}
    2484:	0018      	movs	r0, r3
    2486:	46bd      	mov	sp, r7
    2488:	b002      	add	sp, #8
    248a:	bd80      	pop	{r7, pc}
    248c:	00002431 	.word	0x00002431

00002490 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    2490:	b580      	push	{r7, lr}
    2492:	b082      	sub	sp, #8
    2494:	af00      	add	r7, sp, #0
    2496:	0002      	movs	r2, r0
    2498:	1dfb      	adds	r3, r7, #7
    249a:	701a      	strb	r2, [r3, #0]
    249c:	1dbb      	adds	r3, r7, #6
    249e:	1c0a      	adds	r2, r1, #0
    24a0:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    24a2:	1dfb      	adds	r3, r7, #7
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	4a04      	ldr	r2, [pc, #16]	; (24b8 <sd_mmc_unload+0x28>)
    24a8:	1db9      	adds	r1, r7, #6
    24aa:	7809      	ldrb	r1, [r1, #0]
    24ac:	54d1      	strb	r1, [r2, r3]
	return true;
    24ae:	2301      	movs	r3, #1
}
    24b0:	0018      	movs	r0, r3
    24b2:	46bd      	mov	sp, r7
    24b4:	b002      	add	sp, #8
    24b6:	bd80      	pop	{r7, pc}
    24b8:	20000110 	.word	0x20000110

000024bc <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b082      	sub	sp, #8
    24c0:	af00      	add	r7, sp, #0
    24c2:	0002      	movs	r2, r0
    24c4:	1dfb      	adds	r3, r7, #7
    24c6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    24c8:	1dfb      	adds	r3, r7, #7
    24ca:	781b      	ldrb	r3, [r3, #0]
    24cc:	0019      	movs	r1, r3
    24ce:	2000      	movs	r0, #0
    24d0:	4b03      	ldr	r3, [pc, #12]	; (24e0 <sd_mmc_unload_0+0x24>)
    24d2:	4798      	blx	r3
    24d4:	0003      	movs	r3, r0
}
    24d6:	0018      	movs	r0, r3
    24d8:	46bd      	mov	sp, r7
    24da:	b002      	add	sp, #8
    24dc:	bd80      	pop	{r7, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	00002491 	.word	0x00002491

000024e4 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    24e4:	b580      	push	{r7, lr}
    24e6:	b082      	sub	sp, #8
    24e8:	af00      	add	r7, sp, #0
    24ea:	0002      	movs	r2, r0
    24ec:	1dfb      	adds	r3, r7, #7
    24ee:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    24f0:	1dfb      	adds	r3, r7, #7
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	0018      	movs	r0, r3
    24f6:	4b03      	ldr	r3, [pc, #12]	; (2504 <sd_mmc_wr_protect+0x20>)
    24f8:	4798      	blx	r3
    24fa:	0003      	movs	r3, r0
}
    24fc:	0018      	movs	r0, r3
    24fe:	46bd      	mov	sp, r7
    2500:	b002      	add	sp, #8
    2502:	bd80      	pop	{r7, pc}
    2504:	00002001 	.word	0x00002001

00002508 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    2508:	b580      	push	{r7, lr}
    250a:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    250c:	2000      	movs	r0, #0
    250e:	4b03      	ldr	r3, [pc, #12]	; (251c <sd_mmc_wr_protect_0+0x14>)
    2510:	4798      	blx	r3
    2512:	0003      	movs	r3, r0
}
    2514:	0018      	movs	r0, r3
    2516:	46bd      	mov	sp, r7
    2518:	bd80      	pop	{r7, pc}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	000024e5 	.word	0x000024e5

00002520 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    2520:	b580      	push	{r7, lr}
    2522:	b082      	sub	sp, #8
    2524:	af00      	add	r7, sp, #0
    2526:	0002      	movs	r2, r0
    2528:	1dfb      	adds	r3, r7, #7
    252a:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    252c:	2301      	movs	r3, #1
}
    252e:	0018      	movs	r0, r3
    2530:	46bd      	mov	sp, r7
    2532:	b002      	add	sp, #8
    2534:	bd80      	pop	{r7, pc}
	...

00002538 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    2538:	b580      	push	{r7, lr}
    253a:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    253c:	2000      	movs	r0, #0
    253e:	4b03      	ldr	r3, [pc, #12]	; (254c <sd_mmc_removal_0+0x14>)
    2540:	4798      	blx	r3
    2542:	0003      	movs	r3, r0
}
    2544:	0018      	movs	r0, r3
    2546:	46bd      	mov	sp, r7
    2548:	bd80      	pop	{r7, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	00002521 	.word	0x00002521

00002550 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2550:	b580      	push	{r7, lr}
    2552:	b084      	sub	sp, #16
    2554:	af00      	add	r7, sp, #0
    2556:	60b9      	str	r1, [r7, #8]
    2558:	607a      	str	r2, [r7, #4]
    255a:	230f      	movs	r3, #15
    255c:	18fb      	adds	r3, r7, r3
    255e:	1c02      	adds	r2, r0, #0
    2560:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    2562:	68b9      	ldr	r1, [r7, #8]
    2564:	230f      	movs	r3, #15
    2566:	18fb      	adds	r3, r7, r3
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	2201      	movs	r2, #1
    256c:	0018      	movs	r0, r3
    256e:	4b10      	ldr	r3, [pc, #64]	; (25b0 <sd_mmc_mem_2_ram+0x60>)
    2570:	4798      	blx	r3
    2572:	1e03      	subs	r3, r0, #0
    2574:	d005      	beq.n	2582 <sd_mmc_mem_2_ram+0x32>
    2576:	2b02      	cmp	r3, #2
    2578:	d101      	bne.n	257e <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    257a:	2302      	movs	r3, #2
    257c:	e013      	b.n	25a6 <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    257e:	2301      	movs	r3, #1
    2580:	e011      	b.n	25a6 <sd_mmc_mem_2_ram+0x56>
		break;
    2582:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	2101      	movs	r1, #1
    2588:	0018      	movs	r0, r3
    258a:	4b0a      	ldr	r3, [pc, #40]	; (25b4 <sd_mmc_mem_2_ram+0x64>)
    258c:	4798      	blx	r3
    258e:	1e03      	subs	r3, r0, #0
    2590:	d001      	beq.n	2596 <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    2592:	2301      	movs	r3, #1
    2594:	e007      	b.n	25a6 <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    2596:	2000      	movs	r0, #0
    2598:	4b07      	ldr	r3, [pc, #28]	; (25b8 <sd_mmc_mem_2_ram+0x68>)
    259a:	4798      	blx	r3
    259c:	1e03      	subs	r3, r0, #0
    259e:	d001      	beq.n	25a4 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    25a0:	2301      	movs	r3, #1
    25a2:	e000      	b.n	25a6 <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    25a4:	2300      	movs	r3, #0
}
    25a6:	0018      	movs	r0, r3
    25a8:	46bd      	mov	sp, r7
    25aa:	b004      	add	sp, #16
    25ac:	bd80      	pop	{r7, pc}
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	00002019 	.word	0x00002019
    25b4:	00002105 	.word	0x00002105
    25b8:	0000215d 	.word	0x0000215d

000025bc <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b082      	sub	sp, #8
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
    25c4:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    25c6:	683a      	ldr	r2, [r7, #0]
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	0019      	movs	r1, r3
    25cc:	2000      	movs	r0, #0
    25ce:	4b03      	ldr	r3, [pc, #12]	; (25dc <sd_mmc_mem_2_ram_0+0x20>)
    25d0:	4798      	blx	r3
    25d2:	0003      	movs	r3, r0
}
    25d4:	0018      	movs	r0, r3
    25d6:	46bd      	mov	sp, r7
    25d8:	b002      	add	sp, #8
    25da:	bd80      	pop	{r7, pc}
    25dc:	00002551 	.word	0x00002551

000025e0 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	b084      	sub	sp, #16
    25e4:	af00      	add	r7, sp, #0
    25e6:	60b9      	str	r1, [r7, #8]
    25e8:	607a      	str	r2, [r7, #4]
    25ea:	230f      	movs	r3, #15
    25ec:	18fb      	adds	r3, r7, r3
    25ee:	1c02      	adds	r2, r0, #0
    25f0:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    25f2:	68b9      	ldr	r1, [r7, #8]
    25f4:	230f      	movs	r3, #15
    25f6:	18fb      	adds	r3, r7, r3
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	2201      	movs	r2, #1
    25fc:	0018      	movs	r0, r3
    25fe:	4b10      	ldr	r3, [pc, #64]	; (2640 <sd_mmc_ram_2_mem+0x60>)
    2600:	4798      	blx	r3
    2602:	1e03      	subs	r3, r0, #0
    2604:	d005      	beq.n	2612 <sd_mmc_ram_2_mem+0x32>
    2606:	2b02      	cmp	r3, #2
    2608:	d101      	bne.n	260e <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    260a:	2302      	movs	r3, #2
    260c:	e013      	b.n	2636 <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    260e:	2301      	movs	r3, #1
    2610:	e011      	b.n	2636 <sd_mmc_ram_2_mem+0x56>
		break;
    2612:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    2614:	687b      	ldr	r3, [r7, #4]
    2616:	2101      	movs	r1, #1
    2618:	0018      	movs	r0, r3
    261a:	4b0a      	ldr	r3, [pc, #40]	; (2644 <sd_mmc_ram_2_mem+0x64>)
    261c:	4798      	blx	r3
    261e:	1e03      	subs	r3, r0, #0
    2620:	d001      	beq.n	2626 <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    2622:	2301      	movs	r3, #1
    2624:	e007      	b.n	2636 <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    2626:	2000      	movs	r0, #0
    2628:	4b07      	ldr	r3, [pc, #28]	; (2648 <sd_mmc_ram_2_mem+0x68>)
    262a:	4798      	blx	r3
    262c:	1e03      	subs	r3, r0, #0
    262e:	d001      	beq.n	2634 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    2630:	2301      	movs	r3, #1
    2632:	e000      	b.n	2636 <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    2634:	2300      	movs	r3, #0
}
    2636:	0018      	movs	r0, r3
    2638:	46bd      	mov	sp, r7
    263a:	b004      	add	sp, #16
    263c:	bd80      	pop	{r7, pc}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	000021f5 	.word	0x000021f5
    2644:	000022dd 	.word	0x000022dd
    2648:	00002335 	.word	0x00002335

0000264c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    264c:	b580      	push	{r7, lr}
    264e:	b082      	sub	sp, #8
    2650:	af00      	add	r7, sp, #0
    2652:	6078      	str	r0, [r7, #4]
    2654:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    2656:	683a      	ldr	r2, [r7, #0]
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	0019      	movs	r1, r3
    265c:	2000      	movs	r0, #0
    265e:	4b03      	ldr	r3, [pc, #12]	; (266c <sd_mmc_ram_2_mem_0+0x20>)
    2660:	4798      	blx	r3
    2662:	0003      	movs	r3, r0
}
    2664:	0018      	movs	r0, r3
    2666:	46bd      	mov	sp, r7
    2668:	b002      	add	sp, #8
    266a:	bd80      	pop	{r7, pc}
    266c:	000025e1 	.word	0x000025e1

00002670 <system_pinmux_get_group_from_gpio_pin>:
{
    2670:	b580      	push	{r7, lr}
    2672:	b084      	sub	sp, #16
    2674:	af00      	add	r7, sp, #0
    2676:	0002      	movs	r2, r0
    2678:	1dfb      	adds	r3, r7, #7
    267a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    267c:	230f      	movs	r3, #15
    267e:	18fb      	adds	r3, r7, r3
    2680:	1dfa      	adds	r2, r7, #7
    2682:	7812      	ldrb	r2, [r2, #0]
    2684:	09d2      	lsrs	r2, r2, #7
    2686:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2688:	230e      	movs	r3, #14
    268a:	18fb      	adds	r3, r7, r3
    268c:	1dfa      	adds	r2, r7, #7
    268e:	7812      	ldrb	r2, [r2, #0]
    2690:	0952      	lsrs	r2, r2, #5
    2692:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2694:	4b0d      	ldr	r3, [pc, #52]	; (26cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2696:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2698:	230f      	movs	r3, #15
    269a:	18fb      	adds	r3, r7, r3
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	2b00      	cmp	r3, #0
    26a0:	d10f      	bne.n	26c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    26a2:	230f      	movs	r3, #15
    26a4:	18fb      	adds	r3, r7, r3
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	009b      	lsls	r3, r3, #2
    26aa:	2210      	movs	r2, #16
    26ac:	4694      	mov	ip, r2
    26ae:	44bc      	add	ip, r7
    26b0:	4463      	add	r3, ip
    26b2:	3b08      	subs	r3, #8
    26b4:	681a      	ldr	r2, [r3, #0]
    26b6:	230e      	movs	r3, #14
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	781b      	ldrb	r3, [r3, #0]
    26bc:	01db      	lsls	r3, r3, #7
    26be:	18d3      	adds	r3, r2, r3
    26c0:	e000      	b.n	26c4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    26c2:	2300      	movs	r3, #0
}
    26c4:	0018      	movs	r0, r3
    26c6:	46bd      	mov	sp, r7
    26c8:	b004      	add	sp, #16
    26ca:	bd80      	pop	{r7, pc}
    26cc:	41004400 	.word	0x41004400

000026d0 <port_get_group_from_gpio_pin>:
{
    26d0:	b580      	push	{r7, lr}
    26d2:	b082      	sub	sp, #8
    26d4:	af00      	add	r7, sp, #0
    26d6:	0002      	movs	r2, r0
    26d8:	1dfb      	adds	r3, r7, #7
    26da:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    26dc:	1dfb      	adds	r3, r7, #7
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	0018      	movs	r0, r3
    26e2:	4b03      	ldr	r3, [pc, #12]	; (26f0 <port_get_group_from_gpio_pin+0x20>)
    26e4:	4798      	blx	r3
    26e6:	0003      	movs	r3, r0
}
    26e8:	0018      	movs	r0, r3
    26ea:	46bd      	mov	sp, r7
    26ec:	b002      	add	sp, #8
    26ee:	bd80      	pop	{r7, pc}
    26f0:	00002671 	.word	0x00002671

000026f4 <port_get_config_defaults>:
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b082      	sub	sp, #8
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	2200      	movs	r2, #0
    2700:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	2201      	movs	r2, #1
    2706:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	2200      	movs	r2, #0
    270c:	709a      	strb	r2, [r3, #2]
}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	46bd      	mov	sp, r7
    2712:	b002      	add	sp, #8
    2714:	bd80      	pop	{r7, pc}
	...

00002718 <port_pin_set_output_level>:
{
    2718:	b580      	push	{r7, lr}
    271a:	b084      	sub	sp, #16
    271c:	af00      	add	r7, sp, #0
    271e:	0002      	movs	r2, r0
    2720:	1dfb      	adds	r3, r7, #7
    2722:	701a      	strb	r2, [r3, #0]
    2724:	1dbb      	adds	r3, r7, #6
    2726:	1c0a      	adds	r2, r1, #0
    2728:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    272a:	1dfb      	adds	r3, r7, #7
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	0018      	movs	r0, r3
    2730:	4b0d      	ldr	r3, [pc, #52]	; (2768 <port_pin_set_output_level+0x50>)
    2732:	4798      	blx	r3
    2734:	0003      	movs	r3, r0
    2736:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2738:	1dfb      	adds	r3, r7, #7
    273a:	781b      	ldrb	r3, [r3, #0]
    273c:	221f      	movs	r2, #31
    273e:	4013      	ands	r3, r2
    2740:	2201      	movs	r2, #1
    2742:	409a      	lsls	r2, r3
    2744:	0013      	movs	r3, r2
    2746:	60bb      	str	r3, [r7, #8]
	if (level) {
    2748:	1dbb      	adds	r3, r7, #6
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	2b00      	cmp	r3, #0
    274e:	d003      	beq.n	2758 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2750:	68fb      	ldr	r3, [r7, #12]
    2752:	68ba      	ldr	r2, [r7, #8]
    2754:	619a      	str	r2, [r3, #24]
}
    2756:	e002      	b.n	275e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2758:	68fb      	ldr	r3, [r7, #12]
    275a:	68ba      	ldr	r2, [r7, #8]
    275c:	615a      	str	r2, [r3, #20]
}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	46bd      	mov	sp, r7
    2762:	b004      	add	sp, #16
    2764:	bd80      	pop	{r7, pc}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	000026d1 	.word	0x000026d1

0000276c <system_interrupt_enable>:
{
    276c:	b580      	push	{r7, lr}
    276e:	b082      	sub	sp, #8
    2770:	af00      	add	r7, sp, #0
    2772:	0002      	movs	r2, r0
    2774:	1dfb      	adds	r3, r7, #7
    2776:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2778:	4b06      	ldr	r3, [pc, #24]	; (2794 <system_interrupt_enable+0x28>)
    277a:	1dfa      	adds	r2, r7, #7
    277c:	7812      	ldrb	r2, [r2, #0]
    277e:	0011      	movs	r1, r2
    2780:	221f      	movs	r2, #31
    2782:	400a      	ands	r2, r1
    2784:	2101      	movs	r1, #1
    2786:	4091      	lsls	r1, r2
    2788:	000a      	movs	r2, r1
    278a:	601a      	str	r2, [r3, #0]
}
    278c:	46c0      	nop			; (mov r8, r8)
    278e:	46bd      	mov	sp, r7
    2790:	b002      	add	sp, #8
    2792:	bd80      	pop	{r7, pc}
    2794:	e000e100 	.word	0xe000e100

00002798 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2798:	b580      	push	{r7, lr}
    279a:	b084      	sub	sp, #16
    279c:	af00      	add	r7, sp, #0
    279e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	681b      	ldr	r3, [r3, #0]
    27a4:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    27a6:	68fb      	ldr	r3, [r7, #12]
    27a8:	69db      	ldr	r3, [r3, #28]
    27aa:	1e5a      	subs	r2, r3, #1
    27ac:	4193      	sbcs	r3, r2
    27ae:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    27b0:	0018      	movs	r0, r3
    27b2:	46bd      	mov	sp, r7
    27b4:	b004      	add	sp, #16
    27b6:	bd80      	pop	{r7, pc}

000027b8 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b082      	sub	sp, #8
    27bc:	af00      	add	r7, sp, #0
    27be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	2201      	movs	r2, #1
    27c4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	2200      	movs	r2, #0
    27ca:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	2200      	movs	r2, #0
    27d0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	22c0      	movs	r2, #192	; 0xc0
    27d6:	0392      	lsls	r2, r2, #14
    27d8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	2200      	movs	r2, #0
    27de:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	2200      	movs	r2, #0
    27e4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	2201      	movs	r2, #1
    27ea:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	2201      	movs	r2, #1
    27f0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	2200      	movs	r2, #0
    27f6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	2224      	movs	r2, #36	; 0x24
    27fc:	2100      	movs	r1, #0
    27fe:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	3318      	adds	r3, #24
    2804:	220c      	movs	r2, #12
    2806:	2100      	movs	r1, #0
    2808:	0018      	movs	r0, r3
    280a:	4b0a      	ldr	r3, [pc, #40]	; (2834 <spi_get_config_defaults+0x7c>)
    280c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	4a09      	ldr	r2, [pc, #36]	; (2838 <spi_get_config_defaults+0x80>)
    2812:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2814:	687b      	ldr	r3, [r7, #4]
    2816:	2200      	movs	r2, #0
    2818:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	2200      	movs	r2, #0
    281e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	2200      	movs	r2, #0
    2824:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	2200      	movs	r2, #0
    282a:	635a      	str	r2, [r3, #52]	; 0x34

};
    282c:	46c0      	nop			; (mov r8, r8)
    282e:	46bd      	mov	sp, r7
    2830:	b002      	add	sp, #8
    2832:	bd80      	pop	{r7, pc}
    2834:	0000b96b 	.word	0x0000b96b
    2838:	000186a0 	.word	0x000186a0

0000283c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    283c:	b580      	push	{r7, lr}
    283e:	b082      	sub	sp, #8
    2840:	af00      	add	r7, sp, #0
    2842:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	220a      	movs	r2, #10
    2848:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	2200      	movs	r2, #0
    284e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	2200      	movs	r2, #0
    2854:	709a      	strb	r2, [r3, #2]
}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	46bd      	mov	sp, r7
    285a:	b002      	add	sp, #8
    285c:	bd80      	pop	{r7, pc}
	...

00002860 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2860:	b580      	push	{r7, lr}
    2862:	b084      	sub	sp, #16
    2864:	af00      	add	r7, sp, #0
    2866:	6078      	str	r0, [r7, #4]
    2868:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    286a:	683b      	ldr	r3, [r7, #0]
    286c:	781a      	ldrb	r2, [r3, #0]
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2872:	683b      	ldr	r3, [r7, #0]
    2874:	785a      	ldrb	r2, [r3, #1]
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    287a:	683b      	ldr	r3, [r7, #0]
    287c:	789a      	ldrb	r2, [r3, #2]
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2882:	230c      	movs	r3, #12
    2884:	18fb      	adds	r3, r7, r3
    2886:	0018      	movs	r0, r3
    2888:	4b0b      	ldr	r3, [pc, #44]	; (28b8 <spi_attach_slave+0x58>)
    288a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    288c:	230c      	movs	r3, #12
    288e:	18fb      	adds	r3, r7, r3
    2890:	2201      	movs	r2, #1
    2892:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	781b      	ldrb	r3, [r3, #0]
    2898:	220c      	movs	r2, #12
    289a:	18ba      	adds	r2, r7, r2
    289c:	0011      	movs	r1, r2
    289e:	0018      	movs	r0, r3
    28a0:	4b06      	ldr	r3, [pc, #24]	; (28bc <spi_attach_slave+0x5c>)
    28a2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	781b      	ldrb	r3, [r3, #0]
    28a8:	2101      	movs	r1, #1
    28aa:	0018      	movs	r0, r3
    28ac:	4b04      	ldr	r3, [pc, #16]	; (28c0 <spi_attach_slave+0x60>)
    28ae:	4798      	blx	r3
}
    28b0:	46c0      	nop			; (mov r8, r8)
    28b2:	46bd      	mov	sp, r7
    28b4:	b004      	add	sp, #16
    28b6:	bd80      	pop	{r7, pc}
    28b8:	000026f5 	.word	0x000026f5
    28bc:	0000356d 	.word	0x0000356d
    28c0:	00002719 	.word	0x00002719

000028c4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    28c4:	b580      	push	{r7, lr}
    28c6:	b084      	sub	sp, #16
    28c8:	af00      	add	r7, sp, #0
    28ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	681b      	ldr	r3, [r3, #0]
    28d0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    28d2:	687b      	ldr	r3, [r7, #4]
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	0018      	movs	r0, r3
    28d8:	4b0b      	ldr	r3, [pc, #44]	; (2908 <spi_enable+0x44>)
    28da:	4798      	blx	r3
    28dc:	0003      	movs	r3, r0
    28de:	0018      	movs	r0, r3
    28e0:	4b0a      	ldr	r3, [pc, #40]	; (290c <spi_enable+0x48>)
    28e2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    28e4:	46c0      	nop			; (mov r8, r8)
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	0018      	movs	r0, r3
    28ea:	4b09      	ldr	r3, [pc, #36]	; (2910 <spi_enable+0x4c>)
    28ec:	4798      	blx	r3
    28ee:	1e03      	subs	r3, r0, #0
    28f0:	d1f9      	bne.n	28e6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	2202      	movs	r2, #2
    28f8:	431a      	orrs	r2, r3
    28fa:	68fb      	ldr	r3, [r7, #12]
    28fc:	601a      	str	r2, [r3, #0]
}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	46bd      	mov	sp, r7
    2902:	b004      	add	sp, #16
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	000040f9 	.word	0x000040f9
    290c:	0000276d 	.word	0x0000276d
    2910:	00002799 	.word	0x00002799

00002914 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    2914:	b580      	push	{r7, lr}
    2916:	b084      	sub	sp, #16
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
    291c:	000a      	movs	r2, r1
    291e:	1cfb      	adds	r3, r7, #3
    2920:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    2922:	230f      	movs	r3, #15
    2924:	18fb      	adds	r3, r7, r3
    2926:	2200      	movs	r2, #0
    2928:	701a      	strb	r2, [r3, #0]
	while (size--) {
    292a:	e038      	b.n	299e <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	1c5a      	adds	r2, r3, #1
    2930:	607a      	str	r2, [r7, #4]
    2932:	220e      	movs	r2, #14
    2934:	18ba      	adds	r2, r7, r2
    2936:	781b      	ldrb	r3, [r3, #0]
    2938:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    293a:	230d      	movs	r3, #13
    293c:	18fb      	adds	r3, r7, r3
    293e:	2200      	movs	r2, #0
    2940:	701a      	strb	r2, [r3, #0]
    2942:	e027      	b.n	2994 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2944:	230f      	movs	r3, #15
    2946:	18fa      	adds	r2, r7, r3
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	18db      	adds	r3, r3, r3
    2950:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    2952:	230e      	movs	r3, #14
    2954:	18fa      	adds	r2, r7, r3
    2956:	230f      	movs	r3, #15
    2958:	18fb      	adds	r3, r7, r3
    295a:	7812      	ldrb	r2, [r2, #0]
    295c:	781b      	ldrb	r3, [r3, #0]
    295e:	4053      	eors	r3, r2
    2960:	b2db      	uxtb	r3, r3
    2962:	b25b      	sxtb	r3, r3
    2964:	2b00      	cmp	r3, #0
    2966:	da07      	bge.n	2978 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    2968:	230f      	movs	r3, #15
    296a:	18fb      	adds	r3, r7, r3
    296c:	220f      	movs	r2, #15
    296e:	18ba      	adds	r2, r7, r2
    2970:	7812      	ldrb	r2, [r2, #0]
    2972:	2109      	movs	r1, #9
    2974:	404a      	eors	r2, r1
    2976:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    2978:	230e      	movs	r3, #14
    297a:	18fa      	adds	r2, r7, r3
    297c:	230e      	movs	r3, #14
    297e:	18fb      	adds	r3, r7, r3
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	18db      	adds	r3, r3, r3
    2984:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    2986:	230d      	movs	r3, #13
    2988:	18fb      	adds	r3, r7, r3
    298a:	781a      	ldrb	r2, [r3, #0]
    298c:	230d      	movs	r3, #13
    298e:	18fb      	adds	r3, r7, r3
    2990:	3201      	adds	r2, #1
    2992:	701a      	strb	r2, [r3, #0]
    2994:	230d      	movs	r3, #13
    2996:	18fb      	adds	r3, r7, r3
    2998:	781b      	ldrb	r3, [r3, #0]
    299a:	2b07      	cmp	r3, #7
    299c:	d9d2      	bls.n	2944 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    299e:	1cfb      	adds	r3, r7, #3
    29a0:	781b      	ldrb	r3, [r3, #0]
    29a2:	1cfa      	adds	r2, r7, #3
    29a4:	1e59      	subs	r1, r3, #1
    29a6:	7011      	strb	r1, [r2, #0]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d1bf      	bne.n	292c <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    29ac:	230f      	movs	r3, #15
    29ae:	18fb      	adds	r3, r7, r3
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	005b      	lsls	r3, r3, #1
    29b4:	b25b      	sxtb	r3, r3
    29b6:	2201      	movs	r2, #1
    29b8:	4313      	orrs	r3, r2
    29ba:	b25a      	sxtb	r2, r3
    29bc:	230f      	movs	r3, #15
    29be:	18fb      	adds	r3, r7, r3
    29c0:	701a      	strb	r2, [r3, #0]
	return crc;
    29c2:	230f      	movs	r3, #15
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	781b      	ldrb	r3, [r3, #0]
}
    29c8:	0018      	movs	r0, r3
    29ca:	46bd      	mov	sp, r7
    29cc:	b004      	add	sp, #16
    29ce:	bd80      	pop	{r7, pc}

000029d0 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    29d0:	b590      	push	{r4, r7, lr}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    29d6:	1c7b      	adds	r3, r7, #1
    29d8:	22ff      	movs	r2, #255	; 0xff
    29da:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    29dc:	1cbb      	adds	r3, r7, #2
    29de:	22ff      	movs	r2, #255	; 0xff
    29e0:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    29e2:	1cbb      	adds	r3, r7, #2
    29e4:	881b      	ldrh	r3, [r3, #0]
    29e6:	1c79      	adds	r1, r7, #1
    29e8:	4811      	ldr	r0, [pc, #68]	; (2a30 <sd_mmc_spi_wait_busy+0x60>)
    29ea:	2201      	movs	r2, #1
    29ec:	4c11      	ldr	r4, [pc, #68]	; (2a34 <sd_mmc_spi_wait_busy+0x64>)
    29ee:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    29f0:	4b11      	ldr	r3, [pc, #68]	; (2a38 <sd_mmc_spi_wait_busy+0x68>)
    29f2:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    29f4:	1cbb      	adds	r3, r7, #2
    29f6:	881b      	ldrh	r3, [r3, #0]
    29f8:	1c79      	adds	r1, r7, #1
    29fa:	480d      	ldr	r0, [pc, #52]	; (2a30 <sd_mmc_spi_wait_busy+0x60>)
    29fc:	2201      	movs	r2, #1
    29fe:	4c0d      	ldr	r4, [pc, #52]	; (2a34 <sd_mmc_spi_wait_busy+0x64>)
    2a00:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2a02:	1cbb      	adds	r3, r7, #2
    2a04:	881b      	ldrh	r3, [r3, #0]
    2a06:	1c79      	adds	r1, r7, #1
    2a08:	4809      	ldr	r0, [pc, #36]	; (2a30 <sd_mmc_spi_wait_busy+0x60>)
    2a0a:	2201      	movs	r2, #1
    2a0c:	4c09      	ldr	r4, [pc, #36]	; (2a34 <sd_mmc_spi_wait_busy+0x64>)
    2a0e:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	1e5a      	subs	r2, r3, #1
    2a14:	607a      	str	r2, [r7, #4]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d101      	bne.n	2a1e <sd_mmc_spi_wait_busy+0x4e>
			return false;
    2a1a:	2300      	movs	r3, #0
    2a1c:	e004      	b.n	2a28 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    2a1e:	1c7b      	adds	r3, r7, #1
    2a20:	781b      	ldrb	r3, [r3, #0]
    2a22:	2bff      	cmp	r3, #255	; 0xff
    2a24:	d1ed      	bne.n	2a02 <sd_mmc_spi_wait_busy+0x32>
	return true;
    2a26:	2301      	movs	r3, #1
}
    2a28:	0018      	movs	r0, r3
    2a2a:	46bd      	mov	sp, r7
    2a2c:	b003      	add	sp, #12
    2a2e:	bd90      	pop	{r4, r7, pc}
    2a30:	20000114 	.word	0x20000114
    2a34:	00004a79 	.word	0x00004a79
    2a38:	00030d40 	.word	0x00030d40

00002a3c <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2a3c:	b590      	push	{r4, r7, lr}
    2a3e:	b083      	sub	sp, #12
    2a40:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    2a42:	1cbb      	adds	r3, r7, #2
    2a44:	22ff      	movs	r2, #255	; 0xff
    2a46:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    2a48:	1c7b      	adds	r3, r7, #1
    2a4a:	2200      	movs	r2, #0
    2a4c:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2a4e:	4b18      	ldr	r3, [pc, #96]	; (2ab0 <sd_mmc_spi_start_read_block+0x74>)
    2a50:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	1e5a      	subs	r2, r3, #1
    2a56:	607a      	str	r2, [r7, #4]
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d104      	bne.n	2a66 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2a5c:	4b15      	ldr	r3, [pc, #84]	; (2ab4 <sd_mmc_spi_start_read_block+0x78>)
    2a5e:	2204      	movs	r2, #4
    2a60:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    2a62:	2300      	movs	r3, #0
    2a64:	e020      	b.n	2aa8 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    2a66:	1cbb      	adds	r3, r7, #2
    2a68:	881b      	ldrh	r3, [r3, #0]
    2a6a:	1c79      	adds	r1, r7, #1
    2a6c:	4812      	ldr	r0, [pc, #72]	; (2ab8 <sd_mmc_spi_start_read_block+0x7c>)
    2a6e:	2201      	movs	r2, #1
    2a70:	4c12      	ldr	r4, [pc, #72]	; (2abc <sd_mmc_spi_start_read_block+0x80>)
    2a72:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2a74:	1c7b      	adds	r3, r7, #1
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	001a      	movs	r2, r3
    2a7a:	23f0      	movs	r3, #240	; 0xf0
    2a7c:	4013      	ands	r3, r2
    2a7e:	d10e      	bne.n	2a9e <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2a80:	1c7b      	adds	r3, r7, #1
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	001a      	movs	r2, r3
    2a86:	2307      	movs	r3, #7
    2a88:	4013      	ands	r3, r2
    2a8a:	d003      	beq.n	2a94 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2a8c:	4b09      	ldr	r3, [pc, #36]	; (2ab4 <sd_mmc_spi_start_read_block+0x78>)
    2a8e:	2207      	movs	r2, #7
    2a90:	701a      	strb	r2, [r3, #0]
    2a92:	e002      	b.n	2a9a <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    2a94:	4b07      	ldr	r3, [pc, #28]	; (2ab4 <sd_mmc_spi_start_read_block+0x78>)
    2a96:	220b      	movs	r2, #11
    2a98:	701a      	strb	r2, [r3, #0]
			}
			return false;
    2a9a:	2300      	movs	r3, #0
    2a9c:	e004      	b.n	2aa8 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    2a9e:	1c7b      	adds	r3, r7, #1
    2aa0:	781b      	ldrb	r3, [r3, #0]
    2aa2:	2bfe      	cmp	r3, #254	; 0xfe
    2aa4:	d1d5      	bne.n	2a52 <sd_mmc_spi_start_read_block+0x16>

	return true;
    2aa6:	2301      	movs	r3, #1
}
    2aa8:	0018      	movs	r0, r3
    2aaa:	46bd      	mov	sp, r7
    2aac:	b003      	add	sp, #12
    2aae:	bd90      	pop	{r4, r7, pc}
    2ab0:	0007a120 	.word	0x0007a120
    2ab4:	20000157 	.word	0x20000157
    2ab8:	20000114 	.word	0x20000114
    2abc:	00004a79 	.word	0x00004a79

00002ac0 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2ac0:	b590      	push	{r4, r7, lr}
    2ac2:	b083      	sub	sp, #12
    2ac4:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    2ac6:	1dbb      	adds	r3, r7, #6
    2ac8:	22ff      	movs	r2, #255	; 0xff
    2aca:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2acc:	1dbb      	adds	r3, r7, #6
    2ace:	881b      	ldrh	r3, [r3, #0]
    2ad0:	1d39      	adds	r1, r7, #4
    2ad2:	4804      	ldr	r0, [pc, #16]	; (2ae4 <sd_mmc_spi_stop_read_block+0x24>)
    2ad4:	2202      	movs	r2, #2
    2ad6:	4c04      	ldr	r4, [pc, #16]	; (2ae8 <sd_mmc_spi_stop_read_block+0x28>)
    2ad8:	47a0      	blx	r4
			dummy);
}
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	46bd      	mov	sp, r7
    2ade:	b003      	add	sp, #12
    2ae0:	bd90      	pop	{r4, r7, pc}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	20000114 	.word	0x20000114
    2ae8:	00004a79 	.word	0x00004a79

00002aec <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    2af2:	1dfb      	adds	r3, r7, #7
    2af4:	22ff      	movs	r2, #255	; 0xff
    2af6:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    2af8:	1df9      	adds	r1, r7, #7
    2afa:	4b0d      	ldr	r3, [pc, #52]	; (2b30 <sd_mmc_spi_start_write_block+0x44>)
    2afc:	2201      	movs	r2, #1
    2afe:	0018      	movs	r0, r3
    2b00:	4b0c      	ldr	r3, [pc, #48]	; (2b34 <sd_mmc_spi_start_write_block+0x48>)
    2b02:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2b04:	4b0c      	ldr	r3, [pc, #48]	; (2b38 <sd_mmc_spi_start_write_block+0x4c>)
    2b06:	881b      	ldrh	r3, [r3, #0]
    2b08:	2b01      	cmp	r3, #1
    2b0a:	d103      	bne.n	2b14 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2b0c:	1dbb      	adds	r3, r7, #6
    2b0e:	22fe      	movs	r2, #254	; 0xfe
    2b10:	701a      	strb	r2, [r3, #0]
    2b12:	e002      	b.n	2b1a <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2b14:	1dbb      	adds	r3, r7, #6
    2b16:	22fc      	movs	r2, #252	; 0xfc
    2b18:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    2b1a:	1db9      	adds	r1, r7, #6
    2b1c:	4b04      	ldr	r3, [pc, #16]	; (2b30 <sd_mmc_spi_start_write_block+0x44>)
    2b1e:	2201      	movs	r2, #1
    2b20:	0018      	movs	r0, r3
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <sd_mmc_spi_start_write_block+0x48>)
    2b24:	4798      	blx	r3
}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	46bd      	mov	sp, r7
    2b2a:	b002      	add	sp, #8
    2b2c:	bd80      	pop	{r7, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	20000114 	.word	0x20000114
    2b34:	00004c9d 	.word	0x00004c9d
    2b38:	20000162 	.word	0x20000162

00002b3c <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2b3c:	b590      	push	{r4, r7, lr}
    2b3e:	b083      	sub	sp, #12
    2b40:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2b42:	1dbb      	adds	r3, r7, #6
    2b44:	22ff      	movs	r2, #255	; 0xff
    2b46:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2b48:	1cbb      	adds	r3, r7, #2
    2b4a:	2201      	movs	r2, #1
    2b4c:	4252      	negs	r2, r2
    2b4e:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2b50:	1cb9      	adds	r1, r7, #2
    2b52:	4b1b      	ldr	r3, [pc, #108]	; (2bc0 <sd_mmc_spi_stop_write_block+0x84>)
    2b54:	2202      	movs	r2, #2
    2b56:	0018      	movs	r0, r3
    2b58:	4b1a      	ldr	r3, [pc, #104]	; (2bc4 <sd_mmc_spi_stop_write_block+0x88>)
    2b5a:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2b5c:	1dbb      	adds	r3, r7, #6
    2b5e:	881b      	ldrh	r3, [r3, #0]
    2b60:	1d79      	adds	r1, r7, #5
    2b62:	4817      	ldr	r0, [pc, #92]	; (2bc0 <sd_mmc_spi_stop_write_block+0x84>)
    2b64:	2201      	movs	r2, #1
    2b66:	4c18      	ldr	r4, [pc, #96]	; (2bc8 <sd_mmc_spi_stop_write_block+0x8c>)
    2b68:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2b6a:	1d7b      	adds	r3, r7, #5
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	001a      	movs	r2, r3
    2b70:	2310      	movs	r3, #16
    2b72:	4013      	ands	r3, r2
    2b74:	d105      	bne.n	2b82 <sd_mmc_spi_stop_write_block+0x46>
    2b76:	1d7b      	adds	r3, r7, #5
    2b78:	781b      	ldrb	r3, [r3, #0]
    2b7a:	001a      	movs	r2, r3
    2b7c:	2301      	movs	r3, #1
    2b7e:	4013      	ands	r3, r2
    2b80:	d104      	bne.n	2b8c <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2b82:	4b12      	ldr	r3, [pc, #72]	; (2bcc <sd_mmc_spi_stop_write_block+0x90>)
    2b84:	2201      	movs	r2, #1
    2b86:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2b88:	2300      	movs	r3, #0
    2b8a:	e014      	b.n	2bb6 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2b8c:	1d7b      	adds	r3, r7, #5
    2b8e:	781b      	ldrb	r3, [r3, #0]
    2b90:	001a      	movs	r2, r3
    2b92:	231e      	movs	r3, #30
    2b94:	4013      	ands	r3, r2
    2b96:	2b04      	cmp	r3, #4
    2b98:	d00b      	beq.n	2bb2 <sd_mmc_spi_stop_write_block+0x76>
    2b9a:	2b0a      	cmp	r3, #10
    2b9c:	d104      	bne.n	2ba8 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2b9e:	4b0b      	ldr	r3, [pc, #44]	; (2bcc <sd_mmc_spi_stop_write_block+0x90>)
    2ba0:	2208      	movs	r2, #8
    2ba2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2ba4:	2300      	movs	r3, #0
    2ba6:	e006      	b.n	2bb6 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2ba8:	4b08      	ldr	r3, [pc, #32]	; (2bcc <sd_mmc_spi_stop_write_block+0x90>)
    2baa:	220a      	movs	r2, #10
    2bac:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2bae:	2300      	movs	r3, #0
    2bb0:	e001      	b.n	2bb6 <sd_mmc_spi_stop_write_block+0x7a>
		break;
    2bb2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2bb4:	2301      	movs	r3, #1
}
    2bb6:	0018      	movs	r0, r3
    2bb8:	46bd      	mov	sp, r7
    2bba:	b003      	add	sp, #12
    2bbc:	bd90      	pop	{r4, r7, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	20000114 	.word	0x20000114
    2bc4:	00004c9d 	.word	0x00004c9d
    2bc8:	00004a79 	.word	0x00004a79
    2bcc:	20000157 	.word	0x20000157

00002bd0 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2bd0:	b590      	push	{r4, r7, lr}
    2bd2:	b083      	sub	sp, #12
    2bd4:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    2bd6:	4b1d      	ldr	r3, [pc, #116]	; (2c4c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2bd8:	881b      	ldrh	r3, [r3, #0]
    2bda:	2b01      	cmp	r3, #1
    2bdc:	d101      	bne.n	2be2 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    2bde:	2301      	movs	r3, #1
    2be0:	e030      	b.n	2c44 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    2be2:	4b1a      	ldr	r3, [pc, #104]	; (2c4c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2be4:	881b      	ldrh	r3, [r3, #0]
    2be6:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    2be8:	4b19      	ldr	r3, [pc, #100]	; (2c50 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    2bea:	681a      	ldr	r2, [r3, #0]
    2bec:	4b19      	ldr	r3, [pc, #100]	; (2c54 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    2bee:	881b      	ldrh	r3, [r3, #0]
    2bf0:	0019      	movs	r1, r3
    2bf2:	4b19      	ldr	r3, [pc, #100]	; (2c58 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    2bf4:	0010      	movs	r0, r2
    2bf6:	4798      	blx	r3
    2bf8:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    2bfa:	429c      	cmp	r4, r3
    2bfc:	d901      	bls.n	2c02 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    2bfe:	2301      	movs	r3, #1
    2c00:	e020      	b.n	2c44 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2c02:	1dfb      	adds	r3, r7, #7
    2c04:	22ff      	movs	r2, #255	; 0xff
    2c06:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2c08:	1df9      	adds	r1, r7, #7
    2c0a:	4b14      	ldr	r3, [pc, #80]	; (2c5c <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2c0c:	2201      	movs	r2, #1
    2c0e:	0018      	movs	r0, r3
    2c10:	4b13      	ldr	r3, [pc, #76]	; (2c60 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2c12:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2c14:	1dfb      	adds	r3, r7, #7
    2c16:	22fd      	movs	r2, #253	; 0xfd
    2c18:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2c1a:	1df9      	adds	r1, r7, #7
    2c1c:	4b0f      	ldr	r3, [pc, #60]	; (2c5c <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2c1e:	2201      	movs	r2, #1
    2c20:	0018      	movs	r0, r3
    2c22:	4b0f      	ldr	r3, [pc, #60]	; (2c60 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2c24:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2c26:	4b0f      	ldr	r3, [pc, #60]	; (2c64 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2c28:	4798      	blx	r3
    2c2a:	0003      	movs	r3, r0
    2c2c:	001a      	movs	r2, r3
    2c2e:	2301      	movs	r3, #1
    2c30:	4053      	eors	r3, r2
    2c32:	b2db      	uxtb	r3, r3
    2c34:	2b00      	cmp	r3, #0
    2c36:	d004      	beq.n	2c42 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2c38:	4b0b      	ldr	r3, [pc, #44]	; (2c68 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2c3a:	2205      	movs	r2, #5
    2c3c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2c3e:	2300      	movs	r3, #0
    2c40:	e000      	b.n	2c44 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2c42:	2301      	movs	r3, #1
}
    2c44:	0018      	movs	r0, r3
    2c46:	46bd      	mov	sp, r7
    2c48:	b003      	add	sp, #12
    2c4a:	bd90      	pop	{r4, r7, pc}
    2c4c:	20000162 	.word	0x20000162
    2c50:	2000015c 	.word	0x2000015c
    2c54:	20000160 	.word	0x20000160
    2c58:	0000b5bd 	.word	0x0000b5bd
    2c5c:	20000114 	.word	0x20000114
    2c60:	00004c9d 	.word	0x00004c9d
    2c64:	000029d1 	.word	0x000029d1
    2c68:	20000157 	.word	0x20000157

00002c6c <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2c70:	4b03      	ldr	r3, [pc, #12]	; (2c80 <sd_mmc_deinit+0x14>)
    2c72:	0018      	movs	r0, r3
    2c74:	4b03      	ldr	r3, [pc, #12]	; (2c84 <sd_mmc_deinit+0x18>)
    2c76:	4798      	blx	r3
}
    2c78:	46c0      	nop			; (mov r8, r8)
    2c7a:	46bd      	mov	sp, r7
    2c7c:	bd80      	pop	{r7, pc}
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	20000114 	.word	0x20000114
    2c84:	000045d1 	.word	0x000045d1

00002c88 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b090      	sub	sp, #64	; 0x40
    2c8c:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2c8e:	4b1f      	ldr	r3, [pc, #124]	; (2d0c <sd_mmc_spi_init+0x84>)
    2c90:	2200      	movs	r2, #0
    2c92:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2c94:	233c      	movs	r3, #60	; 0x3c
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	0018      	movs	r0, r3
    2c9a:	4b1d      	ldr	r3, [pc, #116]	; (2d10 <sd_mmc_spi_init+0x88>)
    2c9c:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2c9e:	1d3b      	adds	r3, r7, #4
    2ca0:	0018      	movs	r0, r3
    2ca2:	4b1c      	ldr	r3, [pc, #112]	; (2d14 <sd_mmc_spi_init+0x8c>)
    2ca4:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2ca6:	1d3b      	adds	r3, r7, #4
    2ca8:	2280      	movs	r2, #128	; 0x80
    2caa:	0252      	lsls	r2, r2, #9
    2cac:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2cae:	1d3b      	adds	r3, r7, #4
    2cb0:	4a19      	ldr	r2, [pc, #100]	; (2d18 <sd_mmc_spi_init+0x90>)
    2cb2:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2cb4:	1d3b      	adds	r3, r7, #4
    2cb6:	4a19      	ldr	r2, [pc, #100]	; (2d1c <sd_mmc_spi_init+0x94>)
    2cb8:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2cba:	1d3b      	adds	r3, r7, #4
    2cbc:	4a18      	ldr	r2, [pc, #96]	; (2d20 <sd_mmc_spi_init+0x98>)
    2cbe:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2cc0:	1d3b      	adds	r3, r7, #4
    2cc2:	4a18      	ldr	r2, [pc, #96]	; (2d24 <sd_mmc_spi_init+0x9c>)
    2cc4:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2cc6:	1d3b      	adds	r3, r7, #4
    2cc8:	2224      	movs	r2, #36	; 0x24
    2cca:	2100      	movs	r1, #0
    2ccc:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2cce:	1d3b      	adds	r3, r7, #4
    2cd0:	4a15      	ldr	r2, [pc, #84]	; (2d28 <sd_mmc_spi_init+0xa0>)
    2cd2:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2cd4:	1d3a      	adds	r2, r7, #4
    2cd6:	4915      	ldr	r1, [pc, #84]	; (2d2c <sd_mmc_spi_init+0xa4>)
    2cd8:	4b15      	ldr	r3, [pc, #84]	; (2d30 <sd_mmc_spi_init+0xa8>)
    2cda:	0018      	movs	r0, r3
    2cdc:	4b15      	ldr	r3, [pc, #84]	; (2d34 <sd_mmc_spi_init+0xac>)
    2cde:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2ce0:	4b13      	ldr	r3, [pc, #76]	; (2d30 <sd_mmc_spi_init+0xa8>)
    2ce2:	0018      	movs	r0, r3
    2ce4:	4b14      	ldr	r3, [pc, #80]	; (2d38 <sd_mmc_spi_init+0xb0>)
    2ce6:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2ce8:	4b14      	ldr	r3, [pc, #80]	; (2d3c <sd_mmc_spi_init+0xb4>)
    2cea:	0018      	movs	r0, r3
    2cec:	4b14      	ldr	r3, [pc, #80]	; (2d40 <sd_mmc_spi_init+0xb8>)
    2cee:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2cf0:	4b14      	ldr	r3, [pc, #80]	; (2d44 <sd_mmc_spi_init+0xbc>)
    2cf2:	781a      	ldrb	r2, [r3, #0]
    2cf4:	4b11      	ldr	r3, [pc, #68]	; (2d3c <sd_mmc_spi_init+0xb4>)
    2cf6:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2cf8:	4a10      	ldr	r2, [pc, #64]	; (2d3c <sd_mmc_spi_init+0xb4>)
    2cfa:	4b13      	ldr	r3, [pc, #76]	; (2d48 <sd_mmc_spi_init+0xc0>)
    2cfc:	0011      	movs	r1, r2
    2cfe:	0018      	movs	r0, r3
    2d00:	4b12      	ldr	r3, [pc, #72]	; (2d4c <sd_mmc_spi_init+0xc4>)
    2d02:	4798      	blx	r3
}
    2d04:	46c0      	nop			; (mov r8, r8)
    2d06:	46bd      	mov	sp, r7
    2d08:	b010      	add	sp, #64	; 0x40
    2d0a:	bd80      	pop	{r7, pc}
    2d0c:	20000157 	.word	0x20000157
    2d10:	000026f5 	.word	0x000026f5
    2d14:	000027b9 	.word	0x000027b9
    2d18:	00100002 	.word	0x00100002
    2d1c:	00110002 	.word	0x00110002
    2d20:	00120002 	.word	0x00120002
    2d24:	00130002 	.word	0x00130002
    2d28:	00061a80 	.word	0x00061a80
    2d2c:	42000c00 	.word	0x42000c00
    2d30:	20000114 	.word	0x20000114
    2d34:	000048e9 	.word	0x000048e9
    2d38:	000028c5 	.word	0x000028c5
    2d3c:	20000154 	.word	0x20000154
    2d40:	0000283d 	.word	0x0000283d
    2d44:	20000008 	.word	0x20000008
    2d48:	20000150 	.word	0x20000150
    2d4c:	00002861 	.word	0x00002861

00002d50 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2d50:	b590      	push	{r4, r7, lr}
    2d52:	b083      	sub	sp, #12
    2d54:	af00      	add	r7, sp, #0
    2d56:	0004      	movs	r4, r0
    2d58:	6039      	str	r1, [r7, #0]
    2d5a:	0010      	movs	r0, r2
    2d5c:	0019      	movs	r1, r3
    2d5e:	1dfb      	adds	r3, r7, #7
    2d60:	1c22      	adds	r2, r4, #0
    2d62:	701a      	strb	r2, [r3, #0]
    2d64:	1dbb      	adds	r3, r7, #6
    2d66:	1c02      	adds	r2, r0, #0
    2d68:	701a      	strb	r2, [r3, #0]
    2d6a:	1d7b      	adds	r3, r7, #5
    2d6c:	1c0a      	adds	r2, r1, #0
    2d6e:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d70:	4b13      	ldr	r3, [pc, #76]	; (2dc0 <sd_mmc_spi_select_device+0x70>)
    2d72:	2200      	movs	r2, #0
    2d74:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	4a12      	ldr	r2, [pc, #72]	; (2dc4 <sd_mmc_spi_select_device+0x74>)
    2d7a:	4293      	cmp	r3, r2
    2d7c:	d907      	bls.n	2d8e <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2d7e:	4b11      	ldr	r3, [pc, #68]	; (2dc4 <sd_mmc_spi_select_device+0x74>)
    2d80:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2d82:	e004      	b.n	2d8e <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2d84:	683b      	ldr	r3, [r7, #0]
    2d86:	08db      	lsrs	r3, r3, #3
    2d88:	683a      	ldr	r2, [r7, #0]
    2d8a:	1ad3      	subs	r3, r2, r3
    2d8c:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2d8e:	683a      	ldr	r2, [r7, #0]
    2d90:	4b0d      	ldr	r3, [pc, #52]	; (2dc8 <sd_mmc_spi_select_device+0x78>)
    2d92:	0011      	movs	r1, r2
    2d94:	0018      	movs	r0, r3
    2d96:	4b0d      	ldr	r3, [pc, #52]	; (2dcc <sd_mmc_spi_select_device+0x7c>)
    2d98:	4798      	blx	r3
    2d9a:	0003      	movs	r3, r0
    2d9c:	2b17      	cmp	r3, #23
    2d9e:	d0f1      	beq.n	2d84 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2da0:	1dfb      	adds	r3, r7, #7
    2da2:	781a      	ldrb	r2, [r3, #0]
    2da4:	0013      	movs	r3, r2
    2da6:	005b      	lsls	r3, r3, #1
    2da8:	189b      	adds	r3, r3, r2
    2daa:	4a09      	ldr	r2, [pc, #36]	; (2dd0 <sd_mmc_spi_select_device+0x80>)
    2dac:	1899      	adds	r1, r3, r2
    2dae:	4b06      	ldr	r3, [pc, #24]	; (2dc8 <sd_mmc_spi_select_device+0x78>)
    2db0:	2201      	movs	r2, #1
    2db2:	0018      	movs	r0, r3
    2db4:	4b07      	ldr	r3, [pc, #28]	; (2dd4 <sd_mmc_spi_select_device+0x84>)
    2db6:	4798      	blx	r3
}
    2db8:	46c0      	nop			; (mov r8, r8)
    2dba:	46bd      	mov	sp, r7
    2dbc:	b003      	add	sp, #12
    2dbe:	bd90      	pop	{r4, r7, pc}
    2dc0:	20000157 	.word	0x20000157
    2dc4:	00989680 	.word	0x00989680
    2dc8:	20000114 	.word	0x20000114
    2dcc:	00004611 	.word	0x00004611
    2dd0:	20000150 	.word	0x20000150
    2dd4:	00004bad 	.word	0x00004bad

00002dd8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	b082      	sub	sp, #8
    2ddc:	af00      	add	r7, sp, #0
    2dde:	0002      	movs	r2, r0
    2de0:	1dfb      	adds	r3, r7, #7
    2de2:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2de4:	4b09      	ldr	r3, [pc, #36]	; (2e0c <sd_mmc_spi_deselect_device+0x34>)
    2de6:	2200      	movs	r2, #0
    2de8:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2dea:	1dfb      	adds	r3, r7, #7
    2dec:	781a      	ldrb	r2, [r3, #0]
    2dee:	0013      	movs	r3, r2
    2df0:	005b      	lsls	r3, r3, #1
    2df2:	189b      	adds	r3, r3, r2
    2df4:	4a06      	ldr	r2, [pc, #24]	; (2e10 <sd_mmc_spi_deselect_device+0x38>)
    2df6:	1899      	adds	r1, r3, r2
    2df8:	4b06      	ldr	r3, [pc, #24]	; (2e14 <sd_mmc_spi_deselect_device+0x3c>)
    2dfa:	2200      	movs	r2, #0
    2dfc:	0018      	movs	r0, r3
    2dfe:	4b06      	ldr	r3, [pc, #24]	; (2e18 <sd_mmc_spi_deselect_device+0x40>)
    2e00:	4798      	blx	r3
}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	46bd      	mov	sp, r7
    2e06:	b002      	add	sp, #8
    2e08:	bd80      	pop	{r7, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	20000157 	.word	0x20000157
    2e10:	20000150 	.word	0x20000150
    2e14:	20000114 	.word	0x20000114
    2e18:	00004bad 	.word	0x00004bad

00002e1c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b082      	sub	sp, #8
    2e20:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2e22:	1dbb      	adds	r3, r7, #6
    2e24:	22ff      	movs	r2, #255	; 0xff
    2e26:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2e28:	4b0c      	ldr	r3, [pc, #48]	; (2e5c <sd_mmc_spi_send_clock+0x40>)
    2e2a:	2200      	movs	r2, #0
    2e2c:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2e2e:	1dfb      	adds	r3, r7, #7
    2e30:	2200      	movs	r2, #0
    2e32:	701a      	strb	r2, [r3, #0]
    2e34:	e00a      	b.n	2e4c <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2e36:	1db9      	adds	r1, r7, #6
    2e38:	4b09      	ldr	r3, [pc, #36]	; (2e60 <sd_mmc_spi_send_clock+0x44>)
    2e3a:	2201      	movs	r2, #1
    2e3c:	0018      	movs	r0, r3
    2e3e:	4b09      	ldr	r3, [pc, #36]	; (2e64 <sd_mmc_spi_send_clock+0x48>)
    2e40:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2e42:	1dfb      	adds	r3, r7, #7
    2e44:	781a      	ldrb	r2, [r3, #0]
    2e46:	1dfb      	adds	r3, r7, #7
    2e48:	3201      	adds	r2, #1
    2e4a:	701a      	strb	r2, [r3, #0]
    2e4c:	1dfb      	adds	r3, r7, #7
    2e4e:	781b      	ldrb	r3, [r3, #0]
    2e50:	2b09      	cmp	r3, #9
    2e52:	d9f0      	bls.n	2e36 <sd_mmc_spi_send_clock+0x1a>
	}
}
    2e54:	46c0      	nop			; (mov r8, r8)
    2e56:	46bd      	mov	sp, r7
    2e58:	b002      	add	sp, #8
    2e5a:	bd80      	pop	{r7, pc}
    2e5c:	20000157 	.word	0x20000157
    2e60:	20000114 	.word	0x20000114
    2e64:	00004c9d 	.word	0x00004c9d

00002e68 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2e68:	b590      	push	{r4, r7, lr}
    2e6a:	b085      	sub	sp, #20
    2e6c:	af02      	add	r7, sp, #8
    2e6e:	6078      	str	r0, [r7, #4]
    2e70:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2e72:	6839      	ldr	r1, [r7, #0]
    2e74:	6878      	ldr	r0, [r7, #4]
    2e76:	2300      	movs	r3, #0
    2e78:	9300      	str	r3, [sp, #0]
    2e7a:	2300      	movs	r3, #0
    2e7c:	2200      	movs	r2, #0
    2e7e:	4c03      	ldr	r4, [pc, #12]	; (2e8c <sd_mmc_spi_send_cmd+0x24>)
    2e80:	47a0      	blx	r4
    2e82:	0003      	movs	r3, r0
}
    2e84:	0018      	movs	r0, r3
    2e86:	46bd      	mov	sp, r7
    2e88:	b003      	add	sp, #12
    2e8a:	bd90      	pop	{r4, r7, pc}
    2e8c:	00002e91 	.word	0x00002e91

00002e90 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2e90:	b590      	push	{r4, r7, lr}
    2e92:	b089      	sub	sp, #36	; 0x24
    2e94:	af00      	add	r7, sp, #0
    2e96:	60f8      	str	r0, [r7, #12]
    2e98:	60b9      	str	r1, [r7, #8]
    2e9a:	0019      	movs	r1, r3
    2e9c:	1dbb      	adds	r3, r7, #6
    2e9e:	801a      	strh	r2, [r3, #0]
    2ea0:	1d3b      	adds	r3, r7, #4
    2ea2:	1c0a      	adds	r2, r1, #0
    2ea4:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2ea6:	231b      	movs	r3, #27
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	22ff      	movs	r2, #255	; 0xff
    2eac:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2eae:	231c      	movs	r3, #28
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	22ff      	movs	r2, #255	; 0xff
    2eb4:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2eb6:	4b72      	ldr	r3, [pc, #456]	; (3080 <sd_mmc_spi_adtc_start+0x1f0>)
    2eb8:	2200      	movs	r2, #0
    2eba:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2ebc:	68fb      	ldr	r3, [r7, #12]
    2ebe:	b2db      	uxtb	r3, r3
    2ec0:	223f      	movs	r2, #63	; 0x3f
    2ec2:	4013      	ands	r3, r2
    2ec4:	b2db      	uxtb	r3, r3
    2ec6:	2240      	movs	r2, #64	; 0x40
    2ec8:	4313      	orrs	r3, r2
    2eca:	b2da      	uxtb	r2, r3
    2ecc:	2314      	movs	r3, #20
    2ece:	18fb      	adds	r3, r7, r3
    2ed0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2ed2:	68bb      	ldr	r3, [r7, #8]
    2ed4:	0e1b      	lsrs	r3, r3, #24
    2ed6:	b2da      	uxtb	r2, r3
    2ed8:	2314      	movs	r3, #20
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2ede:	68bb      	ldr	r3, [r7, #8]
    2ee0:	0c1b      	lsrs	r3, r3, #16
    2ee2:	b2da      	uxtb	r2, r3
    2ee4:	2314      	movs	r3, #20
    2ee6:	18fb      	adds	r3, r7, r3
    2ee8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2eea:	68bb      	ldr	r3, [r7, #8]
    2eec:	0a1b      	lsrs	r3, r3, #8
    2eee:	b2da      	uxtb	r2, r3
    2ef0:	2314      	movs	r3, #20
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2ef6:	68bb      	ldr	r3, [r7, #8]
    2ef8:	b2da      	uxtb	r2, r3
    2efa:	2314      	movs	r3, #20
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2f00:	2314      	movs	r3, #20
    2f02:	18fb      	adds	r3, r7, r3
    2f04:	2105      	movs	r1, #5
    2f06:	0018      	movs	r0, r3
    2f08:	4b5e      	ldr	r3, [pc, #376]	; (3084 <sd_mmc_spi_adtc_start+0x1f4>)
    2f0a:	4798      	blx	r3
    2f0c:	0003      	movs	r3, r0
    2f0e:	001a      	movs	r2, r3
    2f10:	2314      	movs	r3, #20
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2f16:	231b      	movs	r3, #27
    2f18:	18f9      	adds	r1, r7, r3
    2f1a:	4b5b      	ldr	r3, [pc, #364]	; (3088 <sd_mmc_spi_adtc_start+0x1f8>)
    2f1c:	2201      	movs	r2, #1
    2f1e:	0018      	movs	r0, r3
    2f20:	4b5a      	ldr	r3, [pc, #360]	; (308c <sd_mmc_spi_adtc_start+0x1fc>)
    2f22:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2f24:	2314      	movs	r3, #20
    2f26:	18f9      	adds	r1, r7, r3
    2f28:	4b57      	ldr	r3, [pc, #348]	; (3088 <sd_mmc_spi_adtc_start+0x1f8>)
    2f2a:	2206      	movs	r2, #6
    2f2c:	0018      	movs	r0, r3
    2f2e:	4b57      	ldr	r3, [pc, #348]	; (308c <sd_mmc_spi_adtc_start+0x1fc>)
    2f30:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2f32:	2313      	movs	r3, #19
    2f34:	18fb      	adds	r3, r7, r3
    2f36:	22ff      	movs	r2, #255	; 0xff
    2f38:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2f3a:	231c      	movs	r3, #28
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	881b      	ldrh	r3, [r3, #0]
    2f40:	2213      	movs	r2, #19
    2f42:	18b9      	adds	r1, r7, r2
    2f44:	4850      	ldr	r0, [pc, #320]	; (3088 <sd_mmc_spi_adtc_start+0x1f8>)
    2f46:	2201      	movs	r2, #1
    2f48:	4c51      	ldr	r4, [pc, #324]	; (3090 <sd_mmc_spi_adtc_start+0x200>)
    2f4a:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2f4c:	231f      	movs	r3, #31
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	2207      	movs	r2, #7
    2f52:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2f54:	231c      	movs	r3, #28
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	881b      	ldrh	r3, [r3, #0]
    2f5a:	2213      	movs	r2, #19
    2f5c:	18b9      	adds	r1, r7, r2
    2f5e:	484a      	ldr	r0, [pc, #296]	; (3088 <sd_mmc_spi_adtc_start+0x1f8>)
    2f60:	2201      	movs	r2, #1
    2f62:	4c4b      	ldr	r4, [pc, #300]	; (3090 <sd_mmc_spi_adtc_start+0x200>)
    2f64:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2f66:	2313      	movs	r3, #19
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	b25b      	sxtb	r3, r3
    2f6e:	2b00      	cmp	r3, #0
    2f70:	da10      	bge.n	2f94 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2f72:	231f      	movs	r3, #31
    2f74:	18fb      	adds	r3, r7, r3
    2f76:	221f      	movs	r2, #31
    2f78:	18ba      	adds	r2, r7, r2
    2f7a:	7812      	ldrb	r2, [r2, #0]
    2f7c:	3a01      	subs	r2, #1
    2f7e:	701a      	strb	r2, [r3, #0]
    2f80:	231f      	movs	r3, #31
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	781b      	ldrb	r3, [r3, #0]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d1e4      	bne.n	2f54 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2f8a:	4b3d      	ldr	r3, [pc, #244]	; (3080 <sd_mmc_spi_adtc_start+0x1f0>)
    2f8c:	2202      	movs	r2, #2
    2f8e:	701a      	strb	r2, [r3, #0]
			return false;
    2f90:	2300      	movs	r3, #0
    2f92:	e070      	b.n	3076 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2f94:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2f96:	2313      	movs	r3, #19
    2f98:	18fb      	adds	r3, r7, r3
    2f9a:	781b      	ldrb	r3, [r3, #0]
    2f9c:	001a      	movs	r2, r3
    2f9e:	4b3d      	ldr	r3, [pc, #244]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    2fa0:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2fa2:	2313      	movs	r3, #19
    2fa4:	18fb      	adds	r3, r7, r3
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	001a      	movs	r2, r3
    2faa:	2308      	movs	r3, #8
    2fac:	4013      	ands	r3, r2
    2fae:	d004      	beq.n	2fba <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2fb0:	4b33      	ldr	r3, [pc, #204]	; (3080 <sd_mmc_spi_adtc_start+0x1f0>)
    2fb2:	2206      	movs	r2, #6
    2fb4:	701a      	strb	r2, [r3, #0]
		return false;
    2fb6:	2300      	movs	r3, #0
    2fb8:	e05d      	b.n	3076 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2fba:	2313      	movs	r3, #19
    2fbc:	18fb      	adds	r3, r7, r3
    2fbe:	781b      	ldrb	r3, [r3, #0]
    2fc0:	001a      	movs	r2, r3
    2fc2:	2304      	movs	r3, #4
    2fc4:	4013      	ands	r3, r2
    2fc6:	d004      	beq.n	2fd2 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2fc8:	4b2d      	ldr	r3, [pc, #180]	; (3080 <sd_mmc_spi_adtc_start+0x1f0>)
    2fca:	2209      	movs	r2, #9
    2fcc:	701a      	strb	r2, [r3, #0]
		return false;
    2fce:	2300      	movs	r3, #0
    2fd0:	e051      	b.n	3076 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2fd2:	2313      	movs	r3, #19
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	781b      	ldrb	r3, [r3, #0]
    2fd8:	001a      	movs	r2, r3
    2fda:	2301      	movs	r3, #1
    2fdc:	439a      	bics	r2, r3
    2fde:	1e13      	subs	r3, r2, #0
    2fe0:	d004      	beq.n	2fec <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2fe2:	4b27      	ldr	r3, [pc, #156]	; (3080 <sd_mmc_spi_adtc_start+0x1f0>)
    2fe4:	2201      	movs	r2, #1
    2fe6:	701a      	strb	r2, [r3, #0]
		return false;
    2fe8:	2300      	movs	r3, #0
    2fea:	e044      	b.n	3076 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2fec:	68fa      	ldr	r2, [r7, #12]
    2fee:	2380      	movs	r3, #128	; 0x80
    2ff0:	019b      	lsls	r3, r3, #6
    2ff2:	4013      	ands	r3, r2
    2ff4:	d00d      	beq.n	3012 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2ff6:	4b28      	ldr	r3, [pc, #160]	; (3098 <sd_mmc_spi_adtc_start+0x208>)
    2ff8:	4798      	blx	r3
    2ffa:	0003      	movs	r3, r0
    2ffc:	001a      	movs	r2, r3
    2ffe:	2301      	movs	r3, #1
    3000:	4053      	eors	r3, r2
    3002:	b2db      	uxtb	r3, r3
    3004:	2b00      	cmp	r3, #0
    3006:	d004      	beq.n	3012 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    3008:	4b1d      	ldr	r3, [pc, #116]	; (3080 <sd_mmc_spi_adtc_start+0x1f0>)
    300a:	2203      	movs	r2, #3
    300c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    300e:	2300      	movs	r3, #0
    3010:	e031      	b.n	3076 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    3012:	68fa      	ldr	r2, [r7, #12]
    3014:	2380      	movs	r3, #128	; 0x80
    3016:	009b      	lsls	r3, r3, #2
    3018:	4013      	ands	r3, r2
    301a:	d00e      	beq.n	303a <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    301c:	4b1d      	ldr	r3, [pc, #116]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    301e:	2200      	movs	r2, #0
    3020:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    3022:	231c      	movs	r3, #28
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	491a      	ldr	r1, [pc, #104]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    302a:	4817      	ldr	r0, [pc, #92]	; (3088 <sd_mmc_spi_adtc_start+0x1f8>)
    302c:	2201      	movs	r2, #1
    302e:	4c18      	ldr	r4, [pc, #96]	; (3090 <sd_mmc_spi_adtc_start+0x200>)
    3030:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    3032:	4b18      	ldr	r3, [pc, #96]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    3034:	681a      	ldr	r2, [r3, #0]
    3036:	4b17      	ldr	r3, [pc, #92]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    3038:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    303a:	68fa      	ldr	r2, [r7, #12]
    303c:	2380      	movs	r3, #128	; 0x80
    303e:	00db      	lsls	r3, r3, #3
    3040:	4013      	ands	r3, r2
    3042:	d00c      	beq.n	305e <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    3044:	231c      	movs	r3, #28
    3046:	18fb      	adds	r3, r7, r3
    3048:	881b      	ldrh	r3, [r3, #0]
    304a:	4912      	ldr	r1, [pc, #72]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    304c:	480e      	ldr	r0, [pc, #56]	; (3088 <sd_mmc_spi_adtc_start+0x1f8>)
    304e:	2204      	movs	r2, #4
    3050:	4c0f      	ldr	r4, [pc, #60]	; (3090 <sd_mmc_spi_adtc_start+0x200>)
    3052:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    3054:	4b0f      	ldr	r3, [pc, #60]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	ba1a      	rev	r2, r3
    305a:	4b0e      	ldr	r3, [pc, #56]	; (3094 <sd_mmc_spi_adtc_start+0x204>)
    305c:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    305e:	4b0f      	ldr	r3, [pc, #60]	; (309c <sd_mmc_spi_adtc_start+0x20c>)
    3060:	1dba      	adds	r2, r7, #6
    3062:	8812      	ldrh	r2, [r2, #0]
    3064:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    3066:	4b0e      	ldr	r3, [pc, #56]	; (30a0 <sd_mmc_spi_adtc_start+0x210>)
    3068:	1d3a      	adds	r2, r7, #4
    306a:	8812      	ldrh	r2, [r2, #0]
    306c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    306e:	4b0d      	ldr	r3, [pc, #52]	; (30a4 <sd_mmc_spi_adtc_start+0x214>)
    3070:	2200      	movs	r2, #0
    3072:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    3074:	2301      	movs	r3, #1
}
    3076:	0018      	movs	r0, r3
    3078:	46bd      	mov	sp, r7
    307a:	b009      	add	sp, #36	; 0x24
    307c:	bd90      	pop	{r4, r7, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	20000157 	.word	0x20000157
    3084:	00002915 	.word	0x00002915
    3088:	20000114 	.word	0x20000114
    308c:	00004c9d 	.word	0x00004c9d
    3090:	00004a79 	.word	0x00004a79
    3094:	20000158 	.word	0x20000158
    3098:	000029d1 	.word	0x000029d1
    309c:	20000160 	.word	0x20000160
    30a0:	20000162 	.word	0x20000162
    30a4:	2000015c 	.word	0x2000015c

000030a8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    30a8:	b580      	push	{r7, lr}
    30aa:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    30ac:	4b02      	ldr	r3, [pc, #8]	; (30b8 <sd_mmc_spi_get_response+0x10>)
    30ae:	681b      	ldr	r3, [r3, #0]
}
    30b0:	0018      	movs	r0, r3
    30b2:	46bd      	mov	sp, r7
    30b4:	bd80      	pop	{r7, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	20000158 	.word	0x20000158

000030bc <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    30bc:	b590      	push	{r4, r7, lr}
    30be:	b085      	sub	sp, #20
    30c0:	af00      	add	r7, sp, #0
    30c2:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    30c4:	230e      	movs	r3, #14
    30c6:	18fb      	adds	r3, r7, r3
    30c8:	22ff      	movs	r2, #255	; 0xff
    30ca:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    30cc:	4b1c      	ldr	r3, [pc, #112]	; (3140 <sd_mmc_spi_read_word+0x84>)
    30ce:	2200      	movs	r2, #0
    30d0:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    30d2:	4b1c      	ldr	r3, [pc, #112]	; (3144 <sd_mmc_spi_read_word+0x88>)
    30d4:	681a      	ldr	r2, [r3, #0]
    30d6:	4b1c      	ldr	r3, [pc, #112]	; (3148 <sd_mmc_spi_read_word+0x8c>)
    30d8:	881b      	ldrh	r3, [r3, #0]
    30da:	0019      	movs	r1, r3
    30dc:	4b1b      	ldr	r3, [pc, #108]	; (314c <sd_mmc_spi_read_word+0x90>)
    30de:	0010      	movs	r0, r2
    30e0:	4798      	blx	r3
    30e2:	1e0b      	subs	r3, r1, #0
    30e4:	d10a      	bne.n	30fc <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    30e6:	4b1a      	ldr	r3, [pc, #104]	; (3150 <sd_mmc_spi_read_word+0x94>)
    30e8:	4798      	blx	r3
    30ea:	0003      	movs	r3, r0
    30ec:	001a      	movs	r2, r3
    30ee:	2301      	movs	r3, #1
    30f0:	4053      	eors	r3, r2
    30f2:	b2db      	uxtb	r3, r3
    30f4:	2b00      	cmp	r3, #0
    30f6:	d001      	beq.n	30fc <sd_mmc_spi_read_word+0x40>
			return false;
    30f8:	2300      	movs	r3, #0
    30fa:	e01d      	b.n	3138 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    30fc:	230e      	movs	r3, #14
    30fe:	18fb      	adds	r3, r7, r3
    3100:	881b      	ldrh	r3, [r3, #0]
    3102:	1d39      	adds	r1, r7, #4
    3104:	4813      	ldr	r0, [pc, #76]	; (3154 <sd_mmc_spi_read_word+0x98>)
    3106:	2204      	movs	r2, #4
    3108:	4c13      	ldr	r4, [pc, #76]	; (3158 <sd_mmc_spi_read_word+0x9c>)
    310a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	687a      	ldr	r2, [r7, #4]
    3110:	6812      	ldr	r2, [r2, #0]
    3112:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    3114:	4b0b      	ldr	r3, [pc, #44]	; (3144 <sd_mmc_spi_read_word+0x88>)
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	1d1a      	adds	r2, r3, #4
    311a:	4b0a      	ldr	r3, [pc, #40]	; (3144 <sd_mmc_spi_read_word+0x88>)
    311c:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    311e:	4b09      	ldr	r3, [pc, #36]	; (3144 <sd_mmc_spi_read_word+0x88>)
    3120:	681a      	ldr	r2, [r3, #0]
    3122:	4b09      	ldr	r3, [pc, #36]	; (3148 <sd_mmc_spi_read_word+0x8c>)
    3124:	881b      	ldrh	r3, [r3, #0]
    3126:	0019      	movs	r1, r3
    3128:	4b08      	ldr	r3, [pc, #32]	; (314c <sd_mmc_spi_read_word+0x90>)
    312a:	0010      	movs	r0, r2
    312c:	4798      	blx	r3
    312e:	1e0b      	subs	r3, r1, #0
    3130:	d101      	bne.n	3136 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    3132:	4b0a      	ldr	r3, [pc, #40]	; (315c <sd_mmc_spi_read_word+0xa0>)
    3134:	4798      	blx	r3
	}
	return true;
    3136:	2301      	movs	r3, #1
}
    3138:	0018      	movs	r0, r3
    313a:	46bd      	mov	sp, r7
    313c:	b005      	add	sp, #20
    313e:	bd90      	pop	{r4, r7, pc}
    3140:	20000157 	.word	0x20000157
    3144:	2000015c 	.word	0x2000015c
    3148:	20000160 	.word	0x20000160
    314c:	0000b6c9 	.word	0x0000b6c9
    3150:	00002a3d 	.word	0x00002a3d
    3154:	20000114 	.word	0x20000114
    3158:	00004a79 	.word	0x00004a79
    315c:	00002ac1 	.word	0x00002ac1

00003160 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    3160:	b590      	push	{r4, r7, lr}
    3162:	b085      	sub	sp, #20
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	000a      	movs	r2, r1
    316a:	1cbb      	adds	r3, r7, #2
    316c:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    316e:	230a      	movs	r3, #10
    3170:	18fb      	adds	r3, r7, r3
    3172:	22ff      	movs	r2, #255	; 0xff
    3174:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3176:	4b1c      	ldr	r3, [pc, #112]	; (31e8 <sd_mmc_spi_start_read_blocks+0x88>)
    3178:	2200      	movs	r2, #0
    317a:	701a      	strb	r2, [r3, #0]
	pos = 0;
    317c:	2300      	movs	r3, #0
    317e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    3180:	e025      	b.n	31ce <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    3182:	4b1a      	ldr	r3, [pc, #104]	; (31ec <sd_mmc_spi_start_read_blocks+0x8c>)
    3184:	4798      	blx	r3
    3186:	0003      	movs	r3, r0
    3188:	001a      	movs	r2, r3
    318a:	2301      	movs	r3, #1
    318c:	4053      	eors	r3, r2
    318e:	b2db      	uxtb	r3, r3
    3190:	2b00      	cmp	r3, #0
    3192:	d001      	beq.n	3198 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    3194:	2300      	movs	r3, #0
    3196:	e022      	b.n	31de <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    3198:	687a      	ldr	r2, [r7, #4]
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	18d1      	adds	r1, r2, r3
    319e:	4b14      	ldr	r3, [pc, #80]	; (31f0 <sd_mmc_spi_start_read_blocks+0x90>)
    31a0:	881a      	ldrh	r2, [r3, #0]
    31a2:	230a      	movs	r3, #10
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	881b      	ldrh	r3, [r3, #0]
    31a8:	4812      	ldr	r0, [pc, #72]	; (31f4 <sd_mmc_spi_start_read_blocks+0x94>)
    31aa:	4c13      	ldr	r4, [pc, #76]	; (31f8 <sd_mmc_spi_start_read_blocks+0x98>)
    31ac:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    31ae:	4b10      	ldr	r3, [pc, #64]	; (31f0 <sd_mmc_spi_start_read_blocks+0x90>)
    31b0:	881b      	ldrh	r3, [r3, #0]
    31b2:	001a      	movs	r2, r3
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	189b      	adds	r3, r3, r2
    31b8:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    31ba:	4b0d      	ldr	r3, [pc, #52]	; (31f0 <sd_mmc_spi_start_read_blocks+0x90>)
    31bc:	881b      	ldrh	r3, [r3, #0]
    31be:	001a      	movs	r2, r3
    31c0:	4b0e      	ldr	r3, [pc, #56]	; (31fc <sd_mmc_spi_start_read_blocks+0x9c>)
    31c2:	681b      	ldr	r3, [r3, #0]
    31c4:	18d2      	adds	r2, r2, r3
    31c6:	4b0d      	ldr	r3, [pc, #52]	; (31fc <sd_mmc_spi_start_read_blocks+0x9c>)
    31c8:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    31ca:	4b0d      	ldr	r3, [pc, #52]	; (3200 <sd_mmc_spi_start_read_blocks+0xa0>)
    31cc:	4798      	blx	r3
	while (nb_block--) {
    31ce:	1cbb      	adds	r3, r7, #2
    31d0:	881b      	ldrh	r3, [r3, #0]
    31d2:	1cba      	adds	r2, r7, #2
    31d4:	1e59      	subs	r1, r3, #1
    31d6:	8011      	strh	r1, [r2, #0]
    31d8:	2b00      	cmp	r3, #0
    31da:	d1d2      	bne.n	3182 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    31dc:	2301      	movs	r3, #1
}
    31de:	0018      	movs	r0, r3
    31e0:	46bd      	mov	sp, r7
    31e2:	b005      	add	sp, #20
    31e4:	bd90      	pop	{r4, r7, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	20000157 	.word	0x20000157
    31ec:	00002a3d 	.word	0x00002a3d
    31f0:	20000160 	.word	0x20000160
    31f4:	20000114 	.word	0x20000114
    31f8:	00004a79 	.word	0x00004a79
    31fc:	2000015c 	.word	0x2000015c
    3200:	00002ac1 	.word	0x00002ac1

00003204 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    3204:	b580      	push	{r7, lr}
    3206:	af00      	add	r7, sp, #0
	return true;
    3208:	2301      	movs	r3, #1
}
    320a:	0018      	movs	r0, r3
    320c:	46bd      	mov	sp, r7
    320e:	bd80      	pop	{r7, pc}

00003210 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    3210:	b580      	push	{r7, lr}
    3212:	b084      	sub	sp, #16
    3214:	af00      	add	r7, sp, #0
    3216:	6078      	str	r0, [r7, #4]
    3218:	000a      	movs	r2, r1
    321a:	1cbb      	adds	r3, r7, #2
    321c:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    321e:	4b24      	ldr	r3, [pc, #144]	; (32b0 <sd_mmc_spi_start_write_blocks+0xa0>)
    3220:	2200      	movs	r2, #0
    3222:	701a      	strb	r2, [r3, #0]
	pos = 0;
    3224:	2300      	movs	r3, #0
    3226:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    3228:	e035      	b.n	3296 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    322a:	4b22      	ldr	r3, [pc, #136]	; (32b4 <sd_mmc_spi_start_write_blocks+0xa4>)
    322c:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    322e:	687a      	ldr	r2, [r7, #4]
    3230:	68fb      	ldr	r3, [r7, #12]
    3232:	18d1      	adds	r1, r2, r3
    3234:	4b20      	ldr	r3, [pc, #128]	; (32b8 <sd_mmc_spi_start_write_blocks+0xa8>)
    3236:	881a      	ldrh	r2, [r3, #0]
    3238:	4b20      	ldr	r3, [pc, #128]	; (32bc <sd_mmc_spi_start_write_blocks+0xac>)
    323a:	0018      	movs	r0, r3
    323c:	4b20      	ldr	r3, [pc, #128]	; (32c0 <sd_mmc_spi_start_write_blocks+0xb0>)
    323e:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    3240:	4b1d      	ldr	r3, [pc, #116]	; (32b8 <sd_mmc_spi_start_write_blocks+0xa8>)
    3242:	881b      	ldrh	r3, [r3, #0]
    3244:	001a      	movs	r2, r3
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	189b      	adds	r3, r3, r2
    324a:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    324c:	4b1a      	ldr	r3, [pc, #104]	; (32b8 <sd_mmc_spi_start_write_blocks+0xa8>)
    324e:	881b      	ldrh	r3, [r3, #0]
    3250:	001a      	movs	r2, r3
    3252:	4b1c      	ldr	r3, [pc, #112]	; (32c4 <sd_mmc_spi_start_write_blocks+0xb4>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	18d2      	adds	r2, r2, r3
    3258:	4b1a      	ldr	r3, [pc, #104]	; (32c4 <sd_mmc_spi_start_write_blocks+0xb4>)
    325a:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    325c:	4b1a      	ldr	r3, [pc, #104]	; (32c8 <sd_mmc_spi_start_write_blocks+0xb8>)
    325e:	4798      	blx	r3
    3260:	0003      	movs	r3, r0
    3262:	001a      	movs	r2, r3
    3264:	2301      	movs	r3, #1
    3266:	4053      	eors	r3, r2
    3268:	b2db      	uxtb	r3, r3
    326a:	2b00      	cmp	r3, #0
    326c:	d001      	beq.n	3272 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    326e:	2300      	movs	r3, #0
    3270:	e019      	b.n	32a6 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    3272:	1cbb      	adds	r3, r7, #2
    3274:	881b      	ldrh	r3, [r3, #0]
    3276:	2b00      	cmp	r3, #0
    3278:	d00d      	beq.n	3296 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    327a:	4b14      	ldr	r3, [pc, #80]	; (32cc <sd_mmc_spi_start_write_blocks+0xbc>)
    327c:	4798      	blx	r3
    327e:	0003      	movs	r3, r0
    3280:	001a      	movs	r2, r3
    3282:	2301      	movs	r3, #1
    3284:	4053      	eors	r3, r2
    3286:	b2db      	uxtb	r3, r3
    3288:	2b00      	cmp	r3, #0
    328a:	d004      	beq.n	3296 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    328c:	4b08      	ldr	r3, [pc, #32]	; (32b0 <sd_mmc_spi_start_write_blocks+0xa0>)
    328e:	2205      	movs	r2, #5
    3290:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    3292:	2300      	movs	r3, #0
    3294:	e007      	b.n	32a6 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    3296:	1cbb      	adds	r3, r7, #2
    3298:	881b      	ldrh	r3, [r3, #0]
    329a:	1cba      	adds	r2, r7, #2
    329c:	1e59      	subs	r1, r3, #1
    329e:	8011      	strh	r1, [r2, #0]
    32a0:	2b00      	cmp	r3, #0
    32a2:	d1c2      	bne.n	322a <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    32a4:	2301      	movs	r3, #1
}
    32a6:	0018      	movs	r0, r3
    32a8:	46bd      	mov	sp, r7
    32aa:	b004      	add	sp, #16
    32ac:	bd80      	pop	{r7, pc}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	20000157 	.word	0x20000157
    32b4:	00002aed 	.word	0x00002aed
    32b8:	20000160 	.word	0x20000160
    32bc:	20000114 	.word	0x20000114
    32c0:	00004c9d 	.word	0x00004c9d
    32c4:	2000015c 	.word	0x2000015c
    32c8:	00002b3d 	.word	0x00002b3d
    32cc:	000029d1 	.word	0x000029d1

000032d0 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    32d0:	b580      	push	{r7, lr}
    32d2:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    32d4:	4b09      	ldr	r3, [pc, #36]	; (32fc <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    32d6:	4798      	blx	r3
    32d8:	0003      	movs	r3, r0
    32da:	001a      	movs	r2, r3
    32dc:	2301      	movs	r3, #1
    32de:	4053      	eors	r3, r2
    32e0:	b2db      	uxtb	r3, r3
    32e2:	2b00      	cmp	r3, #0
    32e4:	d004      	beq.n	32f0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    32e6:	4b06      	ldr	r3, [pc, #24]	; (3300 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    32e8:	2205      	movs	r2, #5
    32ea:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    32ec:	2300      	movs	r3, #0
    32ee:	e002      	b.n	32f6 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    32f0:	4b04      	ldr	r3, [pc, #16]	; (3304 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    32f2:	4798      	blx	r3
    32f4:	0003      	movs	r3, r0
}
    32f6:	0018      	movs	r0, r3
    32f8:	46bd      	mov	sp, r7
    32fa:	bd80      	pop	{r7, pc}
    32fc:	000029d1 	.word	0x000029d1
    3300:	20000157 	.word	0x20000157
    3304:	00002bd1 	.word	0x00002bd1

00003308 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    3308:	b580      	push	{r7, lr}
    330a:	b084      	sub	sp, #16
    330c:	af00      	add	r7, sp, #0
    330e:	0002      	movs	r2, r0
    3310:	1dfb      	adds	r3, r7, #7
    3312:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    3314:	1dfb      	adds	r3, r7, #7
    3316:	781b      	ldrb	r3, [r3, #0]
    3318:	2b00      	cmp	r3, #0
    331a:	d108      	bne.n	332e <mem_test_unit_ready+0x26>
    331c:	1dfb      	adds	r3, r7, #7
    331e:	781a      	ldrb	r2, [r3, #0]
    3320:	4b08      	ldr	r3, [pc, #32]	; (3344 <mem_test_unit_ready+0x3c>)
    3322:	0152      	lsls	r2, r2, #5
    3324:	58d3      	ldr	r3, [r2, r3]
    3326:	4798      	blx	r3
    3328:	0003      	movs	r3, r0
    332a:	001a      	movs	r2, r3
    332c:	e000      	b.n	3330 <mem_test_unit_ready+0x28>
    332e:	2201      	movs	r2, #1
  status =
    3330:	230f      	movs	r3, #15
    3332:	18fb      	adds	r3, r7, r3
    3334:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3336:	230f      	movs	r3, #15
    3338:	18fb      	adds	r3, r7, r3
    333a:	781b      	ldrb	r3, [r3, #0]
}
    333c:	0018      	movs	r0, r3
    333e:	46bd      	mov	sp, r7
    3340:	b004      	add	sp, #16
    3342:	bd80      	pop	{r7, pc}
    3344:	0000c9d8 	.word	0x0000c9d8

00003348 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    3348:	b580      	push	{r7, lr}
    334a:	b084      	sub	sp, #16
    334c:	af00      	add	r7, sp, #0
    334e:	0002      	movs	r2, r0
    3350:	6039      	str	r1, [r7, #0]
    3352:	1dfb      	adds	r3, r7, #7
    3354:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    3356:	1dfb      	adds	r3, r7, #7
    3358:	781b      	ldrb	r3, [r3, #0]
    335a:	2b00      	cmp	r3, #0
    335c:	d10c      	bne.n	3378 <mem_read_capacity+0x30>
    335e:	1dfb      	adds	r3, r7, #7
    3360:	781b      	ldrb	r3, [r3, #0]
    3362:	4a0b      	ldr	r2, [pc, #44]	; (3390 <mem_read_capacity+0x48>)
    3364:	015b      	lsls	r3, r3, #5
    3366:	18d3      	adds	r3, r2, r3
    3368:	3304      	adds	r3, #4
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	683a      	ldr	r2, [r7, #0]
    336e:	0010      	movs	r0, r2
    3370:	4798      	blx	r3
    3372:	0003      	movs	r3, r0
    3374:	001a      	movs	r2, r3
    3376:	e000      	b.n	337a <mem_read_capacity+0x32>
    3378:	2201      	movs	r2, #1
  status =
    337a:	230f      	movs	r3, #15
    337c:	18fb      	adds	r3, r7, r3
    337e:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3380:	230f      	movs	r3, #15
    3382:	18fb      	adds	r3, r7, r3
    3384:	781b      	ldrb	r3, [r3, #0]
}
    3386:	0018      	movs	r0, r3
    3388:	46bd      	mov	sp, r7
    338a:	b004      	add	sp, #16
    338c:	bd80      	pop	{r7, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	0000c9d8 	.word	0x0000c9d8

00003394 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    3394:	b580      	push	{r7, lr}
    3396:	b084      	sub	sp, #16
    3398:	af00      	add	r7, sp, #0
    339a:	0002      	movs	r2, r0
    339c:	1dfb      	adds	r3, r7, #7
    339e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    33a0:	1dfb      	adds	r3, r7, #7
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	425a      	negs	r2, r3
    33a6:	4153      	adcs	r3, r2
    33a8:	b2da      	uxtb	r2, r3
  sector_size =
    33aa:	230f      	movs	r3, #15
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    33b0:	230f      	movs	r3, #15
    33b2:	18fb      	adds	r3, r7, r3
    33b4:	781b      	ldrb	r3, [r3, #0]
}
    33b6:	0018      	movs	r0, r3
    33b8:	46bd      	mov	sp, r7
    33ba:	b004      	add	sp, #16
    33bc:	bd80      	pop	{r7, pc}
	...

000033c0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b084      	sub	sp, #16
    33c4:	af00      	add	r7, sp, #0
    33c6:	0002      	movs	r2, r0
    33c8:	1dfb      	adds	r3, r7, #7
    33ca:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    33cc:	1dfb      	adds	r3, r7, #7
    33ce:	781b      	ldrb	r3, [r3, #0]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d109      	bne.n	33e8 <mem_wr_protect+0x28>
    33d4:	1dfb      	adds	r3, r7, #7
    33d6:	781b      	ldrb	r3, [r3, #0]
    33d8:	4a0a      	ldr	r2, [pc, #40]	; (3404 <mem_wr_protect+0x44>)
    33da:	015b      	lsls	r3, r3, #5
    33dc:	18d3      	adds	r3, r2, r3
    33de:	330c      	adds	r3, #12
    33e0:	681b      	ldr	r3, [r3, #0]
    33e2:	4798      	blx	r3
    33e4:	1e03      	subs	r3, r0, #0
    33e6:	d001      	beq.n	33ec <mem_wr_protect+0x2c>
    33e8:	2201      	movs	r2, #1
    33ea:	e000      	b.n	33ee <mem_wr_protect+0x2e>
    33ec:	2200      	movs	r2, #0
  wr_protect =
    33ee:	230f      	movs	r3, #15
    33f0:	18fb      	adds	r3, r7, r3
    33f2:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    33f4:	230f      	movs	r3, #15
    33f6:	18fb      	adds	r3, r7, r3
    33f8:	781b      	ldrb	r3, [r3, #0]
}
    33fa:	0018      	movs	r0, r3
    33fc:	46bd      	mov	sp, r7
    33fe:	b004      	add	sp, #16
    3400:	bd80      	pop	{r7, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	0000c9d8 	.word	0x0000c9d8

00003408 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    3408:	b580      	push	{r7, lr}
    340a:	b086      	sub	sp, #24
    340c:	af00      	add	r7, sp, #0
    340e:	60b9      	str	r1, [r7, #8]
    3410:	607a      	str	r2, [r7, #4]
    3412:	230f      	movs	r3, #15
    3414:	18fb      	adds	r3, r7, r3
    3416:	1c02      	adds	r2, r0, #0
    3418:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    341a:	230f      	movs	r3, #15
    341c:	18fb      	adds	r3, r7, r3
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	2b00      	cmp	r3, #0
    3422:	d10e      	bne.n	3442 <memory_2_ram+0x3a>
    3424:	230f      	movs	r3, #15
    3426:	18fb      	adds	r3, r7, r3
    3428:	781b      	ldrb	r3, [r3, #0]
    342a:	4a0b      	ldr	r2, [pc, #44]	; (3458 <memory_2_ram+0x50>)
    342c:	015b      	lsls	r3, r3, #5
    342e:	18d3      	adds	r3, r2, r3
    3430:	3314      	adds	r3, #20
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	6879      	ldr	r1, [r7, #4]
    3436:	68ba      	ldr	r2, [r7, #8]
    3438:	0010      	movs	r0, r2
    343a:	4798      	blx	r3
    343c:	0003      	movs	r3, r0
    343e:	001a      	movs	r2, r3
    3440:	e000      	b.n	3444 <memory_2_ram+0x3c>
    3442:	2201      	movs	r2, #1
  status =
    3444:	2317      	movs	r3, #23
    3446:	18fb      	adds	r3, r7, r3
    3448:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    344a:	2317      	movs	r3, #23
    344c:	18fb      	adds	r3, r7, r3
    344e:	781b      	ldrb	r3, [r3, #0]
}
    3450:	0018      	movs	r0, r3
    3452:	46bd      	mov	sp, r7
    3454:	b006      	add	sp, #24
    3456:	bd80      	pop	{r7, pc}
    3458:	0000c9d8 	.word	0x0000c9d8

0000345c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    345c:	b580      	push	{r7, lr}
    345e:	b086      	sub	sp, #24
    3460:	af00      	add	r7, sp, #0
    3462:	60b9      	str	r1, [r7, #8]
    3464:	607a      	str	r2, [r7, #4]
    3466:	230f      	movs	r3, #15
    3468:	18fb      	adds	r3, r7, r3
    346a:	1c02      	adds	r2, r0, #0
    346c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    346e:	230f      	movs	r3, #15
    3470:	18fb      	adds	r3, r7, r3
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	2b00      	cmp	r3, #0
    3476:	d10e      	bne.n	3496 <ram_2_memory+0x3a>
    3478:	230f      	movs	r3, #15
    347a:	18fb      	adds	r3, r7, r3
    347c:	781b      	ldrb	r3, [r3, #0]
    347e:	4a0b      	ldr	r2, [pc, #44]	; (34ac <ram_2_memory+0x50>)
    3480:	015b      	lsls	r3, r3, #5
    3482:	18d3      	adds	r3, r2, r3
    3484:	3318      	adds	r3, #24
    3486:	681b      	ldr	r3, [r3, #0]
    3488:	6879      	ldr	r1, [r7, #4]
    348a:	68ba      	ldr	r2, [r7, #8]
    348c:	0010      	movs	r0, r2
    348e:	4798      	blx	r3
    3490:	0003      	movs	r3, r0
    3492:	001a      	movs	r2, r3
    3494:	e000      	b.n	3498 <ram_2_memory+0x3c>
    3496:	2201      	movs	r2, #1
  status =
    3498:	2317      	movs	r3, #23
    349a:	18fb      	adds	r3, r7, r3
    349c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    349e:	2317      	movs	r3, #23
    34a0:	18fb      	adds	r3, r7, r3
    34a2:	781b      	ldrb	r3, [r3, #0]
}
    34a4:	0018      	movs	r0, r3
    34a6:	46bd      	mov	sp, r7
    34a8:	b006      	add	sp, #24
    34aa:	bd80      	pop	{r7, pc}
    34ac:	0000c9d8 	.word	0x0000c9d8

000034b0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    34b0:	b580      	push	{r7, lr}
    34b2:	b082      	sub	sp, #8
    34b4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    34b6:	4b10      	ldr	r3, [pc, #64]	; (34f8 <cpu_irq_enter_critical+0x48>)
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d112      	bne.n	34e4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34be:	f3ef 8310 	mrs	r3, PRIMASK
    34c2:	607b      	str	r3, [r7, #4]
  return(result);
    34c4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    34c6:	2b00      	cmp	r3, #0
    34c8:	d109      	bne.n	34de <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    34ca:	b672      	cpsid	i
    34cc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    34d0:	4b0a      	ldr	r3, [pc, #40]	; (34fc <cpu_irq_enter_critical+0x4c>)
    34d2:	2200      	movs	r2, #0
    34d4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    34d6:	4b0a      	ldr	r3, [pc, #40]	; (3500 <cpu_irq_enter_critical+0x50>)
    34d8:	2201      	movs	r2, #1
    34da:	701a      	strb	r2, [r3, #0]
    34dc:	e002      	b.n	34e4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    34de:	4b08      	ldr	r3, [pc, #32]	; (3500 <cpu_irq_enter_critical+0x50>)
    34e0:	2200      	movs	r2, #0
    34e2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    34e4:	4b04      	ldr	r3, [pc, #16]	; (34f8 <cpu_irq_enter_critical+0x48>)
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	1c5a      	adds	r2, r3, #1
    34ea:	4b03      	ldr	r3, [pc, #12]	; (34f8 <cpu_irq_enter_critical+0x48>)
    34ec:	601a      	str	r2, [r3, #0]
}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	46bd      	mov	sp, r7
    34f2:	b002      	add	sp, #8
    34f4:	bd80      	pop	{r7, pc}
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	20000164 	.word	0x20000164
    34fc:	20000009 	.word	0x20000009
    3500:	20000168 	.word	0x20000168

00003504 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3504:	b580      	push	{r7, lr}
    3506:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3508:	4b0b      	ldr	r3, [pc, #44]	; (3538 <cpu_irq_leave_critical+0x34>)
    350a:	681b      	ldr	r3, [r3, #0]
    350c:	1e5a      	subs	r2, r3, #1
    350e:	4b0a      	ldr	r3, [pc, #40]	; (3538 <cpu_irq_leave_critical+0x34>)
    3510:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3512:	4b09      	ldr	r3, [pc, #36]	; (3538 <cpu_irq_leave_critical+0x34>)
    3514:	681b      	ldr	r3, [r3, #0]
    3516:	2b00      	cmp	r3, #0
    3518:	d10a      	bne.n	3530 <cpu_irq_leave_critical+0x2c>
    351a:	4b08      	ldr	r3, [pc, #32]	; (353c <cpu_irq_leave_critical+0x38>)
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	b2db      	uxtb	r3, r3
    3520:	2b00      	cmp	r3, #0
    3522:	d005      	beq.n	3530 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3524:	4b06      	ldr	r3, [pc, #24]	; (3540 <cpu_irq_leave_critical+0x3c>)
    3526:	2201      	movs	r2, #1
    3528:	701a      	strb	r2, [r3, #0]
    352a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    352e:	b662      	cpsie	i
	}
}
    3530:	46c0      	nop			; (mov r8, r8)
    3532:	46bd      	mov	sp, r7
    3534:	bd80      	pop	{r7, pc}
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	20000164 	.word	0x20000164
    353c:	20000168 	.word	0x20000168
    3540:	20000009 	.word	0x20000009

00003544 <system_pinmux_get_config_defaults>:
{
    3544:	b580      	push	{r7, lr}
    3546:	b082      	sub	sp, #8
    3548:	af00      	add	r7, sp, #0
    354a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	2280      	movs	r2, #128	; 0x80
    3550:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	2200      	movs	r2, #0
    3556:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	2201      	movs	r2, #1
    355c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	2200      	movs	r2, #0
    3562:	70da      	strb	r2, [r3, #3]
}
    3564:	46c0      	nop			; (mov r8, r8)
    3566:	46bd      	mov	sp, r7
    3568:	b002      	add	sp, #8
    356a:	bd80      	pop	{r7, pc}

0000356c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    356c:	b580      	push	{r7, lr}
    356e:	b084      	sub	sp, #16
    3570:	af00      	add	r7, sp, #0
    3572:	0002      	movs	r2, r0
    3574:	6039      	str	r1, [r7, #0]
    3576:	1dfb      	adds	r3, r7, #7
    3578:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    357a:	230c      	movs	r3, #12
    357c:	18fb      	adds	r3, r7, r3
    357e:	0018      	movs	r0, r3
    3580:	4b10      	ldr	r3, [pc, #64]	; (35c4 <port_pin_set_config+0x58>)
    3582:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3584:	230c      	movs	r3, #12
    3586:	18fb      	adds	r3, r7, r3
    3588:	2280      	movs	r2, #128	; 0x80
    358a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    358c:	683b      	ldr	r3, [r7, #0]
    358e:	781a      	ldrb	r2, [r3, #0]
    3590:	230c      	movs	r3, #12
    3592:	18fb      	adds	r3, r7, r3
    3594:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3596:	683b      	ldr	r3, [r7, #0]
    3598:	785a      	ldrb	r2, [r3, #1]
    359a:	230c      	movs	r3, #12
    359c:	18fb      	adds	r3, r7, r3
    359e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    35a0:	683b      	ldr	r3, [r7, #0]
    35a2:	789a      	ldrb	r2, [r3, #2]
    35a4:	230c      	movs	r3, #12
    35a6:	18fb      	adds	r3, r7, r3
    35a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    35aa:	230c      	movs	r3, #12
    35ac:	18fa      	adds	r2, r7, r3
    35ae:	1dfb      	adds	r3, r7, #7
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	0011      	movs	r1, r2
    35b4:	0018      	movs	r0, r3
    35b6:	4b04      	ldr	r3, [pc, #16]	; (35c8 <port_pin_set_config+0x5c>)
    35b8:	4798      	blx	r3
}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	46bd      	mov	sp, r7
    35be:	b004      	add	sp, #16
    35c0:	bd80      	pop	{r7, pc}
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	00003545 	.word	0x00003545
    35c8:	00006e29 	.word	0x00006e29

000035cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    35cc:	b580      	push	{r7, lr}
    35ce:	b082      	sub	sp, #8
    35d0:	af00      	add	r7, sp, #0
    35d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	2200      	movs	r2, #0
    35d8:	701a      	strb	r2, [r3, #0]
}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	46bd      	mov	sp, r7
    35de:	b002      	add	sp, #8
    35e0:	bd80      	pop	{r7, pc}
	...

000035e4 <system_apb_clock_set_mask>:
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b082      	sub	sp, #8
    35e8:	af00      	add	r7, sp, #0
    35ea:	0002      	movs	r2, r0
    35ec:	6039      	str	r1, [r7, #0]
    35ee:	1dfb      	adds	r3, r7, #7
    35f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    35f2:	1dfb      	adds	r3, r7, #7
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	2b01      	cmp	r3, #1
    35f8:	d00a      	beq.n	3610 <system_apb_clock_set_mask+0x2c>
    35fa:	2b02      	cmp	r3, #2
    35fc:	d00f      	beq.n	361e <system_apb_clock_set_mask+0x3a>
    35fe:	2b00      	cmp	r3, #0
    3600:	d114      	bne.n	362c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3602:	4b0e      	ldr	r3, [pc, #56]	; (363c <system_apb_clock_set_mask+0x58>)
    3604:	4a0d      	ldr	r2, [pc, #52]	; (363c <system_apb_clock_set_mask+0x58>)
    3606:	6991      	ldr	r1, [r2, #24]
    3608:	683a      	ldr	r2, [r7, #0]
    360a:	430a      	orrs	r2, r1
    360c:	619a      	str	r2, [r3, #24]
			break;
    360e:	e00f      	b.n	3630 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3610:	4b0a      	ldr	r3, [pc, #40]	; (363c <system_apb_clock_set_mask+0x58>)
    3612:	4a0a      	ldr	r2, [pc, #40]	; (363c <system_apb_clock_set_mask+0x58>)
    3614:	69d1      	ldr	r1, [r2, #28]
    3616:	683a      	ldr	r2, [r7, #0]
    3618:	430a      	orrs	r2, r1
    361a:	61da      	str	r2, [r3, #28]
			break;
    361c:	e008      	b.n	3630 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    361e:	4b07      	ldr	r3, [pc, #28]	; (363c <system_apb_clock_set_mask+0x58>)
    3620:	4a06      	ldr	r2, [pc, #24]	; (363c <system_apb_clock_set_mask+0x58>)
    3622:	6a11      	ldr	r1, [r2, #32]
    3624:	683a      	ldr	r2, [r7, #0]
    3626:	430a      	orrs	r2, r1
    3628:	621a      	str	r2, [r3, #32]
			break;
    362a:	e001      	b.n	3630 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    362c:	2317      	movs	r3, #23
    362e:	e000      	b.n	3632 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3630:	2300      	movs	r3, #0
}
    3632:	0018      	movs	r0, r3
    3634:	46bd      	mov	sp, r7
    3636:	b002      	add	sp, #8
    3638:	bd80      	pop	{r7, pc}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	40000400 	.word	0x40000400

00003640 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3640:	b580      	push	{r7, lr}
    3642:	b084      	sub	sp, #16
    3644:	af00      	add	r7, sp, #0
    3646:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3648:	687b      	ldr	r3, [r7, #4]
    364a:	681b      	ldr	r3, [r3, #0]
    364c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    364e:	68fb      	ldr	r3, [r7, #12]
    3650:	7a9b      	ldrb	r3, [r3, #10]
    3652:	b2db      	uxtb	r3, r3
    3654:	b25b      	sxtb	r3, r3
    3656:	2b00      	cmp	r3, #0
    3658:	da01      	bge.n	365e <rtc_calendar_is_syncing+0x1e>
                return true;
    365a:	2301      	movs	r3, #1
    365c:	e000      	b.n	3660 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    365e:	2300      	movs	r3, #0
}
    3660:	0018      	movs	r0, r3
    3662:	46bd      	mov	sp, r7
    3664:	b004      	add	sp, #16
    3666:	bd80      	pop	{r7, pc}

00003668 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    3668:	b580      	push	{r7, lr}
    366a:	b084      	sub	sp, #16
    366c:	af00      	add	r7, sp, #0
    366e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	0018      	movs	r0, r3
    367c:	4b07      	ldr	r3, [pc, #28]	; (369c <rtc_calendar_enable+0x34>)
    367e:	4798      	blx	r3
    3680:	1e03      	subs	r3, r0, #0
    3682:	d1f9      	bne.n	3678 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3684:	68fb      	ldr	r3, [r7, #12]
    3686:	881b      	ldrh	r3, [r3, #0]
    3688:	b29b      	uxth	r3, r3
    368a:	2202      	movs	r2, #2
    368c:	4313      	orrs	r3, r2
    368e:	b29a      	uxth	r2, r3
    3690:	68fb      	ldr	r3, [r7, #12]
    3692:	801a      	strh	r2, [r3, #0]
}
    3694:	46c0      	nop			; (mov r8, r8)
    3696:	46bd      	mov	sp, r7
    3698:	b004      	add	sp, #16
    369a:	bd80      	pop	{r7, pc}
    369c:	00003641 	.word	0x00003641

000036a0 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    36a0:	b580      	push	{r7, lr}
    36a2:	b084      	sub	sp, #16
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	681b      	ldr	r3, [r3, #0]
    36ac:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	0018      	movs	r0, r3
    36b4:	4b0a      	ldr	r3, [pc, #40]	; (36e0 <rtc_calendar_disable+0x40>)
    36b6:	4798      	blx	r3
    36b8:	1e03      	subs	r3, r0, #0
    36ba:	d1f9      	bne.n	36b0 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    36bc:	68fb      	ldr	r3, [r7, #12]
    36be:	22c1      	movs	r2, #193	; 0xc1
    36c0:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    36c2:	68fb      	ldr	r3, [r7, #12]
    36c4:	22c1      	movs	r2, #193	; 0xc1
    36c6:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	881b      	ldrh	r3, [r3, #0]
    36cc:	b29b      	uxth	r3, r3
    36ce:	2202      	movs	r2, #2
    36d0:	4393      	bics	r3, r2
    36d2:	b29a      	uxth	r2, r3
    36d4:	68fb      	ldr	r3, [r7, #12]
    36d6:	801a      	strh	r2, [r3, #0]
}
    36d8:	46c0      	nop			; (mov r8, r8)
    36da:	46bd      	mov	sp, r7
    36dc:	b004      	add	sp, #16
    36de:	bd80      	pop	{r7, pc}
    36e0:	00003641 	.word	0x00003641

000036e4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    36e4:	b580      	push	{r7, lr}
    36e6:	b084      	sub	sp, #16
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    36ec:	687b      	ldr	r3, [r7, #4]
    36ee:	681b      	ldr	r3, [r3, #0]
    36f0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	0018      	movs	r0, r3
    36f6:	4b0a      	ldr	r3, [pc, #40]	; (3720 <rtc_calendar_reset+0x3c>)
    36f8:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	687b      	ldr	r3, [r7, #4]
    36fe:	0018      	movs	r0, r3
    3700:	4b08      	ldr	r3, [pc, #32]	; (3724 <rtc_calendar_reset+0x40>)
    3702:	4798      	blx	r3
    3704:	1e03      	subs	r3, r0, #0
    3706:	d1f9      	bne.n	36fc <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    3708:	68fb      	ldr	r3, [r7, #12]
    370a:	881b      	ldrh	r3, [r3, #0]
    370c:	b29b      	uxth	r3, r3
    370e:	2201      	movs	r2, #1
    3710:	4313      	orrs	r3, r2
    3712:	b29a      	uxth	r2, r3
    3714:	68fb      	ldr	r3, [r7, #12]
    3716:	801a      	strh	r2, [r3, #0]
}
    3718:	46c0      	nop			; (mov r8, r8)
    371a:	46bd      	mov	sp, r7
    371c:	b004      	add	sp, #16
    371e:	bd80      	pop	{r7, pc}
    3720:	000036a1 	.word	0x000036a1
    3724:	00003641 	.word	0x00003641

00003728 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    3728:	b580      	push	{r7, lr}
    372a:	b084      	sub	sp, #16
    372c:	af00      	add	r7, sp, #0
    372e:	6078      	str	r0, [r7, #4]
    3730:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    3732:	683b      	ldr	r3, [r7, #0]
    3734:	88db      	ldrh	r3, [r3, #6]
    3736:	001a      	movs	r2, r3
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	88db      	ldrh	r3, [r3, #6]
    373c:	1ad3      	subs	r3, r2, r3
    373e:	069b      	lsls	r3, r3, #26
    3740:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	795b      	ldrb	r3, [r3, #5]
    3746:	059b      	lsls	r3, r3, #22
    3748:	001a      	movs	r2, r3
    374a:	68fb      	ldr	r3, [r7, #12]
    374c:	4313      	orrs	r3, r2
    374e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3750:	683b      	ldr	r3, [r7, #0]
    3752:	791b      	ldrb	r3, [r3, #4]
    3754:	045b      	lsls	r3, r3, #17
    3756:	001a      	movs	r2, r3
    3758:	68fb      	ldr	r3, [r7, #12]
    375a:	4313      	orrs	r3, r2
    375c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    375e:	683b      	ldr	r3, [r7, #0]
    3760:	789b      	ldrb	r3, [r3, #2]
    3762:	031b      	lsls	r3, r3, #12
    3764:	001a      	movs	r2, r3
    3766:	68fb      	ldr	r3, [r7, #12]
    3768:	4313      	orrs	r3, r2
    376a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	791b      	ldrb	r3, [r3, #4]
    3770:	2201      	movs	r2, #1
    3772:	4053      	eors	r3, r2
    3774:	b2db      	uxtb	r3, r3
    3776:	2b00      	cmp	r3, #0
    3778:	d008      	beq.n	378c <rtc_calendar_time_to_register_value+0x64>
    377a:	683b      	ldr	r3, [r7, #0]
    377c:	78db      	ldrb	r3, [r3, #3]
    377e:	2b00      	cmp	r3, #0
    3780:	d004      	beq.n	378c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    3782:	68fb      	ldr	r3, [r7, #12]
    3784:	2280      	movs	r2, #128	; 0x80
    3786:	0252      	lsls	r2, r2, #9
    3788:	4313      	orrs	r3, r2
    378a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    378c:	683b      	ldr	r3, [r7, #0]
    378e:	785b      	ldrb	r3, [r3, #1]
    3790:	019b      	lsls	r3, r3, #6
    3792:	001a      	movs	r2, r3
    3794:	68fb      	ldr	r3, [r7, #12]
    3796:	4313      	orrs	r3, r2
    3798:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    379a:	683b      	ldr	r3, [r7, #0]
    379c:	781b      	ldrb	r3, [r3, #0]
    379e:	001a      	movs	r2, r3
    37a0:	68fb      	ldr	r3, [r7, #12]
    37a2:	4313      	orrs	r3, r2
    37a4:	60fb      	str	r3, [r7, #12]

	return register_value;
    37a6:	68fb      	ldr	r3, [r7, #12]
}
    37a8:	0018      	movs	r0, r3
    37aa:	46bd      	mov	sp, r7
    37ac:	b004      	add	sp, #16
    37ae:	bd80      	pop	{r7, pc}

000037b0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    37b0:	b580      	push	{r7, lr}
    37b2:	b084      	sub	sp, #16
    37b4:	af00      	add	r7, sp, #0
    37b6:	60f8      	str	r0, [r7, #12]
    37b8:	60b9      	str	r1, [r7, #8]
    37ba:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    37bc:	68bb      	ldr	r3, [r7, #8]
    37be:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    37c0:	b29a      	uxth	r2, r3
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	88db      	ldrh	r3, [r3, #6]
    37c6:	18d3      	adds	r3, r2, r3
    37c8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    37ce:	68bb      	ldr	r3, [r7, #8]
    37d0:	0d9b      	lsrs	r3, r3, #22
    37d2:	b2db      	uxtb	r3, r3
    37d4:	220f      	movs	r2, #15
    37d6:	4013      	ands	r3, r2
    37d8:	b2da      	uxtb	r2, r3
    37da:	687b      	ldr	r3, [r7, #4]
    37dc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    37de:	68bb      	ldr	r3, [r7, #8]
    37e0:	0c5b      	lsrs	r3, r3, #17
    37e2:	b2db      	uxtb	r3, r3
    37e4:	221f      	movs	r2, #31
    37e6:	4013      	ands	r3, r2
    37e8:	b2da      	uxtb	r2, r3
    37ea:	687b      	ldr	r3, [r7, #4]
    37ec:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    37ee:	68fb      	ldr	r3, [r7, #12]
    37f0:	791b      	ldrb	r3, [r3, #4]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d008      	beq.n	3808 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    37f6:	68bb      	ldr	r3, [r7, #8]
    37f8:	0b1b      	lsrs	r3, r3, #12
    37fa:	b2db      	uxtb	r3, r3
    37fc:	221f      	movs	r2, #31
    37fe:	4013      	ands	r3, r2
    3800:	b2da      	uxtb	r2, r3
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	709a      	strb	r2, [r3, #2]
    3806:	e010      	b.n	382a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    3808:	68bb      	ldr	r3, [r7, #8]
    380a:	0b1b      	lsrs	r3, r3, #12
    380c:	b2db      	uxtb	r3, r3
    380e:	220f      	movs	r2, #15
    3810:	4013      	ands	r3, r2
    3812:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    3818:	68ba      	ldr	r2, [r7, #8]
    381a:	2380      	movs	r3, #128	; 0x80
    381c:	025b      	lsls	r3, r3, #9
    381e:	4013      	ands	r3, r2
    3820:	1e5a      	subs	r2, r3, #1
    3822:	4193      	sbcs	r3, r2
    3824:	b2da      	uxtb	r2, r3
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    382a:	68bb      	ldr	r3, [r7, #8]
    382c:	099b      	lsrs	r3, r3, #6
    382e:	b2db      	uxtb	r3, r3
    3830:	223f      	movs	r2, #63	; 0x3f
    3832:	4013      	ands	r3, r2
    3834:	b2da      	uxtb	r2, r3
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    383a:	68bb      	ldr	r3, [r7, #8]
    383c:	b2db      	uxtb	r3, r3
    383e:	223f      	movs	r2, #63	; 0x3f
    3840:	4013      	ands	r3, r2
    3842:	b2da      	uxtb	r2, r3
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    3848:	46c0      	nop			; (mov r8, r8)
    384a:	46bd      	mov	sp, r7
    384c:	b004      	add	sp, #16
    384e:	bd80      	pop	{r7, pc}

00003850 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3850:	b580      	push	{r7, lr}
    3852:	b084      	sub	sp, #16
    3854:	af00      	add	r7, sp, #0
    3856:	6078      	str	r0, [r7, #4]
    3858:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	881a      	ldrh	r2, [r3, #0]
    3864:	230e      	movs	r3, #14
    3866:	18fb      	adds	r3, r7, r3
    3868:	2108      	movs	r1, #8
    386a:	430a      	orrs	r2, r1
    386c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    386e:	683b      	ldr	r3, [r7, #0]
    3870:	791b      	ldrb	r3, [r3, #4]
    3872:	2201      	movs	r2, #1
    3874:	4053      	eors	r3, r2
    3876:	b2db      	uxtb	r3, r3
    3878:	2b00      	cmp	r3, #0
    387a:	d007      	beq.n	388c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    387c:	230e      	movs	r3, #14
    387e:	18fb      	adds	r3, r7, r3
    3880:	220e      	movs	r2, #14
    3882:	18ba      	adds	r2, r7, r2
    3884:	8812      	ldrh	r2, [r2, #0]
    3886:	2140      	movs	r1, #64	; 0x40
    3888:	430a      	orrs	r2, r1
    388a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    388c:	683b      	ldr	r3, [r7, #0]
    388e:	789b      	ldrb	r3, [r3, #2]
    3890:	2b00      	cmp	r3, #0
    3892:	d007      	beq.n	38a4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    3894:	230e      	movs	r3, #14
    3896:	18fb      	adds	r3, r7, r3
    3898:	220e      	movs	r2, #14
    389a:	18ba      	adds	r2, r7, r2
    389c:	8812      	ldrh	r2, [r2, #0]
    389e:	2180      	movs	r1, #128	; 0x80
    38a0:	430a      	orrs	r2, r1
    38a2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    38a4:	68bb      	ldr	r3, [r7, #8]
    38a6:	220e      	movs	r2, #14
    38a8:	18ba      	adds	r2, r7, r2
    38aa:	8812      	ldrh	r2, [r2, #0]
    38ac:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	78db      	ldrb	r3, [r3, #3]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d008      	beq.n	38c8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    38b6:	68bb      	ldr	r3, [r7, #8]
    38b8:	885b      	ldrh	r3, [r3, #2]
    38ba:	b29b      	uxth	r3, r3
    38bc:	2280      	movs	r2, #128	; 0x80
    38be:	01d2      	lsls	r2, r2, #7
    38c0:	4313      	orrs	r3, r2
    38c2:	b29a      	uxth	r2, r3
    38c4:	68bb      	ldr	r3, [r7, #8]
    38c6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    38c8:	230d      	movs	r3, #13
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	2200      	movs	r2, #0
    38ce:	701a      	strb	r2, [r3, #0]
    38d0:	e017      	b.n	3902 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    38d2:	230d      	movs	r3, #13
    38d4:	18fb      	adds	r3, r7, r3
    38d6:	781a      	ldrb	r2, [r3, #0]
    38d8:	0013      	movs	r3, r2
    38da:	009b      	lsls	r3, r3, #2
    38dc:	189b      	adds	r3, r3, r2
    38de:	005b      	lsls	r3, r3, #1
    38e0:	3308      	adds	r3, #8
    38e2:	683a      	ldr	r2, [r7, #0]
    38e4:	18d1      	adds	r1, r2, r3
    38e6:	230d      	movs	r3, #13
    38e8:	18fb      	adds	r3, r7, r3
    38ea:	781a      	ldrb	r2, [r3, #0]
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	0018      	movs	r0, r3
    38f0:	4b08      	ldr	r3, [pc, #32]	; (3914 <_rtc_calendar_set_config+0xc4>)
    38f2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    38f4:	230d      	movs	r3, #13
    38f6:	18fb      	adds	r3, r7, r3
    38f8:	781a      	ldrb	r2, [r3, #0]
    38fa:	230d      	movs	r3, #13
    38fc:	18fb      	adds	r3, r7, r3
    38fe:	3201      	adds	r2, #1
    3900:	701a      	strb	r2, [r3, #0]
    3902:	230d      	movs	r3, #13
    3904:	18fb      	adds	r3, r7, r3
    3906:	781b      	ldrb	r3, [r3, #0]
    3908:	2b00      	cmp	r3, #0
    390a:	d0e2      	beq.n	38d2 <_rtc_calendar_set_config+0x82>
	}
}
    390c:	46c0      	nop			; (mov r8, r8)
    390e:	46bd      	mov	sp, r7
    3910:	b004      	add	sp, #16
    3912:	bd80      	pop	{r7, pc}
    3914:	00003a39 	.word	0x00003a39

00003918 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    3918:	b580      	push	{r7, lr}
    391a:	b086      	sub	sp, #24
    391c:	af00      	add	r7, sp, #0
    391e:	60f8      	str	r0, [r7, #12]
    3920:	60b9      	str	r1, [r7, #8]
    3922:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	68ba      	ldr	r2, [r7, #8]
    3928:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    392a:	2120      	movs	r1, #32
    392c:	2000      	movs	r0, #0
    392e:	4b18      	ldr	r3, [pc, #96]	; (3990 <rtc_calendar_init+0x78>)
    3930:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3932:	2314      	movs	r3, #20
    3934:	18fb      	adds	r3, r7, r3
    3936:	0018      	movs	r0, r3
    3938:	4b16      	ldr	r3, [pc, #88]	; (3994 <rtc_calendar_init+0x7c>)
    393a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    393c:	2314      	movs	r3, #20
    393e:	18fb      	adds	r3, r7, r3
    3940:	2202      	movs	r2, #2
    3942:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3944:	2314      	movs	r3, #20
    3946:	18fb      	adds	r3, r7, r3
    3948:	0019      	movs	r1, r3
    394a:	2004      	movs	r0, #4
    394c:	4b12      	ldr	r3, [pc, #72]	; (3998 <rtc_calendar_init+0x80>)
    394e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3950:	2004      	movs	r0, #4
    3952:	4b12      	ldr	r3, [pc, #72]	; (399c <rtc_calendar_init+0x84>)
    3954:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    3956:	68fb      	ldr	r3, [r7, #12]
    3958:	0018      	movs	r0, r3
    395a:	4b11      	ldr	r3, [pc, #68]	; (39a0 <rtc_calendar_init+0x88>)
    395c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	791a      	ldrb	r2, [r3, #4]
    3962:	68fb      	ldr	r3, [r7, #12]
    3964:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	78da      	ldrb	r2, [r3, #3]
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	88da      	ldrh	r2, [r3, #6]
    3972:	68fb      	ldr	r3, [r7, #12]
    3974:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    3976:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <rtc_calendar_init+0x8c>)
    3978:	68fa      	ldr	r2, [r7, #12]
    397a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    397c:	687a      	ldr	r2, [r7, #4]
    397e:	68fb      	ldr	r3, [r7, #12]
    3980:	0011      	movs	r1, r2
    3982:	0018      	movs	r0, r3
    3984:	4b08      	ldr	r3, [pc, #32]	; (39a8 <rtc_calendar_init+0x90>)
    3986:	4798      	blx	r3
}
    3988:	46c0      	nop			; (mov r8, r8)
    398a:	46bd      	mov	sp, r7
    398c:	b006      	add	sp, #24
    398e:	bd80      	pop	{r7, pc}
    3990:	000035e5 	.word	0x000035e5
    3994:	000035cd 	.word	0x000035cd
    3998:	00006b3d 	.word	0x00006b3d
    399c:	00006b81 	.word	0x00006b81
    39a0:	000036e5 	.word	0x000036e5
    39a4:	200009f8 	.word	0x200009f8
    39a8:	00003851 	.word	0x00003851

000039ac <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
    39b2:	6078      	str	r0, [r7, #4]
    39b4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	681b      	ldr	r3, [r3, #0]
    39ba:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	795b      	ldrb	r3, [r3, #5]
    39c0:	2201      	movs	r2, #1
    39c2:	4053      	eors	r3, r2
    39c4:	b2db      	uxtb	r3, r3
    39c6:	2b00      	cmp	r3, #0
    39c8:	d00a      	beq.n	39e0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    39ca:	68fb      	ldr	r3, [r7, #12]
    39cc:	4a16      	ldr	r2, [pc, #88]	; (3a28 <rtc_calendar_get_time+0x7c>)
    39ce:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    39d0:	46c0      	nop			; (mov r8, r8)
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	0018      	movs	r0, r3
    39d6:	4b15      	ldr	r3, [pc, #84]	; (3a2c <rtc_calendar_get_time+0x80>)
    39d8:	4798      	blx	r3
    39da:	1e03      	subs	r3, r0, #0
    39dc:	d1f9      	bne.n	39d2 <rtc_calendar_get_time+0x26>
    39de:	e016      	b.n	3a0e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    39e0:	68fb      	ldr	r3, [r7, #12]
    39e2:	885b      	ldrh	r3, [r3, #2]
    39e4:	b29b      	uxth	r3, r3
    39e6:	001a      	movs	r2, r3
    39e8:	2380      	movs	r3, #128	; 0x80
    39ea:	01db      	lsls	r3, r3, #7
    39ec:	4013      	ands	r3, r2
    39ee:	d10e      	bne.n	3a0e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    39f0:	68fb      	ldr	r3, [r7, #12]
    39f2:	885b      	ldrh	r3, [r3, #2]
    39f4:	b29b      	uxth	r3, r3
    39f6:	4a0e      	ldr	r2, [pc, #56]	; (3a30 <rtc_calendar_get_time+0x84>)
    39f8:	4313      	orrs	r3, r2
    39fa:	b29a      	uxth	r2, r3
    39fc:	68fb      	ldr	r3, [r7, #12]
    39fe:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    3a00:	46c0      	nop			; (mov r8, r8)
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	0018      	movs	r0, r3
    3a06:	4b09      	ldr	r3, [pc, #36]	; (3a2c <rtc_calendar_get_time+0x80>)
    3a08:	4798      	blx	r3
    3a0a:	1e03      	subs	r3, r0, #0
    3a0c:	d1f9      	bne.n	3a02 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	691b      	ldr	r3, [r3, #16]
    3a12:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    3a14:	683a      	ldr	r2, [r7, #0]
    3a16:	68b9      	ldr	r1, [r7, #8]
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	0018      	movs	r0, r3
    3a1c:	4b05      	ldr	r3, [pc, #20]	; (3a34 <rtc_calendar_get_time+0x88>)
    3a1e:	4798      	blx	r3
}
    3a20:	46c0      	nop			; (mov r8, r8)
    3a22:	46bd      	mov	sp, r7
    3a24:	b004      	add	sp, #16
    3a26:	bd80      	pop	{r7, pc}
    3a28:	ffff8000 	.word	0xffff8000
    3a2c:	00003641 	.word	0x00003641
    3a30:	ffffc000 	.word	0xffffc000
    3a34:	000037b1 	.word	0x000037b1

00003a38 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b086      	sub	sp, #24
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	60f8      	str	r0, [r7, #12]
    3a40:	60b9      	str	r1, [r7, #8]
    3a42:	1dfb      	adds	r3, r7, #7
    3a44:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3a46:	68fb      	ldr	r3, [r7, #12]
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3a4c:	1dfb      	adds	r3, r7, #7
    3a4e:	781b      	ldrb	r3, [r3, #0]
    3a50:	2b01      	cmp	r3, #1
    3a52:	d901      	bls.n	3a58 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3a54:	2317      	movs	r3, #23
    3a56:	e021      	b.n	3a9c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3a58:	68ba      	ldr	r2, [r7, #8]
    3a5a:	68fb      	ldr	r3, [r7, #12]
    3a5c:	0011      	movs	r1, r2
    3a5e:	0018      	movs	r0, r3
    3a60:	4b10      	ldr	r3, [pc, #64]	; (3aa4 <rtc_calendar_set_alarm+0x6c>)
    3a62:	4798      	blx	r3
    3a64:	0003      	movs	r3, r0
    3a66:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    3a68:	46c0      	nop			; (mov r8, r8)
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	0018      	movs	r0, r3
    3a6e:	4b0e      	ldr	r3, [pc, #56]	; (3aa8 <rtc_calendar_set_alarm+0x70>)
    3a70:	4798      	blx	r3
    3a72:	1e03      	subs	r3, r0, #0
    3a74:	d1f9      	bne.n	3a6a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    3a76:	1dfb      	adds	r3, r7, #7
    3a78:	781a      	ldrb	r2, [r3, #0]
    3a7a:	697b      	ldr	r3, [r7, #20]
    3a7c:	3203      	adds	r2, #3
    3a7e:	00d2      	lsls	r2, r2, #3
    3a80:	6939      	ldr	r1, [r7, #16]
    3a82:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3a84:	1dfb      	adds	r3, r7, #7
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	68ba      	ldr	r2, [r7, #8]
    3a8a:	7a11      	ldrb	r1, [r2, #8]
    3a8c:	697a      	ldr	r2, [r7, #20]
    3a8e:	3303      	adds	r3, #3
    3a90:	00db      	lsls	r3, r3, #3
    3a92:	18d3      	adds	r3, r2, r3
    3a94:	3304      	adds	r3, #4
    3a96:	1c0a      	adds	r2, r1, #0
    3a98:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3a9a:	2300      	movs	r3, #0
}
    3a9c:	0018      	movs	r0, r3
    3a9e:	46bd      	mov	sp, r7
    3aa0:	b006      	add	sp, #24
    3aa2:	bd80      	pop	{r7, pc}
    3aa4:	00003729 	.word	0x00003729
    3aa8:	00003641 	.word	0x00003641

00003aac <system_gclk_chan_get_config_defaults>:
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3ab4:	687b      	ldr	r3, [r7, #4]
    3ab6:	2200      	movs	r2, #0
    3ab8:	701a      	strb	r2, [r3, #0]
}
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	46bd      	mov	sp, r7
    3abe:	b002      	add	sp, #8
    3ac0:	bd80      	pop	{r7, pc}

00003ac2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ac4:	b08d      	sub	sp, #52	; 0x34
    3ac6:	af00      	add	r7, sp, #0
    3ac8:	60b8      	str	r0, [r7, #8]
    3aca:	60f9      	str	r1, [r7, #12]
    3acc:	603a      	str	r2, [r7, #0]
    3ace:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3ad0:	2300      	movs	r3, #0
    3ad2:	2400      	movs	r4, #0
    3ad4:	623b      	str	r3, [r7, #32]
    3ad6:	627c      	str	r4, [r7, #36]	; 0x24
    3ad8:	2300      	movs	r3, #0
    3ada:	2400      	movs	r4, #0
    3adc:	61bb      	str	r3, [r7, #24]
    3ade:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3ae0:	233f      	movs	r3, #63	; 0x3f
    3ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ae4:	e053      	b.n	3b8e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ae8:	3b20      	subs	r3, #32
    3aea:	2b00      	cmp	r3, #0
    3aec:	db04      	blt.n	3af8 <long_division+0x36>
    3aee:	2201      	movs	r2, #1
    3af0:	409a      	lsls	r2, r3
    3af2:	0013      	movs	r3, r2
    3af4:	617b      	str	r3, [r7, #20]
    3af6:	e00b      	b.n	3b10 <long_division+0x4e>
    3af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3afa:	2220      	movs	r2, #32
    3afc:	1ad3      	subs	r3, r2, r3
    3afe:	2201      	movs	r2, #1
    3b00:	40da      	lsrs	r2, r3
    3b02:	0013      	movs	r3, r2
    3b04:	2100      	movs	r1, #0
    3b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b08:	4091      	lsls	r1, r2
    3b0a:	000a      	movs	r2, r1
    3b0c:	4313      	orrs	r3, r2
    3b0e:	617b      	str	r3, [r7, #20]
    3b10:	2201      	movs	r2, #1
    3b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b14:	409a      	lsls	r2, r3
    3b16:	0013      	movs	r3, r2
    3b18:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3b1a:	69bb      	ldr	r3, [r7, #24]
    3b1c:	69fc      	ldr	r4, [r7, #28]
    3b1e:	18db      	adds	r3, r3, r3
    3b20:	4164      	adcs	r4, r4
    3b22:	61bb      	str	r3, [r7, #24]
    3b24:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3b26:	68bb      	ldr	r3, [r7, #8]
    3b28:	693a      	ldr	r2, [r7, #16]
    3b2a:	401a      	ands	r2, r3
    3b2c:	0015      	movs	r5, r2
    3b2e:	68fb      	ldr	r3, [r7, #12]
    3b30:	697a      	ldr	r2, [r7, #20]
    3b32:	401a      	ands	r2, r3
    3b34:	0016      	movs	r6, r2
    3b36:	002b      	movs	r3, r5
    3b38:	4333      	orrs	r3, r6
    3b3a:	d007      	beq.n	3b4c <long_division+0x8a>
			r |= 0x01;
    3b3c:	69bb      	ldr	r3, [r7, #24]
    3b3e:	2201      	movs	r2, #1
    3b40:	4313      	orrs	r3, r2
    3b42:	61bb      	str	r3, [r7, #24]
    3b44:	69fb      	ldr	r3, [r7, #28]
    3b46:	2200      	movs	r2, #0
    3b48:	4313      	orrs	r3, r2
    3b4a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3b4c:	687a      	ldr	r2, [r7, #4]
    3b4e:	69fb      	ldr	r3, [r7, #28]
    3b50:	429a      	cmp	r2, r3
    3b52:	d819      	bhi.n	3b88 <long_division+0xc6>
    3b54:	687a      	ldr	r2, [r7, #4]
    3b56:	69fb      	ldr	r3, [r7, #28]
    3b58:	429a      	cmp	r2, r3
    3b5a:	d103      	bne.n	3b64 <long_division+0xa2>
    3b5c:	683a      	ldr	r2, [r7, #0]
    3b5e:	69bb      	ldr	r3, [r7, #24]
    3b60:	429a      	cmp	r2, r3
    3b62:	d811      	bhi.n	3b88 <long_division+0xc6>
			r = r - d;
    3b64:	69b9      	ldr	r1, [r7, #24]
    3b66:	69fa      	ldr	r2, [r7, #28]
    3b68:	683b      	ldr	r3, [r7, #0]
    3b6a:	687c      	ldr	r4, [r7, #4]
    3b6c:	1ac9      	subs	r1, r1, r3
    3b6e:	41a2      	sbcs	r2, r4
    3b70:	000b      	movs	r3, r1
    3b72:	0014      	movs	r4, r2
    3b74:	61bb      	str	r3, [r7, #24]
    3b76:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3b78:	6a3a      	ldr	r2, [r7, #32]
    3b7a:	693b      	ldr	r3, [r7, #16]
    3b7c:	4313      	orrs	r3, r2
    3b7e:	623b      	str	r3, [r7, #32]
    3b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b82:	697b      	ldr	r3, [r7, #20]
    3b84:	4313      	orrs	r3, r2
    3b86:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b8a:	3b01      	subs	r3, #1
    3b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    3b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b90:	2b00      	cmp	r3, #0
    3b92:	daa8      	bge.n	3ae6 <long_division+0x24>
		}
	}

	return q;
    3b94:	6a3b      	ldr	r3, [r7, #32]
    3b96:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3b98:	0018      	movs	r0, r3
    3b9a:	0021      	movs	r1, r4
    3b9c:	46bd      	mov	sp, r7
    3b9e:	b00d      	add	sp, #52	; 0x34
    3ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003ba2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3ba2:	b580      	push	{r7, lr}
    3ba4:	b086      	sub	sp, #24
    3ba6:	af00      	add	r7, sp, #0
    3ba8:	60f8      	str	r0, [r7, #12]
    3baa:	60b9      	str	r1, [r7, #8]
    3bac:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3bae:	2316      	movs	r3, #22
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	2200      	movs	r2, #0
    3bb4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3bb6:	68bb      	ldr	r3, [r7, #8]
    3bb8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3bba:	68bb      	ldr	r3, [r7, #8]
    3bbc:	085a      	lsrs	r2, r3, #1
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	429a      	cmp	r2, r3
    3bc2:	d201      	bcs.n	3bc8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3bc4:	2340      	movs	r3, #64	; 0x40
    3bc6:	e026      	b.n	3c16 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3bc8:	68bb      	ldr	r3, [r7, #8]
    3bca:	085b      	lsrs	r3, r3, #1
    3bcc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3bce:	e00a      	b.n	3be6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3bd0:	693a      	ldr	r2, [r7, #16]
    3bd2:	68fb      	ldr	r3, [r7, #12]
    3bd4:	1ad3      	subs	r3, r2, r3
    3bd6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3bd8:	2316      	movs	r3, #22
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	881a      	ldrh	r2, [r3, #0]
    3bde:	2316      	movs	r3, #22
    3be0:	18fb      	adds	r3, r7, r3
    3be2:	3201      	adds	r2, #1
    3be4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3be6:	693a      	ldr	r2, [r7, #16]
    3be8:	68fb      	ldr	r3, [r7, #12]
    3bea:	429a      	cmp	r2, r3
    3bec:	d2f0      	bcs.n	3bd0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3bee:	2316      	movs	r3, #22
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	2216      	movs	r2, #22
    3bf4:	18ba      	adds	r2, r7, r2
    3bf6:	8812      	ldrh	r2, [r2, #0]
    3bf8:	3a01      	subs	r2, #1
    3bfa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3bfc:	2316      	movs	r3, #22
    3bfe:	18fb      	adds	r3, r7, r3
    3c00:	881b      	ldrh	r3, [r3, #0]
    3c02:	2bff      	cmp	r3, #255	; 0xff
    3c04:	d901      	bls.n	3c0a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c06:	2340      	movs	r3, #64	; 0x40
    3c08:	e005      	b.n	3c16 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3c0a:	687b      	ldr	r3, [r7, #4]
    3c0c:	2216      	movs	r2, #22
    3c0e:	18ba      	adds	r2, r7, r2
    3c10:	8812      	ldrh	r2, [r2, #0]
    3c12:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3c14:	2300      	movs	r3, #0
	}
}
    3c16:	0018      	movs	r0, r3
    3c18:	46bd      	mov	sp, r7
    3c1a:	b006      	add	sp, #24
    3c1c:	bd80      	pop	{r7, pc}
	...

00003c20 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c22:	b0a1      	sub	sp, #132	; 0x84
    3c24:	af00      	add	r7, sp, #0
    3c26:	64f8      	str	r0, [r7, #76]	; 0x4c
    3c28:	64b9      	str	r1, [r7, #72]	; 0x48
    3c2a:	647a      	str	r2, [r7, #68]	; 0x44
    3c2c:	2243      	movs	r2, #67	; 0x43
    3c2e:	18ba      	adds	r2, r7, r2
    3c30:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3c32:	2300      	movs	r3, #0
    3c34:	2400      	movs	r4, #0
    3c36:	673b      	str	r3, [r7, #112]	; 0x70
    3c38:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3c3a:	2300      	movs	r3, #0
    3c3c:	2400      	movs	r4, #0
    3c3e:	66bb      	str	r3, [r7, #104]	; 0x68
    3c40:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3c42:	2300      	movs	r3, #0
    3c44:	2400      	movs	r4, #0
    3c46:	67bb      	str	r3, [r7, #120]	; 0x78
    3c48:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3c4a:	2300      	movs	r3, #0
    3c4c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3c4e:	2358      	movs	r3, #88	; 0x58
    3c50:	2240      	movs	r2, #64	; 0x40
    3c52:	4694      	mov	ip, r2
    3c54:	44bc      	add	ip, r7
    3c56:	4463      	add	r3, ip
    3c58:	781a      	ldrb	r2, [r3, #0]
    3c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c5c:	435a      	muls	r2, r3
    3c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c60:	429a      	cmp	r2, r3
    3c62:	d901      	bls.n	3c68 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c64:	2340      	movs	r3, #64	; 0x40
    3c66:	e0b3      	b.n	3dd0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3c68:	2343      	movs	r3, #67	; 0x43
    3c6a:	18fb      	adds	r3, r7, r3
    3c6c:	781b      	ldrb	r3, [r3, #0]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d13d      	bne.n	3cee <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3c72:	2358      	movs	r3, #88	; 0x58
    3c74:	2240      	movs	r2, #64	; 0x40
    3c76:	4694      	mov	ip, r2
    3c78:	44bc      	add	ip, r7
    3c7a:	4463      	add	r3, ip
    3c7c:	781b      	ldrb	r3, [r3, #0]
    3c7e:	b2db      	uxtb	r3, r3
    3c80:	613b      	str	r3, [r7, #16]
    3c82:	2300      	movs	r3, #0
    3c84:	617b      	str	r3, [r7, #20]
    3c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c88:	60bb      	str	r3, [r7, #8]
    3c8a:	2300      	movs	r3, #0
    3c8c:	60fb      	str	r3, [r7, #12]
    3c8e:	4c52      	ldr	r4, [pc, #328]	; (3dd8 <_sercom_get_async_baud_val+0x1b8>)
    3c90:	68ba      	ldr	r2, [r7, #8]
    3c92:	68fb      	ldr	r3, [r7, #12]
    3c94:	6938      	ldr	r0, [r7, #16]
    3c96:	6979      	ldr	r1, [r7, #20]
    3c98:	47a0      	blx	r4
    3c9a:	0003      	movs	r3, r0
    3c9c:	000c      	movs	r4, r1
    3c9e:	001b      	movs	r3, r3
    3ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
    3ca2:	2300      	movs	r3, #0
    3ca4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3ca8:	603b      	str	r3, [r7, #0]
    3caa:	2300      	movs	r3, #0
    3cac:	607b      	str	r3, [r7, #4]
    3cae:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3cb0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3cb2:	683a      	ldr	r2, [r7, #0]
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	4c49      	ldr	r4, [pc, #292]	; (3ddc <_sercom_get_async_baud_val+0x1bc>)
    3cb8:	47a0      	blx	r4
    3cba:	0003      	movs	r3, r0
    3cbc:	000c      	movs	r4, r1
    3cbe:	673b      	str	r3, [r7, #112]	; 0x70
    3cc0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3cc2:	2100      	movs	r1, #0
    3cc4:	2201      	movs	r2, #1
    3cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3cc8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3cca:	1ac9      	subs	r1, r1, r3
    3ccc:	41a2      	sbcs	r2, r4
    3cce:	000b      	movs	r3, r1
    3cd0:	0014      	movs	r4, r2
    3cd2:	66bb      	str	r3, [r7, #104]	; 0x68
    3cd4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3cd8:	0c1b      	lsrs	r3, r3, #16
    3cda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3cdc:	0416      	lsls	r6, r2, #16
    3cde:	431e      	orrs	r6, r3
    3ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ce2:	041d      	lsls	r5, r3, #16
    3ce4:	0033      	movs	r3, r6
    3ce6:	67bb      	str	r3, [r7, #120]	; 0x78
    3ce8:	2300      	movs	r3, #0
    3cea:	67fb      	str	r3, [r7, #124]	; 0x7c
    3cec:	e06a      	b.n	3dc4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3cee:	2343      	movs	r3, #67	; 0x43
    3cf0:	18fb      	adds	r3, r7, r3
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	2b01      	cmp	r3, #1
    3cf6:	d165      	bne.n	3dc4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cfa:	633b      	str	r3, [r7, #48]	; 0x30
    3cfc:	2300      	movs	r3, #0
    3cfe:	637b      	str	r3, [r7, #52]	; 0x34
    3d00:	2358      	movs	r3, #88	; 0x58
    3d02:	2240      	movs	r2, #64	; 0x40
    3d04:	4694      	mov	ip, r2
    3d06:	44bc      	add	ip, r7
    3d08:	4463      	add	r3, ip
    3d0a:	781b      	ldrb	r3, [r3, #0]
    3d0c:	b2db      	uxtb	r3, r3
    3d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    3d10:	2300      	movs	r3, #0
    3d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    3d14:	4c30      	ldr	r4, [pc, #192]	; (3dd8 <_sercom_get_async_baud_val+0x1b8>)
    3d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3d1e:	47a0      	blx	r4
    3d20:	0003      	movs	r3, r0
    3d22:	000c      	movs	r4, r1
    3d24:	65bb      	str	r3, [r7, #88]	; 0x58
    3d26:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3d2a:	623b      	str	r3, [r7, #32]
    3d2c:	2300      	movs	r3, #0
    3d2e:	627b      	str	r3, [r7, #36]	; 0x24
    3d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d32:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3d34:	001a      	movs	r2, r3
    3d36:	0023      	movs	r3, r4
    3d38:	6a38      	ldr	r0, [r7, #32]
    3d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3d3c:	4c27      	ldr	r4, [pc, #156]	; (3ddc <_sercom_get_async_baud_val+0x1bc>)
    3d3e:	47a0      	blx	r4
    3d40:	0003      	movs	r3, r0
    3d42:	000c      	movs	r4, r1
    3d44:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3d46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3d48:	2380      	movs	r3, #128	; 0x80
    3d4a:	019b      	lsls	r3, r3, #6
    3d4c:	429a      	cmp	r2, r3
    3d4e:	d901      	bls.n	3d54 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3d50:	2340      	movs	r3, #64	; 0x40
    3d52:	e03d      	b.n	3dd0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3d56:	61bb      	str	r3, [r7, #24]
    3d58:	2300      	movs	r3, #0
    3d5a:	61fb      	str	r3, [r7, #28]
    3d5c:	69b9      	ldr	r1, [r7, #24]
    3d5e:	69fa      	ldr	r2, [r7, #28]
    3d60:	000b      	movs	r3, r1
    3d62:	0f5b      	lsrs	r3, r3, #29
    3d64:	0010      	movs	r0, r2
    3d66:	00c0      	lsls	r0, r0, #3
    3d68:	63f8      	str	r0, [r7, #60]	; 0x3c
    3d6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3d6c:	4318      	orrs	r0, r3
    3d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    3d70:	000b      	movs	r3, r1
    3d72:	00db      	lsls	r3, r3, #3
    3d74:	63bb      	str	r3, [r7, #56]	; 0x38
    3d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d78:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3d7a:	001a      	movs	r2, r3
    3d7c:	0023      	movs	r3, r4
    3d7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3d82:	4c16      	ldr	r4, [pc, #88]	; (3ddc <_sercom_get_async_baud_val+0x1bc>)
    3d84:	47a0      	blx	r4
    3d86:	0003      	movs	r3, r0
    3d88:	000c      	movs	r4, r1
    3d8a:	65bb      	str	r3, [r7, #88]	; 0x58
    3d8c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d90:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3d92:	b2d9      	uxtb	r1, r3
    3d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3d96:	b2db      	uxtb	r3, r3
    3d98:	00db      	lsls	r3, r3, #3
    3d9a:	b2da      	uxtb	r2, r3
    3d9c:	2317      	movs	r3, #23
    3d9e:	2040      	movs	r0, #64	; 0x40
    3da0:	4684      	mov	ip, r0
    3da2:	44bc      	add	ip, r7
    3da4:	4463      	add	r3, ip
    3da6:	1a8a      	subs	r2, r1, r2
    3da8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3daa:	2317      	movs	r3, #23
    3dac:	2240      	movs	r2, #64	; 0x40
    3dae:	4694      	mov	ip, r2
    3db0:	44bc      	add	ip, r7
    3db2:	4463      	add	r3, ip
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	035b      	lsls	r3, r3, #13
    3db8:	001a      	movs	r2, r3
    3dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3dbc:	4313      	orrs	r3, r2
    3dbe:	67bb      	str	r3, [r7, #120]	; 0x78
    3dc0:	2300      	movs	r3, #0
    3dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3dc6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3dc8:	b29a      	uxth	r2, r3
    3dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3dcc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3dce:	2300      	movs	r3, #0
}
    3dd0:	0018      	movs	r0, r3
    3dd2:	46bd      	mov	sp, r7
    3dd4:	b021      	add	sp, #132	; 0x84
    3dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dd8:	0000b8a9 	.word	0x0000b8a9
    3ddc:	00003ac3 	.word	0x00003ac3

00003de0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b084      	sub	sp, #16
    3de4:	af00      	add	r7, sp, #0
    3de6:	0002      	movs	r2, r0
    3de8:	1dfb      	adds	r3, r7, #7
    3dea:	701a      	strb	r2, [r3, #0]
    3dec:	1dbb      	adds	r3, r7, #6
    3dee:	1c0a      	adds	r2, r1, #0
    3df0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3df2:	4b1a      	ldr	r3, [pc, #104]	; (3e5c <sercom_set_gclk_generator+0x7c>)
    3df4:	781b      	ldrb	r3, [r3, #0]
    3df6:	2201      	movs	r2, #1
    3df8:	4053      	eors	r3, r2
    3dfa:	b2db      	uxtb	r3, r3
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d103      	bne.n	3e08 <sercom_set_gclk_generator+0x28>
    3e00:	1dbb      	adds	r3, r7, #6
    3e02:	781b      	ldrb	r3, [r3, #0]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d01b      	beq.n	3e40 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3e08:	230c      	movs	r3, #12
    3e0a:	18fb      	adds	r3, r7, r3
    3e0c:	0018      	movs	r0, r3
    3e0e:	4b14      	ldr	r3, [pc, #80]	; (3e60 <sercom_set_gclk_generator+0x80>)
    3e10:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3e12:	230c      	movs	r3, #12
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	1dfa      	adds	r2, r7, #7
    3e18:	7812      	ldrb	r2, [r2, #0]
    3e1a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3e1c:	230c      	movs	r3, #12
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	0019      	movs	r1, r3
    3e22:	2013      	movs	r0, #19
    3e24:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <sercom_set_gclk_generator+0x84>)
    3e26:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3e28:	2013      	movs	r0, #19
    3e2a:	4b0f      	ldr	r3, [pc, #60]	; (3e68 <sercom_set_gclk_generator+0x88>)
    3e2c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3e2e:	4b0b      	ldr	r3, [pc, #44]	; (3e5c <sercom_set_gclk_generator+0x7c>)
    3e30:	1dfa      	adds	r2, r7, #7
    3e32:	7812      	ldrb	r2, [r2, #0]
    3e34:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3e36:	4b09      	ldr	r3, [pc, #36]	; (3e5c <sercom_set_gclk_generator+0x7c>)
    3e38:	2201      	movs	r2, #1
    3e3a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3e3c:	2300      	movs	r3, #0
    3e3e:	e008      	b.n	3e52 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3e40:	4b06      	ldr	r3, [pc, #24]	; (3e5c <sercom_set_gclk_generator+0x7c>)
    3e42:	785b      	ldrb	r3, [r3, #1]
    3e44:	1dfa      	adds	r2, r7, #7
    3e46:	7812      	ldrb	r2, [r2, #0]
    3e48:	429a      	cmp	r2, r3
    3e4a:	d101      	bne.n	3e50 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3e4c:	2300      	movs	r3, #0
    3e4e:	e000      	b.n	3e52 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3e50:	231d      	movs	r3, #29
}
    3e52:	0018      	movs	r0, r3
    3e54:	46bd      	mov	sp, r7
    3e56:	b004      	add	sp, #16
    3e58:	bd80      	pop	{r7, pc}
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	2000016c 	.word	0x2000016c
    3e60:	00003aad 	.word	0x00003aad
    3e64:	00006b3d 	.word	0x00006b3d
    3e68:	00006b81 	.word	0x00006b81

00003e6c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
    3e74:	000a      	movs	r2, r1
    3e76:	1cfb      	adds	r3, r7, #3
    3e78:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	4a4d      	ldr	r2, [pc, #308]	; (3fb4 <_sercom_get_default_pad+0x148>)
    3e7e:	4293      	cmp	r3, r2
    3e80:	d03f      	beq.n	3f02 <_sercom_get_default_pad+0x96>
    3e82:	4a4c      	ldr	r2, [pc, #304]	; (3fb4 <_sercom_get_default_pad+0x148>)
    3e84:	4293      	cmp	r3, r2
    3e86:	d806      	bhi.n	3e96 <_sercom_get_default_pad+0x2a>
    3e88:	4a4b      	ldr	r2, [pc, #300]	; (3fb8 <_sercom_get_default_pad+0x14c>)
    3e8a:	4293      	cmp	r3, r2
    3e8c:	d00f      	beq.n	3eae <_sercom_get_default_pad+0x42>
    3e8e:	4a4b      	ldr	r2, [pc, #300]	; (3fbc <_sercom_get_default_pad+0x150>)
    3e90:	4293      	cmp	r3, r2
    3e92:	d021      	beq.n	3ed8 <_sercom_get_default_pad+0x6c>
    3e94:	e089      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3e96:	4a4a      	ldr	r2, [pc, #296]	; (3fc0 <_sercom_get_default_pad+0x154>)
    3e98:	4293      	cmp	r3, r2
    3e9a:	d100      	bne.n	3e9e <_sercom_get_default_pad+0x32>
    3e9c:	e05b      	b.n	3f56 <_sercom_get_default_pad+0xea>
    3e9e:	4a49      	ldr	r2, [pc, #292]	; (3fc4 <_sercom_get_default_pad+0x158>)
    3ea0:	4293      	cmp	r3, r2
    3ea2:	d100      	bne.n	3ea6 <_sercom_get_default_pad+0x3a>
    3ea4:	e06c      	b.n	3f80 <_sercom_get_default_pad+0x114>
    3ea6:	4a48      	ldr	r2, [pc, #288]	; (3fc8 <_sercom_get_default_pad+0x15c>)
    3ea8:	4293      	cmp	r3, r2
    3eaa:	d03f      	beq.n	3f2c <_sercom_get_default_pad+0xc0>
    3eac:	e07d      	b.n	3faa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3eae:	1cfb      	adds	r3, r7, #3
    3eb0:	781b      	ldrb	r3, [r3, #0]
    3eb2:	2b01      	cmp	r3, #1
    3eb4:	d00a      	beq.n	3ecc <_sercom_get_default_pad+0x60>
    3eb6:	dc02      	bgt.n	3ebe <_sercom_get_default_pad+0x52>
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d005      	beq.n	3ec8 <_sercom_get_default_pad+0x5c>
    3ebc:	e075      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3ebe:	2b02      	cmp	r3, #2
    3ec0:	d006      	beq.n	3ed0 <_sercom_get_default_pad+0x64>
    3ec2:	2b03      	cmp	r3, #3
    3ec4:	d006      	beq.n	3ed4 <_sercom_get_default_pad+0x68>
    3ec6:	e070      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3ec8:	4b40      	ldr	r3, [pc, #256]	; (3fcc <_sercom_get_default_pad+0x160>)
    3eca:	e06f      	b.n	3fac <_sercom_get_default_pad+0x140>
    3ecc:	4b40      	ldr	r3, [pc, #256]	; (3fd0 <_sercom_get_default_pad+0x164>)
    3ece:	e06d      	b.n	3fac <_sercom_get_default_pad+0x140>
    3ed0:	4b40      	ldr	r3, [pc, #256]	; (3fd4 <_sercom_get_default_pad+0x168>)
    3ed2:	e06b      	b.n	3fac <_sercom_get_default_pad+0x140>
    3ed4:	4b40      	ldr	r3, [pc, #256]	; (3fd8 <_sercom_get_default_pad+0x16c>)
    3ed6:	e069      	b.n	3fac <_sercom_get_default_pad+0x140>
    3ed8:	1cfb      	adds	r3, r7, #3
    3eda:	781b      	ldrb	r3, [r3, #0]
    3edc:	2b01      	cmp	r3, #1
    3ede:	d00a      	beq.n	3ef6 <_sercom_get_default_pad+0x8a>
    3ee0:	dc02      	bgt.n	3ee8 <_sercom_get_default_pad+0x7c>
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d005      	beq.n	3ef2 <_sercom_get_default_pad+0x86>
    3ee6:	e060      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3ee8:	2b02      	cmp	r3, #2
    3eea:	d006      	beq.n	3efa <_sercom_get_default_pad+0x8e>
    3eec:	2b03      	cmp	r3, #3
    3eee:	d006      	beq.n	3efe <_sercom_get_default_pad+0x92>
    3ef0:	e05b      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3ef2:	2303      	movs	r3, #3
    3ef4:	e05a      	b.n	3fac <_sercom_get_default_pad+0x140>
    3ef6:	4b39      	ldr	r3, [pc, #228]	; (3fdc <_sercom_get_default_pad+0x170>)
    3ef8:	e058      	b.n	3fac <_sercom_get_default_pad+0x140>
    3efa:	4b39      	ldr	r3, [pc, #228]	; (3fe0 <_sercom_get_default_pad+0x174>)
    3efc:	e056      	b.n	3fac <_sercom_get_default_pad+0x140>
    3efe:	4b39      	ldr	r3, [pc, #228]	; (3fe4 <_sercom_get_default_pad+0x178>)
    3f00:	e054      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f02:	1cfb      	adds	r3, r7, #3
    3f04:	781b      	ldrb	r3, [r3, #0]
    3f06:	2b01      	cmp	r3, #1
    3f08:	d00a      	beq.n	3f20 <_sercom_get_default_pad+0xb4>
    3f0a:	dc02      	bgt.n	3f12 <_sercom_get_default_pad+0xa6>
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d005      	beq.n	3f1c <_sercom_get_default_pad+0xb0>
    3f10:	e04b      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f12:	2b02      	cmp	r3, #2
    3f14:	d006      	beq.n	3f24 <_sercom_get_default_pad+0xb8>
    3f16:	2b03      	cmp	r3, #3
    3f18:	d006      	beq.n	3f28 <_sercom_get_default_pad+0xbc>
    3f1a:	e046      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f1c:	4b32      	ldr	r3, [pc, #200]	; (3fe8 <_sercom_get_default_pad+0x17c>)
    3f1e:	e045      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f20:	4b32      	ldr	r3, [pc, #200]	; (3fec <_sercom_get_default_pad+0x180>)
    3f22:	e043      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f24:	4b32      	ldr	r3, [pc, #200]	; (3ff0 <_sercom_get_default_pad+0x184>)
    3f26:	e041      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f28:	4b32      	ldr	r3, [pc, #200]	; (3ff4 <_sercom_get_default_pad+0x188>)
    3f2a:	e03f      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f2c:	1cfb      	adds	r3, r7, #3
    3f2e:	781b      	ldrb	r3, [r3, #0]
    3f30:	2b01      	cmp	r3, #1
    3f32:	d00a      	beq.n	3f4a <_sercom_get_default_pad+0xde>
    3f34:	dc02      	bgt.n	3f3c <_sercom_get_default_pad+0xd0>
    3f36:	2b00      	cmp	r3, #0
    3f38:	d005      	beq.n	3f46 <_sercom_get_default_pad+0xda>
    3f3a:	e036      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f3c:	2b02      	cmp	r3, #2
    3f3e:	d006      	beq.n	3f4e <_sercom_get_default_pad+0xe2>
    3f40:	2b03      	cmp	r3, #3
    3f42:	d006      	beq.n	3f52 <_sercom_get_default_pad+0xe6>
    3f44:	e031      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f46:	4b2c      	ldr	r3, [pc, #176]	; (3ff8 <_sercom_get_default_pad+0x18c>)
    3f48:	e030      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f4a:	4b2c      	ldr	r3, [pc, #176]	; (3ffc <_sercom_get_default_pad+0x190>)
    3f4c:	e02e      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f4e:	4b2c      	ldr	r3, [pc, #176]	; (4000 <_sercom_get_default_pad+0x194>)
    3f50:	e02c      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f52:	4b2c      	ldr	r3, [pc, #176]	; (4004 <_sercom_get_default_pad+0x198>)
    3f54:	e02a      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f56:	1cfb      	adds	r3, r7, #3
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	2b01      	cmp	r3, #1
    3f5c:	d00a      	beq.n	3f74 <_sercom_get_default_pad+0x108>
    3f5e:	dc02      	bgt.n	3f66 <_sercom_get_default_pad+0xfa>
    3f60:	2b00      	cmp	r3, #0
    3f62:	d005      	beq.n	3f70 <_sercom_get_default_pad+0x104>
    3f64:	e021      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f66:	2b02      	cmp	r3, #2
    3f68:	d006      	beq.n	3f78 <_sercom_get_default_pad+0x10c>
    3f6a:	2b03      	cmp	r3, #3
    3f6c:	d006      	beq.n	3f7c <_sercom_get_default_pad+0x110>
    3f6e:	e01c      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f70:	4b25      	ldr	r3, [pc, #148]	; (4008 <_sercom_get_default_pad+0x19c>)
    3f72:	e01b      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f74:	4b25      	ldr	r3, [pc, #148]	; (400c <_sercom_get_default_pad+0x1a0>)
    3f76:	e019      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f78:	4b25      	ldr	r3, [pc, #148]	; (4010 <_sercom_get_default_pad+0x1a4>)
    3f7a:	e017      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f7c:	4b25      	ldr	r3, [pc, #148]	; (4014 <_sercom_get_default_pad+0x1a8>)
    3f7e:	e015      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f80:	1cfb      	adds	r3, r7, #3
    3f82:	781b      	ldrb	r3, [r3, #0]
    3f84:	2b01      	cmp	r3, #1
    3f86:	d00a      	beq.n	3f9e <_sercom_get_default_pad+0x132>
    3f88:	dc02      	bgt.n	3f90 <_sercom_get_default_pad+0x124>
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d005      	beq.n	3f9a <_sercom_get_default_pad+0x12e>
    3f8e:	e00c      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f90:	2b02      	cmp	r3, #2
    3f92:	d006      	beq.n	3fa2 <_sercom_get_default_pad+0x136>
    3f94:	2b03      	cmp	r3, #3
    3f96:	d006      	beq.n	3fa6 <_sercom_get_default_pad+0x13a>
    3f98:	e007      	b.n	3faa <_sercom_get_default_pad+0x13e>
    3f9a:	4b1f      	ldr	r3, [pc, #124]	; (4018 <_sercom_get_default_pad+0x1ac>)
    3f9c:	e006      	b.n	3fac <_sercom_get_default_pad+0x140>
    3f9e:	4b1f      	ldr	r3, [pc, #124]	; (401c <_sercom_get_default_pad+0x1b0>)
    3fa0:	e004      	b.n	3fac <_sercom_get_default_pad+0x140>
    3fa2:	4b1f      	ldr	r3, [pc, #124]	; (4020 <_sercom_get_default_pad+0x1b4>)
    3fa4:	e002      	b.n	3fac <_sercom_get_default_pad+0x140>
    3fa6:	4b1f      	ldr	r3, [pc, #124]	; (4024 <_sercom_get_default_pad+0x1b8>)
    3fa8:	e000      	b.n	3fac <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3faa:	2300      	movs	r3, #0
}
    3fac:	0018      	movs	r0, r3
    3fae:	46bd      	mov	sp, r7
    3fb0:	b002      	add	sp, #8
    3fb2:	bd80      	pop	{r7, pc}
    3fb4:	42001000 	.word	0x42001000
    3fb8:	42000800 	.word	0x42000800
    3fbc:	42000c00 	.word	0x42000c00
    3fc0:	42001800 	.word	0x42001800
    3fc4:	42001c00 	.word	0x42001c00
    3fc8:	42001400 	.word	0x42001400
    3fcc:	00040003 	.word	0x00040003
    3fd0:	00050003 	.word	0x00050003
    3fd4:	00060003 	.word	0x00060003
    3fd8:	00070003 	.word	0x00070003
    3fdc:	00010003 	.word	0x00010003
    3fe0:	001e0003 	.word	0x001e0003
    3fe4:	001f0003 	.word	0x001f0003
    3fe8:	00080003 	.word	0x00080003
    3fec:	00090003 	.word	0x00090003
    3ff0:	000a0003 	.word	0x000a0003
    3ff4:	000b0003 	.word	0x000b0003
    3ff8:	00100003 	.word	0x00100003
    3ffc:	00110003 	.word	0x00110003
    4000:	00120003 	.word	0x00120003
    4004:	00130003 	.word	0x00130003
    4008:	000c0003 	.word	0x000c0003
    400c:	000d0003 	.word	0x000d0003
    4010:	000e0003 	.word	0x000e0003
    4014:	000f0003 	.word	0x000f0003
    4018:	00160003 	.word	0x00160003
    401c:	00170003 	.word	0x00170003
    4020:	00180003 	.word	0x00180003
    4024:	00190003 	.word	0x00190003

00004028 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4028:	b590      	push	{r4, r7, lr}
    402a:	b08b      	sub	sp, #44	; 0x2c
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4030:	230c      	movs	r3, #12
    4032:	18fb      	adds	r3, r7, r3
    4034:	4a0f      	ldr	r2, [pc, #60]	; (4074 <_sercom_get_sercom_inst_index+0x4c>)
    4036:	ca13      	ldmia	r2!, {r0, r1, r4}
    4038:	c313      	stmia	r3!, {r0, r1, r4}
    403a:	ca13      	ldmia	r2!, {r0, r1, r4}
    403c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    403e:	2300      	movs	r3, #0
    4040:	627b      	str	r3, [r7, #36]	; 0x24
    4042:	e00e      	b.n	4062 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4044:	230c      	movs	r3, #12
    4046:	18fb      	adds	r3, r7, r3
    4048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    404a:	0092      	lsls	r2, r2, #2
    404c:	58d3      	ldr	r3, [r2, r3]
    404e:	001a      	movs	r2, r3
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	429a      	cmp	r2, r3
    4054:	d102      	bne.n	405c <_sercom_get_sercom_inst_index+0x34>
			return i;
    4056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4058:	b2db      	uxtb	r3, r3
    405a:	e006      	b.n	406a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    405e:	3301      	adds	r3, #1
    4060:	627b      	str	r3, [r7, #36]	; 0x24
    4062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4064:	2b05      	cmp	r3, #5
    4066:	d9ed      	bls.n	4044 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4068:	2300      	movs	r3, #0
}
    406a:	0018      	movs	r0, r3
    406c:	46bd      	mov	sp, r7
    406e:	b00b      	add	sp, #44	; 0x2c
    4070:	bd90      	pop	{r4, r7, pc}
    4072:	46c0      	nop			; (mov r8, r8)
    4074:	0000c9f8 	.word	0x0000c9f8

00004078 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4078:	b580      	push	{r7, lr}
    407a:	b082      	sub	sp, #8
    407c:	af00      	add	r7, sp, #0
    407e:	0002      	movs	r2, r0
    4080:	1dfb      	adds	r3, r7, #7
    4082:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4084:	46c0      	nop			; (mov r8, r8)
    4086:	46bd      	mov	sp, r7
    4088:	b002      	add	sp, #8
    408a:	bd80      	pop	{r7, pc}

0000408c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    408c:	b580      	push	{r7, lr}
    408e:	b084      	sub	sp, #16
    4090:	af00      	add	r7, sp, #0
    4092:	0002      	movs	r2, r0
    4094:	6039      	str	r1, [r7, #0]
    4096:	1dfb      	adds	r3, r7, #7
    4098:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    409a:	4b13      	ldr	r3, [pc, #76]	; (40e8 <_sercom_set_handler+0x5c>)
    409c:	781b      	ldrb	r3, [r3, #0]
    409e:	2201      	movs	r2, #1
    40a0:	4053      	eors	r3, r2
    40a2:	b2db      	uxtb	r3, r3
    40a4:	2b00      	cmp	r3, #0
    40a6:	d015      	beq.n	40d4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    40a8:	2300      	movs	r3, #0
    40aa:	60fb      	str	r3, [r7, #12]
    40ac:	e00c      	b.n	40c8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    40ae:	4b0f      	ldr	r3, [pc, #60]	; (40ec <_sercom_set_handler+0x60>)
    40b0:	68fa      	ldr	r2, [r7, #12]
    40b2:	0092      	lsls	r2, r2, #2
    40b4:	490e      	ldr	r1, [pc, #56]	; (40f0 <_sercom_set_handler+0x64>)
    40b6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    40b8:	4b0e      	ldr	r3, [pc, #56]	; (40f4 <_sercom_set_handler+0x68>)
    40ba:	68fa      	ldr	r2, [r7, #12]
    40bc:	0092      	lsls	r2, r2, #2
    40be:	2100      	movs	r1, #0
    40c0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    40c2:	68fb      	ldr	r3, [r7, #12]
    40c4:	3301      	adds	r3, #1
    40c6:	60fb      	str	r3, [r7, #12]
    40c8:	68fb      	ldr	r3, [r7, #12]
    40ca:	2b05      	cmp	r3, #5
    40cc:	d9ef      	bls.n	40ae <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    40ce:	4b06      	ldr	r3, [pc, #24]	; (40e8 <_sercom_set_handler+0x5c>)
    40d0:	2201      	movs	r2, #1
    40d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    40d4:	1dfb      	adds	r3, r7, #7
    40d6:	781a      	ldrb	r2, [r3, #0]
    40d8:	4b04      	ldr	r3, [pc, #16]	; (40ec <_sercom_set_handler+0x60>)
    40da:	0092      	lsls	r2, r2, #2
    40dc:	6839      	ldr	r1, [r7, #0]
    40de:	50d1      	str	r1, [r2, r3]
}
    40e0:	46c0      	nop			; (mov r8, r8)
    40e2:	46bd      	mov	sp, r7
    40e4:	b004      	add	sp, #16
    40e6:	bd80      	pop	{r7, pc}
    40e8:	2000016e 	.word	0x2000016e
    40ec:	20000170 	.word	0x20000170
    40f0:	00004079 	.word	0x00004079
    40f4:	200009fc 	.word	0x200009fc

000040f8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    40f8:	b590      	push	{r4, r7, lr}
    40fa:	b085      	sub	sp, #20
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4100:	2308      	movs	r3, #8
    4102:	18fb      	adds	r3, r7, r3
    4104:	4a0b      	ldr	r2, [pc, #44]	; (4134 <_sercom_get_interrupt_vector+0x3c>)
    4106:	6811      	ldr	r1, [r2, #0]
    4108:	6019      	str	r1, [r3, #0]
    410a:	8892      	ldrh	r2, [r2, #4]
    410c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    410e:	230f      	movs	r3, #15
    4110:	18fc      	adds	r4, r7, r3
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	0018      	movs	r0, r3
    4116:	4b08      	ldr	r3, [pc, #32]	; (4138 <_sercom_get_interrupt_vector+0x40>)
    4118:	4798      	blx	r3
    411a:	0003      	movs	r3, r0
    411c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    411e:	230f      	movs	r3, #15
    4120:	18fb      	adds	r3, r7, r3
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	2208      	movs	r2, #8
    4126:	18ba      	adds	r2, r7, r2
    4128:	5cd3      	ldrb	r3, [r2, r3]
    412a:	b25b      	sxtb	r3, r3
}
    412c:	0018      	movs	r0, r3
    412e:	46bd      	mov	sp, r7
    4130:	b005      	add	sp, #20
    4132:	bd90      	pop	{r4, r7, pc}
    4134:	0000ca10 	.word	0x0000ca10
    4138:	00004029 	.word	0x00004029

0000413c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    413c:	b580      	push	{r7, lr}
    413e:	af00      	add	r7, sp, #0
    4140:	4b03      	ldr	r3, [pc, #12]	; (4150 <SERCOM0_Handler+0x14>)
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	2000      	movs	r0, #0
    4146:	4798      	blx	r3
    4148:	46c0      	nop			; (mov r8, r8)
    414a:	46bd      	mov	sp, r7
    414c:	bd80      	pop	{r7, pc}
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	20000170 	.word	0x20000170

00004154 <SERCOM1_Handler>:
    4154:	b580      	push	{r7, lr}
    4156:	af00      	add	r7, sp, #0
    4158:	4b03      	ldr	r3, [pc, #12]	; (4168 <SERCOM1_Handler+0x14>)
    415a:	685b      	ldr	r3, [r3, #4]
    415c:	2001      	movs	r0, #1
    415e:	4798      	blx	r3
    4160:	46c0      	nop			; (mov r8, r8)
    4162:	46bd      	mov	sp, r7
    4164:	bd80      	pop	{r7, pc}
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	20000170 	.word	0x20000170

0000416c <SERCOM2_Handler>:
    416c:	b580      	push	{r7, lr}
    416e:	af00      	add	r7, sp, #0
    4170:	4b03      	ldr	r3, [pc, #12]	; (4180 <SERCOM2_Handler+0x14>)
    4172:	689b      	ldr	r3, [r3, #8]
    4174:	2002      	movs	r0, #2
    4176:	4798      	blx	r3
    4178:	46c0      	nop			; (mov r8, r8)
    417a:	46bd      	mov	sp, r7
    417c:	bd80      	pop	{r7, pc}
    417e:	46c0      	nop			; (mov r8, r8)
    4180:	20000170 	.word	0x20000170

00004184 <SERCOM3_Handler>:
    4184:	b580      	push	{r7, lr}
    4186:	af00      	add	r7, sp, #0
    4188:	4b03      	ldr	r3, [pc, #12]	; (4198 <SERCOM3_Handler+0x14>)
    418a:	68db      	ldr	r3, [r3, #12]
    418c:	2003      	movs	r0, #3
    418e:	4798      	blx	r3
    4190:	46c0      	nop			; (mov r8, r8)
    4192:	46bd      	mov	sp, r7
    4194:	bd80      	pop	{r7, pc}
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	20000170 	.word	0x20000170

0000419c <SERCOM4_Handler>:
    419c:	b580      	push	{r7, lr}
    419e:	af00      	add	r7, sp, #0
    41a0:	4b03      	ldr	r3, [pc, #12]	; (41b0 <SERCOM4_Handler+0x14>)
    41a2:	691b      	ldr	r3, [r3, #16]
    41a4:	2004      	movs	r0, #4
    41a6:	4798      	blx	r3
    41a8:	46c0      	nop			; (mov r8, r8)
    41aa:	46bd      	mov	sp, r7
    41ac:	bd80      	pop	{r7, pc}
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	20000170 	.word	0x20000170

000041b4 <SERCOM5_Handler>:
    41b4:	b580      	push	{r7, lr}
    41b6:	af00      	add	r7, sp, #0
    41b8:	4b03      	ldr	r3, [pc, #12]	; (41c8 <SERCOM5_Handler+0x14>)
    41ba:	695b      	ldr	r3, [r3, #20]
    41bc:	2005      	movs	r0, #5
    41be:	4798      	blx	r3
    41c0:	46c0      	nop			; (mov r8, r8)
    41c2:	46bd      	mov	sp, r7
    41c4:	bd80      	pop	{r7, pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	20000170 	.word	0x20000170

000041cc <system_pinmux_get_config_defaults>:
{
    41cc:	b580      	push	{r7, lr}
    41ce:	b082      	sub	sp, #8
    41d0:	af00      	add	r7, sp, #0
    41d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	2280      	movs	r2, #128	; 0x80
    41d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	2200      	movs	r2, #0
    41de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	2201      	movs	r2, #1
    41e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	2200      	movs	r2, #0
    41ea:	70da      	strb	r2, [r3, #3]
}
    41ec:	46c0      	nop			; (mov r8, r8)
    41ee:	46bd      	mov	sp, r7
    41f0:	b002      	add	sp, #8
    41f2:	bd80      	pop	{r7, pc}

000041f4 <system_pinmux_get_group_from_gpio_pin>:
{
    41f4:	b580      	push	{r7, lr}
    41f6:	b084      	sub	sp, #16
    41f8:	af00      	add	r7, sp, #0
    41fa:	0002      	movs	r2, r0
    41fc:	1dfb      	adds	r3, r7, #7
    41fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4200:	230f      	movs	r3, #15
    4202:	18fb      	adds	r3, r7, r3
    4204:	1dfa      	adds	r2, r7, #7
    4206:	7812      	ldrb	r2, [r2, #0]
    4208:	09d2      	lsrs	r2, r2, #7
    420a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    420c:	230e      	movs	r3, #14
    420e:	18fb      	adds	r3, r7, r3
    4210:	1dfa      	adds	r2, r7, #7
    4212:	7812      	ldrb	r2, [r2, #0]
    4214:	0952      	lsrs	r2, r2, #5
    4216:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4218:	4b0d      	ldr	r3, [pc, #52]	; (4250 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    421a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    421c:	230f      	movs	r3, #15
    421e:	18fb      	adds	r3, r7, r3
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d10f      	bne.n	4246 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4226:	230f      	movs	r3, #15
    4228:	18fb      	adds	r3, r7, r3
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	009b      	lsls	r3, r3, #2
    422e:	2210      	movs	r2, #16
    4230:	4694      	mov	ip, r2
    4232:	44bc      	add	ip, r7
    4234:	4463      	add	r3, ip
    4236:	3b08      	subs	r3, #8
    4238:	681a      	ldr	r2, [r3, #0]
    423a:	230e      	movs	r3, #14
    423c:	18fb      	adds	r3, r7, r3
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	01db      	lsls	r3, r3, #7
    4242:	18d3      	adds	r3, r2, r3
    4244:	e000      	b.n	4248 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4246:	2300      	movs	r3, #0
}
    4248:	0018      	movs	r0, r3
    424a:	46bd      	mov	sp, r7
    424c:	b004      	add	sp, #16
    424e:	bd80      	pop	{r7, pc}
    4250:	41004400 	.word	0x41004400

00004254 <port_get_group_from_gpio_pin>:
{
    4254:	b580      	push	{r7, lr}
    4256:	b082      	sub	sp, #8
    4258:	af00      	add	r7, sp, #0
    425a:	0002      	movs	r2, r0
    425c:	1dfb      	adds	r3, r7, #7
    425e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4260:	1dfb      	adds	r3, r7, #7
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	0018      	movs	r0, r3
    4266:	4b03      	ldr	r3, [pc, #12]	; (4274 <port_get_group_from_gpio_pin+0x20>)
    4268:	4798      	blx	r3
    426a:	0003      	movs	r3, r0
}
    426c:	0018      	movs	r0, r3
    426e:	46bd      	mov	sp, r7
    4270:	b002      	add	sp, #8
    4272:	bd80      	pop	{r7, pc}
    4274:	000041f5 	.word	0x000041f5

00004278 <port_pin_set_output_level>:
{
    4278:	b580      	push	{r7, lr}
    427a:	b084      	sub	sp, #16
    427c:	af00      	add	r7, sp, #0
    427e:	0002      	movs	r2, r0
    4280:	1dfb      	adds	r3, r7, #7
    4282:	701a      	strb	r2, [r3, #0]
    4284:	1dbb      	adds	r3, r7, #6
    4286:	1c0a      	adds	r2, r1, #0
    4288:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    428a:	1dfb      	adds	r3, r7, #7
    428c:	781b      	ldrb	r3, [r3, #0]
    428e:	0018      	movs	r0, r3
    4290:	4b0d      	ldr	r3, [pc, #52]	; (42c8 <port_pin_set_output_level+0x50>)
    4292:	4798      	blx	r3
    4294:	0003      	movs	r3, r0
    4296:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4298:	1dfb      	adds	r3, r7, #7
    429a:	781b      	ldrb	r3, [r3, #0]
    429c:	221f      	movs	r2, #31
    429e:	4013      	ands	r3, r2
    42a0:	2201      	movs	r2, #1
    42a2:	409a      	lsls	r2, r3
    42a4:	0013      	movs	r3, r2
    42a6:	60bb      	str	r3, [r7, #8]
	if (level) {
    42a8:	1dbb      	adds	r3, r7, #6
    42aa:	781b      	ldrb	r3, [r3, #0]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d003      	beq.n	42b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    42b0:	68fb      	ldr	r3, [r7, #12]
    42b2:	68ba      	ldr	r2, [r7, #8]
    42b4:	619a      	str	r2, [r3, #24]
}
    42b6:	e002      	b.n	42be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	68ba      	ldr	r2, [r7, #8]
    42bc:	615a      	str	r2, [r3, #20]
}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	46bd      	mov	sp, r7
    42c2:	b004      	add	sp, #16
    42c4:	bd80      	pop	{r7, pc}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	00004255 	.word	0x00004255

000042cc <system_gclk_chan_get_config_defaults>:
{
    42cc:	b580      	push	{r7, lr}
    42ce:	b082      	sub	sp, #8
    42d0:	af00      	add	r7, sp, #0
    42d2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	2200      	movs	r2, #0
    42d8:	701a      	strb	r2, [r3, #0]
}
    42da:	46c0      	nop			; (mov r8, r8)
    42dc:	46bd      	mov	sp, r7
    42de:	b002      	add	sp, #8
    42e0:	bd80      	pop	{r7, pc}
	...

000042e4 <system_apb_clock_set_mask>:
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b082      	sub	sp, #8
    42e8:	af00      	add	r7, sp, #0
    42ea:	0002      	movs	r2, r0
    42ec:	6039      	str	r1, [r7, #0]
    42ee:	1dfb      	adds	r3, r7, #7
    42f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42f2:	1dfb      	adds	r3, r7, #7
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	2b01      	cmp	r3, #1
    42f8:	d00a      	beq.n	4310 <system_apb_clock_set_mask+0x2c>
    42fa:	2b02      	cmp	r3, #2
    42fc:	d00f      	beq.n	431e <system_apb_clock_set_mask+0x3a>
    42fe:	2b00      	cmp	r3, #0
    4300:	d114      	bne.n	432c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4302:	4b0e      	ldr	r3, [pc, #56]	; (433c <system_apb_clock_set_mask+0x58>)
    4304:	4a0d      	ldr	r2, [pc, #52]	; (433c <system_apb_clock_set_mask+0x58>)
    4306:	6991      	ldr	r1, [r2, #24]
    4308:	683a      	ldr	r2, [r7, #0]
    430a:	430a      	orrs	r2, r1
    430c:	619a      	str	r2, [r3, #24]
			break;
    430e:	e00f      	b.n	4330 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4310:	4b0a      	ldr	r3, [pc, #40]	; (433c <system_apb_clock_set_mask+0x58>)
    4312:	4a0a      	ldr	r2, [pc, #40]	; (433c <system_apb_clock_set_mask+0x58>)
    4314:	69d1      	ldr	r1, [r2, #28]
    4316:	683a      	ldr	r2, [r7, #0]
    4318:	430a      	orrs	r2, r1
    431a:	61da      	str	r2, [r3, #28]
			break;
    431c:	e008      	b.n	4330 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    431e:	4b07      	ldr	r3, [pc, #28]	; (433c <system_apb_clock_set_mask+0x58>)
    4320:	4a06      	ldr	r2, [pc, #24]	; (433c <system_apb_clock_set_mask+0x58>)
    4322:	6a11      	ldr	r1, [r2, #32]
    4324:	683a      	ldr	r2, [r7, #0]
    4326:	430a      	orrs	r2, r1
    4328:	621a      	str	r2, [r3, #32]
			break;
    432a:	e001      	b.n	4330 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    432c:	2317      	movs	r3, #23
    432e:	e000      	b.n	4332 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4330:	2300      	movs	r3, #0
}
    4332:	0018      	movs	r0, r3
    4334:	46bd      	mov	sp, r7
    4336:	b002      	add	sp, #8
    4338:	bd80      	pop	{r7, pc}
    433a:	46c0      	nop			; (mov r8, r8)
    433c:	40000400 	.word	0x40000400

00004340 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4340:	b580      	push	{r7, lr}
    4342:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4344:	4b05      	ldr	r3, [pc, #20]	; (435c <system_is_debugger_present+0x1c>)
    4346:	789b      	ldrb	r3, [r3, #2]
    4348:	b2db      	uxtb	r3, r3
    434a:	001a      	movs	r2, r3
    434c:	2302      	movs	r3, #2
    434e:	4013      	ands	r3, r2
    4350:	1e5a      	subs	r2, r3, #1
    4352:	4193      	sbcs	r3, r2
    4354:	b2db      	uxtb	r3, r3
}
    4356:	0018      	movs	r0, r3
    4358:	46bd      	mov	sp, r7
    435a:	bd80      	pop	{r7, pc}
    435c:	41002000 	.word	0x41002000

00004360 <system_interrupt_enable>:
{
    4360:	b580      	push	{r7, lr}
    4362:	b082      	sub	sp, #8
    4364:	af00      	add	r7, sp, #0
    4366:	0002      	movs	r2, r0
    4368:	1dfb      	adds	r3, r7, #7
    436a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    436c:	4b06      	ldr	r3, [pc, #24]	; (4388 <system_interrupt_enable+0x28>)
    436e:	1dfa      	adds	r2, r7, #7
    4370:	7812      	ldrb	r2, [r2, #0]
    4372:	0011      	movs	r1, r2
    4374:	221f      	movs	r2, #31
    4376:	400a      	ands	r2, r1
    4378:	2101      	movs	r1, #1
    437a:	4091      	lsls	r1, r2
    437c:	000a      	movs	r2, r1
    437e:	601a      	str	r2, [r3, #0]
}
    4380:	46c0      	nop			; (mov r8, r8)
    4382:	46bd      	mov	sp, r7
    4384:	b002      	add	sp, #8
    4386:	bd80      	pop	{r7, pc}
    4388:	e000e100 	.word	0xe000e100

0000438c <system_interrupt_disable>:
{
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	0002      	movs	r2, r0
    4394:	1dfb      	adds	r3, r7, #7
    4396:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4398:	4a07      	ldr	r2, [pc, #28]	; (43b8 <system_interrupt_disable+0x2c>)
    439a:	1dfb      	adds	r3, r7, #7
    439c:	781b      	ldrb	r3, [r3, #0]
    439e:	0019      	movs	r1, r3
    43a0:	231f      	movs	r3, #31
    43a2:	400b      	ands	r3, r1
    43a4:	2101      	movs	r1, #1
    43a6:	4099      	lsls	r1, r3
    43a8:	000b      	movs	r3, r1
    43aa:	0019      	movs	r1, r3
    43ac:	2380      	movs	r3, #128	; 0x80
    43ae:	50d1      	str	r1, [r2, r3]
}
    43b0:	46c0      	nop			; (mov r8, r8)
    43b2:	46bd      	mov	sp, r7
    43b4:	b002      	add	sp, #8
    43b6:	bd80      	pop	{r7, pc}
    43b8:	e000e100 	.word	0xe000e100

000043bc <spi_is_syncing>:
{
    43bc:	b580      	push	{r7, lr}
    43be:	b084      	sub	sp, #16
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	69db      	ldr	r3, [r3, #28]
    43ce:	1e5a      	subs	r2, r3, #1
    43d0:	4193      	sbcs	r3, r2
    43d2:	b2db      	uxtb	r3, r3
}
    43d4:	0018      	movs	r0, r3
    43d6:	46bd      	mov	sp, r7
    43d8:	b004      	add	sp, #16
    43da:	bd80      	pop	{r7, pc}

000043dc <spi_enable>:
{
    43dc:	b580      	push	{r7, lr}
    43de:	b084      	sub	sp, #16
    43e0:	af00      	add	r7, sp, #0
    43e2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	681b      	ldr	r3, [r3, #0]
    43e8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	681b      	ldr	r3, [r3, #0]
    43ee:	0018      	movs	r0, r3
    43f0:	4b0b      	ldr	r3, [pc, #44]	; (4420 <spi_enable+0x44>)
    43f2:	4798      	blx	r3
    43f4:	0003      	movs	r3, r0
    43f6:	0018      	movs	r0, r3
    43f8:	4b0a      	ldr	r3, [pc, #40]	; (4424 <spi_enable+0x48>)
    43fa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    43fc:	46c0      	nop			; (mov r8, r8)
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	0018      	movs	r0, r3
    4402:	4b09      	ldr	r3, [pc, #36]	; (4428 <spi_enable+0x4c>)
    4404:	4798      	blx	r3
    4406:	1e03      	subs	r3, r0, #0
    4408:	d1f9      	bne.n	43fe <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	2202      	movs	r2, #2
    4410:	431a      	orrs	r2, r3
    4412:	68fb      	ldr	r3, [r7, #12]
    4414:	601a      	str	r2, [r3, #0]
}
    4416:	46c0      	nop			; (mov r8, r8)
    4418:	46bd      	mov	sp, r7
    441a:	b004      	add	sp, #16
    441c:	bd80      	pop	{r7, pc}
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	000040f9 	.word	0x000040f9
    4424:	00004361 	.word	0x00004361
    4428:	000043bd 	.word	0x000043bd

0000442c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    442c:	b580      	push	{r7, lr}
    442e:	b084      	sub	sp, #16
    4430:	af00      	add	r7, sp, #0
    4432:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	0018      	movs	r0, r3
    4440:	4b0e      	ldr	r3, [pc, #56]	; (447c <spi_disable+0x50>)
    4442:	4798      	blx	r3
    4444:	0003      	movs	r3, r0
    4446:	0018      	movs	r0, r3
    4448:	4b0d      	ldr	r3, [pc, #52]	; (4480 <spi_disable+0x54>)
    444a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    444c:	46c0      	nop			; (mov r8, r8)
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	0018      	movs	r0, r3
    4452:	4b0c      	ldr	r3, [pc, #48]	; (4484 <spi_disable+0x58>)
    4454:	4798      	blx	r3
    4456:	1e03      	subs	r3, r0, #0
    4458:	d1f9      	bne.n	444e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	228f      	movs	r2, #143	; 0x8f
    445e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4460:	68fb      	ldr	r3, [r7, #12]
    4462:	228f      	movs	r2, #143	; 0x8f
    4464:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4466:	68fb      	ldr	r3, [r7, #12]
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	2202      	movs	r2, #2
    446c:	4393      	bics	r3, r2
    446e:	001a      	movs	r2, r3
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	601a      	str	r2, [r3, #0]
}
    4474:	46c0      	nop			; (mov r8, r8)
    4476:	46bd      	mov	sp, r7
    4478:	b004      	add	sp, #16
    447a:	bd80      	pop	{r7, pc}
    447c:	000040f9 	.word	0x000040f9
    4480:	0000438d 	.word	0x0000438d
    4484:	000043bd 	.word	0x000043bd

00004488 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    4488:	b580      	push	{r7, lr}
    448a:	b084      	sub	sp, #16
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	7e1b      	ldrb	r3, [r3, #24]
    449a:	b2db      	uxtb	r3, r3
    449c:	001a      	movs	r2, r3
    449e:	2302      	movs	r3, #2
    44a0:	4013      	ands	r3, r2
    44a2:	1e5a      	subs	r2, r3, #1
    44a4:	4193      	sbcs	r3, r2
    44a6:	b2db      	uxtb	r3, r3
}
    44a8:	0018      	movs	r0, r3
    44aa:	46bd      	mov	sp, r7
    44ac:	b004      	add	sp, #16
    44ae:	bd80      	pop	{r7, pc}

000044b0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b084      	sub	sp, #16
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44be:	68fb      	ldr	r3, [r7, #12]
    44c0:	7e1b      	ldrb	r3, [r3, #24]
    44c2:	b2db      	uxtb	r3, r3
    44c4:	001a      	movs	r2, r3
    44c6:	2301      	movs	r3, #1
    44c8:	4013      	ands	r3, r2
    44ca:	1e5a      	subs	r2, r3, #1
    44cc:	4193      	sbcs	r3, r2
    44ce:	b2db      	uxtb	r3, r3
}
    44d0:	0018      	movs	r0, r3
    44d2:	46bd      	mov	sp, r7
    44d4:	b004      	add	sp, #16
    44d6:	bd80      	pop	{r7, pc}

000044d8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    44d8:	b580      	push	{r7, lr}
    44da:	b084      	sub	sp, #16
    44dc:	af00      	add	r7, sp, #0
    44de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44e0:	687b      	ldr	r3, [r7, #4]
    44e2:	681b      	ldr	r3, [r3, #0]
    44e4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	7e1b      	ldrb	r3, [r3, #24]
    44ea:	b2db      	uxtb	r3, r3
    44ec:	001a      	movs	r2, r3
    44ee:	2304      	movs	r3, #4
    44f0:	4013      	ands	r3, r2
    44f2:	1e5a      	subs	r2, r3, #1
    44f4:	4193      	sbcs	r3, r2
    44f6:	b2db      	uxtb	r3, r3
}
    44f8:	0018      	movs	r0, r3
    44fa:	46bd      	mov	sp, r7
    44fc:	b004      	add	sp, #16
    44fe:	bd80      	pop	{r7, pc}

00004500 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4500:	b580      	push	{r7, lr}
    4502:	b084      	sub	sp, #16
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
    4508:	000a      	movs	r2, r1
    450a:	1cbb      	adds	r3, r7, #2
    450c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	0018      	movs	r0, r3
    4518:	4b0a      	ldr	r3, [pc, #40]	; (4544 <spi_write+0x44>)
    451a:	4798      	blx	r3
    451c:	0003      	movs	r3, r0
    451e:	001a      	movs	r2, r3
    4520:	2301      	movs	r3, #1
    4522:	4053      	eors	r3, r2
    4524:	b2db      	uxtb	r3, r3
    4526:	2b00      	cmp	r3, #0
    4528:	d001      	beq.n	452e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    452a:	2305      	movs	r3, #5
    452c:	e006      	b.n	453c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    452e:	1cbb      	adds	r3, r7, #2
    4530:	881b      	ldrh	r3, [r3, #0]
    4532:	05db      	lsls	r3, r3, #23
    4534:	0dda      	lsrs	r2, r3, #23
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    453a:	2300      	movs	r3, #0
}
    453c:	0018      	movs	r0, r3
    453e:	46bd      	mov	sp, r7
    4540:	b004      	add	sp, #16
    4542:	bd80      	pop	{r7, pc}
    4544:	000044b1 	.word	0x000044b1

00004548 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4548:	b580      	push	{r7, lr}
    454a:	b084      	sub	sp, #16
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
    4550:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	0018      	movs	r0, r3
    455c:	4b1b      	ldr	r3, [pc, #108]	; (45cc <spi_read+0x84>)
    455e:	4798      	blx	r3
    4560:	0003      	movs	r3, r0
    4562:	001a      	movs	r2, r3
    4564:	2301      	movs	r3, #1
    4566:	4053      	eors	r3, r2
    4568:	b2db      	uxtb	r3, r3
    456a:	2b00      	cmp	r3, #0
    456c:	d001      	beq.n	4572 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    456e:	2310      	movs	r3, #16
    4570:	e027      	b.n	45c2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4572:	230f      	movs	r3, #15
    4574:	18fb      	adds	r3, r7, r3
    4576:	2200      	movs	r2, #0
    4578:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    457a:	68bb      	ldr	r3, [r7, #8]
    457c:	8b5b      	ldrh	r3, [r3, #26]
    457e:	b29b      	uxth	r3, r3
    4580:	001a      	movs	r2, r3
    4582:	2304      	movs	r3, #4
    4584:	4013      	ands	r3, r2
    4586:	d006      	beq.n	4596 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4588:	230f      	movs	r3, #15
    458a:	18fb      	adds	r3, r7, r3
    458c:	221e      	movs	r2, #30
    458e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4590:	68bb      	ldr	r3, [r7, #8]
    4592:	2204      	movs	r2, #4
    4594:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	799b      	ldrb	r3, [r3, #6]
    459a:	2b01      	cmp	r3, #1
    459c:	d108      	bne.n	45b0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    459e:	68bb      	ldr	r3, [r7, #8]
    45a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45a2:	b29b      	uxth	r3, r3
    45a4:	05db      	lsls	r3, r3, #23
    45a6:	0ddb      	lsrs	r3, r3, #23
    45a8:	b29a      	uxth	r2, r3
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	801a      	strh	r2, [r3, #0]
    45ae:	e005      	b.n	45bc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45b0:	68bb      	ldr	r3, [r7, #8]
    45b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45b4:	b2db      	uxtb	r3, r3
    45b6:	b29a      	uxth	r2, r3
    45b8:	683b      	ldr	r3, [r7, #0]
    45ba:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    45bc:	230f      	movs	r3, #15
    45be:	18fb      	adds	r3, r7, r3
    45c0:	781b      	ldrb	r3, [r3, #0]
}
    45c2:	0018      	movs	r0, r3
    45c4:	46bd      	mov	sp, r7
    45c6:	b004      	add	sp, #16
    45c8:	bd80      	pop	{r7, pc}
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	000044d9 	.word	0x000044d9

000045d0 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    45d0:	b580      	push	{r7, lr}
    45d2:	b084      	sub	sp, #16
    45d4:	af00      	add	r7, sp, #0
    45d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45d8:	687b      	ldr	r3, [r7, #4]
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	0018      	movs	r0, r3
    45e2:	4b09      	ldr	r3, [pc, #36]	; (4608 <spi_reset+0x38>)
    45e4:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    45e6:	46c0      	nop			; (mov r8, r8)
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	0018      	movs	r0, r3
    45ec:	4b07      	ldr	r3, [pc, #28]	; (460c <spi_reset+0x3c>)
    45ee:	4798      	blx	r3
    45f0:	1e03      	subs	r3, r0, #0
    45f2:	d1f9      	bne.n	45e8 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    45f4:	68fb      	ldr	r3, [r7, #12]
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	2201      	movs	r2, #1
    45fa:	431a      	orrs	r2, r3
    45fc:	68fb      	ldr	r3, [r7, #12]
    45fe:	601a      	str	r2, [r3, #0]
}
    4600:	46c0      	nop			; (mov r8, r8)
    4602:	46bd      	mov	sp, r7
    4604:	b004      	add	sp, #16
    4606:	bd80      	pop	{r7, pc}
    4608:	0000442d 	.word	0x0000442d
    460c:	000043bd 	.word	0x000043bd

00004610 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4610:	b590      	push	{r4, r7, lr}
    4612:	b089      	sub	sp, #36	; 0x24
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
    4618:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    461a:	230c      	movs	r3, #12
    461c:	18fb      	adds	r3, r7, r3
    461e:	2200      	movs	r2, #0
    4620:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	0018      	movs	r0, r3
    462c:	4b24      	ldr	r3, [pc, #144]	; (46c0 <spi_set_baudrate+0xb0>)
    462e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4630:	46c0      	nop			; (mov r8, r8)
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	0018      	movs	r0, r3
    4636:	4b23      	ldr	r3, [pc, #140]	; (46c4 <spi_set_baudrate+0xb4>)
    4638:	4798      	blx	r3
    463a:	1e03      	subs	r3, r0, #0
    463c:	d1f9      	bne.n	4632 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	681b      	ldr	r3, [r3, #0]
    4642:	0018      	movs	r0, r3
    4644:	4b20      	ldr	r3, [pc, #128]	; (46c8 <spi_set_baudrate+0xb8>)
    4646:	4798      	blx	r3
    4648:	0003      	movs	r3, r0
    464a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    464c:	69bb      	ldr	r3, [r7, #24]
    464e:	3314      	adds	r3, #20
    4650:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4652:	697b      	ldr	r3, [r7, #20]
    4654:	b2db      	uxtb	r3, r3
    4656:	0018      	movs	r0, r3
    4658:	4b1c      	ldr	r3, [pc, #112]	; (46cc <spi_set_baudrate+0xbc>)
    465a:	4798      	blx	r3
    465c:	0003      	movs	r3, r0
    465e:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4660:	230f      	movs	r3, #15
    4662:	18fc      	adds	r4, r7, r3
    4664:	230c      	movs	r3, #12
    4666:	18fa      	adds	r2, r7, r3
    4668:	6939      	ldr	r1, [r7, #16]
    466a:	683b      	ldr	r3, [r7, #0]
    466c:	0018      	movs	r0, r3
    466e:	4b18      	ldr	r3, [pc, #96]	; (46d0 <spi_set_baudrate+0xc0>)
    4670:	4798      	blx	r3
    4672:	0003      	movs	r3, r0
    4674:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4676:	230f      	movs	r3, #15
    4678:	18fb      	adds	r3, r7, r3
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	2b00      	cmp	r3, #0
    467e:	d001      	beq.n	4684 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4680:	2317      	movs	r3, #23
    4682:	e018      	b.n	46b6 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    4684:	230c      	movs	r3, #12
    4686:	18fb      	adds	r3, r7, r3
    4688:	881b      	ldrh	r3, [r3, #0]
    468a:	b2da      	uxtb	r2, r3
    468c:	69fb      	ldr	r3, [r7, #28]
    468e:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    4690:	46c0      	nop			; (mov r8, r8)
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	0018      	movs	r0, r3
    4696:	4b0b      	ldr	r3, [pc, #44]	; (46c4 <spi_set_baudrate+0xb4>)
    4698:	4798      	blx	r3
    469a:	1e03      	subs	r3, r0, #0
    469c:	d1f9      	bne.n	4692 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	0018      	movs	r0, r3
    46a2:	4b0c      	ldr	r3, [pc, #48]	; (46d4 <spi_set_baudrate+0xc4>)
    46a4:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	0018      	movs	r0, r3
    46ac:	4b05      	ldr	r3, [pc, #20]	; (46c4 <spi_set_baudrate+0xb4>)
    46ae:	4798      	blx	r3
    46b0:	1e03      	subs	r3, r0, #0
    46b2:	d1f9      	bne.n	46a8 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    46b4:	2300      	movs	r3, #0
}
    46b6:	0018      	movs	r0, r3
    46b8:	46bd      	mov	sp, r7
    46ba:	b009      	add	sp, #36	; 0x24
    46bc:	bd90      	pop	{r4, r7, pc}
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	0000442d 	.word	0x0000442d
    46c4:	000043bd 	.word	0x000043bd
    46c8:	00004029 	.word	0x00004029
    46cc:	00006c61 	.word	0x00006c61
    46d0:	00003ba3 	.word	0x00003ba3
    46d4:	000043dd 	.word	0x000043dd

000046d8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    46d8:	b590      	push	{r4, r7, lr}
    46da:	b093      	sub	sp, #76	; 0x4c
    46dc:	af00      	add	r7, sp, #0
    46de:	6078      	str	r0, [r7, #4]
    46e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	681b      	ldr	r3, [r3, #0]
    46ec:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    46ee:	231c      	movs	r3, #28
    46f0:	18fb      	adds	r3, r7, r3
    46f2:	0018      	movs	r0, r3
    46f4:	4b75      	ldr	r3, [pc, #468]	; (48cc <_spi_set_config+0x1f4>)
    46f6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    46f8:	231c      	movs	r3, #28
    46fa:	18fb      	adds	r3, r7, r3
    46fc:	2200      	movs	r2, #0
    46fe:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4700:	683b      	ldr	r3, [r7, #0]
    4702:	781b      	ldrb	r3, [r3, #0]
    4704:	2b00      	cmp	r3, #0
    4706:	d103      	bne.n	4710 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4708:	231c      	movs	r3, #28
    470a:	18fb      	adds	r3, r7, r3
    470c:	2200      	movs	r2, #0
    470e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4710:	683b      	ldr	r3, [r7, #0]
    4712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4714:	230c      	movs	r3, #12
    4716:	18fb      	adds	r3, r7, r3
    4718:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    471a:	683b      	ldr	r3, [r7, #0]
    471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    471e:	230c      	movs	r3, #12
    4720:	18fb      	adds	r3, r7, r3
    4722:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4724:	683b      	ldr	r3, [r7, #0]
    4726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4728:	230c      	movs	r3, #12
    472a:	18fb      	adds	r3, r7, r3
    472c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    472e:	683b      	ldr	r3, [r7, #0]
    4730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4732:	230c      	movs	r3, #12
    4734:	18fb      	adds	r3, r7, r3
    4736:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4738:	2347      	movs	r3, #71	; 0x47
    473a:	18fb      	adds	r3, r7, r3
    473c:	2200      	movs	r2, #0
    473e:	701a      	strb	r2, [r3, #0]
    4740:	e02c      	b.n	479c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4742:	2347      	movs	r3, #71	; 0x47
    4744:	18fb      	adds	r3, r7, r3
    4746:	781a      	ldrb	r2, [r3, #0]
    4748:	230c      	movs	r3, #12
    474a:	18fb      	adds	r3, r7, r3
    474c:	0092      	lsls	r2, r2, #2
    474e:	58d3      	ldr	r3, [r2, r3]
    4750:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4754:	2b00      	cmp	r3, #0
    4756:	d109      	bne.n	476c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4758:	2347      	movs	r3, #71	; 0x47
    475a:	18fb      	adds	r3, r7, r3
    475c:	781a      	ldrb	r2, [r3, #0]
    475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4760:	0011      	movs	r1, r2
    4762:	0018      	movs	r0, r3
    4764:	4b5a      	ldr	r3, [pc, #360]	; (48d0 <_spi_set_config+0x1f8>)
    4766:	4798      	blx	r3
    4768:	0003      	movs	r3, r0
    476a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    476e:	3301      	adds	r3, #1
    4770:	d00d      	beq.n	478e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4774:	b2da      	uxtb	r2, r3
    4776:	231c      	movs	r3, #28
    4778:	18fb      	adds	r3, r7, r3
    477a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    477e:	0c1b      	lsrs	r3, r3, #16
    4780:	b2db      	uxtb	r3, r3
    4782:	221c      	movs	r2, #28
    4784:	18ba      	adds	r2, r7, r2
    4786:	0011      	movs	r1, r2
    4788:	0018      	movs	r0, r3
    478a:	4b52      	ldr	r3, [pc, #328]	; (48d4 <_spi_set_config+0x1fc>)
    478c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    478e:	2347      	movs	r3, #71	; 0x47
    4790:	18fb      	adds	r3, r7, r3
    4792:	781a      	ldrb	r2, [r3, #0]
    4794:	2347      	movs	r3, #71	; 0x47
    4796:	18fb      	adds	r3, r7, r3
    4798:	3201      	adds	r2, #1
    479a:	701a      	strb	r2, [r3, #0]
    479c:	2347      	movs	r3, #71	; 0x47
    479e:	18fb      	adds	r3, r7, r3
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	2b03      	cmp	r3, #3
    47a4:	d9cd      	bls.n	4742 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    47a6:	683b      	ldr	r3, [r7, #0]
    47a8:	781a      	ldrb	r2, [r3, #0]
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    47ae:	683b      	ldr	r3, [r7, #0]
    47b0:	7c1a      	ldrb	r2, [r3, #16]
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    47b6:	683b      	ldr	r3, [r7, #0]
    47b8:	7c9a      	ldrb	r2, [r3, #18]
    47ba:	687b      	ldr	r3, [r7, #4]
    47bc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    47be:	683b      	ldr	r3, [r7, #0]
    47c0:	7d1a      	ldrb	r2, [r3, #20]
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    47c6:	230a      	movs	r3, #10
    47c8:	18fb      	adds	r3, r7, r3
    47ca:	2200      	movs	r2, #0
    47cc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    47ce:	2300      	movs	r3, #0
    47d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    47d2:	2300      	movs	r3, #0
    47d4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    47d6:	683b      	ldr	r3, [r7, #0]
    47d8:	781b      	ldrb	r3, [r3, #0]
    47da:	2b01      	cmp	r3, #1
    47dc:	d129      	bne.n	4832 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	681b      	ldr	r3, [r3, #0]
    47e2:	0018      	movs	r0, r3
    47e4:	4b3c      	ldr	r3, [pc, #240]	; (48d8 <_spi_set_config+0x200>)
    47e6:	4798      	blx	r3
    47e8:	0003      	movs	r3, r0
    47ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    47ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47ee:	3314      	adds	r3, #20
    47f0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    47f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47f4:	b2db      	uxtb	r3, r3
    47f6:	0018      	movs	r0, r3
    47f8:	4b38      	ldr	r3, [pc, #224]	; (48dc <_spi_set_config+0x204>)
    47fa:	4798      	blx	r3
    47fc:	0003      	movs	r3, r0
    47fe:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4800:	683b      	ldr	r3, [r7, #0]
    4802:	699b      	ldr	r3, [r3, #24]
    4804:	2223      	movs	r2, #35	; 0x23
    4806:	18bc      	adds	r4, r7, r2
    4808:	220a      	movs	r2, #10
    480a:	18ba      	adds	r2, r7, r2
    480c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    480e:	0018      	movs	r0, r3
    4810:	4b33      	ldr	r3, [pc, #204]	; (48e0 <_spi_set_config+0x208>)
    4812:	4798      	blx	r3
    4814:	0003      	movs	r3, r0
    4816:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4818:	2323      	movs	r3, #35	; 0x23
    481a:	18fb      	adds	r3, r7, r3
    481c:	781b      	ldrb	r3, [r3, #0]
    481e:	2b00      	cmp	r3, #0
    4820:	d001      	beq.n	4826 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4822:	2317      	movs	r3, #23
    4824:	e04e      	b.n	48c4 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4826:	230a      	movs	r3, #10
    4828:	18fb      	adds	r3, r7, r3
    482a:	881b      	ldrh	r3, [r3, #0]
    482c:	b2da      	uxtb	r2, r3
    482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4830:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4832:	683b      	ldr	r3, [r7, #0]
    4834:	685b      	ldr	r3, [r3, #4]
    4836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4838:	4313      	orrs	r3, r2
    483a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    483c:	683b      	ldr	r3, [r7, #0]
    483e:	689b      	ldr	r3, [r3, #8]
    4840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4842:	4313      	orrs	r3, r2
    4844:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4846:	683b      	ldr	r3, [r7, #0]
    4848:	68db      	ldr	r3, [r3, #12]
    484a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    484c:	4313      	orrs	r3, r2
    484e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4850:	683b      	ldr	r3, [r7, #0]
    4852:	7c1b      	ldrb	r3, [r3, #16]
    4854:	001a      	movs	r2, r3
    4856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4858:	4313      	orrs	r3, r2
    485a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    485c:	683b      	ldr	r3, [r7, #0]
    485e:	7c5b      	ldrb	r3, [r3, #17]
    4860:	2b00      	cmp	r3, #0
    4862:	d103      	bne.n	486c <_spi_set_config+0x194>
    4864:	4b1f      	ldr	r3, [pc, #124]	; (48e4 <_spi_set_config+0x20c>)
    4866:	4798      	blx	r3
    4868:	1e03      	subs	r3, r0, #0
    486a:	d003      	beq.n	4874 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    486e:	2280      	movs	r2, #128	; 0x80
    4870:	4313      	orrs	r3, r2
    4872:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4874:	683b      	ldr	r3, [r7, #0]
    4876:	7c9b      	ldrb	r3, [r3, #18]
    4878:	2b00      	cmp	r3, #0
    487a:	d004      	beq.n	4886 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    487e:	2280      	movs	r2, #128	; 0x80
    4880:	0292      	lsls	r2, r2, #10
    4882:	4313      	orrs	r3, r2
    4884:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4886:	683b      	ldr	r3, [r7, #0]
    4888:	7cdb      	ldrb	r3, [r3, #19]
    488a:	2b00      	cmp	r3, #0
    488c:	d004      	beq.n	4898 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4890:	2280      	movs	r2, #128	; 0x80
    4892:	0092      	lsls	r2, r2, #2
    4894:	4313      	orrs	r3, r2
    4896:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4898:	683b      	ldr	r3, [r7, #0]
    489a:	7d1b      	ldrb	r3, [r3, #20]
    489c:	2b00      	cmp	r3, #0
    489e:	d004      	beq.n	48aa <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    48a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48a2:	2280      	movs	r2, #128	; 0x80
    48a4:	0192      	lsls	r2, r2, #6
    48a6:	4313      	orrs	r3, r2
    48a8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    48aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48ac:	681a      	ldr	r2, [r3, #0]
    48ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    48b0:	431a      	orrs	r2, r3
    48b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48b4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    48b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48b8:	685a      	ldr	r2, [r3, #4]
    48ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48bc:	431a      	orrs	r2, r3
    48be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48c0:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    48c2:	2300      	movs	r3, #0
}
    48c4:	0018      	movs	r0, r3
    48c6:	46bd      	mov	sp, r7
    48c8:	b013      	add	sp, #76	; 0x4c
    48ca:	bd90      	pop	{r4, r7, pc}
    48cc:	000041cd 	.word	0x000041cd
    48d0:	00003e6d 	.word	0x00003e6d
    48d4:	00006e29 	.word	0x00006e29
    48d8:	00004029 	.word	0x00004029
    48dc:	00006c61 	.word	0x00006c61
    48e0:	00003ba3 	.word	0x00003ba3
    48e4:	00004341 	.word	0x00004341

000048e8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    48e8:	b590      	push	{r4, r7, lr}
    48ea:	b08b      	sub	sp, #44	; 0x2c
    48ec:	af00      	add	r7, sp, #0
    48ee:	60f8      	str	r0, [r7, #12]
    48f0:	60b9      	str	r1, [r7, #8]
    48f2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	68ba      	ldr	r2, [r7, #8]
    48f8:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	681b      	ldr	r3, [r3, #0]
    48fe:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4900:	6a3b      	ldr	r3, [r7, #32]
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	2202      	movs	r2, #2
    4906:	4013      	ands	r3, r2
    4908:	d001      	beq.n	490e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    490a:	231c      	movs	r3, #28
    490c:	e09c      	b.n	4a48 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    490e:	6a3b      	ldr	r3, [r7, #32]
    4910:	681b      	ldr	r3, [r3, #0]
    4912:	2201      	movs	r2, #1
    4914:	4013      	ands	r3, r2
    4916:	d001      	beq.n	491c <spi_init+0x34>
		return STATUS_BUSY;
    4918:	2305      	movs	r3, #5
    491a:	e095      	b.n	4a48 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	0018      	movs	r0, r3
    4922:	4b4b      	ldr	r3, [pc, #300]	; (4a50 <spi_init+0x168>)
    4924:	4798      	blx	r3
    4926:	0003      	movs	r3, r0
    4928:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    492a:	69fb      	ldr	r3, [r7, #28]
    492c:	3302      	adds	r3, #2
    492e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4930:	69fb      	ldr	r3, [r7, #28]
    4932:	3314      	adds	r3, #20
    4934:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4936:	2201      	movs	r2, #1
    4938:	69bb      	ldr	r3, [r7, #24]
    493a:	409a      	lsls	r2, r3
    493c:	0013      	movs	r3, r2
    493e:	0019      	movs	r1, r3
    4940:	2002      	movs	r0, #2
    4942:	4b44      	ldr	r3, [pc, #272]	; (4a54 <spi_init+0x16c>)
    4944:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4946:	2310      	movs	r3, #16
    4948:	18fb      	adds	r3, r7, r3
    494a:	0018      	movs	r0, r3
    494c:	4b42      	ldr	r3, [pc, #264]	; (4a58 <spi_init+0x170>)
    494e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4950:	687b      	ldr	r3, [r7, #4]
    4952:	2224      	movs	r2, #36	; 0x24
    4954:	5c9a      	ldrb	r2, [r3, r2]
    4956:	2310      	movs	r3, #16
    4958:	18fb      	adds	r3, r7, r3
    495a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    495c:	697b      	ldr	r3, [r7, #20]
    495e:	b2db      	uxtb	r3, r3
    4960:	2210      	movs	r2, #16
    4962:	18ba      	adds	r2, r7, r2
    4964:	0011      	movs	r1, r2
    4966:	0018      	movs	r0, r3
    4968:	4b3c      	ldr	r3, [pc, #240]	; (4a5c <spi_init+0x174>)
    496a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    496c:	697b      	ldr	r3, [r7, #20]
    496e:	b2db      	uxtb	r3, r3
    4970:	0018      	movs	r0, r3
    4972:	4b3b      	ldr	r3, [pc, #236]	; (4a60 <spi_init+0x178>)
    4974:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4976:	687b      	ldr	r3, [r7, #4]
    4978:	2224      	movs	r2, #36	; 0x24
    497a:	5c9b      	ldrb	r3, [r3, r2]
    497c:	2100      	movs	r1, #0
    497e:	0018      	movs	r0, r3
    4980:	4b38      	ldr	r3, [pc, #224]	; (4a64 <spi_init+0x17c>)
    4982:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	781b      	ldrb	r3, [r3, #0]
    4988:	2b01      	cmp	r3, #1
    498a:	d105      	bne.n	4998 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    498c:	6a3b      	ldr	r3, [r7, #32]
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	220c      	movs	r2, #12
    4992:	431a      	orrs	r2, r3
    4994:	6a3b      	ldr	r3, [r7, #32]
    4996:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4998:	2327      	movs	r3, #39	; 0x27
    499a:	18fb      	adds	r3, r7, r3
    499c:	2200      	movs	r2, #0
    499e:	701a      	strb	r2, [r3, #0]
    49a0:	e010      	b.n	49c4 <spi_init+0xdc>
		module->callback[i]        = NULL;
    49a2:	2327      	movs	r3, #39	; 0x27
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	781b      	ldrb	r3, [r3, #0]
    49a8:	68fa      	ldr	r2, [r7, #12]
    49aa:	3302      	adds	r3, #2
    49ac:	009b      	lsls	r3, r3, #2
    49ae:	18d3      	adds	r3, r2, r3
    49b0:	3304      	adds	r3, #4
    49b2:	2200      	movs	r2, #0
    49b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    49b6:	2327      	movs	r3, #39	; 0x27
    49b8:	18fb      	adds	r3, r7, r3
    49ba:	781a      	ldrb	r2, [r3, #0]
    49bc:	2327      	movs	r3, #39	; 0x27
    49be:	18fb      	adds	r3, r7, r3
    49c0:	3201      	adds	r2, #1
    49c2:	701a      	strb	r2, [r3, #0]
    49c4:	2327      	movs	r3, #39	; 0x27
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	781b      	ldrb	r3, [r3, #0]
    49ca:	2b06      	cmp	r3, #6
    49cc:	d9e9      	bls.n	49a2 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    49ce:	68fb      	ldr	r3, [r7, #12]
    49d0:	2200      	movs	r2, #0
    49d2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    49d4:	68fb      	ldr	r3, [r7, #12]
    49d6:	2200      	movs	r2, #0
    49d8:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    49da:	68fb      	ldr	r3, [r7, #12]
    49dc:	2200      	movs	r2, #0
    49de:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    49e0:	68fb      	ldr	r3, [r7, #12]
    49e2:	2200      	movs	r2, #0
    49e4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    49e6:	68fb      	ldr	r3, [r7, #12]
    49e8:	2236      	movs	r2, #54	; 0x36
    49ea:	2100      	movs	r1, #0
    49ec:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    49ee:	68fb      	ldr	r3, [r7, #12]
    49f0:	2237      	movs	r2, #55	; 0x37
    49f2:	2100      	movs	r1, #0
    49f4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    49f6:	68fb      	ldr	r3, [r7, #12]
    49f8:	2238      	movs	r2, #56	; 0x38
    49fa:	2100      	movs	r1, #0
    49fc:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    49fe:	68fb      	ldr	r3, [r7, #12]
    4a00:	2203      	movs	r2, #3
    4a02:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	2200      	movs	r2, #0
    4a08:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	2213      	movs	r2, #19
    4a10:	18bc      	adds	r4, r7, r2
    4a12:	0018      	movs	r0, r3
    4a14:	4b0e      	ldr	r3, [pc, #56]	; (4a50 <spi_init+0x168>)
    4a16:	4798      	blx	r3
    4a18:	0003      	movs	r3, r0
    4a1a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4a1c:	4a12      	ldr	r2, [pc, #72]	; (4a68 <spi_init+0x180>)
    4a1e:	2313      	movs	r3, #19
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	0011      	movs	r1, r2
    4a26:	0018      	movs	r0, r3
    4a28:	4b10      	ldr	r3, [pc, #64]	; (4a6c <spi_init+0x184>)
    4a2a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a2c:	2313      	movs	r3, #19
    4a2e:	18fb      	adds	r3, r7, r3
    4a30:	781a      	ldrb	r2, [r3, #0]
    4a32:	4b0f      	ldr	r3, [pc, #60]	; (4a70 <spi_init+0x188>)
    4a34:	0092      	lsls	r2, r2, #2
    4a36:	68f9      	ldr	r1, [r7, #12]
    4a38:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4a3a:	687a      	ldr	r2, [r7, #4]
    4a3c:	68fb      	ldr	r3, [r7, #12]
    4a3e:	0011      	movs	r1, r2
    4a40:	0018      	movs	r0, r3
    4a42:	4b0c      	ldr	r3, [pc, #48]	; (4a74 <spi_init+0x18c>)
    4a44:	4798      	blx	r3
    4a46:	0003      	movs	r3, r0
}
    4a48:	0018      	movs	r0, r3
    4a4a:	46bd      	mov	sp, r7
    4a4c:	b00b      	add	sp, #44	; 0x2c
    4a4e:	bd90      	pop	{r4, r7, pc}
    4a50:	00004029 	.word	0x00004029
    4a54:	000042e5 	.word	0x000042e5
    4a58:	000042cd 	.word	0x000042cd
    4a5c:	00006b3d 	.word	0x00006b3d
    4a60:	00006b81 	.word	0x00006b81
    4a64:	00003de1 	.word	0x00003de1
    4a68:	00004f41 	.word	0x00004f41
    4a6c:	0000408d 	.word	0x0000408d
    4a70:	200009fc 	.word	0x200009fc
    4a74:	000046d9 	.word	0x000046d9

00004a78 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4a78:	b590      	push	{r4, r7, lr}
    4a7a:	b087      	sub	sp, #28
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	60f8      	str	r0, [r7, #12]
    4a80:	60b9      	str	r1, [r7, #8]
    4a82:	0019      	movs	r1, r3
    4a84:	1dbb      	adds	r3, r7, #6
    4a86:	801a      	strh	r2, [r3, #0]
    4a88:	1d3b      	adds	r3, r7, #4
    4a8a:	1c0a      	adds	r2, r1, #0
    4a8c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4a8e:	68fb      	ldr	r3, [r7, #12]
    4a90:	2238      	movs	r2, #56	; 0x38
    4a92:	5c9b      	ldrb	r3, [r3, r2]
    4a94:	b2db      	uxtb	r3, r3
    4a96:	2b05      	cmp	r3, #5
    4a98:	d101      	bne.n	4a9e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4a9a:	2305      	movs	r3, #5
    4a9c:	e07a      	b.n	4b94 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4a9e:	1dbb      	adds	r3, r7, #6
    4aa0:	881b      	ldrh	r3, [r3, #0]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d101      	bne.n	4aaa <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    4aa6:	2317      	movs	r3, #23
    4aa8:	e074      	b.n	4b94 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    4aaa:	68fb      	ldr	r3, [r7, #12]
    4aac:	79db      	ldrb	r3, [r3, #7]
    4aae:	2201      	movs	r2, #1
    4ab0:	4053      	eors	r3, r2
    4ab2:	b2db      	uxtb	r3, r3
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d001      	beq.n	4abc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    4ab8:	231c      	movs	r3, #28
    4aba:	e06b      	b.n	4b94 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4abc:	2316      	movs	r3, #22
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	2200      	movs	r2, #0
    4ac2:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4ac4:	e05e      	b.n	4b84 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    4ac6:	68fb      	ldr	r3, [r7, #12]
    4ac8:	795b      	ldrb	r3, [r3, #5]
    4aca:	2b01      	cmp	r3, #1
    4acc:	d112      	bne.n	4af4 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	0018      	movs	r0, r3
    4ad4:	4b31      	ldr	r3, [pc, #196]	; (4b9c <spi_read_buffer_wait+0x124>)
    4ad6:	4798      	blx	r3
    4ad8:	0003      	movs	r3, r0
    4ada:	001a      	movs	r2, r3
    4adc:	2301      	movs	r3, #1
    4ade:	4053      	eors	r3, r2
    4ae0:	b2db      	uxtb	r3, r3
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d1f4      	bne.n	4ad0 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4ae6:	1d3b      	adds	r3, r7, #4
    4ae8:	881a      	ldrh	r2, [r3, #0]
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	0011      	movs	r1, r2
    4aee:	0018      	movs	r0, r3
    4af0:	4b2b      	ldr	r3, [pc, #172]	; (4ba0 <spi_read_buffer_wait+0x128>)
    4af2:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4af4:	46c0      	nop			; (mov r8, r8)
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	0018      	movs	r0, r3
    4afa:	4b2a      	ldr	r3, [pc, #168]	; (4ba4 <spi_read_buffer_wait+0x12c>)
    4afc:	4798      	blx	r3
    4afe:	0003      	movs	r3, r0
    4b00:	001a      	movs	r2, r3
    4b02:	2301      	movs	r3, #1
    4b04:	4053      	eors	r3, r2
    4b06:	b2db      	uxtb	r3, r3
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d1f4      	bne.n	4af6 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4b0c:	2312      	movs	r3, #18
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	2200      	movs	r2, #0
    4b12:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4b14:	2315      	movs	r3, #21
    4b16:	18fc      	adds	r4, r7, r3
    4b18:	2312      	movs	r3, #18
    4b1a:	18fa      	adds	r2, r7, r3
    4b1c:	68fb      	ldr	r3, [r7, #12]
    4b1e:	0011      	movs	r1, r2
    4b20:	0018      	movs	r0, r3
    4b22:	4b21      	ldr	r3, [pc, #132]	; (4ba8 <spi_read_buffer_wait+0x130>)
    4b24:	4798      	blx	r3
    4b26:	0003      	movs	r3, r0
    4b28:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4b2a:	2315      	movs	r3, #21
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	781b      	ldrb	r3, [r3, #0]
    4b30:	2b00      	cmp	r3, #0
    4b32:	d003      	beq.n	4b3c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4b34:	2315      	movs	r3, #21
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	781b      	ldrb	r3, [r3, #0]
    4b3a:	e02b      	b.n	4b94 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4b3c:	2316      	movs	r3, #22
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	881b      	ldrh	r3, [r3, #0]
    4b42:	2216      	movs	r2, #22
    4b44:	18ba      	adds	r2, r7, r2
    4b46:	1c59      	adds	r1, r3, #1
    4b48:	8011      	strh	r1, [r2, #0]
    4b4a:	001a      	movs	r2, r3
    4b4c:	68bb      	ldr	r3, [r7, #8]
    4b4e:	189b      	adds	r3, r3, r2
    4b50:	2212      	movs	r2, #18
    4b52:	18ba      	adds	r2, r7, r2
    4b54:	8812      	ldrh	r2, [r2, #0]
    4b56:	b2d2      	uxtb	r2, r2
    4b58:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	799b      	ldrb	r3, [r3, #6]
    4b5e:	2b01      	cmp	r3, #1
    4b60:	d110      	bne.n	4b84 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4b62:	2316      	movs	r3, #22
    4b64:	18fb      	adds	r3, r7, r3
    4b66:	881b      	ldrh	r3, [r3, #0]
    4b68:	2216      	movs	r2, #22
    4b6a:	18ba      	adds	r2, r7, r2
    4b6c:	1c59      	adds	r1, r3, #1
    4b6e:	8011      	strh	r1, [r2, #0]
    4b70:	001a      	movs	r2, r3
    4b72:	68bb      	ldr	r3, [r7, #8]
    4b74:	189b      	adds	r3, r3, r2
    4b76:	2212      	movs	r2, #18
    4b78:	18ba      	adds	r2, r7, r2
    4b7a:	8812      	ldrh	r2, [r2, #0]
    4b7c:	0a12      	lsrs	r2, r2, #8
    4b7e:	b292      	uxth	r2, r2
    4b80:	b2d2      	uxtb	r2, r2
    4b82:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4b84:	1dbb      	adds	r3, r7, #6
    4b86:	881b      	ldrh	r3, [r3, #0]
    4b88:	1dba      	adds	r2, r7, #6
    4b8a:	1e59      	subs	r1, r3, #1
    4b8c:	8011      	strh	r1, [r2, #0]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d199      	bne.n	4ac6 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4b92:	2300      	movs	r3, #0
}
    4b94:	0018      	movs	r0, r3
    4b96:	46bd      	mov	sp, r7
    4b98:	b007      	add	sp, #28
    4b9a:	bd90      	pop	{r4, r7, pc}
    4b9c:	000044b1 	.word	0x000044b1
    4ba0:	00004501 	.word	0x00004501
    4ba4:	000044d9 	.word	0x000044d9
    4ba8:	00004549 	.word	0x00004549

00004bac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4bac:	b580      	push	{r7, lr}
    4bae:	b086      	sub	sp, #24
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	60f8      	str	r0, [r7, #12]
    4bb4:	60b9      	str	r1, [r7, #8]
    4bb6:	1dfb      	adds	r3, r7, #7
    4bb8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4bba:	68fb      	ldr	r3, [r7, #12]
    4bbc:	795b      	ldrb	r3, [r3, #5]
    4bbe:	2b01      	cmp	r3, #1
    4bc0:	d001      	beq.n	4bc6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4bc2:	2315      	movs	r3, #21
    4bc4:	e05c      	b.n	4c80 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	7a1b      	ldrb	r3, [r3, #8]
    4bca:	2201      	movs	r2, #1
    4bcc:	4053      	eors	r3, r2
    4bce:	b2db      	uxtb	r3, r3
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d054      	beq.n	4c7e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    4bd4:	1dfb      	adds	r3, r7, #7
    4bd6:	781b      	ldrb	r3, [r3, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d04a      	beq.n	4c72 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4bdc:	68bb      	ldr	r3, [r7, #8]
    4bde:	785b      	ldrb	r3, [r3, #1]
    4be0:	2b00      	cmp	r3, #0
    4be2:	d03f      	beq.n	4c64 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4be4:	68fb      	ldr	r3, [r7, #12]
    4be6:	0018      	movs	r0, r3
    4be8:	4b27      	ldr	r3, [pc, #156]	; (4c88 <spi_select_slave+0xdc>)
    4bea:	4798      	blx	r3
    4bec:	0003      	movs	r3, r0
    4bee:	001a      	movs	r2, r3
    4bf0:	2301      	movs	r3, #1
    4bf2:	4053      	eors	r3, r2
    4bf4:	b2db      	uxtb	r3, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d007      	beq.n	4c0a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4bfa:	68bb      	ldr	r3, [r7, #8]
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	2101      	movs	r1, #1
    4c00:	0018      	movs	r0, r3
    4c02:	4b22      	ldr	r3, [pc, #136]	; (4c8c <spi_select_slave+0xe0>)
    4c04:	4798      	blx	r3
					return STATUS_BUSY;
    4c06:	2305      	movs	r3, #5
    4c08:	e03a      	b.n	4c80 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4c0a:	68bb      	ldr	r3, [r7, #8]
    4c0c:	781b      	ldrb	r3, [r3, #0]
    4c0e:	2100      	movs	r1, #0
    4c10:	0018      	movs	r0, r3
    4c12:	4b1e      	ldr	r3, [pc, #120]	; (4c8c <spi_select_slave+0xe0>)
    4c14:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4c16:	68bb      	ldr	r3, [r7, #8]
    4c18:	789b      	ldrb	r3, [r3, #2]
    4c1a:	b29a      	uxth	r2, r3
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	0011      	movs	r1, r2
    4c20:	0018      	movs	r0, r3
    4c22:	4b1b      	ldr	r3, [pc, #108]	; (4c90 <spi_select_slave+0xe4>)
    4c24:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4c26:	68fb      	ldr	r3, [r7, #12]
    4c28:	79db      	ldrb	r3, [r3, #7]
    4c2a:	2201      	movs	r2, #1
    4c2c:	4053      	eors	r3, r2
    4c2e:	b2db      	uxtb	r3, r3
    4c30:	2b00      	cmp	r3, #0
    4c32:	d024      	beq.n	4c7e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4c34:	46c0      	nop			; (mov r8, r8)
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	0018      	movs	r0, r3
    4c3a:	4b16      	ldr	r3, [pc, #88]	; (4c94 <spi_select_slave+0xe8>)
    4c3c:	4798      	blx	r3
    4c3e:	0003      	movs	r3, r0
    4c40:	001a      	movs	r2, r3
    4c42:	2301      	movs	r3, #1
    4c44:	4053      	eors	r3, r2
    4c46:	b2db      	uxtb	r3, r3
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d1f4      	bne.n	4c36 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4c4c:	2316      	movs	r3, #22
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	2200      	movs	r2, #0
    4c52:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4c54:	2316      	movs	r3, #22
    4c56:	18fa      	adds	r2, r7, r3
    4c58:	68fb      	ldr	r3, [r7, #12]
    4c5a:	0011      	movs	r1, r2
    4c5c:	0018      	movs	r0, r3
    4c5e:	4b0e      	ldr	r3, [pc, #56]	; (4c98 <spi_select_slave+0xec>)
    4c60:	4798      	blx	r3
    4c62:	e00c      	b.n	4c7e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4c64:	68bb      	ldr	r3, [r7, #8]
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	2100      	movs	r1, #0
    4c6a:	0018      	movs	r0, r3
    4c6c:	4b07      	ldr	r3, [pc, #28]	; (4c8c <spi_select_slave+0xe0>)
    4c6e:	4798      	blx	r3
    4c70:	e005      	b.n	4c7e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4c72:	68bb      	ldr	r3, [r7, #8]
    4c74:	781b      	ldrb	r3, [r3, #0]
    4c76:	2101      	movs	r1, #1
    4c78:	0018      	movs	r0, r3
    4c7a:	4b04      	ldr	r3, [pc, #16]	; (4c8c <spi_select_slave+0xe0>)
    4c7c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4c7e:	2300      	movs	r3, #0
}
    4c80:	0018      	movs	r0, r3
    4c82:	46bd      	mov	sp, r7
    4c84:	b006      	add	sp, #24
    4c86:	bd80      	pop	{r7, pc}
    4c88:	000044b1 	.word	0x000044b1
    4c8c:	00004279 	.word	0x00004279
    4c90:	00004501 	.word	0x00004501
    4c94:	000044d9 	.word	0x000044d9
    4c98:	00004549 	.word	0x00004549

00004c9c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4c9c:	b580      	push	{r7, lr}
    4c9e:	b086      	sub	sp, #24
    4ca0:	af00      	add	r7, sp, #0
    4ca2:	60f8      	str	r0, [r7, #12]
    4ca4:	60b9      	str	r1, [r7, #8]
    4ca6:	1dbb      	adds	r3, r7, #6
    4ca8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4caa:	68fb      	ldr	r3, [r7, #12]
    4cac:	2238      	movs	r2, #56	; 0x38
    4cae:	5c9b      	ldrb	r3, [r3, r2]
    4cb0:	b2db      	uxtb	r3, r3
    4cb2:	2b05      	cmp	r3, #5
    4cb4:	d101      	bne.n	4cba <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4cb6:	2305      	movs	r3, #5
    4cb8:	e087      	b.n	4dca <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4cba:	1dbb      	adds	r3, r7, #6
    4cbc:	881b      	ldrh	r3, [r3, #0]
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d101      	bne.n	4cc6 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4cc2:	2317      	movs	r3, #23
    4cc4:	e081      	b.n	4dca <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4cc6:	2316      	movs	r3, #22
    4cc8:	18fb      	adds	r3, r7, r3
    4cca:	2200      	movs	r2, #0
    4ccc:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4cce:	2314      	movs	r3, #20
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	1dba      	adds	r2, r7, #6
    4cd4:	8812      	ldrh	r2, [r2, #0]
    4cd6:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4cd8:	e05f      	b.n	4d9a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	68fb      	ldr	r3, [r7, #12]
    4cde:	0018      	movs	r0, r3
    4ce0:	4b3c      	ldr	r3, [pc, #240]	; (4dd4 <spi_write_buffer_wait+0x138>)
    4ce2:	4798      	blx	r3
    4ce4:	0003      	movs	r3, r0
    4ce6:	001a      	movs	r2, r3
    4ce8:	2301      	movs	r3, #1
    4cea:	4053      	eors	r3, r2
    4cec:	b2db      	uxtb	r3, r3
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d1f4      	bne.n	4cdc <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4cf2:	2316      	movs	r3, #22
    4cf4:	18fb      	adds	r3, r7, r3
    4cf6:	881b      	ldrh	r3, [r3, #0]
    4cf8:	2216      	movs	r2, #22
    4cfa:	18ba      	adds	r2, r7, r2
    4cfc:	1c59      	adds	r1, r3, #1
    4cfe:	8011      	strh	r1, [r2, #0]
    4d00:	001a      	movs	r2, r3
    4d02:	68bb      	ldr	r3, [r7, #8]
    4d04:	189b      	adds	r3, r3, r2
    4d06:	781a      	ldrb	r2, [r3, #0]
    4d08:	2312      	movs	r3, #18
    4d0a:	18fb      	adds	r3, r7, r3
    4d0c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d0e:	68fb      	ldr	r3, [r7, #12]
    4d10:	799b      	ldrb	r3, [r3, #6]
    4d12:	2b01      	cmp	r3, #1
    4d14:	d115      	bne.n	4d42 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4d16:	2316      	movs	r3, #22
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	881b      	ldrh	r3, [r3, #0]
    4d1c:	2216      	movs	r2, #22
    4d1e:	18ba      	adds	r2, r7, r2
    4d20:	1c59      	adds	r1, r3, #1
    4d22:	8011      	strh	r1, [r2, #0]
    4d24:	001a      	movs	r2, r3
    4d26:	68bb      	ldr	r3, [r7, #8]
    4d28:	189b      	adds	r3, r3, r2
    4d2a:	781b      	ldrb	r3, [r3, #0]
    4d2c:	021b      	lsls	r3, r3, #8
    4d2e:	b21a      	sxth	r2, r3
    4d30:	2312      	movs	r3, #18
    4d32:	18fb      	adds	r3, r7, r3
    4d34:	2100      	movs	r1, #0
    4d36:	5e5b      	ldrsh	r3, [r3, r1]
    4d38:	4313      	orrs	r3, r2
    4d3a:	b21a      	sxth	r2, r3
    4d3c:	2312      	movs	r3, #18
    4d3e:	18fb      	adds	r3, r7, r3
    4d40:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4d42:	2312      	movs	r3, #18
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	881a      	ldrh	r2, [r3, #0]
    4d48:	68fb      	ldr	r3, [r7, #12]
    4d4a:	0011      	movs	r1, r2
    4d4c:	0018      	movs	r0, r3
    4d4e:	4b22      	ldr	r3, [pc, #136]	; (4dd8 <spi_write_buffer_wait+0x13c>)
    4d50:	4798      	blx	r3

		if (module->receiver_enabled) {
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	79db      	ldrb	r3, [r3, #7]
    4d56:	2214      	movs	r2, #20
    4d58:	18ba      	adds	r2, r7, r2
    4d5a:	2114      	movs	r1, #20
    4d5c:	1879      	adds	r1, r7, r1
    4d5e:	8809      	ldrh	r1, [r1, #0]
    4d60:	8011      	strh	r1, [r2, #0]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d019      	beq.n	4d9a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4d66:	46c0      	nop			; (mov r8, r8)
    4d68:	68fb      	ldr	r3, [r7, #12]
    4d6a:	0018      	movs	r0, r3
    4d6c:	4b1b      	ldr	r3, [pc, #108]	; (4ddc <spi_write_buffer_wait+0x140>)
    4d6e:	4798      	blx	r3
    4d70:	0003      	movs	r3, r0
    4d72:	001a      	movs	r2, r3
    4d74:	2301      	movs	r3, #1
    4d76:	4053      	eors	r3, r2
    4d78:	b2db      	uxtb	r3, r3
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d1f4      	bne.n	4d68 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4d7e:	2310      	movs	r3, #16
    4d80:	18fa      	adds	r2, r7, r3
    4d82:	68fb      	ldr	r3, [r7, #12]
    4d84:	0011      	movs	r1, r2
    4d86:	0018      	movs	r0, r3
    4d88:	4b15      	ldr	r3, [pc, #84]	; (4de0 <spi_write_buffer_wait+0x144>)
    4d8a:	4798      	blx	r3
			flush_length--;
    4d8c:	2314      	movs	r3, #20
    4d8e:	18fb      	adds	r3, r7, r3
    4d90:	881a      	ldrh	r2, [r3, #0]
    4d92:	2314      	movs	r3, #20
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	3a01      	subs	r2, #1
    4d98:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4d9a:	1dbb      	adds	r3, r7, #6
    4d9c:	881b      	ldrh	r3, [r3, #0]
    4d9e:	1dba      	adds	r2, r7, #6
    4da0:	1e59      	subs	r1, r3, #1
    4da2:	8011      	strh	r1, [r2, #0]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d198      	bne.n	4cda <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4da8:	68fb      	ldr	r3, [r7, #12]
    4daa:	795b      	ldrb	r3, [r3, #5]
    4dac:	2b01      	cmp	r3, #1
    4dae:	d10b      	bne.n	4dc8 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4db0:	46c0      	nop			; (mov r8, r8)
    4db2:	68fb      	ldr	r3, [r7, #12]
    4db4:	0018      	movs	r0, r3
    4db6:	4b0b      	ldr	r3, [pc, #44]	; (4de4 <spi_write_buffer_wait+0x148>)
    4db8:	4798      	blx	r3
    4dba:	0003      	movs	r3, r0
    4dbc:	001a      	movs	r2, r3
    4dbe:	2301      	movs	r3, #1
    4dc0:	4053      	eors	r3, r2
    4dc2:	b2db      	uxtb	r3, r3
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d1f4      	bne.n	4db2 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4dc8:	2300      	movs	r3, #0
}
    4dca:	0018      	movs	r0, r3
    4dcc:	46bd      	mov	sp, r7
    4dce:	b006      	add	sp, #24
    4dd0:	bd80      	pop	{r7, pc}
    4dd2:	46c0      	nop			; (mov r8, r8)
    4dd4:	000044b1 	.word	0x000044b1
    4dd8:	00004501 	.word	0x00004501
    4ddc:	000044d9 	.word	0x000044d9
    4de0:	00004549 	.word	0x00004549
    4de4:	00004489 	.word	0x00004489

00004de8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b084      	sub	sp, #16
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dfa:	781b      	ldrb	r3, [r3, #0]
    4dfc:	b2da      	uxtb	r2, r3
    4dfe:	230e      	movs	r3, #14
    4e00:	18fb      	adds	r3, r7, r3
    4e02:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e08:	1c5a      	adds	r2, r3, #1
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	799b      	ldrb	r3, [r3, #6]
    4e12:	2b01      	cmp	r3, #1
    4e14:	d113      	bne.n	4e3e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e1a:	781b      	ldrb	r3, [r3, #0]
    4e1c:	b2db      	uxtb	r3, r3
    4e1e:	021b      	lsls	r3, r3, #8
    4e20:	b21a      	sxth	r2, r3
    4e22:	230e      	movs	r3, #14
    4e24:	18fb      	adds	r3, r7, r3
    4e26:	2100      	movs	r1, #0
    4e28:	5e5b      	ldrsh	r3, [r3, r1]
    4e2a:	4313      	orrs	r3, r2
    4e2c:	b21a      	sxth	r2, r3
    4e2e:	230e      	movs	r3, #14
    4e30:	18fb      	adds	r3, r7, r3
    4e32:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e38:	1c5a      	adds	r2, r3, #1
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4e3e:	230e      	movs	r3, #14
    4e40:	18fb      	adds	r3, r7, r3
    4e42:	881b      	ldrh	r3, [r3, #0]
    4e44:	05db      	lsls	r3, r3, #23
    4e46:	0dda      	lsrs	r2, r3, #23
    4e48:	68bb      	ldr	r3, [r7, #8]
    4e4a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4e50:	b29b      	uxth	r3, r3
    4e52:	3b01      	subs	r3, #1
    4e54:	b29a      	uxth	r2, r3
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	46bd      	mov	sp, r7
    4e5e:	b004      	add	sp, #16
    4e60:	bd80      	pop	{r7, pc}
	...

00004e64 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4e64:	b580      	push	{r7, lr}
    4e66:	b084      	sub	sp, #16
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	681b      	ldr	r3, [r3, #0]
    4e70:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4e72:	4b08      	ldr	r3, [pc, #32]	; (4e94 <_spi_write_dummy+0x30>)
    4e74:	881b      	ldrh	r3, [r3, #0]
    4e76:	001a      	movs	r2, r3
    4e78:	68fb      	ldr	r3, [r7, #12]
    4e7a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4e80:	b29b      	uxth	r3, r3
    4e82:	3b01      	subs	r3, #1
    4e84:	b29a      	uxth	r2, r3
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4e8a:	46c0      	nop			; (mov r8, r8)
    4e8c:	46bd      	mov	sp, r7
    4e8e:	b004      	add	sp, #16
    4e90:	bd80      	pop	{r7, pc}
    4e92:	46c0      	nop			; (mov r8, r8)
    4e94:	20000a14 	.word	0x20000a14

00004e98 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	b084      	sub	sp, #16
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4ea6:	230a      	movs	r3, #10
    4ea8:	18fb      	adds	r3, r7, r3
    4eaa:	2200      	movs	r2, #0
    4eac:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4eae:	68fb      	ldr	r3, [r7, #12]
    4eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4eb2:	230a      	movs	r3, #10
    4eb4:	18fb      	adds	r3, r7, r3
    4eb6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4ebc:	b29b      	uxth	r3, r3
    4ebe:	3b01      	subs	r3, #1
    4ec0:	b29a      	uxth	r2, r3
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	46bd      	mov	sp, r7
    4eca:	b004      	add	sp, #16
    4ecc:	bd80      	pop	{r7, pc}

00004ece <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4ece:	b580      	push	{r7, lr}
    4ed0:	b084      	sub	sp, #16
    4ed2:	af00      	add	r7, sp, #0
    4ed4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	681b      	ldr	r3, [r3, #0]
    4eda:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4edc:	68fb      	ldr	r3, [r7, #12]
    4ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ee0:	b29a      	uxth	r2, r3
    4ee2:	230a      	movs	r3, #10
    4ee4:	18fb      	adds	r3, r7, r3
    4ee6:	05d2      	lsls	r2, r2, #23
    4ee8:	0dd2      	lsrs	r2, r2, #23
    4eea:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ef0:	220a      	movs	r2, #10
    4ef2:	18ba      	adds	r2, r7, r2
    4ef4:	8812      	ldrh	r2, [r2, #0]
    4ef6:	b2d2      	uxtb	r2, r2
    4ef8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4efe:	1c5a      	adds	r2, r3, #1
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	799b      	ldrb	r3, [r3, #6]
    4f08:	2b01      	cmp	r3, #1
    4f0a:	d10d      	bne.n	4f28 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f10:	220a      	movs	r2, #10
    4f12:	18ba      	adds	r2, r7, r2
    4f14:	8812      	ldrh	r2, [r2, #0]
    4f16:	0a12      	lsrs	r2, r2, #8
    4f18:	b292      	uxth	r2, r2
    4f1a:	b2d2      	uxtb	r2, r2
    4f1c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4f1e:	687b      	ldr	r3, [r7, #4]
    4f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f22:	1c5a      	adds	r2, r3, #1
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4f2c:	b29b      	uxth	r3, r3
    4f2e:	3b01      	subs	r3, #1
    4f30:	b29a      	uxth	r2, r3
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	46bd      	mov	sp, r7
    4f3a:	b004      	add	sp, #16
    4f3c:	bd80      	pop	{r7, pc}
	...

00004f40 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4f40:	b580      	push	{r7, lr}
    4f42:	b086      	sub	sp, #24
    4f44:	af00      	add	r7, sp, #0
    4f46:	0002      	movs	r2, r0
    4f48:	1dfb      	adds	r3, r7, #7
    4f4a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4f4c:	1dfb      	adds	r3, r7, #7
    4f4e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4f50:	4b96      	ldr	r3, [pc, #600]	; (51ac <_spi_interrupt_handler+0x26c>)
    4f52:	0092      	lsls	r2, r2, #2
    4f54:	58d3      	ldr	r3, [r2, r3]
    4f56:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4f58:	697b      	ldr	r3, [r7, #20]
    4f5a:	681b      	ldr	r3, [r3, #0]
    4f5c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4f5e:	697b      	ldr	r3, [r7, #20]
    4f60:	2237      	movs	r2, #55	; 0x37
    4f62:	5c9a      	ldrb	r2, [r3, r2]
    4f64:	697b      	ldr	r3, [r7, #20]
    4f66:	2136      	movs	r1, #54	; 0x36
    4f68:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4f6a:	230f      	movs	r3, #15
    4f6c:	18fb      	adds	r3, r7, r3
    4f6e:	400a      	ands	r2, r1
    4f70:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4f72:	693b      	ldr	r3, [r7, #16]
    4f74:	7e1b      	ldrb	r3, [r3, #24]
    4f76:	b2da      	uxtb	r2, r3
    4f78:	230c      	movs	r3, #12
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4f7e:	693b      	ldr	r3, [r7, #16]
    4f80:	7d9b      	ldrb	r3, [r3, #22]
    4f82:	b2db      	uxtb	r3, r3
    4f84:	b29a      	uxth	r2, r3
    4f86:	230c      	movs	r3, #12
    4f88:	18fb      	adds	r3, r7, r3
    4f8a:	210c      	movs	r1, #12
    4f8c:	1879      	adds	r1, r7, r1
    4f8e:	8809      	ldrh	r1, [r1, #0]
    4f90:	400a      	ands	r2, r1
    4f92:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4f94:	230c      	movs	r3, #12
    4f96:	18fb      	adds	r3, r7, r3
    4f98:	881b      	ldrh	r3, [r3, #0]
    4f9a:	2201      	movs	r2, #1
    4f9c:	4013      	ands	r3, r2
    4f9e:	d038      	beq.n	5012 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4fa0:	697b      	ldr	r3, [r7, #20]
    4fa2:	795b      	ldrb	r3, [r3, #5]
    4fa4:	2b01      	cmp	r3, #1
    4fa6:	d110      	bne.n	4fca <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4fa8:	697b      	ldr	r3, [r7, #20]
    4faa:	7a5b      	ldrb	r3, [r3, #9]
    4fac:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d10b      	bne.n	4fca <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4fb2:	697b      	ldr	r3, [r7, #20]
    4fb4:	0018      	movs	r0, r3
    4fb6:	4b7e      	ldr	r3, [pc, #504]	; (51b0 <_spi_interrupt_handler+0x270>)
    4fb8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4fba:	697b      	ldr	r3, [r7, #20]
    4fbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4fbe:	b29b      	uxth	r3, r3
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d102      	bne.n	4fca <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4fc4:	693b      	ldr	r3, [r7, #16]
    4fc6:	2201      	movs	r2, #1
    4fc8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4fca:	697b      	ldr	r3, [r7, #20]
    4fcc:	795b      	ldrb	r3, [r3, #5]
		if (0
    4fce:	2b01      	cmp	r3, #1
    4fd0:	d11f      	bne.n	5012 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4fd2:	697b      	ldr	r3, [r7, #20]
    4fd4:	7a5b      	ldrb	r3, [r3, #9]
    4fd6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4fd8:	2b00      	cmp	r3, #0
    4fda:	d01a      	beq.n	5012 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4fdc:	697b      	ldr	r3, [r7, #20]
    4fde:	0018      	movs	r0, r3
    4fe0:	4b74      	ldr	r3, [pc, #464]	; (51b4 <_spi_interrupt_handler+0x274>)
    4fe2:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4fe4:	697b      	ldr	r3, [r7, #20]
    4fe6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4fe8:	b29b      	uxth	r3, r3
    4fea:	2b00      	cmp	r3, #0
    4fec:	d111      	bne.n	5012 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4fee:	693b      	ldr	r3, [r7, #16]
    4ff0:	2201      	movs	r2, #1
    4ff2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4ff4:	697b      	ldr	r3, [r7, #20]
    4ff6:	7a5b      	ldrb	r3, [r3, #9]
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	2b01      	cmp	r3, #1
    4ffc:	d109      	bne.n	5012 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4ffe:	697b      	ldr	r3, [r7, #20]
    5000:	79db      	ldrb	r3, [r3, #7]
    5002:	2201      	movs	r2, #1
    5004:	4053      	eors	r3, r2
    5006:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    5008:	2b00      	cmp	r3, #0
    500a:	d002      	beq.n	5012 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    500c:	693b      	ldr	r3, [r7, #16]
    500e:	2202      	movs	r2, #2
    5010:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5012:	230c      	movs	r3, #12
    5014:	18fb      	adds	r3, r7, r3
    5016:	881b      	ldrh	r3, [r3, #0]
    5018:	2204      	movs	r2, #4
    501a:	4013      	ands	r3, r2
    501c:	d100      	bne.n	5020 <_spi_interrupt_handler+0xe0>
    501e:	e07e      	b.n	511e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5020:	693b      	ldr	r3, [r7, #16]
    5022:	8b5b      	ldrh	r3, [r3, #26]
    5024:	b29b      	uxth	r3, r3
    5026:	001a      	movs	r2, r3
    5028:	2304      	movs	r3, #4
    502a:	4013      	ands	r3, r2
    502c:	d022      	beq.n	5074 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    502e:	697b      	ldr	r3, [r7, #20]
    5030:	7a5b      	ldrb	r3, [r3, #9]
    5032:	b2db      	uxtb	r3, r3
    5034:	2b01      	cmp	r3, #1
    5036:	d014      	beq.n	5062 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5038:	697b      	ldr	r3, [r7, #20]
    503a:	2238      	movs	r2, #56	; 0x38
    503c:	211e      	movs	r1, #30
    503e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5040:	697b      	ldr	r3, [r7, #20]
    5042:	2203      	movs	r2, #3
    5044:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5046:	693b      	ldr	r3, [r7, #16]
    5048:	2205      	movs	r2, #5
    504a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    504c:	230f      	movs	r3, #15
    504e:	18fb      	adds	r3, r7, r3
    5050:	781b      	ldrb	r3, [r3, #0]
    5052:	2208      	movs	r2, #8
    5054:	4013      	ands	r3, r2
    5056:	d004      	beq.n	5062 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5058:	697b      	ldr	r3, [r7, #20]
    505a:	699b      	ldr	r3, [r3, #24]
    505c:	697a      	ldr	r2, [r7, #20]
    505e:	0010      	movs	r0, r2
    5060:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5062:	693b      	ldr	r3, [r7, #16]
    5064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5066:	230a      	movs	r3, #10
    5068:	18fb      	adds	r3, r7, r3
    506a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    506c:	693b      	ldr	r3, [r7, #16]
    506e:	2204      	movs	r2, #4
    5070:	835a      	strh	r2, [r3, #26]
    5072:	e054      	b.n	511e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    5074:	697b      	ldr	r3, [r7, #20]
    5076:	7a5b      	ldrb	r3, [r3, #9]
    5078:	b2db      	uxtb	r3, r3
    507a:	2b01      	cmp	r3, #1
    507c:	d11e      	bne.n	50bc <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    507e:	697b      	ldr	r3, [r7, #20]
    5080:	0018      	movs	r0, r3
    5082:	4b4d      	ldr	r3, [pc, #308]	; (51b8 <_spi_interrupt_handler+0x278>)
    5084:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    5086:	697b      	ldr	r3, [r7, #20]
    5088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    508a:	b29b      	uxth	r3, r3
    508c:	2b00      	cmp	r3, #0
    508e:	d146      	bne.n	511e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5090:	693b      	ldr	r3, [r7, #16]
    5092:	2204      	movs	r2, #4
    5094:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    5096:	697b      	ldr	r3, [r7, #20]
    5098:	2238      	movs	r2, #56	; 0x38
    509a:	2100      	movs	r1, #0
    509c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    509e:	697b      	ldr	r3, [r7, #20]
    50a0:	2203      	movs	r2, #3
    50a2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    50a4:	230f      	movs	r3, #15
    50a6:	18fb      	adds	r3, r7, r3
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	2201      	movs	r2, #1
    50ac:	4013      	ands	r3, r2
    50ae:	d036      	beq.n	511e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    50b0:	697b      	ldr	r3, [r7, #20]
    50b2:	68db      	ldr	r3, [r3, #12]
    50b4:	697a      	ldr	r2, [r7, #20]
    50b6:	0010      	movs	r0, r2
    50b8:	4798      	blx	r3
    50ba:	e030      	b.n	511e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    50bc:	697b      	ldr	r3, [r7, #20]
    50be:	0018      	movs	r0, r3
    50c0:	4b3e      	ldr	r3, [pc, #248]	; (51bc <_spi_interrupt_handler+0x27c>)
    50c2:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    50c4:	697b      	ldr	r3, [r7, #20]
    50c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    50c8:	b29b      	uxth	r3, r3
    50ca:	2b00      	cmp	r3, #0
    50cc:	d127      	bne.n	511e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    50ce:	697b      	ldr	r3, [r7, #20]
    50d0:	2238      	movs	r2, #56	; 0x38
    50d2:	2100      	movs	r1, #0
    50d4:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    50d6:	693b      	ldr	r3, [r7, #16]
    50d8:	2204      	movs	r2, #4
    50da:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    50dc:	697b      	ldr	r3, [r7, #20]
    50de:	7a5b      	ldrb	r3, [r3, #9]
    50e0:	b2db      	uxtb	r3, r3
    50e2:	2b02      	cmp	r3, #2
    50e4:	d10b      	bne.n	50fe <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    50e6:	230f      	movs	r3, #15
    50e8:	18fb      	adds	r3, r7, r3
    50ea:	781b      	ldrb	r3, [r3, #0]
    50ec:	2204      	movs	r2, #4
    50ee:	4013      	ands	r3, r2
    50f0:	d015      	beq.n	511e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    50f2:	697b      	ldr	r3, [r7, #20]
    50f4:	695b      	ldr	r3, [r3, #20]
    50f6:	697a      	ldr	r2, [r7, #20]
    50f8:	0010      	movs	r0, r2
    50fa:	4798      	blx	r3
    50fc:	e00f      	b.n	511e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    50fe:	697b      	ldr	r3, [r7, #20]
    5100:	7a5b      	ldrb	r3, [r3, #9]
    5102:	b2db      	uxtb	r3, r3
    5104:	2b00      	cmp	r3, #0
    5106:	d10a      	bne.n	511e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5108:	230f      	movs	r3, #15
    510a:	18fb      	adds	r3, r7, r3
    510c:	781b      	ldrb	r3, [r3, #0]
    510e:	2202      	movs	r2, #2
    5110:	4013      	ands	r3, r2
    5112:	d004      	beq.n	511e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5114:	697b      	ldr	r3, [r7, #20]
    5116:	691b      	ldr	r3, [r3, #16]
    5118:	697a      	ldr	r2, [r7, #20]
    511a:	0010      	movs	r0, r2
    511c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    511e:	230c      	movs	r3, #12
    5120:	18fb      	adds	r3, r7, r3
    5122:	881b      	ldrh	r3, [r3, #0]
    5124:	2202      	movs	r2, #2
    5126:	4013      	ands	r3, r2
    5128:	d024      	beq.n	5174 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    512a:	697b      	ldr	r3, [r7, #20]
    512c:	795b      	ldrb	r3, [r3, #5]
    512e:	2b01      	cmp	r3, #1
    5130:	d120      	bne.n	5174 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5132:	697b      	ldr	r3, [r7, #20]
    5134:	7a5b      	ldrb	r3, [r3, #9]
    5136:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    5138:	2b01      	cmp	r3, #1
    513a:	d11b      	bne.n	5174 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    513c:	697b      	ldr	r3, [r7, #20]
    513e:	79db      	ldrb	r3, [r3, #7]
    5140:	2201      	movs	r2, #1
    5142:	4053      	eors	r3, r2
    5144:	b2db      	uxtb	r3, r3
    5146:	2b00      	cmp	r3, #0
    5148:	d014      	beq.n	5174 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    514a:	693b      	ldr	r3, [r7, #16]
    514c:	2202      	movs	r2, #2
    514e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5150:	697b      	ldr	r3, [r7, #20]
    5152:	2203      	movs	r2, #3
    5154:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    5156:	697b      	ldr	r3, [r7, #20]
    5158:	2238      	movs	r2, #56	; 0x38
    515a:	2100      	movs	r1, #0
    515c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    515e:	230f      	movs	r3, #15
    5160:	18fb      	adds	r3, r7, r3
    5162:	781b      	ldrb	r3, [r3, #0]
    5164:	2201      	movs	r2, #1
    5166:	4013      	ands	r3, r2
    5168:	d004      	beq.n	5174 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    516a:	697b      	ldr	r3, [r7, #20]
    516c:	68db      	ldr	r3, [r3, #12]
    516e:	697a      	ldr	r2, [r7, #20]
    5170:	0010      	movs	r0, r2
    5172:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5174:	230c      	movs	r3, #12
    5176:	18fb      	adds	r3, r7, r3
    5178:	881b      	ldrh	r3, [r3, #0]
    517a:	2280      	movs	r2, #128	; 0x80
    517c:	4013      	ands	r3, r2
    517e:	d010      	beq.n	51a2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5180:	693b      	ldr	r3, [r7, #16]
    5182:	2280      	movs	r2, #128	; 0x80
    5184:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5186:	693b      	ldr	r3, [r7, #16]
    5188:	2280      	movs	r2, #128	; 0x80
    518a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    518c:	230f      	movs	r3, #15
    518e:	18fb      	adds	r3, r7, r3
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	2240      	movs	r2, #64	; 0x40
    5194:	4013      	ands	r3, r2
    5196:	d004      	beq.n	51a2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5198:	697b      	ldr	r3, [r7, #20]
    519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    519c:	697a      	ldr	r2, [r7, #20]
    519e:	0010      	movs	r0, r2
    51a0:	4798      	blx	r3
		}
	}
#  endif
}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	46bd      	mov	sp, r7
    51a6:	b006      	add	sp, #24
    51a8:	bd80      	pop	{r7, pc}
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	200009fc 	.word	0x200009fc
    51b0:	00004e65 	.word	0x00004e65
    51b4:	00004de9 	.word	0x00004de9
    51b8:	00004e99 	.word	0x00004e99
    51bc:	00004ecf 	.word	0x00004ecf

000051c0 <system_gclk_chan_get_config_defaults>:
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	2200      	movs	r2, #0
    51cc:	701a      	strb	r2, [r3, #0]
}
    51ce:	46c0      	nop			; (mov r8, r8)
    51d0:	46bd      	mov	sp, r7
    51d2:	b002      	add	sp, #8
    51d4:	bd80      	pop	{r7, pc}
	...

000051d8 <system_apb_clock_set_mask>:
{
    51d8:	b580      	push	{r7, lr}
    51da:	b082      	sub	sp, #8
    51dc:	af00      	add	r7, sp, #0
    51de:	0002      	movs	r2, r0
    51e0:	6039      	str	r1, [r7, #0]
    51e2:	1dfb      	adds	r3, r7, #7
    51e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    51e6:	1dfb      	adds	r3, r7, #7
    51e8:	781b      	ldrb	r3, [r3, #0]
    51ea:	2b01      	cmp	r3, #1
    51ec:	d00a      	beq.n	5204 <system_apb_clock_set_mask+0x2c>
    51ee:	2b02      	cmp	r3, #2
    51f0:	d00f      	beq.n	5212 <system_apb_clock_set_mask+0x3a>
    51f2:	2b00      	cmp	r3, #0
    51f4:	d114      	bne.n	5220 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    51f6:	4b0e      	ldr	r3, [pc, #56]	; (5230 <system_apb_clock_set_mask+0x58>)
    51f8:	4a0d      	ldr	r2, [pc, #52]	; (5230 <system_apb_clock_set_mask+0x58>)
    51fa:	6991      	ldr	r1, [r2, #24]
    51fc:	683a      	ldr	r2, [r7, #0]
    51fe:	430a      	orrs	r2, r1
    5200:	619a      	str	r2, [r3, #24]
			break;
    5202:	e00f      	b.n	5224 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5204:	4b0a      	ldr	r3, [pc, #40]	; (5230 <system_apb_clock_set_mask+0x58>)
    5206:	4a0a      	ldr	r2, [pc, #40]	; (5230 <system_apb_clock_set_mask+0x58>)
    5208:	69d1      	ldr	r1, [r2, #28]
    520a:	683a      	ldr	r2, [r7, #0]
    520c:	430a      	orrs	r2, r1
    520e:	61da      	str	r2, [r3, #28]
			break;
    5210:	e008      	b.n	5224 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5212:	4b07      	ldr	r3, [pc, #28]	; (5230 <system_apb_clock_set_mask+0x58>)
    5214:	4a06      	ldr	r2, [pc, #24]	; (5230 <system_apb_clock_set_mask+0x58>)
    5216:	6a11      	ldr	r1, [r2, #32]
    5218:	683a      	ldr	r2, [r7, #0]
    521a:	430a      	orrs	r2, r1
    521c:	621a      	str	r2, [r3, #32]
			break;
    521e:	e001      	b.n	5224 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5220:	2317      	movs	r3, #23
    5222:	e000      	b.n	5226 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5224:	2300      	movs	r3, #0
}
    5226:	0018      	movs	r0, r3
    5228:	46bd      	mov	sp, r7
    522a:	b002      	add	sp, #8
    522c:	bd80      	pop	{r7, pc}
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	40000400 	.word	0x40000400

00005234 <system_pinmux_get_config_defaults>:
{
    5234:	b580      	push	{r7, lr}
    5236:	b082      	sub	sp, #8
    5238:	af00      	add	r7, sp, #0
    523a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	2280      	movs	r2, #128	; 0x80
    5240:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	2200      	movs	r2, #0
    5246:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	2201      	movs	r2, #1
    524c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	2200      	movs	r2, #0
    5252:	70da      	strb	r2, [r3, #3]
}
    5254:	46c0      	nop			; (mov r8, r8)
    5256:	46bd      	mov	sp, r7
    5258:	b002      	add	sp, #8
    525a:	bd80      	pop	{r7, pc}

0000525c <system_is_debugger_present>:
{
    525c:	b580      	push	{r7, lr}
    525e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5260:	4b05      	ldr	r3, [pc, #20]	; (5278 <system_is_debugger_present+0x1c>)
    5262:	789b      	ldrb	r3, [r3, #2]
    5264:	b2db      	uxtb	r3, r3
    5266:	001a      	movs	r2, r3
    5268:	2302      	movs	r3, #2
    526a:	4013      	ands	r3, r2
    526c:	1e5a      	subs	r2, r3, #1
    526e:	4193      	sbcs	r3, r2
    5270:	b2db      	uxtb	r3, r3
}
    5272:	0018      	movs	r0, r3
    5274:	46bd      	mov	sp, r7
    5276:	bd80      	pop	{r7, pc}
    5278:	41002000 	.word	0x41002000

0000527c <usart_is_syncing>:
{
    527c:	b580      	push	{r7, lr}
    527e:	b084      	sub	sp, #16
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	681b      	ldr	r3, [r3, #0]
    5288:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    528a:	68fb      	ldr	r3, [r7, #12]
    528c:	69db      	ldr	r3, [r3, #28]
    528e:	1e5a      	subs	r2, r3, #1
    5290:	4193      	sbcs	r3, r2
    5292:	b2db      	uxtb	r3, r3
}
    5294:	0018      	movs	r0, r3
    5296:	46bd      	mov	sp, r7
    5298:	b004      	add	sp, #16
    529a:	bd80      	pop	{r7, pc}

0000529c <_usart_wait_for_sync>:
{
    529c:	b580      	push	{r7, lr}
    529e:	b082      	sub	sp, #8
    52a0:	af00      	add	r7, sp, #0
    52a2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    52a4:	46c0      	nop			; (mov r8, r8)
    52a6:	687b      	ldr	r3, [r7, #4]
    52a8:	0018      	movs	r0, r3
    52aa:	4b04      	ldr	r3, [pc, #16]	; (52bc <_usart_wait_for_sync+0x20>)
    52ac:	4798      	blx	r3
    52ae:	1e03      	subs	r3, r0, #0
    52b0:	d1f9      	bne.n	52a6 <_usart_wait_for_sync+0xa>
}
    52b2:	46c0      	nop			; (mov r8, r8)
    52b4:	46bd      	mov	sp, r7
    52b6:	b002      	add	sp, #8
    52b8:	bd80      	pop	{r7, pc}
    52ba:	46c0      	nop			; (mov r8, r8)
    52bc:	0000527d 	.word	0x0000527d

000052c0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    52c0:	b5b0      	push	{r4, r5, r7, lr}
    52c2:	b08c      	sub	sp, #48	; 0x30
    52c4:	af02      	add	r7, sp, #8
    52c6:	6078      	str	r0, [r7, #4]
    52c8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    52ca:	687b      	ldr	r3, [r7, #4]
    52cc:	681b      	ldr	r3, [r3, #0]
    52ce:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	0018      	movs	r0, r3
    52d6:	4bab      	ldr	r3, [pc, #684]	; (5584 <_usart_set_config+0x2c4>)
    52d8:	4798      	blx	r3
    52da:	0003      	movs	r3, r0
    52dc:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    52de:	697b      	ldr	r3, [r7, #20]
    52e0:	3314      	adds	r3, #20
    52e2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    52e4:	2300      	movs	r3, #0
    52e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    52e8:	2300      	movs	r3, #0
    52ea:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    52ec:	230a      	movs	r3, #10
    52ee:	18fb      	adds	r3, r7, r3
    52f0:	2200      	movs	r2, #0
    52f2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    52f4:	231f      	movs	r3, #31
    52f6:	18fb      	adds	r3, r7, r3
    52f8:	2200      	movs	r2, #0
    52fa:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    52fc:	231e      	movs	r3, #30
    52fe:	18fb      	adds	r3, r7, r3
    5300:	2210      	movs	r2, #16
    5302:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5304:	683b      	ldr	r3, [r7, #0]
    5306:	8a1b      	ldrh	r3, [r3, #16]
    5308:	2280      	movs	r2, #128	; 0x80
    530a:	01d2      	lsls	r2, r2, #7
    530c:	4293      	cmp	r3, r2
    530e:	d01c      	beq.n	534a <_usart_set_config+0x8a>
    5310:	2280      	movs	r2, #128	; 0x80
    5312:	01d2      	lsls	r2, r2, #7
    5314:	4293      	cmp	r3, r2
    5316:	dc06      	bgt.n	5326 <_usart_set_config+0x66>
    5318:	2b00      	cmp	r3, #0
    531a:	d00d      	beq.n	5338 <_usart_set_config+0x78>
    531c:	2280      	movs	r2, #128	; 0x80
    531e:	0192      	lsls	r2, r2, #6
    5320:	4293      	cmp	r3, r2
    5322:	d024      	beq.n	536e <_usart_set_config+0xae>
    5324:	e035      	b.n	5392 <_usart_set_config+0xd2>
    5326:	22c0      	movs	r2, #192	; 0xc0
    5328:	01d2      	lsls	r2, r2, #7
    532a:	4293      	cmp	r3, r2
    532c:	d028      	beq.n	5380 <_usart_set_config+0xc0>
    532e:	2280      	movs	r2, #128	; 0x80
    5330:	0212      	lsls	r2, r2, #8
    5332:	4293      	cmp	r3, r2
    5334:	d012      	beq.n	535c <_usart_set_config+0x9c>
    5336:	e02c      	b.n	5392 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5338:	231f      	movs	r3, #31
    533a:	18fb      	adds	r3, r7, r3
    533c:	2200      	movs	r2, #0
    533e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5340:	231e      	movs	r3, #30
    5342:	18fb      	adds	r3, r7, r3
    5344:	2210      	movs	r2, #16
    5346:	701a      	strb	r2, [r3, #0]
			break;
    5348:	e023      	b.n	5392 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    534a:	231f      	movs	r3, #31
    534c:	18fb      	adds	r3, r7, r3
    534e:	2200      	movs	r2, #0
    5350:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5352:	231e      	movs	r3, #30
    5354:	18fb      	adds	r3, r7, r3
    5356:	2208      	movs	r2, #8
    5358:	701a      	strb	r2, [r3, #0]
			break;
    535a:	e01a      	b.n	5392 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    535c:	231f      	movs	r3, #31
    535e:	18fb      	adds	r3, r7, r3
    5360:	2200      	movs	r2, #0
    5362:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5364:	231e      	movs	r3, #30
    5366:	18fb      	adds	r3, r7, r3
    5368:	2203      	movs	r2, #3
    536a:	701a      	strb	r2, [r3, #0]
			break;
    536c:	e011      	b.n	5392 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    536e:	231f      	movs	r3, #31
    5370:	18fb      	adds	r3, r7, r3
    5372:	2201      	movs	r2, #1
    5374:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5376:	231e      	movs	r3, #30
    5378:	18fb      	adds	r3, r7, r3
    537a:	2210      	movs	r2, #16
    537c:	701a      	strb	r2, [r3, #0]
			break;
    537e:	e008      	b.n	5392 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5380:	231f      	movs	r3, #31
    5382:	18fb      	adds	r3, r7, r3
    5384:	2201      	movs	r2, #1
    5386:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5388:	231e      	movs	r3, #30
    538a:	18fb      	adds	r3, r7, r3
    538c:	2208      	movs	r2, #8
    538e:	701a      	strb	r2, [r3, #0]
			break;
    5390:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5392:	683b      	ldr	r3, [r7, #0]
    5394:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5396:	683b      	ldr	r3, [r7, #0]
    5398:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    539a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    539c:	683b      	ldr	r3, [r7, #0]
    539e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    53a0:	4313      	orrs	r3, r2
		config->sample_rate |
    53a2:	683a      	ldr	r2, [r7, #0]
    53a4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    53a6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    53a8:	683a      	ldr	r2, [r7, #0]
    53aa:	7e12      	ldrb	r2, [r2, #24]
    53ac:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    53ae:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    53b0:	683a      	ldr	r2, [r7, #0]
    53b2:	2126      	movs	r1, #38	; 0x26
    53b4:	5c52      	ldrb	r2, [r2, r1]
    53b6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    53b8:	4313      	orrs	r3, r2
    53ba:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    53bc:	231d      	movs	r3, #29
    53be:	18fb      	adds	r3, r7, r3
    53c0:	2200      	movs	r2, #0
    53c2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    53c4:	683b      	ldr	r3, [r7, #0]
    53c6:	685b      	ldr	r3, [r3, #4]
    53c8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    53ca:	68fb      	ldr	r3, [r7, #12]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d01e      	beq.n	540e <_usart_set_config+0x14e>
    53d0:	2280      	movs	r2, #128	; 0x80
    53d2:	0552      	lsls	r2, r2, #21
    53d4:	4293      	cmp	r3, r2
    53d6:	d14f      	bne.n	5478 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    53d8:	683b      	ldr	r3, [r7, #0]
    53da:	2227      	movs	r2, #39	; 0x27
    53dc:	5c9b      	ldrb	r3, [r3, r2]
    53de:	2201      	movs	r2, #1
    53e0:	4053      	eors	r3, r2
    53e2:	b2db      	uxtb	r3, r3
    53e4:	2b00      	cmp	r3, #0
    53e6:	d046      	beq.n	5476 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    53e8:	683b      	ldr	r3, [r7, #0]
    53ea:	6a1d      	ldr	r5, [r3, #32]
    53ec:	693b      	ldr	r3, [r7, #16]
    53ee:	b2db      	uxtb	r3, r3
    53f0:	0018      	movs	r0, r3
    53f2:	4b65      	ldr	r3, [pc, #404]	; (5588 <_usart_set_config+0x2c8>)
    53f4:	4798      	blx	r3
    53f6:	0001      	movs	r1, r0
    53f8:	231d      	movs	r3, #29
    53fa:	18fc      	adds	r4, r7, r3
    53fc:	230a      	movs	r3, #10
    53fe:	18fb      	adds	r3, r7, r3
    5400:	001a      	movs	r2, r3
    5402:	0028      	movs	r0, r5
    5404:	4b61      	ldr	r3, [pc, #388]	; (558c <_usart_set_config+0x2cc>)
    5406:	4798      	blx	r3
    5408:	0003      	movs	r3, r0
    540a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    540c:	e033      	b.n	5476 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    540e:	683b      	ldr	r3, [r7, #0]
    5410:	2227      	movs	r2, #39	; 0x27
    5412:	5c9b      	ldrb	r3, [r3, r2]
    5414:	2b00      	cmp	r3, #0
    5416:	d014      	beq.n	5442 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5418:	683b      	ldr	r3, [r7, #0]
    541a:	6a18      	ldr	r0, [r3, #32]
    541c:	683b      	ldr	r3, [r7, #0]
    541e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5420:	231d      	movs	r3, #29
    5422:	18fc      	adds	r4, r7, r3
    5424:	231f      	movs	r3, #31
    5426:	18fb      	adds	r3, r7, r3
    5428:	781d      	ldrb	r5, [r3, #0]
    542a:	230a      	movs	r3, #10
    542c:	18fa      	adds	r2, r7, r3
    542e:	231e      	movs	r3, #30
    5430:	18fb      	adds	r3, r7, r3
    5432:	781b      	ldrb	r3, [r3, #0]
    5434:	9300      	str	r3, [sp, #0]
    5436:	002b      	movs	r3, r5
    5438:	4d55      	ldr	r5, [pc, #340]	; (5590 <_usart_set_config+0x2d0>)
    543a:	47a8      	blx	r5
    543c:	0003      	movs	r3, r0
    543e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5440:	e01a      	b.n	5478 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5442:	683b      	ldr	r3, [r7, #0]
    5444:	6a1d      	ldr	r5, [r3, #32]
    5446:	693b      	ldr	r3, [r7, #16]
    5448:	b2db      	uxtb	r3, r3
    544a:	0018      	movs	r0, r3
    544c:	4b4e      	ldr	r3, [pc, #312]	; (5588 <_usart_set_config+0x2c8>)
    544e:	4798      	blx	r3
				status_code =
    5450:	231d      	movs	r3, #29
    5452:	18fc      	adds	r4, r7, r3
    5454:	231f      	movs	r3, #31
    5456:	18fb      	adds	r3, r7, r3
    5458:	7819      	ldrb	r1, [r3, #0]
    545a:	230a      	movs	r3, #10
    545c:	18fa      	adds	r2, r7, r3
    545e:	231e      	movs	r3, #30
    5460:	18fb      	adds	r3, r7, r3
    5462:	781b      	ldrb	r3, [r3, #0]
    5464:	9300      	str	r3, [sp, #0]
    5466:	000b      	movs	r3, r1
    5468:	0001      	movs	r1, r0
    546a:	0028      	movs	r0, r5
    546c:	4d48      	ldr	r5, [pc, #288]	; (5590 <_usart_set_config+0x2d0>)
    546e:	47a8      	blx	r5
    5470:	0003      	movs	r3, r0
    5472:	7023      	strb	r3, [r4, #0]
			break;
    5474:	e000      	b.n	5478 <_usart_set_config+0x1b8>
			break;
    5476:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5478:	231d      	movs	r3, #29
    547a:	18fb      	adds	r3, r7, r3
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	2b00      	cmp	r3, #0
    5480:	d003      	beq.n	548a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5482:	231d      	movs	r3, #29
    5484:	18fb      	adds	r3, r7, r3
    5486:	781b      	ldrb	r3, [r3, #0]
    5488:	e077      	b.n	557a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    548a:	683b      	ldr	r3, [r7, #0]
    548c:	7e5b      	ldrb	r3, [r3, #25]
    548e:	2b00      	cmp	r3, #0
    5490:	d003      	beq.n	549a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5492:	683b      	ldr	r3, [r7, #0]
    5494:	7e9a      	ldrb	r2, [r3, #26]
    5496:	69bb      	ldr	r3, [r7, #24]
    5498:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	0018      	movs	r0, r3
    549e:	4b3d      	ldr	r3, [pc, #244]	; (5594 <_usart_set_config+0x2d4>)
    54a0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    54a2:	230a      	movs	r3, #10
    54a4:	18fb      	adds	r3, r7, r3
    54a6:	881a      	ldrh	r2, [r3, #0]
    54a8:	69bb      	ldr	r3, [r7, #24]
    54aa:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    54ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    54ae:	68fb      	ldr	r3, [r7, #12]
    54b0:	4313      	orrs	r3, r2
    54b2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    54b4:	683b      	ldr	r3, [r7, #0]
    54b6:	2227      	movs	r2, #39	; 0x27
    54b8:	5c9b      	ldrb	r3, [r3, r2]
    54ba:	2201      	movs	r2, #1
    54bc:	4053      	eors	r3, r2
    54be:	b2db      	uxtb	r3, r3
    54c0:	2b00      	cmp	r3, #0
    54c2:	d003      	beq.n	54cc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    54c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54c6:	2204      	movs	r2, #4
    54c8:	4313      	orrs	r3, r2
    54ca:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    54cc:	683b      	ldr	r3, [r7, #0]
    54ce:	7e5b      	ldrb	r3, [r3, #25]
    54d0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    54d2:	683b      	ldr	r3, [r7, #0]
    54d4:	7f1b      	ldrb	r3, [r3, #28]
    54d6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    54d8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    54da:	683b      	ldr	r3, [r7, #0]
    54dc:	7f5b      	ldrb	r3, [r3, #29]
    54de:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    54e0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	2124      	movs	r1, #36	; 0x24
    54e6:	5c5b      	ldrb	r3, [r3, r1]
    54e8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    54ea:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    54ec:	683b      	ldr	r3, [r7, #0]
    54ee:	2125      	movs	r1, #37	; 0x25
    54f0:	5c5b      	ldrb	r3, [r3, r1]
    54f2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    54f4:	4313      	orrs	r3, r2
	ctrlb =  
    54f6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    54f8:	683b      	ldr	r3, [r7, #0]
    54fa:	7a9b      	ldrb	r3, [r3, #10]
    54fc:	001a      	movs	r2, r3
    54fe:	6a3b      	ldr	r3, [r7, #32]
    5500:	4313      	orrs	r3, r2
    5502:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5504:	683b      	ldr	r3, [r7, #0]
    5506:	7adb      	ldrb	r3, [r3, #11]
    5508:	001a      	movs	r2, r3
    550a:	6a3b      	ldr	r3, [r7, #32]
    550c:	4313      	orrs	r3, r2
    550e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5510:	683b      	ldr	r3, [r7, #0]
    5512:	891b      	ldrh	r3, [r3, #8]
    5514:	2bff      	cmp	r3, #255	; 0xff
    5516:	d00b      	beq.n	5530 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    551a:	2280      	movs	r2, #128	; 0x80
    551c:	0452      	lsls	r2, r2, #17
    551e:	4313      	orrs	r3, r2
    5520:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5522:	683b      	ldr	r3, [r7, #0]
    5524:	891b      	ldrh	r3, [r3, #8]
    5526:	001a      	movs	r2, r3
    5528:	6a3b      	ldr	r3, [r7, #32]
    552a:	4313      	orrs	r3, r2
    552c:	623b      	str	r3, [r7, #32]
    552e:	e008      	b.n	5542 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5530:	683b      	ldr	r3, [r7, #0]
    5532:	7edb      	ldrb	r3, [r3, #27]
    5534:	2b00      	cmp	r3, #0
    5536:	d004      	beq.n	5542 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    553a:	2280      	movs	r2, #128	; 0x80
    553c:	04d2      	lsls	r2, r2, #19
    553e:	4313      	orrs	r3, r2
    5540:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5542:	683b      	ldr	r3, [r7, #0]
    5544:	222c      	movs	r2, #44	; 0x2c
    5546:	5c9b      	ldrb	r3, [r3, r2]
    5548:	2b00      	cmp	r3, #0
    554a:	d103      	bne.n	5554 <_usart_set_config+0x294>
    554c:	4b12      	ldr	r3, [pc, #72]	; (5598 <_usart_set_config+0x2d8>)
    554e:	4798      	blx	r3
    5550:	1e03      	subs	r3, r0, #0
    5552:	d003      	beq.n	555c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5556:	2280      	movs	r2, #128	; 0x80
    5558:	4313      	orrs	r3, r2
    555a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	0018      	movs	r0, r3
    5560:	4b0c      	ldr	r3, [pc, #48]	; (5594 <_usart_set_config+0x2d4>)
    5562:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5564:	69bb      	ldr	r3, [r7, #24]
    5566:	6a3a      	ldr	r2, [r7, #32]
    5568:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    556a:	687b      	ldr	r3, [r7, #4]
    556c:	0018      	movs	r0, r3
    556e:	4b09      	ldr	r3, [pc, #36]	; (5594 <_usart_set_config+0x2d4>)
    5570:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5572:	69bb      	ldr	r3, [r7, #24]
    5574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5576:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5578:	2300      	movs	r3, #0
}
    557a:	0018      	movs	r0, r3
    557c:	46bd      	mov	sp, r7
    557e:	b00a      	add	sp, #40	; 0x28
    5580:	bdb0      	pop	{r4, r5, r7, pc}
    5582:	46c0      	nop			; (mov r8, r8)
    5584:	00004029 	.word	0x00004029
    5588:	00006c61 	.word	0x00006c61
    558c:	00003ba3 	.word	0x00003ba3
    5590:	00003c21 	.word	0x00003c21
    5594:	0000529d 	.word	0x0000529d
    5598:	0000525d 	.word	0x0000525d

0000559c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    559c:	b590      	push	{r4, r7, lr}
    559e:	b093      	sub	sp, #76	; 0x4c
    55a0:	af00      	add	r7, sp, #0
    55a2:	60f8      	str	r0, [r7, #12]
    55a4:	60b9      	str	r1, [r7, #8]
    55a6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    55a8:	233b      	movs	r3, #59	; 0x3b
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	2200      	movs	r2, #0
    55ae:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    55b0:	68fb      	ldr	r3, [r7, #12]
    55b2:	68ba      	ldr	r2, [r7, #8]
    55b4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    55b6:	68fb      	ldr	r3, [r7, #12]
    55b8:	681b      	ldr	r3, [r3, #0]
    55ba:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    55bc:	68fb      	ldr	r3, [r7, #12]
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	0018      	movs	r0, r3
    55c2:	4b86      	ldr	r3, [pc, #536]	; (57dc <usart_init+0x240>)
    55c4:	4798      	blx	r3
    55c6:	0003      	movs	r3, r0
    55c8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    55ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    55cc:	3302      	adds	r3, #2
    55ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    55d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    55d2:	3314      	adds	r3, #20
    55d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    55d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	2201      	movs	r2, #1
    55dc:	4013      	ands	r3, r2
    55de:	d001      	beq.n	55e4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    55e0:	2305      	movs	r3, #5
    55e2:	e0f6      	b.n	57d2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    55e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    55e6:	681b      	ldr	r3, [r3, #0]
    55e8:	2202      	movs	r2, #2
    55ea:	4013      	ands	r3, r2
    55ec:	d001      	beq.n	55f2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    55ee:	231c      	movs	r3, #28
    55f0:	e0ef      	b.n	57d2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    55f2:	2201      	movs	r2, #1
    55f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    55f6:	409a      	lsls	r2, r3
    55f8:	0013      	movs	r3, r2
    55fa:	0019      	movs	r1, r3
    55fc:	2002      	movs	r0, #2
    55fe:	4b78      	ldr	r3, [pc, #480]	; (57e0 <usart_init+0x244>)
    5600:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5602:	2324      	movs	r3, #36	; 0x24
    5604:	18fb      	adds	r3, r7, r3
    5606:	0018      	movs	r0, r3
    5608:	4b76      	ldr	r3, [pc, #472]	; (57e4 <usart_init+0x248>)
    560a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	222d      	movs	r2, #45	; 0x2d
    5610:	5c9a      	ldrb	r2, [r3, r2]
    5612:	2324      	movs	r3, #36	; 0x24
    5614:	18fb      	adds	r3, r7, r3
    5616:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5618:	6abb      	ldr	r3, [r7, #40]	; 0x28
    561a:	b2db      	uxtb	r3, r3
    561c:	2224      	movs	r2, #36	; 0x24
    561e:	18ba      	adds	r2, r7, r2
    5620:	0011      	movs	r1, r2
    5622:	0018      	movs	r0, r3
    5624:	4b70      	ldr	r3, [pc, #448]	; (57e8 <usart_init+0x24c>)
    5626:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5628:	6abb      	ldr	r3, [r7, #40]	; 0x28
    562a:	b2db      	uxtb	r3, r3
    562c:	0018      	movs	r0, r3
    562e:	4b6f      	ldr	r3, [pc, #444]	; (57ec <usart_init+0x250>)
    5630:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	222d      	movs	r2, #45	; 0x2d
    5636:	5c9b      	ldrb	r3, [r3, r2]
    5638:	2100      	movs	r1, #0
    563a:	0018      	movs	r0, r3
    563c:	4b6c      	ldr	r3, [pc, #432]	; (57f0 <usart_init+0x254>)
    563e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	7ada      	ldrb	r2, [r3, #11]
    5644:	68fb      	ldr	r3, [r7, #12]
    5646:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5648:	687b      	ldr	r3, [r7, #4]
    564a:	2224      	movs	r2, #36	; 0x24
    564c:	5c9a      	ldrb	r2, [r3, r2]
    564e:	68fb      	ldr	r3, [r7, #12]
    5650:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	2225      	movs	r2, #37	; 0x25
    5656:	5c9a      	ldrb	r2, [r3, r2]
    5658:	68fb      	ldr	r3, [r7, #12]
    565a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    565c:	687b      	ldr	r3, [r7, #4]
    565e:	7eda      	ldrb	r2, [r3, #27]
    5660:	68fb      	ldr	r3, [r7, #12]
    5662:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	7f1a      	ldrb	r2, [r3, #28]
    5668:	68fb      	ldr	r3, [r7, #12]
    566a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    566c:	233b      	movs	r3, #59	; 0x3b
    566e:	18fc      	adds	r4, r7, r3
    5670:	687a      	ldr	r2, [r7, #4]
    5672:	68fb      	ldr	r3, [r7, #12]
    5674:	0011      	movs	r1, r2
    5676:	0018      	movs	r0, r3
    5678:	4b5e      	ldr	r3, [pc, #376]	; (57f4 <usart_init+0x258>)
    567a:	4798      	blx	r3
    567c:	0003      	movs	r3, r0
    567e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5680:	233b      	movs	r3, #59	; 0x3b
    5682:	18fb      	adds	r3, r7, r3
    5684:	781b      	ldrb	r3, [r3, #0]
    5686:	2b00      	cmp	r3, #0
    5688:	d003      	beq.n	5692 <usart_init+0xf6>
		return status_code;
    568a:	233b      	movs	r3, #59	; 0x3b
    568c:	18fb      	adds	r3, r7, r3
    568e:	781b      	ldrb	r3, [r3, #0]
    5690:	e09f      	b.n	57d2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5692:	2320      	movs	r3, #32
    5694:	18fb      	adds	r3, r7, r3
    5696:	0018      	movs	r0, r3
    5698:	4b57      	ldr	r3, [pc, #348]	; (57f8 <usart_init+0x25c>)
    569a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    569c:	2320      	movs	r3, #32
    569e:	18fb      	adds	r3, r7, r3
    56a0:	2200      	movs	r2, #0
    56a2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    56a4:	2320      	movs	r3, #32
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	2200      	movs	r2, #0
    56aa:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    56b0:	2310      	movs	r3, #16
    56b2:	18fb      	adds	r3, r7, r3
    56b4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    56b6:	687b      	ldr	r3, [r7, #4]
    56b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    56ba:	2310      	movs	r3, #16
    56bc:	18fb      	adds	r3, r7, r3
    56be:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    56c4:	2310      	movs	r3, #16
    56c6:	18fb      	adds	r3, r7, r3
    56c8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    56ce:	2310      	movs	r3, #16
    56d0:	18fb      	adds	r3, r7, r3
    56d2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    56d4:	2347      	movs	r3, #71	; 0x47
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	2200      	movs	r2, #0
    56da:	701a      	strb	r2, [r3, #0]
    56dc:	e02c      	b.n	5738 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    56de:	2347      	movs	r3, #71	; 0x47
    56e0:	18fb      	adds	r3, r7, r3
    56e2:	781a      	ldrb	r2, [r3, #0]
    56e4:	2310      	movs	r3, #16
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	0092      	lsls	r2, r2, #2
    56ea:	58d3      	ldr	r3, [r2, r3]
    56ec:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    56ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56f0:	2b00      	cmp	r3, #0
    56f2:	d109      	bne.n	5708 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    56f4:	2347      	movs	r3, #71	; 0x47
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	781a      	ldrb	r2, [r3, #0]
    56fa:	68bb      	ldr	r3, [r7, #8]
    56fc:	0011      	movs	r1, r2
    56fe:	0018      	movs	r0, r3
    5700:	4b3e      	ldr	r3, [pc, #248]	; (57fc <usart_init+0x260>)
    5702:	4798      	blx	r3
    5704:	0003      	movs	r3, r0
    5706:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    570a:	3301      	adds	r3, #1
    570c:	d00d      	beq.n	572a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    570e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5710:	b2da      	uxtb	r2, r3
    5712:	2320      	movs	r3, #32
    5714:	18fb      	adds	r3, r7, r3
    5716:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    571a:	0c1b      	lsrs	r3, r3, #16
    571c:	b2db      	uxtb	r3, r3
    571e:	2220      	movs	r2, #32
    5720:	18ba      	adds	r2, r7, r2
    5722:	0011      	movs	r1, r2
    5724:	0018      	movs	r0, r3
    5726:	4b36      	ldr	r3, [pc, #216]	; (5800 <usart_init+0x264>)
    5728:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    572a:	2347      	movs	r3, #71	; 0x47
    572c:	18fb      	adds	r3, r7, r3
    572e:	781a      	ldrb	r2, [r3, #0]
    5730:	2347      	movs	r3, #71	; 0x47
    5732:	18fb      	adds	r3, r7, r3
    5734:	3201      	adds	r2, #1
    5736:	701a      	strb	r2, [r3, #0]
    5738:	2347      	movs	r3, #71	; 0x47
    573a:	18fb      	adds	r3, r7, r3
    573c:	781b      	ldrb	r3, [r3, #0]
    573e:	2b03      	cmp	r3, #3
    5740:	d9cd      	bls.n	56de <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5742:	2300      	movs	r3, #0
    5744:	63fb      	str	r3, [r7, #60]	; 0x3c
    5746:	e00a      	b.n	575e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5748:	68fa      	ldr	r2, [r7, #12]
    574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    574c:	3302      	adds	r3, #2
    574e:	009b      	lsls	r3, r3, #2
    5750:	18d3      	adds	r3, r2, r3
    5752:	3304      	adds	r3, #4
    5754:	2200      	movs	r2, #0
    5756:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    575a:	3301      	adds	r3, #1
    575c:	63fb      	str	r3, [r7, #60]	; 0x3c
    575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5760:	2b05      	cmp	r3, #5
    5762:	d9f1      	bls.n	5748 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5764:	68fb      	ldr	r3, [r7, #12]
    5766:	2200      	movs	r2, #0
    5768:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    576a:	68fb      	ldr	r3, [r7, #12]
    576c:	2200      	movs	r2, #0
    576e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5770:	68fb      	ldr	r3, [r7, #12]
    5772:	2200      	movs	r2, #0
    5774:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5776:	68fb      	ldr	r3, [r7, #12]
    5778:	2200      	movs	r2, #0
    577a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    577c:	68fb      	ldr	r3, [r7, #12]
    577e:	2230      	movs	r2, #48	; 0x30
    5780:	2100      	movs	r1, #0
    5782:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5784:	68fb      	ldr	r3, [r7, #12]
    5786:	2231      	movs	r2, #49	; 0x31
    5788:	2100      	movs	r1, #0
    578a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    578c:	68fb      	ldr	r3, [r7, #12]
    578e:	2232      	movs	r2, #50	; 0x32
    5790:	2100      	movs	r1, #0
    5792:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5794:	68fb      	ldr	r3, [r7, #12]
    5796:	2233      	movs	r2, #51	; 0x33
    5798:	2100      	movs	r1, #0
    579a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    579c:	68fb      	ldr	r3, [r7, #12]
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	2227      	movs	r2, #39	; 0x27
    57a2:	18bc      	adds	r4, r7, r2
    57a4:	0018      	movs	r0, r3
    57a6:	4b0d      	ldr	r3, [pc, #52]	; (57dc <usart_init+0x240>)
    57a8:	4798      	blx	r3
    57aa:	0003      	movs	r3, r0
    57ac:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    57ae:	4a15      	ldr	r2, [pc, #84]	; (5804 <usart_init+0x268>)
    57b0:	2327      	movs	r3, #39	; 0x27
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	781b      	ldrb	r3, [r3, #0]
    57b6:	0011      	movs	r1, r2
    57b8:	0018      	movs	r0, r3
    57ba:	4b13      	ldr	r3, [pc, #76]	; (5808 <usart_init+0x26c>)
    57bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    57be:	2327      	movs	r3, #39	; 0x27
    57c0:	18fb      	adds	r3, r7, r3
    57c2:	781a      	ldrb	r2, [r3, #0]
    57c4:	4b11      	ldr	r3, [pc, #68]	; (580c <usart_init+0x270>)
    57c6:	0092      	lsls	r2, r2, #2
    57c8:	68f9      	ldr	r1, [r7, #12]
    57ca:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    57cc:	233b      	movs	r3, #59	; 0x3b
    57ce:	18fb      	adds	r3, r7, r3
    57d0:	781b      	ldrb	r3, [r3, #0]
}
    57d2:	0018      	movs	r0, r3
    57d4:	46bd      	mov	sp, r7
    57d6:	b013      	add	sp, #76	; 0x4c
    57d8:	bd90      	pop	{r4, r7, pc}
    57da:	46c0      	nop			; (mov r8, r8)
    57dc:	00004029 	.word	0x00004029
    57e0:	000051d9 	.word	0x000051d9
    57e4:	000051c1 	.word	0x000051c1
    57e8:	00006b3d 	.word	0x00006b3d
    57ec:	00006b81 	.word	0x00006b81
    57f0:	00003de1 	.word	0x00003de1
    57f4:	000052c1 	.word	0x000052c1
    57f8:	00005235 	.word	0x00005235
    57fc:	00003e6d 	.word	0x00003e6d
    5800:	00006e29 	.word	0x00006e29
    5804:	00005bc9 	.word	0x00005bc9
    5808:	0000408d 	.word	0x0000408d
    580c:	200009fc 	.word	0x200009fc

00005810 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5810:	b580      	push	{r7, lr}
    5812:	b084      	sub	sp, #16
    5814:	af00      	add	r7, sp, #0
    5816:	6078      	str	r0, [r7, #4]
    5818:	000a      	movs	r2, r1
    581a:	1cbb      	adds	r3, r7, #2
    581c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    581e:	687b      	ldr	r3, [r7, #4]
    5820:	681b      	ldr	r3, [r3, #0]
    5822:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	79db      	ldrb	r3, [r3, #7]
    5828:	2201      	movs	r2, #1
    582a:	4053      	eors	r3, r2
    582c:	b2db      	uxtb	r3, r3
    582e:	2b00      	cmp	r3, #0
    5830:	d001      	beq.n	5836 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5832:	231c      	movs	r3, #28
    5834:	e017      	b.n	5866 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    583a:	b29b      	uxth	r3, r3
    583c:	2b00      	cmp	r3, #0
    583e:	d001      	beq.n	5844 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5840:	2305      	movs	r3, #5
    5842:	e010      	b.n	5866 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	0018      	movs	r0, r3
    5848:	4b09      	ldr	r3, [pc, #36]	; (5870 <usart_write_wait+0x60>)
    584a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    584c:	68fb      	ldr	r3, [r7, #12]
    584e:	1cba      	adds	r2, r7, #2
    5850:	8812      	ldrh	r2, [r2, #0]
    5852:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5854:	46c0      	nop			; (mov r8, r8)
    5856:	68fb      	ldr	r3, [r7, #12]
    5858:	7e1b      	ldrb	r3, [r3, #24]
    585a:	b2db      	uxtb	r3, r3
    585c:	001a      	movs	r2, r3
    585e:	2302      	movs	r3, #2
    5860:	4013      	ands	r3, r2
    5862:	d0f8      	beq.n	5856 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5864:	2300      	movs	r3, #0
}
    5866:	0018      	movs	r0, r3
    5868:	46bd      	mov	sp, r7
    586a:	b004      	add	sp, #16
    586c:	bd80      	pop	{r7, pc}
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	0000529d 	.word	0x0000529d

00005874 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5874:	b580      	push	{r7, lr}
    5876:	b084      	sub	sp, #16
    5878:	af00      	add	r7, sp, #0
    587a:	6078      	str	r0, [r7, #4]
    587c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    587e:	687b      	ldr	r3, [r7, #4]
    5880:	681b      	ldr	r3, [r3, #0]
    5882:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5884:	687b      	ldr	r3, [r7, #4]
    5886:	799b      	ldrb	r3, [r3, #6]
    5888:	2201      	movs	r2, #1
    588a:	4053      	eors	r3, r2
    588c:	b2db      	uxtb	r3, r3
    588e:	2b00      	cmp	r3, #0
    5890:	d001      	beq.n	5896 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5892:	231c      	movs	r3, #28
    5894:	e05e      	b.n	5954 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    589a:	b29b      	uxth	r3, r3
    589c:	2b00      	cmp	r3, #0
    589e:	d001      	beq.n	58a4 <usart_read_wait+0x30>
		return STATUS_BUSY;
    58a0:	2305      	movs	r3, #5
    58a2:	e057      	b.n	5954 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    58a4:	68fb      	ldr	r3, [r7, #12]
    58a6:	7e1b      	ldrb	r3, [r3, #24]
    58a8:	b2db      	uxtb	r3, r3
    58aa:	001a      	movs	r2, r3
    58ac:	2304      	movs	r3, #4
    58ae:	4013      	ands	r3, r2
    58b0:	d101      	bne.n	58b6 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    58b2:	2305      	movs	r3, #5
    58b4:	e04e      	b.n	5954 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    58b6:	687b      	ldr	r3, [r7, #4]
    58b8:	0018      	movs	r0, r3
    58ba:	4b28      	ldr	r3, [pc, #160]	; (595c <usart_read_wait+0xe8>)
    58bc:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    58be:	68fb      	ldr	r3, [r7, #12]
    58c0:	8b5b      	ldrh	r3, [r3, #26]
    58c2:	b29b      	uxth	r3, r3
    58c4:	b2da      	uxtb	r2, r3
    58c6:	230b      	movs	r3, #11
    58c8:	18fb      	adds	r3, r7, r3
    58ca:	213f      	movs	r1, #63	; 0x3f
    58cc:	400a      	ands	r2, r1
    58ce:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    58d0:	230b      	movs	r3, #11
    58d2:	18fb      	adds	r3, r7, r3
    58d4:	781b      	ldrb	r3, [r3, #0]
    58d6:	2b00      	cmp	r3, #0
    58d8:	d036      	beq.n	5948 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    58da:	230b      	movs	r3, #11
    58dc:	18fb      	adds	r3, r7, r3
    58de:	781b      	ldrb	r3, [r3, #0]
    58e0:	2202      	movs	r2, #2
    58e2:	4013      	ands	r3, r2
    58e4:	d004      	beq.n	58f0 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    58e6:	68fb      	ldr	r3, [r7, #12]
    58e8:	2202      	movs	r2, #2
    58ea:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    58ec:	231a      	movs	r3, #26
    58ee:	e031      	b.n	5954 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    58f0:	230b      	movs	r3, #11
    58f2:	18fb      	adds	r3, r7, r3
    58f4:	781b      	ldrb	r3, [r3, #0]
    58f6:	2204      	movs	r2, #4
    58f8:	4013      	ands	r3, r2
    58fa:	d004      	beq.n	5906 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    58fc:	68fb      	ldr	r3, [r7, #12]
    58fe:	2204      	movs	r2, #4
    5900:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5902:	231e      	movs	r3, #30
    5904:	e026      	b.n	5954 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5906:	230b      	movs	r3, #11
    5908:	18fb      	adds	r3, r7, r3
    590a:	781b      	ldrb	r3, [r3, #0]
    590c:	2201      	movs	r2, #1
    590e:	4013      	ands	r3, r2
    5910:	d004      	beq.n	591c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5912:	68fb      	ldr	r3, [r7, #12]
    5914:	2201      	movs	r2, #1
    5916:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    5918:	2313      	movs	r3, #19
    591a:	e01b      	b.n	5954 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    591c:	230b      	movs	r3, #11
    591e:	18fb      	adds	r3, r7, r3
    5920:	781b      	ldrb	r3, [r3, #0]
    5922:	2210      	movs	r2, #16
    5924:	4013      	ands	r3, r2
    5926:	d004      	beq.n	5932 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5928:	68fb      	ldr	r3, [r7, #12]
    592a:	2210      	movs	r2, #16
    592c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    592e:	2342      	movs	r3, #66	; 0x42
    5930:	e010      	b.n	5954 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5932:	230b      	movs	r3, #11
    5934:	18fb      	adds	r3, r7, r3
    5936:	781b      	ldrb	r3, [r3, #0]
    5938:	2220      	movs	r2, #32
    593a:	4013      	ands	r3, r2
    593c:	d004      	beq.n	5948 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    593e:	68fb      	ldr	r3, [r7, #12]
    5940:	2220      	movs	r2, #32
    5942:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5944:	2341      	movs	r3, #65	; 0x41
    5946:	e005      	b.n	5954 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    5948:	68fb      	ldr	r3, [r7, #12]
    594a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    594c:	b29a      	uxth	r2, r3
    594e:	683b      	ldr	r3, [r7, #0]
    5950:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5952:	2300      	movs	r3, #0
}
    5954:	0018      	movs	r0, r3
    5956:	46bd      	mov	sp, r7
    5958:	b004      	add	sp, #16
    595a:	bd80      	pop	{r7, pc}
    595c:	0000529d 	.word	0x0000529d

00005960 <system_interrupt_enter_critical_section>:
{
    5960:	b580      	push	{r7, lr}
    5962:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5964:	4b02      	ldr	r3, [pc, #8]	; (5970 <system_interrupt_enter_critical_section+0x10>)
    5966:	4798      	blx	r3
}
    5968:	46c0      	nop			; (mov r8, r8)
    596a:	46bd      	mov	sp, r7
    596c:	bd80      	pop	{r7, pc}
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	000034b1 	.word	0x000034b1

00005974 <system_interrupt_leave_critical_section>:
{
    5974:	b580      	push	{r7, lr}
    5976:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5978:	4b02      	ldr	r3, [pc, #8]	; (5984 <system_interrupt_leave_critical_section+0x10>)
    597a:	4798      	blx	r3
}
    597c:	46c0      	nop			; (mov r8, r8)
    597e:	46bd      	mov	sp, r7
    5980:	bd80      	pop	{r7, pc}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	00003505 	.word	0x00003505

00005988 <usart_is_syncing>:
{
    5988:	b580      	push	{r7, lr}
    598a:	b084      	sub	sp, #16
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	681b      	ldr	r3, [r3, #0]
    5994:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	69db      	ldr	r3, [r3, #28]
    599a:	1e5a      	subs	r2, r3, #1
    599c:	4193      	sbcs	r3, r2
    599e:	b2db      	uxtb	r3, r3
}
    59a0:	0018      	movs	r0, r3
    59a2:	46bd      	mov	sp, r7
    59a4:	b004      	add	sp, #16
    59a6:	bd80      	pop	{r7, pc}

000059a8 <_usart_wait_for_sync>:
{
    59a8:	b580      	push	{r7, lr}
    59aa:	b082      	sub	sp, #8
    59ac:	af00      	add	r7, sp, #0
    59ae:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    59b0:	46c0      	nop			; (mov r8, r8)
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	0018      	movs	r0, r3
    59b6:	4b04      	ldr	r3, [pc, #16]	; (59c8 <_usart_wait_for_sync+0x20>)
    59b8:	4798      	blx	r3
    59ba:	1e03      	subs	r3, r0, #0
    59bc:	d1f9      	bne.n	59b2 <_usart_wait_for_sync+0xa>
}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	46bd      	mov	sp, r7
    59c2:	b002      	add	sp, #8
    59c4:	bd80      	pop	{r7, pc}
    59c6:	46c0      	nop			; (mov r8, r8)
    59c8:	00005989 	.word	0x00005989

000059cc <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    59cc:	b580      	push	{r7, lr}
    59ce:	b086      	sub	sp, #24
    59d0:	af00      	add	r7, sp, #0
    59d2:	60f8      	str	r0, [r7, #12]
    59d4:	60b9      	str	r1, [r7, #8]
    59d6:	1dbb      	adds	r3, r7, #6
    59d8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    59e0:	4b0f      	ldr	r3, [pc, #60]	; (5a20 <_usart_write_buffer+0x54>)
    59e2:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    59e4:	68fb      	ldr	r3, [r7, #12]
    59e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    59e8:	b29b      	uxth	r3, r3
    59ea:	2b00      	cmp	r3, #0
    59ec:	d003      	beq.n	59f6 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    59ee:	4b0d      	ldr	r3, [pc, #52]	; (5a24 <_usart_write_buffer+0x58>)
    59f0:	4798      	blx	r3
		return STATUS_BUSY;
    59f2:	2305      	movs	r3, #5
    59f4:	e010      	b.n	5a18 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    59f6:	68fb      	ldr	r3, [r7, #12]
    59f8:	1dba      	adds	r2, r7, #6
    59fa:	8812      	ldrh	r2, [r2, #0]
    59fc:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    59fe:	4b09      	ldr	r3, [pc, #36]	; (5a24 <_usart_write_buffer+0x58>)
    5a00:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5a02:	68fb      	ldr	r3, [r7, #12]
    5a04:	68ba      	ldr	r2, [r7, #8]
    5a06:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5a08:	68fb      	ldr	r3, [r7, #12]
    5a0a:	2233      	movs	r2, #51	; 0x33
    5a0c:	2105      	movs	r1, #5
    5a0e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5a10:	697b      	ldr	r3, [r7, #20]
    5a12:	2201      	movs	r2, #1
    5a14:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    5a16:	2300      	movs	r3, #0
}
    5a18:	0018      	movs	r0, r3
    5a1a:	46bd      	mov	sp, r7
    5a1c:	b006      	add	sp, #24
    5a1e:	bd80      	pop	{r7, pc}
    5a20:	00005961 	.word	0x00005961
    5a24:	00005975 	.word	0x00005975

00005a28 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5a28:	b580      	push	{r7, lr}
    5a2a:	b086      	sub	sp, #24
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	60f8      	str	r0, [r7, #12]
    5a30:	60b9      	str	r1, [r7, #8]
    5a32:	1dbb      	adds	r3, r7, #6
    5a34:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5a3c:	4b16      	ldr	r3, [pc, #88]	; (5a98 <_usart_read_buffer+0x70>)
    5a3e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5a44:	b29b      	uxth	r3, r3
    5a46:	2b00      	cmp	r3, #0
    5a48:	d003      	beq.n	5a52 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5a4a:	4b14      	ldr	r3, [pc, #80]	; (5a9c <_usart_read_buffer+0x74>)
    5a4c:	4798      	blx	r3
		return STATUS_BUSY;
    5a4e:	2305      	movs	r3, #5
    5a50:	e01e      	b.n	5a90 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5a52:	68fb      	ldr	r3, [r7, #12]
    5a54:	1dba      	adds	r2, r7, #6
    5a56:	8812      	ldrh	r2, [r2, #0]
    5a58:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5a5a:	4b10      	ldr	r3, [pc, #64]	; (5a9c <_usart_read_buffer+0x74>)
    5a5c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5a5e:	68fb      	ldr	r3, [r7, #12]
    5a60:	68ba      	ldr	r2, [r7, #8]
    5a62:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5a64:	68fb      	ldr	r3, [r7, #12]
    5a66:	2232      	movs	r2, #50	; 0x32
    5a68:	2105      	movs	r1, #5
    5a6a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5a6c:	697b      	ldr	r3, [r7, #20]
    5a6e:	2204      	movs	r2, #4
    5a70:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5a72:	68fb      	ldr	r3, [r7, #12]
    5a74:	7a1b      	ldrb	r3, [r3, #8]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d002      	beq.n	5a80 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5a7a:	697b      	ldr	r3, [r7, #20]
    5a7c:	2220      	movs	r2, #32
    5a7e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5a80:	68fb      	ldr	r3, [r7, #12]
    5a82:	7a5b      	ldrb	r3, [r3, #9]
    5a84:	2b00      	cmp	r3, #0
    5a86:	d002      	beq.n	5a8e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5a88:	697b      	ldr	r3, [r7, #20]
    5a8a:	2208      	movs	r2, #8
    5a8c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5a8e:	2300      	movs	r3, #0
}
    5a90:	0018      	movs	r0, r3
    5a92:	46bd      	mov	sp, r7
    5a94:	b006      	add	sp, #24
    5a96:	bd80      	pop	{r7, pc}
    5a98:	00005961 	.word	0x00005961
    5a9c:	00005975 	.word	0x00005975

00005aa0 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5aa0:	b580      	push	{r7, lr}
    5aa2:	b084      	sub	sp, #16
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	60f8      	str	r0, [r7, #12]
    5aa8:	60b9      	str	r1, [r7, #8]
    5aaa:	1dfb      	adds	r3, r7, #7
    5aac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5aae:	1dfb      	adds	r3, r7, #7
    5ab0:	781b      	ldrb	r3, [r3, #0]
    5ab2:	68fa      	ldr	r2, [r7, #12]
    5ab4:	3302      	adds	r3, #2
    5ab6:	009b      	lsls	r3, r3, #2
    5ab8:	18d3      	adds	r3, r2, r3
    5aba:	3304      	adds	r3, #4
    5abc:	68ba      	ldr	r2, [r7, #8]
    5abe:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	2230      	movs	r2, #48	; 0x30
    5ac4:	5c9b      	ldrb	r3, [r3, r2]
    5ac6:	b25a      	sxtb	r2, r3
    5ac8:	1dfb      	adds	r3, r7, #7
    5aca:	781b      	ldrb	r3, [r3, #0]
    5acc:	2101      	movs	r1, #1
    5ace:	4099      	lsls	r1, r3
    5ad0:	000b      	movs	r3, r1
    5ad2:	b25b      	sxtb	r3, r3
    5ad4:	4313      	orrs	r3, r2
    5ad6:	b25b      	sxtb	r3, r3
    5ad8:	b2d9      	uxtb	r1, r3
    5ada:	68fb      	ldr	r3, [r7, #12]
    5adc:	2230      	movs	r2, #48	; 0x30
    5ade:	5499      	strb	r1, [r3, r2]
}
    5ae0:	46c0      	nop			; (mov r8, r8)
    5ae2:	46bd      	mov	sp, r7
    5ae4:	b004      	add	sp, #16
    5ae6:	bd80      	pop	{r7, pc}

00005ae8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b084      	sub	sp, #16
    5aec:	af00      	add	r7, sp, #0
    5aee:	60f8      	str	r0, [r7, #12]
    5af0:	60b9      	str	r1, [r7, #8]
    5af2:	1dbb      	adds	r3, r7, #6
    5af4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5af6:	1dbb      	adds	r3, r7, #6
    5af8:	881b      	ldrh	r3, [r3, #0]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d101      	bne.n	5b02 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5afe:	2317      	movs	r3, #23
    5b00:	e010      	b.n	5b24 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5b02:	68fb      	ldr	r3, [r7, #12]
    5b04:	79db      	ldrb	r3, [r3, #7]
    5b06:	2201      	movs	r2, #1
    5b08:	4053      	eors	r3, r2
    5b0a:	b2db      	uxtb	r3, r3
    5b0c:	2b00      	cmp	r3, #0
    5b0e:	d001      	beq.n	5b14 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5b10:	231c      	movs	r3, #28
    5b12:	e007      	b.n	5b24 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5b14:	1dbb      	adds	r3, r7, #6
    5b16:	881a      	ldrh	r2, [r3, #0]
    5b18:	68b9      	ldr	r1, [r7, #8]
    5b1a:	68fb      	ldr	r3, [r7, #12]
    5b1c:	0018      	movs	r0, r3
    5b1e:	4b03      	ldr	r3, [pc, #12]	; (5b2c <usart_write_buffer_job+0x44>)
    5b20:	4798      	blx	r3
    5b22:	0003      	movs	r3, r0
}
    5b24:	0018      	movs	r0, r3
    5b26:	46bd      	mov	sp, r7
    5b28:	b004      	add	sp, #16
    5b2a:	bd80      	pop	{r7, pc}
    5b2c:	000059cd 	.word	0x000059cd

00005b30 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b084      	sub	sp, #16
    5b34:	af00      	add	r7, sp, #0
    5b36:	60f8      	str	r0, [r7, #12]
    5b38:	60b9      	str	r1, [r7, #8]
    5b3a:	1dbb      	adds	r3, r7, #6
    5b3c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5b3e:	1dbb      	adds	r3, r7, #6
    5b40:	881b      	ldrh	r3, [r3, #0]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d101      	bne.n	5b4a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5b46:	2317      	movs	r3, #23
    5b48:	e010      	b.n	5b6c <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5b4a:	68fb      	ldr	r3, [r7, #12]
    5b4c:	799b      	ldrb	r3, [r3, #6]
    5b4e:	2201      	movs	r2, #1
    5b50:	4053      	eors	r3, r2
    5b52:	b2db      	uxtb	r3, r3
    5b54:	2b00      	cmp	r3, #0
    5b56:	d001      	beq.n	5b5c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5b58:	231c      	movs	r3, #28
    5b5a:	e007      	b.n	5b6c <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5b5c:	1dbb      	adds	r3, r7, #6
    5b5e:	881a      	ldrh	r2, [r3, #0]
    5b60:	68b9      	ldr	r1, [r7, #8]
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	0018      	movs	r0, r3
    5b66:	4b03      	ldr	r3, [pc, #12]	; (5b74 <usart_read_buffer_job+0x44>)
    5b68:	4798      	blx	r3
    5b6a:	0003      	movs	r3, r0
}
    5b6c:	0018      	movs	r0, r3
    5b6e:	46bd      	mov	sp, r7
    5b70:	b004      	add	sp, #16
    5b72:	bd80      	pop	{r7, pc}
    5b74:	00005a29 	.word	0x00005a29

00005b78 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5b78:	b580      	push	{r7, lr}
    5b7a:	b084      	sub	sp, #16
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	6078      	str	r0, [r7, #4]
    5b80:	000a      	movs	r2, r1
    5b82:	1cfb      	adds	r3, r7, #3
    5b84:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5b86:	1cfb      	adds	r3, r7, #3
    5b88:	781b      	ldrb	r3, [r3, #0]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d002      	beq.n	5b94 <usart_get_job_status+0x1c>
    5b8e:	2b01      	cmp	r3, #1
    5b90:	d007      	beq.n	5ba2 <usart_get_job_status+0x2a>
    5b92:	e00d      	b.n	5bb0 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5b94:	230f      	movs	r3, #15
    5b96:	18fb      	adds	r3, r7, r3
    5b98:	687a      	ldr	r2, [r7, #4]
    5b9a:	2132      	movs	r1, #50	; 0x32
    5b9c:	5c52      	ldrb	r2, [r2, r1]
    5b9e:	701a      	strb	r2, [r3, #0]
			break;
    5ba0:	e00b      	b.n	5bba <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    5ba2:	230f      	movs	r3, #15
    5ba4:	18fb      	adds	r3, r7, r3
    5ba6:	687a      	ldr	r2, [r7, #4]
    5ba8:	2133      	movs	r1, #51	; 0x33
    5baa:	5c52      	ldrb	r2, [r2, r1]
    5bac:	701a      	strb	r2, [r3, #0]
			break;
    5bae:	e004      	b.n	5bba <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5bb0:	230f      	movs	r3, #15
    5bb2:	18fb      	adds	r3, r7, r3
    5bb4:	2217      	movs	r2, #23
    5bb6:	701a      	strb	r2, [r3, #0]
			break;
    5bb8:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5bba:	230f      	movs	r3, #15
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	781b      	ldrb	r3, [r3, #0]
}
    5bc0:	0018      	movs	r0, r3
    5bc2:	46bd      	mov	sp, r7
    5bc4:	b004      	add	sp, #16
    5bc6:	bd80      	pop	{r7, pc}

00005bc8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b088      	sub	sp, #32
    5bcc:	af00      	add	r7, sp, #0
    5bce:	0002      	movs	r2, r0
    5bd0:	1dfb      	adds	r3, r7, #7
    5bd2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5bd4:	1dfb      	adds	r3, r7, #7
    5bd6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5bd8:	4ba3      	ldr	r3, [pc, #652]	; (5e68 <_usart_interrupt_handler+0x2a0>)
    5bda:	0092      	lsls	r2, r2, #2
    5bdc:	58d3      	ldr	r3, [r2, r3]
    5bde:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5be0:	69bb      	ldr	r3, [r7, #24]
    5be2:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5be4:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5be6:	69bb      	ldr	r3, [r7, #24]
    5be8:	0018      	movs	r0, r3
    5bea:	4ba0      	ldr	r3, [pc, #640]	; (5e6c <_usart_interrupt_handler+0x2a4>)
    5bec:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5bee:	697b      	ldr	r3, [r7, #20]
    5bf0:	7e1b      	ldrb	r3, [r3, #24]
    5bf2:	b2da      	uxtb	r2, r3
    5bf4:	2312      	movs	r3, #18
    5bf6:	18fb      	adds	r3, r7, r3
    5bf8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5bfa:	697b      	ldr	r3, [r7, #20]
    5bfc:	7d9b      	ldrb	r3, [r3, #22]
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	b29a      	uxth	r2, r3
    5c02:	2312      	movs	r3, #18
    5c04:	18fb      	adds	r3, r7, r3
    5c06:	2112      	movs	r1, #18
    5c08:	1879      	adds	r1, r7, r1
    5c0a:	8809      	ldrh	r1, [r1, #0]
    5c0c:	400a      	ands	r2, r1
    5c0e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5c10:	69bb      	ldr	r3, [r7, #24]
    5c12:	2230      	movs	r2, #48	; 0x30
    5c14:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5c16:	69ba      	ldr	r2, [r7, #24]
    5c18:	2131      	movs	r1, #49	; 0x31
    5c1a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5c1c:	4013      	ands	r3, r2
    5c1e:	b2da      	uxtb	r2, r3
    5c20:	2310      	movs	r3, #16
    5c22:	18fb      	adds	r3, r7, r3
    5c24:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5c26:	2312      	movs	r3, #18
    5c28:	18fb      	adds	r3, r7, r3
    5c2a:	881b      	ldrh	r3, [r3, #0]
    5c2c:	2201      	movs	r2, #1
    5c2e:	4013      	ands	r3, r2
    5c30:	d044      	beq.n	5cbc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5c32:	69bb      	ldr	r3, [r7, #24]
    5c34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5c36:	b29b      	uxth	r3, r3
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d03c      	beq.n	5cb6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c3c:	69bb      	ldr	r3, [r7, #24]
    5c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	b2da      	uxtb	r2, r3
    5c44:	231c      	movs	r3, #28
    5c46:	18fb      	adds	r3, r7, r3
    5c48:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5c4a:	69bb      	ldr	r3, [r7, #24]
    5c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c4e:	1c5a      	adds	r2, r3, #1
    5c50:	69bb      	ldr	r3, [r7, #24]
    5c52:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5c54:	69bb      	ldr	r3, [r7, #24]
    5c56:	795b      	ldrb	r3, [r3, #5]
    5c58:	2b01      	cmp	r3, #1
    5c5a:	d113      	bne.n	5c84 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5c5c:	69bb      	ldr	r3, [r7, #24]
    5c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	b2db      	uxtb	r3, r3
    5c64:	021b      	lsls	r3, r3, #8
    5c66:	b21a      	sxth	r2, r3
    5c68:	231c      	movs	r3, #28
    5c6a:	18fb      	adds	r3, r7, r3
    5c6c:	2100      	movs	r1, #0
    5c6e:	5e5b      	ldrsh	r3, [r3, r1]
    5c70:	4313      	orrs	r3, r2
    5c72:	b21a      	sxth	r2, r3
    5c74:	231c      	movs	r3, #28
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5c7a:	69bb      	ldr	r3, [r7, #24]
    5c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c7e:	1c5a      	adds	r2, r3, #1
    5c80:	69bb      	ldr	r3, [r7, #24]
    5c82:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5c84:	231c      	movs	r3, #28
    5c86:	18fb      	adds	r3, r7, r3
    5c88:	881b      	ldrh	r3, [r3, #0]
    5c8a:	05db      	lsls	r3, r3, #23
    5c8c:	0ddb      	lsrs	r3, r3, #23
    5c8e:	b29a      	uxth	r2, r3
    5c90:	697b      	ldr	r3, [r7, #20]
    5c92:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5c94:	69bb      	ldr	r3, [r7, #24]
    5c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5c98:	b29b      	uxth	r3, r3
    5c9a:	3b01      	subs	r3, #1
    5c9c:	b29b      	uxth	r3, r3
    5c9e:	69ba      	ldr	r2, [r7, #24]
    5ca0:	1c19      	adds	r1, r3, #0
    5ca2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d109      	bne.n	5cbc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5ca8:	697b      	ldr	r3, [r7, #20]
    5caa:	2201      	movs	r2, #1
    5cac:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5cae:	697b      	ldr	r3, [r7, #20]
    5cb0:	2202      	movs	r2, #2
    5cb2:	759a      	strb	r2, [r3, #22]
    5cb4:	e002      	b.n	5cbc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5cb6:	697b      	ldr	r3, [r7, #20]
    5cb8:	2201      	movs	r2, #1
    5cba:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5cbc:	2312      	movs	r3, #18
    5cbe:	18fb      	adds	r3, r7, r3
    5cc0:	881b      	ldrh	r3, [r3, #0]
    5cc2:	2202      	movs	r2, #2
    5cc4:	4013      	ands	r3, r2
    5cc6:	d011      	beq.n	5cec <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5cc8:	697b      	ldr	r3, [r7, #20]
    5cca:	2202      	movs	r2, #2
    5ccc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5cce:	69bb      	ldr	r3, [r7, #24]
    5cd0:	2233      	movs	r2, #51	; 0x33
    5cd2:	2100      	movs	r1, #0
    5cd4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5cd6:	2310      	movs	r3, #16
    5cd8:	18fb      	adds	r3, r7, r3
    5cda:	881b      	ldrh	r3, [r3, #0]
    5cdc:	2201      	movs	r2, #1
    5cde:	4013      	ands	r3, r2
    5ce0:	d004      	beq.n	5cec <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5ce2:	69bb      	ldr	r3, [r7, #24]
    5ce4:	68db      	ldr	r3, [r3, #12]
    5ce6:	69ba      	ldr	r2, [r7, #24]
    5ce8:	0010      	movs	r0, r2
    5cea:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5cec:	2312      	movs	r3, #18
    5cee:	18fb      	adds	r3, r7, r3
    5cf0:	881b      	ldrh	r3, [r3, #0]
    5cf2:	2204      	movs	r2, #4
    5cf4:	4013      	ands	r3, r2
    5cf6:	d100      	bne.n	5cfa <_usart_interrupt_handler+0x132>
    5cf8:	e0bd      	b.n	5e76 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5cfa:	69bb      	ldr	r3, [r7, #24]
    5cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5cfe:	b29b      	uxth	r3, r3
    5d00:	2b00      	cmp	r3, #0
    5d02:	d100      	bne.n	5d06 <_usart_interrupt_handler+0x13e>
    5d04:	e0b4      	b.n	5e70 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5d06:	697b      	ldr	r3, [r7, #20]
    5d08:	8b5b      	ldrh	r3, [r3, #26]
    5d0a:	b29b      	uxth	r3, r3
    5d0c:	b2da      	uxtb	r2, r3
    5d0e:	231f      	movs	r3, #31
    5d10:	18fb      	adds	r3, r7, r3
    5d12:	213f      	movs	r1, #63	; 0x3f
    5d14:	400a      	ands	r2, r1
    5d16:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5d18:	231f      	movs	r3, #31
    5d1a:	18fb      	adds	r3, r7, r3
    5d1c:	781b      	ldrb	r3, [r3, #0]
    5d1e:	2208      	movs	r2, #8
    5d20:	4013      	ands	r3, r2
    5d22:	d007      	beq.n	5d34 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5d24:	231f      	movs	r3, #31
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	221f      	movs	r2, #31
    5d2a:	18ba      	adds	r2, r7, r2
    5d2c:	7812      	ldrb	r2, [r2, #0]
    5d2e:	2108      	movs	r1, #8
    5d30:	438a      	bics	r2, r1
    5d32:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5d34:	231f      	movs	r3, #31
    5d36:	18fb      	adds	r3, r7, r3
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d050      	beq.n	5de0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5d3e:	231f      	movs	r3, #31
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	781b      	ldrb	r3, [r3, #0]
    5d44:	2202      	movs	r2, #2
    5d46:	4013      	ands	r3, r2
    5d48:	d007      	beq.n	5d5a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5d4a:	69bb      	ldr	r3, [r7, #24]
    5d4c:	2232      	movs	r2, #50	; 0x32
    5d4e:	211a      	movs	r1, #26
    5d50:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5d52:	697b      	ldr	r3, [r7, #20]
    5d54:	2202      	movs	r2, #2
    5d56:	835a      	strh	r2, [r3, #26]
    5d58:	e036      	b.n	5dc8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5d5a:	231f      	movs	r3, #31
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	2204      	movs	r2, #4
    5d62:	4013      	ands	r3, r2
    5d64:	d007      	beq.n	5d76 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5d66:	69bb      	ldr	r3, [r7, #24]
    5d68:	2232      	movs	r2, #50	; 0x32
    5d6a:	211e      	movs	r1, #30
    5d6c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5d6e:	697b      	ldr	r3, [r7, #20]
    5d70:	2204      	movs	r2, #4
    5d72:	835a      	strh	r2, [r3, #26]
    5d74:	e028      	b.n	5dc8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5d76:	231f      	movs	r3, #31
    5d78:	18fb      	adds	r3, r7, r3
    5d7a:	781b      	ldrb	r3, [r3, #0]
    5d7c:	2201      	movs	r2, #1
    5d7e:	4013      	ands	r3, r2
    5d80:	d007      	beq.n	5d92 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5d82:	69bb      	ldr	r3, [r7, #24]
    5d84:	2232      	movs	r2, #50	; 0x32
    5d86:	2113      	movs	r1, #19
    5d88:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5d8a:	697b      	ldr	r3, [r7, #20]
    5d8c:	2201      	movs	r2, #1
    5d8e:	835a      	strh	r2, [r3, #26]
    5d90:	e01a      	b.n	5dc8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5d92:	231f      	movs	r3, #31
    5d94:	18fb      	adds	r3, r7, r3
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	2210      	movs	r2, #16
    5d9a:	4013      	ands	r3, r2
    5d9c:	d007      	beq.n	5dae <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5d9e:	69bb      	ldr	r3, [r7, #24]
    5da0:	2232      	movs	r2, #50	; 0x32
    5da2:	2142      	movs	r1, #66	; 0x42
    5da4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5da6:	697b      	ldr	r3, [r7, #20]
    5da8:	2210      	movs	r2, #16
    5daa:	835a      	strh	r2, [r3, #26]
    5dac:	e00c      	b.n	5dc8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5dae:	231f      	movs	r3, #31
    5db0:	18fb      	adds	r3, r7, r3
    5db2:	781b      	ldrb	r3, [r3, #0]
    5db4:	2220      	movs	r2, #32
    5db6:	4013      	ands	r3, r2
    5db8:	d006      	beq.n	5dc8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5dba:	69bb      	ldr	r3, [r7, #24]
    5dbc:	2232      	movs	r2, #50	; 0x32
    5dbe:	2141      	movs	r1, #65	; 0x41
    5dc0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5dc2:	697b      	ldr	r3, [r7, #20]
    5dc4:	2220      	movs	r2, #32
    5dc6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5dc8:	2310      	movs	r3, #16
    5dca:	18fb      	adds	r3, r7, r3
    5dcc:	881b      	ldrh	r3, [r3, #0]
    5dce:	2204      	movs	r2, #4
    5dd0:	4013      	ands	r3, r2
				if (callback_status
    5dd2:	d050      	beq.n	5e76 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5dd4:	69bb      	ldr	r3, [r7, #24]
    5dd6:	695b      	ldr	r3, [r3, #20]
    5dd8:	69ba      	ldr	r2, [r7, #24]
    5dda:	0010      	movs	r0, r2
    5ddc:	4798      	blx	r3
    5dde:	e04a      	b.n	5e76 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5de0:	697b      	ldr	r3, [r7, #20]
    5de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5de4:	b29a      	uxth	r2, r3
    5de6:	230e      	movs	r3, #14
    5de8:	18fb      	adds	r3, r7, r3
    5dea:	05d2      	lsls	r2, r2, #23
    5dec:	0dd2      	lsrs	r2, r2, #23
    5dee:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5df0:	69bb      	ldr	r3, [r7, #24]
    5df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5df4:	220e      	movs	r2, #14
    5df6:	18ba      	adds	r2, r7, r2
    5df8:	8812      	ldrh	r2, [r2, #0]
    5dfa:	b2d2      	uxtb	r2, r2
    5dfc:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5dfe:	69bb      	ldr	r3, [r7, #24]
    5e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e02:	1c5a      	adds	r2, r3, #1
    5e04:	69bb      	ldr	r3, [r7, #24]
    5e06:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5e08:	69bb      	ldr	r3, [r7, #24]
    5e0a:	795b      	ldrb	r3, [r3, #5]
    5e0c:	2b01      	cmp	r3, #1
    5e0e:	d10d      	bne.n	5e2c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5e10:	69bb      	ldr	r3, [r7, #24]
    5e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e14:	220e      	movs	r2, #14
    5e16:	18ba      	adds	r2, r7, r2
    5e18:	8812      	ldrh	r2, [r2, #0]
    5e1a:	0a12      	lsrs	r2, r2, #8
    5e1c:	b292      	uxth	r2, r2
    5e1e:	b2d2      	uxtb	r2, r2
    5e20:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5e22:	69bb      	ldr	r3, [r7, #24]
    5e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e26:	1c5a      	adds	r2, r3, #1
    5e28:	69bb      	ldr	r3, [r7, #24]
    5e2a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5e2c:	69bb      	ldr	r3, [r7, #24]
    5e2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5e30:	b29b      	uxth	r3, r3
    5e32:	3b01      	subs	r3, #1
    5e34:	b29b      	uxth	r3, r3
    5e36:	69ba      	ldr	r2, [r7, #24]
    5e38:	1c19      	adds	r1, r3, #0
    5e3a:	8591      	strh	r1, [r2, #44]	; 0x2c
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	d11a      	bne.n	5e76 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5e40:	697b      	ldr	r3, [r7, #20]
    5e42:	2204      	movs	r2, #4
    5e44:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5e46:	69bb      	ldr	r3, [r7, #24]
    5e48:	2232      	movs	r2, #50	; 0x32
    5e4a:	2100      	movs	r1, #0
    5e4c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5e4e:	2310      	movs	r3, #16
    5e50:	18fb      	adds	r3, r7, r3
    5e52:	881b      	ldrh	r3, [r3, #0]
    5e54:	2202      	movs	r2, #2
    5e56:	4013      	ands	r3, r2
					if (callback_status
    5e58:	d00d      	beq.n	5e76 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5e5a:	69bb      	ldr	r3, [r7, #24]
    5e5c:	691b      	ldr	r3, [r3, #16]
    5e5e:	69ba      	ldr	r2, [r7, #24]
    5e60:	0010      	movs	r0, r2
    5e62:	4798      	blx	r3
    5e64:	e007      	b.n	5e76 <_usart_interrupt_handler+0x2ae>
    5e66:	46c0      	nop			; (mov r8, r8)
    5e68:	200009fc 	.word	0x200009fc
    5e6c:	000059a9 	.word	0x000059a9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5e70:	697b      	ldr	r3, [r7, #20]
    5e72:	2204      	movs	r2, #4
    5e74:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5e76:	2312      	movs	r3, #18
    5e78:	18fb      	adds	r3, r7, r3
    5e7a:	881b      	ldrh	r3, [r3, #0]
    5e7c:	2210      	movs	r2, #16
    5e7e:	4013      	ands	r3, r2
    5e80:	d010      	beq.n	5ea4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5e82:	697b      	ldr	r3, [r7, #20]
    5e84:	2210      	movs	r2, #16
    5e86:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5e88:	697b      	ldr	r3, [r7, #20]
    5e8a:	2210      	movs	r2, #16
    5e8c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5e8e:	2310      	movs	r3, #16
    5e90:	18fb      	adds	r3, r7, r3
    5e92:	881b      	ldrh	r3, [r3, #0]
    5e94:	2210      	movs	r2, #16
    5e96:	4013      	ands	r3, r2
    5e98:	d004      	beq.n	5ea4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5e9a:	69bb      	ldr	r3, [r7, #24]
    5e9c:	69db      	ldr	r3, [r3, #28]
    5e9e:	69ba      	ldr	r2, [r7, #24]
    5ea0:	0010      	movs	r0, r2
    5ea2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5ea4:	2312      	movs	r3, #18
    5ea6:	18fb      	adds	r3, r7, r3
    5ea8:	881b      	ldrh	r3, [r3, #0]
    5eaa:	2220      	movs	r2, #32
    5eac:	4013      	ands	r3, r2
    5eae:	d010      	beq.n	5ed2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5eb0:	697b      	ldr	r3, [r7, #20]
    5eb2:	2220      	movs	r2, #32
    5eb4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5eb6:	697b      	ldr	r3, [r7, #20]
    5eb8:	2220      	movs	r2, #32
    5eba:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5ebc:	2310      	movs	r3, #16
    5ebe:	18fb      	adds	r3, r7, r3
    5ec0:	881b      	ldrh	r3, [r3, #0]
    5ec2:	2208      	movs	r2, #8
    5ec4:	4013      	ands	r3, r2
    5ec6:	d004      	beq.n	5ed2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5ec8:	69bb      	ldr	r3, [r7, #24]
    5eca:	699b      	ldr	r3, [r3, #24]
    5ecc:	69ba      	ldr	r2, [r7, #24]
    5ece:	0010      	movs	r0, r2
    5ed0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5ed2:	2312      	movs	r3, #18
    5ed4:	18fb      	adds	r3, r7, r3
    5ed6:	881b      	ldrh	r3, [r3, #0]
    5ed8:	2208      	movs	r2, #8
    5eda:	4013      	ands	r3, r2
    5edc:	d010      	beq.n	5f00 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5ede:	697b      	ldr	r3, [r7, #20]
    5ee0:	2208      	movs	r2, #8
    5ee2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5ee4:	697b      	ldr	r3, [r7, #20]
    5ee6:	2208      	movs	r2, #8
    5ee8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5eea:	2310      	movs	r3, #16
    5eec:	18fb      	adds	r3, r7, r3
    5eee:	881b      	ldrh	r3, [r3, #0]
    5ef0:	2220      	movs	r2, #32
    5ef2:	4013      	ands	r3, r2
    5ef4:	d004      	beq.n	5f00 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5ef6:	69bb      	ldr	r3, [r7, #24]
    5ef8:	6a1b      	ldr	r3, [r3, #32]
    5efa:	69ba      	ldr	r2, [r7, #24]
    5efc:	0010      	movs	r0, r2
    5efe:	4798      	blx	r3
		}
	}
#endif
}
    5f00:	46c0      	nop			; (mov r8, r8)
    5f02:	46bd      	mov	sp, r7
    5f04:	b008      	add	sp, #32
    5f06:	bd80      	pop	{r7, pc}

00005f08 <system_gclk_gen_get_config_defaults>:
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	2201      	movs	r2, #1
    5f14:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	2200      	movs	r2, #0
    5f1a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	2206      	movs	r2, #6
    5f20:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	2200      	movs	r2, #0
    5f26:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	2200      	movs	r2, #0
    5f2c:	725a      	strb	r2, [r3, #9]
}
    5f2e:	46c0      	nop			; (mov r8, r8)
    5f30:	46bd      	mov	sp, r7
    5f32:	b002      	add	sp, #8
    5f34:	bd80      	pop	{r7, pc}

00005f36 <system_gclk_chan_get_config_defaults>:
{
    5f36:	b580      	push	{r7, lr}
    5f38:	b082      	sub	sp, #8
    5f3a:	af00      	add	r7, sp, #0
    5f3c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	2200      	movs	r2, #0
    5f42:	701a      	strb	r2, [r3, #0]
}
    5f44:	46c0      	nop			; (mov r8, r8)
    5f46:	46bd      	mov	sp, r7
    5f48:	b002      	add	sp, #8
    5f4a:	bd80      	pop	{r7, pc}

00005f4c <system_clock_source_xosc32k_get_config_defaults>:
{
    5f4c:	b580      	push	{r7, lr}
    5f4e:	b082      	sub	sp, #8
    5f50:	af00      	add	r7, sp, #0
    5f52:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	2200      	movs	r2, #0
    5f58:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5f5a:	687b      	ldr	r3, [r7, #4]
    5f5c:	2204      	movs	r2, #4
    5f5e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	2200      	movs	r2, #0
    5f64:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	2280      	movs	r2, #128	; 0x80
    5f6a:	0212      	lsls	r2, r2, #8
    5f6c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	2200      	movs	r2, #0
    5f72:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	2201      	movs	r2, #1
    5f78:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	2200      	movs	r2, #0
    5f7e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	2201      	movs	r2, #1
    5f84:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	2200      	movs	r2, #0
    5f8a:	739a      	strb	r2, [r3, #14]
}
    5f8c:	46c0      	nop			; (mov r8, r8)
    5f8e:	46bd      	mov	sp, r7
    5f90:	b002      	add	sp, #8
    5f92:	bd80      	pop	{r7, pc}

00005f94 <system_clock_source_osc8m_get_config_defaults>:
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b082      	sub	sp, #8
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	2203      	movs	r2, #3
    5fa0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	2200      	movs	r2, #0
    5fa6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	2201      	movs	r2, #1
    5fac:	709a      	strb	r2, [r3, #2]
}
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	46bd      	mov	sp, r7
    5fb2:	b002      	add	sp, #8
    5fb4:	bd80      	pop	{r7, pc}

00005fb6 <system_clock_source_dfll_get_config_defaults>:
{
    5fb6:	b580      	push	{r7, lr}
    5fb8:	b082      	sub	sp, #8
    5fba:	af00      	add	r7, sp, #0
    5fbc:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	2200      	movs	r2, #0
    5fc2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	2200      	movs	r2, #0
    5fc8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	2200      	movs	r2, #0
    5fce:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	2200      	movs	r2, #0
    5fd4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	2200      	movs	r2, #0
    5fda:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	2201      	movs	r2, #1
    5fe0:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	2207      	movs	r2, #7
    5fe6:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	223f      	movs	r2, #63	; 0x3f
    5fec:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	2201      	movs	r2, #1
    5ff2:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	2201      	movs	r2, #1
    5ff8:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	2206      	movs	r2, #6
    5ffe:	821a      	strh	r2, [r3, #16]
}
    6000:	46c0      	nop			; (mov r8, r8)
    6002:	46bd      	mov	sp, r7
    6004:	b002      	add	sp, #8
    6006:	bd80      	pop	{r7, pc}

00006008 <system_cpu_clock_set_divider>:
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	0002      	movs	r2, r0
    6010:	1dfb      	adds	r3, r7, #7
    6012:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    6014:	4a03      	ldr	r2, [pc, #12]	; (6024 <system_cpu_clock_set_divider+0x1c>)
    6016:	1dfb      	adds	r3, r7, #7
    6018:	781b      	ldrb	r3, [r3, #0]
    601a:	7213      	strb	r3, [r2, #8]
}
    601c:	46c0      	nop			; (mov r8, r8)
    601e:	46bd      	mov	sp, r7
    6020:	b002      	add	sp, #8
    6022:	bd80      	pop	{r7, pc}
    6024:	40000400 	.word	0x40000400

00006028 <system_apb_clock_set_divider>:
{
    6028:	b580      	push	{r7, lr}
    602a:	b082      	sub	sp, #8
    602c:	af00      	add	r7, sp, #0
    602e:	0002      	movs	r2, r0
    6030:	1dfb      	adds	r3, r7, #7
    6032:	701a      	strb	r2, [r3, #0]
    6034:	1dbb      	adds	r3, r7, #6
    6036:	1c0a      	adds	r2, r1, #0
    6038:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    603a:	1dfb      	adds	r3, r7, #7
    603c:	781b      	ldrb	r3, [r3, #0]
    603e:	2b01      	cmp	r3, #1
    6040:	d008      	beq.n	6054 <system_apb_clock_set_divider+0x2c>
    6042:	2b02      	cmp	r3, #2
    6044:	d00b      	beq.n	605e <system_apb_clock_set_divider+0x36>
    6046:	2b00      	cmp	r3, #0
    6048:	d10e      	bne.n	6068 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    604a:	4a0b      	ldr	r2, [pc, #44]	; (6078 <system_apb_clock_set_divider+0x50>)
    604c:	1dbb      	adds	r3, r7, #6
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	7253      	strb	r3, [r2, #9]
			break;
    6052:	e00b      	b.n	606c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    6054:	4a08      	ldr	r2, [pc, #32]	; (6078 <system_apb_clock_set_divider+0x50>)
    6056:	1dbb      	adds	r3, r7, #6
    6058:	781b      	ldrb	r3, [r3, #0]
    605a:	7293      	strb	r3, [r2, #10]
			break;
    605c:	e006      	b.n	606c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    605e:	4a06      	ldr	r2, [pc, #24]	; (6078 <system_apb_clock_set_divider+0x50>)
    6060:	1dbb      	adds	r3, r7, #6
    6062:	781b      	ldrb	r3, [r3, #0]
    6064:	72d3      	strb	r3, [r2, #11]
			break;
    6066:	e001      	b.n	606c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    6068:	2317      	movs	r3, #23
    606a:	e000      	b.n	606e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    606c:	2300      	movs	r3, #0
}
    606e:	0018      	movs	r0, r3
    6070:	46bd      	mov	sp, r7
    6072:	b002      	add	sp, #8
    6074:	bd80      	pop	{r7, pc}
    6076:	46c0      	nop			; (mov r8, r8)
    6078:	40000400 	.word	0x40000400

0000607c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    607c:	b580      	push	{r7, lr}
    607e:	b082      	sub	sp, #8
    6080:	af00      	add	r7, sp, #0
    6082:	0002      	movs	r2, r0
    6084:	1dfb      	adds	r3, r7, #7
    6086:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6088:	4a08      	ldr	r2, [pc, #32]	; (60ac <system_flash_set_waitstates+0x30>)
    608a:	1dfb      	adds	r3, r7, #7
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	210f      	movs	r1, #15
    6090:	400b      	ands	r3, r1
    6092:	b2d9      	uxtb	r1, r3
    6094:	6853      	ldr	r3, [r2, #4]
    6096:	200f      	movs	r0, #15
    6098:	4001      	ands	r1, r0
    609a:	0049      	lsls	r1, r1, #1
    609c:	201e      	movs	r0, #30
    609e:	4383      	bics	r3, r0
    60a0:	430b      	orrs	r3, r1
    60a2:	6053      	str	r3, [r2, #4]
}
    60a4:	46c0      	nop			; (mov r8, r8)
    60a6:	46bd      	mov	sp, r7
    60a8:	b002      	add	sp, #8
    60aa:	bd80      	pop	{r7, pc}
    60ac:	41004000 	.word	0x41004000

000060b0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    60b4:	46c0      	nop			; (mov r8, r8)
    60b6:	4b04      	ldr	r3, [pc, #16]	; (60c8 <_system_dfll_wait_for_sync+0x18>)
    60b8:	68db      	ldr	r3, [r3, #12]
    60ba:	2210      	movs	r2, #16
    60bc:	4013      	ands	r3, r2
    60be:	d0fa      	beq.n	60b6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    60c0:	46c0      	nop			; (mov r8, r8)
    60c2:	46bd      	mov	sp, r7
    60c4:	bd80      	pop	{r7, pc}
    60c6:	46c0      	nop			; (mov r8, r8)
    60c8:	40000800 	.word	0x40000800

000060cc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    60cc:	b580      	push	{r7, lr}
    60ce:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    60d0:	4b0c      	ldr	r3, [pc, #48]	; (6104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60d2:	2202      	movs	r2, #2
    60d4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    60d6:	4b0c      	ldr	r3, [pc, #48]	; (6108 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    60d8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    60da:	4a0a      	ldr	r2, [pc, #40]	; (6104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60dc:	4b0b      	ldr	r3, [pc, #44]	; (610c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    60de:	689b      	ldr	r3, [r3, #8]
    60e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    60e2:	4a08      	ldr	r2, [pc, #32]	; (6104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60e4:	4b09      	ldr	r3, [pc, #36]	; (610c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    60e6:	685b      	ldr	r3, [r3, #4]
    60e8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    60ea:	4b06      	ldr	r3, [pc, #24]	; (6104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60ec:	2200      	movs	r2, #0
    60ee:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    60f0:	4b05      	ldr	r3, [pc, #20]	; (6108 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    60f2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    60f4:	4a03      	ldr	r2, [pc, #12]	; (6104 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60f6:	4b05      	ldr	r3, [pc, #20]	; (610c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    60f8:	681b      	ldr	r3, [r3, #0]
    60fa:	b29b      	uxth	r3, r3
    60fc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	46bd      	mov	sp, r7
    6102:	bd80      	pop	{r7, pc}
    6104:	40000800 	.word	0x40000800
    6108:	000060b1 	.word	0x000060b1
    610c:	20000188 	.word	0x20000188

00006110 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6110:	b580      	push	{r7, lr}
    6112:	b082      	sub	sp, #8
    6114:	af00      	add	r7, sp, #0
    6116:	0002      	movs	r2, r0
    6118:	1dfb      	adds	r3, r7, #7
    611a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    611c:	1dfb      	adds	r3, r7, #7
    611e:	781b      	ldrb	r3, [r3, #0]
    6120:	2b08      	cmp	r3, #8
    6122:	d841      	bhi.n	61a8 <system_clock_source_get_hz+0x98>
    6124:	009a      	lsls	r2, r3, #2
    6126:	4b23      	ldr	r3, [pc, #140]	; (61b4 <system_clock_source_get_hz+0xa4>)
    6128:	18d3      	adds	r3, r2, r3
    612a:	681b      	ldr	r3, [r3, #0]
    612c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    612e:	4b22      	ldr	r3, [pc, #136]	; (61b8 <system_clock_source_get_hz+0xa8>)
    6130:	691b      	ldr	r3, [r3, #16]
    6132:	e03a      	b.n	61aa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6134:	4b21      	ldr	r3, [pc, #132]	; (61bc <system_clock_source_get_hz+0xac>)
    6136:	6a1b      	ldr	r3, [r3, #32]
    6138:	059b      	lsls	r3, r3, #22
    613a:	0f9b      	lsrs	r3, r3, #30
    613c:	b2db      	uxtb	r3, r3
    613e:	001a      	movs	r2, r3
    6140:	4b1f      	ldr	r3, [pc, #124]	; (61c0 <system_clock_source_get_hz+0xb0>)
    6142:	40d3      	lsrs	r3, r2
    6144:	e031      	b.n	61aa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    6146:	2380      	movs	r3, #128	; 0x80
    6148:	021b      	lsls	r3, r3, #8
    614a:	e02e      	b.n	61aa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    614c:	2380      	movs	r3, #128	; 0x80
    614e:	021b      	lsls	r3, r3, #8
    6150:	e02b      	b.n	61aa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6152:	4b19      	ldr	r3, [pc, #100]	; (61b8 <system_clock_source_get_hz+0xa8>)
    6154:	695b      	ldr	r3, [r3, #20]
    6156:	e028      	b.n	61aa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6158:	4b17      	ldr	r3, [pc, #92]	; (61b8 <system_clock_source_get_hz+0xa8>)
    615a:	681b      	ldr	r3, [r3, #0]
    615c:	2202      	movs	r2, #2
    615e:	4013      	ands	r3, r2
    6160:	d101      	bne.n	6166 <system_clock_source_get_hz+0x56>
			return 0;
    6162:	2300      	movs	r3, #0
    6164:	e021      	b.n	61aa <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    6166:	4b17      	ldr	r3, [pc, #92]	; (61c4 <system_clock_source_get_hz+0xb4>)
    6168:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    616a:	4b13      	ldr	r3, [pc, #76]	; (61b8 <system_clock_source_get_hz+0xa8>)
    616c:	681b      	ldr	r3, [r3, #0]
    616e:	2224      	movs	r2, #36	; 0x24
    6170:	4013      	ands	r3, r2
    6172:	2b04      	cmp	r3, #4
    6174:	d109      	bne.n	618a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6176:	2000      	movs	r0, #0
    6178:	4b13      	ldr	r3, [pc, #76]	; (61c8 <system_clock_source_get_hz+0xb8>)
    617a:	4798      	blx	r3
    617c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    617e:	4b0e      	ldr	r3, [pc, #56]	; (61b8 <system_clock_source_get_hz+0xa8>)
    6180:	689b      	ldr	r3, [r3, #8]
    6182:	041b      	lsls	r3, r3, #16
    6184:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6186:	4353      	muls	r3, r2
    6188:	e00f      	b.n	61aa <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    618a:	4b10      	ldr	r3, [pc, #64]	; (61cc <system_clock_source_get_hz+0xbc>)
    618c:	e00d      	b.n	61aa <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    618e:	4a0b      	ldr	r2, [pc, #44]	; (61bc <system_clock_source_get_hz+0xac>)
    6190:	2350      	movs	r3, #80	; 0x50
    6192:	5cd3      	ldrb	r3, [r2, r3]
    6194:	b2db      	uxtb	r3, r3
    6196:	001a      	movs	r2, r3
    6198:	2304      	movs	r3, #4
    619a:	4013      	ands	r3, r2
    619c:	d101      	bne.n	61a2 <system_clock_source_get_hz+0x92>
			return 0;
    619e:	2300      	movs	r3, #0
    61a0:	e003      	b.n	61aa <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    61a2:	4b05      	ldr	r3, [pc, #20]	; (61b8 <system_clock_source_get_hz+0xa8>)
    61a4:	68db      	ldr	r3, [r3, #12]
    61a6:	e000      	b.n	61aa <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    61a8:	2300      	movs	r3, #0
	}
}
    61aa:	0018      	movs	r0, r3
    61ac:	46bd      	mov	sp, r7
    61ae:	b002      	add	sp, #8
    61b0:	bd80      	pop	{r7, pc}
    61b2:	46c0      	nop			; (mov r8, r8)
    61b4:	0000ca18 	.word	0x0000ca18
    61b8:	20000188 	.word	0x20000188
    61bc:	40000800 	.word	0x40000800
    61c0:	007a1200 	.word	0x007a1200
    61c4:	000060b1 	.word	0x000060b1
    61c8:	00006c61 	.word	0x00006c61
    61cc:	02dc6c00 	.word	0x02dc6c00

000061d0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b084      	sub	sp, #16
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    61d8:	4b1a      	ldr	r3, [pc, #104]	; (6244 <system_clock_source_osc8m_set_config+0x74>)
    61da:	6a1b      	ldr	r3, [r3, #32]
    61dc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	1c1a      	adds	r2, r3, #0
    61e4:	2303      	movs	r3, #3
    61e6:	4013      	ands	r3, r2
    61e8:	b2da      	uxtb	r2, r3
    61ea:	230d      	movs	r3, #13
    61ec:	18fb      	adds	r3, r7, r3
    61ee:	2103      	movs	r1, #3
    61f0:	400a      	ands	r2, r1
    61f2:	0010      	movs	r0, r2
    61f4:	781a      	ldrb	r2, [r3, #0]
    61f6:	2103      	movs	r1, #3
    61f8:	438a      	bics	r2, r1
    61fa:	1c11      	adds	r1, r2, #0
    61fc:	1c02      	adds	r2, r0, #0
    61fe:	430a      	orrs	r2, r1
    6200:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	789a      	ldrb	r2, [r3, #2]
    6206:	230c      	movs	r3, #12
    6208:	18fb      	adds	r3, r7, r3
    620a:	01d0      	lsls	r0, r2, #7
    620c:	781a      	ldrb	r2, [r3, #0]
    620e:	217f      	movs	r1, #127	; 0x7f
    6210:	400a      	ands	r2, r1
    6212:	1c11      	adds	r1, r2, #0
    6214:	1c02      	adds	r2, r0, #0
    6216:	430a      	orrs	r2, r1
    6218:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	785a      	ldrb	r2, [r3, #1]
    621e:	230c      	movs	r3, #12
    6220:	18fb      	adds	r3, r7, r3
    6222:	2101      	movs	r1, #1
    6224:	400a      	ands	r2, r1
    6226:	0190      	lsls	r0, r2, #6
    6228:	781a      	ldrb	r2, [r3, #0]
    622a:	2140      	movs	r1, #64	; 0x40
    622c:	438a      	bics	r2, r1
    622e:	1c11      	adds	r1, r2, #0
    6230:	1c02      	adds	r2, r0, #0
    6232:	430a      	orrs	r2, r1
    6234:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    6236:	4b03      	ldr	r3, [pc, #12]	; (6244 <system_clock_source_osc8m_set_config+0x74>)
    6238:	68fa      	ldr	r2, [r7, #12]
    623a:	621a      	str	r2, [r3, #32]
}
    623c:	46c0      	nop			; (mov r8, r8)
    623e:	46bd      	mov	sp, r7
    6240:	b004      	add	sp, #16
    6242:	bd80      	pop	{r7, pc}
    6244:	40000800 	.word	0x40000800

00006248 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6248:	b580      	push	{r7, lr}
    624a:	b084      	sub	sp, #16
    624c:	af00      	add	r7, sp, #0
    624e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6250:	4a43      	ldr	r2, [pc, #268]	; (6360 <system_clock_source_xosc32k_set_config+0x118>)
    6252:	230c      	movs	r3, #12
    6254:	18fb      	adds	r3, r7, r3
    6256:	8a92      	ldrh	r2, [r2, #20]
    6258:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	785b      	ldrb	r3, [r3, #1]
    625e:	1c1a      	adds	r2, r3, #0
    6260:	2307      	movs	r3, #7
    6262:	4013      	ands	r3, r2
    6264:	b2da      	uxtb	r2, r3
    6266:	230c      	movs	r3, #12
    6268:	18fb      	adds	r3, r7, r3
    626a:	2107      	movs	r1, #7
    626c:	400a      	ands	r2, r1
    626e:	0010      	movs	r0, r2
    6270:	785a      	ldrb	r2, [r3, #1]
    6272:	2107      	movs	r1, #7
    6274:	438a      	bics	r2, r1
    6276:	1c11      	adds	r1, r2, #0
    6278:	1c02      	adds	r2, r0, #0
    627a:	430a      	orrs	r2, r1
    627c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	781b      	ldrb	r3, [r3, #0]
    6282:	2b00      	cmp	r3, #0
    6284:	d106      	bne.n	6294 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    6286:	230c      	movs	r3, #12
    6288:	18fb      	adds	r3, r7, r3
    628a:	781a      	ldrb	r2, [r3, #0]
    628c:	2104      	movs	r1, #4
    628e:	430a      	orrs	r2, r1
    6290:	701a      	strb	r2, [r3, #0]
    6292:	e005      	b.n	62a0 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    6294:	230c      	movs	r3, #12
    6296:	18fb      	adds	r3, r7, r3
    6298:	781a      	ldrb	r2, [r3, #0]
    629a:	2104      	movs	r1, #4
    629c:	438a      	bics	r2, r1
    629e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	789a      	ldrb	r2, [r3, #2]
    62a4:	230c      	movs	r3, #12
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	2101      	movs	r1, #1
    62aa:	400a      	ands	r2, r1
    62ac:	0150      	lsls	r0, r2, #5
    62ae:	781a      	ldrb	r2, [r3, #0]
    62b0:	2120      	movs	r1, #32
    62b2:	438a      	bics	r2, r1
    62b4:	1c11      	adds	r1, r2, #0
    62b6:	1c02      	adds	r2, r0, #0
    62b8:	430a      	orrs	r2, r1
    62ba:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	78da      	ldrb	r2, [r3, #3]
    62c0:	230c      	movs	r3, #12
    62c2:	18fb      	adds	r3, r7, r3
    62c4:	2101      	movs	r1, #1
    62c6:	400a      	ands	r2, r1
    62c8:	0110      	lsls	r0, r2, #4
    62ca:	781a      	ldrb	r2, [r3, #0]
    62cc:	2110      	movs	r1, #16
    62ce:	438a      	bics	r2, r1
    62d0:	1c11      	adds	r1, r2, #0
    62d2:	1c02      	adds	r2, r0, #0
    62d4:	430a      	orrs	r2, r1
    62d6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	791a      	ldrb	r2, [r3, #4]
    62dc:	230c      	movs	r3, #12
    62de:	18fb      	adds	r3, r7, r3
    62e0:	2101      	movs	r1, #1
    62e2:	400a      	ands	r2, r1
    62e4:	00d0      	lsls	r0, r2, #3
    62e6:	781a      	ldrb	r2, [r3, #0]
    62e8:	2108      	movs	r1, #8
    62ea:	438a      	bics	r2, r1
    62ec:	1c11      	adds	r1, r2, #0
    62ee:	1c02      	adds	r2, r0, #0
    62f0:	430a      	orrs	r2, r1
    62f2:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	7b5a      	ldrb	r2, [r3, #13]
    62f8:	230c      	movs	r3, #12
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	01d0      	lsls	r0, r2, #7
    62fe:	781a      	ldrb	r2, [r3, #0]
    6300:	217f      	movs	r1, #127	; 0x7f
    6302:	400a      	ands	r2, r1
    6304:	1c11      	adds	r1, r2, #0
    6306:	1c02      	adds	r2, r0, #0
    6308:	430a      	orrs	r2, r1
    630a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	7b1a      	ldrb	r2, [r3, #12]
    6310:	230c      	movs	r3, #12
    6312:	18fb      	adds	r3, r7, r3
    6314:	2101      	movs	r1, #1
    6316:	400a      	ands	r2, r1
    6318:	0190      	lsls	r0, r2, #6
    631a:	781a      	ldrb	r2, [r3, #0]
    631c:	2140      	movs	r1, #64	; 0x40
    631e:	438a      	bics	r2, r1
    6320:	1c11      	adds	r1, r2, #0
    6322:	1c02      	adds	r2, r0, #0
    6324:	430a      	orrs	r2, r1
    6326:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	7b9a      	ldrb	r2, [r3, #14]
    632c:	230c      	movs	r3, #12
    632e:	18fb      	adds	r3, r7, r3
    6330:	2101      	movs	r1, #1
    6332:	400a      	ands	r2, r1
    6334:	0110      	lsls	r0, r2, #4
    6336:	785a      	ldrb	r2, [r3, #1]
    6338:	2110      	movs	r1, #16
    633a:	438a      	bics	r2, r1
    633c:	1c11      	adds	r1, r2, #0
    633e:	1c02      	adds	r2, r0, #0
    6340:	430a      	orrs	r2, r1
    6342:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	689a      	ldr	r2, [r3, #8]
    6348:	4b06      	ldr	r3, [pc, #24]	; (6364 <system_clock_source_xosc32k_set_config+0x11c>)
    634a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    634c:	4a04      	ldr	r2, [pc, #16]	; (6360 <system_clock_source_xosc32k_set_config+0x118>)
    634e:	230c      	movs	r3, #12
    6350:	18fb      	adds	r3, r7, r3
    6352:	881b      	ldrh	r3, [r3, #0]
    6354:	8293      	strh	r3, [r2, #20]
}
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	46bd      	mov	sp, r7
    635a:	b004      	add	sp, #16
    635c:	bd80      	pop	{r7, pc}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	40000800 	.word	0x40000800
    6364:	20000188 	.word	0x20000188

00006368 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6368:	b580      	push	{r7, lr}
    636a:	b082      	sub	sp, #8
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	7a1b      	ldrb	r3, [r3, #8]
    6374:	029b      	lsls	r3, r3, #10
    6376:	041b      	lsls	r3, r3, #16
    6378:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	895b      	ldrh	r3, [r3, #10]
    637e:	059b      	lsls	r3, r3, #22
    6380:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6382:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    6384:	4b2a      	ldr	r3, [pc, #168]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    6386:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    6390:	4313      	orrs	r3, r2
    6392:	b2db      	uxtb	r3, r3
    6394:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    639a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    639c:	687a      	ldr	r2, [r7, #4]
    639e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    63a0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	785b      	ldrb	r3, [r3, #1]
    63a6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    63a8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    63aa:	4b21      	ldr	r3, [pc, #132]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    63ac:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	781b      	ldrb	r3, [r3, #0]
    63b2:	2b04      	cmp	r3, #4
    63b4:	d116      	bne.n	63e4 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    63b6:	687b      	ldr	r3, [r7, #4]
    63b8:	7b1b      	ldrb	r3, [r3, #12]
    63ba:	069b      	lsls	r3, r3, #26
    63bc:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	89db      	ldrh	r3, [r3, #14]
    63c2:	041b      	lsls	r3, r3, #16
    63c4:	0019      	movs	r1, r3
    63c6:	4b1b      	ldr	r3, [pc, #108]	; (6434 <system_clock_source_dfll_set_config+0xcc>)
    63c8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    63ca:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    63cc:	687a      	ldr	r2, [r7, #4]
    63ce:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    63d0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    63d2:	4b17      	ldr	r3, [pc, #92]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    63d4:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    63d6:	4b16      	ldr	r3, [pc, #88]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    63d8:	681b      	ldr	r3, [r3, #0]
    63da:	687a      	ldr	r2, [r7, #4]
    63dc:	7812      	ldrb	r2, [r2, #0]
    63de:	431a      	orrs	r2, r3
    63e0:	4b13      	ldr	r3, [pc, #76]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    63e2:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    63e4:	687b      	ldr	r3, [r7, #4]
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	2b20      	cmp	r3, #32
    63ea:	d11c      	bne.n	6426 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	7b1b      	ldrb	r3, [r3, #12]
    63f0:	069b      	lsls	r3, r3, #26
    63f2:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    63f4:	687b      	ldr	r3, [r7, #4]
    63f6:	89db      	ldrh	r3, [r3, #14]
    63f8:	041b      	lsls	r3, r3, #16
    63fa:	0019      	movs	r1, r3
    63fc:	4b0d      	ldr	r3, [pc, #52]	; (6434 <system_clock_source_dfll_set_config+0xcc>)
    63fe:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6400:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6402:	687a      	ldr	r2, [r7, #4]
    6404:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6406:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6408:	4b09      	ldr	r3, [pc, #36]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    640a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    640c:	4b08      	ldr	r3, [pc, #32]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	687a      	ldr	r2, [r7, #4]
    6412:	7812      	ldrb	r2, [r2, #0]
    6414:	2104      	movs	r1, #4
    6416:	430a      	orrs	r2, r1
    6418:	b2d2      	uxtb	r2, r2
    641a:	4313      	orrs	r3, r2
    641c:	2280      	movs	r2, #128	; 0x80
    641e:	00d2      	lsls	r2, r2, #3
    6420:	431a      	orrs	r2, r3
    6422:	4b03      	ldr	r3, [pc, #12]	; (6430 <system_clock_source_dfll_set_config+0xc8>)
    6424:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6426:	46c0      	nop			; (mov r8, r8)
    6428:	46bd      	mov	sp, r7
    642a:	b002      	add	sp, #8
    642c:	bd80      	pop	{r7, pc}
    642e:	46c0      	nop			; (mov r8, r8)
    6430:	20000188 	.word	0x20000188
    6434:	03ff0000 	.word	0x03ff0000

00006438 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6438:	b580      	push	{r7, lr}
    643a:	b082      	sub	sp, #8
    643c:	af00      	add	r7, sp, #0
    643e:	0002      	movs	r2, r0
    6440:	1dfb      	adds	r3, r7, #7
    6442:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6444:	1dfb      	adds	r3, r7, #7
    6446:	781b      	ldrb	r3, [r3, #0]
    6448:	2b08      	cmp	r3, #8
    644a:	d83b      	bhi.n	64c4 <system_clock_source_enable+0x8c>
    644c:	009a      	lsls	r2, r3, #2
    644e:	4b21      	ldr	r3, [pc, #132]	; (64d4 <system_clock_source_enable+0x9c>)
    6450:	18d3      	adds	r3, r2, r3
    6452:	681b      	ldr	r3, [r3, #0]
    6454:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6456:	4b20      	ldr	r3, [pc, #128]	; (64d8 <system_clock_source_enable+0xa0>)
    6458:	4a1f      	ldr	r2, [pc, #124]	; (64d8 <system_clock_source_enable+0xa0>)
    645a:	6a12      	ldr	r2, [r2, #32]
    645c:	2102      	movs	r1, #2
    645e:	430a      	orrs	r2, r1
    6460:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6462:	2300      	movs	r3, #0
    6464:	e031      	b.n	64ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6466:	4b1c      	ldr	r3, [pc, #112]	; (64d8 <system_clock_source_enable+0xa0>)
    6468:	4a1b      	ldr	r2, [pc, #108]	; (64d8 <system_clock_source_enable+0xa0>)
    646a:	6992      	ldr	r2, [r2, #24]
    646c:	2102      	movs	r1, #2
    646e:	430a      	orrs	r2, r1
    6470:	619a      	str	r2, [r3, #24]
		break;
    6472:	e029      	b.n	64c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6474:	4a18      	ldr	r2, [pc, #96]	; (64d8 <system_clock_source_enable+0xa0>)
    6476:	4b18      	ldr	r3, [pc, #96]	; (64d8 <system_clock_source_enable+0xa0>)
    6478:	8a1b      	ldrh	r3, [r3, #16]
    647a:	b29b      	uxth	r3, r3
    647c:	2102      	movs	r1, #2
    647e:	430b      	orrs	r3, r1
    6480:	b29b      	uxth	r3, r3
    6482:	8213      	strh	r3, [r2, #16]
		break;
    6484:	e020      	b.n	64c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6486:	4a14      	ldr	r2, [pc, #80]	; (64d8 <system_clock_source_enable+0xa0>)
    6488:	4b13      	ldr	r3, [pc, #76]	; (64d8 <system_clock_source_enable+0xa0>)
    648a:	8a9b      	ldrh	r3, [r3, #20]
    648c:	b29b      	uxth	r3, r3
    648e:	2102      	movs	r1, #2
    6490:	430b      	orrs	r3, r1
    6492:	b29b      	uxth	r3, r3
    6494:	8293      	strh	r3, [r2, #20]
		break;
    6496:	e017      	b.n	64c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6498:	4b10      	ldr	r3, [pc, #64]	; (64dc <system_clock_source_enable+0xa4>)
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	2202      	movs	r2, #2
    649e:	431a      	orrs	r2, r3
    64a0:	4b0e      	ldr	r3, [pc, #56]	; (64dc <system_clock_source_enable+0xa4>)
    64a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    64a4:	4b0e      	ldr	r3, [pc, #56]	; (64e0 <system_clock_source_enable+0xa8>)
    64a6:	4798      	blx	r3
		break;
    64a8:	e00e      	b.n	64c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    64aa:	4a0b      	ldr	r2, [pc, #44]	; (64d8 <system_clock_source_enable+0xa0>)
    64ac:	490a      	ldr	r1, [pc, #40]	; (64d8 <system_clock_source_enable+0xa0>)
    64ae:	2344      	movs	r3, #68	; 0x44
    64b0:	5ccb      	ldrb	r3, [r1, r3]
    64b2:	b2db      	uxtb	r3, r3
    64b4:	2102      	movs	r1, #2
    64b6:	430b      	orrs	r3, r1
    64b8:	b2d9      	uxtb	r1, r3
    64ba:	2344      	movs	r3, #68	; 0x44
    64bc:	54d1      	strb	r1, [r2, r3]
		break;
    64be:	e003      	b.n	64c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    64c0:	2300      	movs	r3, #0
    64c2:	e002      	b.n	64ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    64c4:	2317      	movs	r3, #23
    64c6:	e000      	b.n	64ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    64c8:	2300      	movs	r3, #0
}
    64ca:	0018      	movs	r0, r3
    64cc:	46bd      	mov	sp, r7
    64ce:	b002      	add	sp, #8
    64d0:	bd80      	pop	{r7, pc}
    64d2:	46c0      	nop			; (mov r8, r8)
    64d4:	0000ca3c 	.word	0x0000ca3c
    64d8:	40000800 	.word	0x40000800
    64dc:	20000188 	.word	0x20000188
    64e0:	000060cd 	.word	0x000060cd

000064e4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	b084      	sub	sp, #16
    64e8:	af00      	add	r7, sp, #0
    64ea:	0002      	movs	r2, r0
    64ec:	1dfb      	adds	r3, r7, #7
    64ee:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    64f0:	2300      	movs	r3, #0
    64f2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    64f4:	1dfb      	adds	r3, r7, #7
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	2b08      	cmp	r3, #8
    64fa:	d821      	bhi.n	6540 <system_clock_source_is_ready+0x5c>
    64fc:	009a      	lsls	r2, r3, #2
    64fe:	4b18      	ldr	r3, [pc, #96]	; (6560 <system_clock_source_is_ready+0x7c>)
    6500:	18d3      	adds	r3, r2, r3
    6502:	681b      	ldr	r3, [r3, #0]
    6504:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6506:	2308      	movs	r3, #8
    6508:	60fb      	str	r3, [r7, #12]
		break;
    650a:	e01b      	b.n	6544 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    650c:	2304      	movs	r3, #4
    650e:	60fb      	str	r3, [r7, #12]
		break;
    6510:	e018      	b.n	6544 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6512:	2301      	movs	r3, #1
    6514:	60fb      	str	r3, [r7, #12]
		break;
    6516:	e015      	b.n	6544 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6518:	2302      	movs	r3, #2
    651a:	60fb      	str	r3, [r7, #12]
		break;
    651c:	e012      	b.n	6544 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    651e:	23d0      	movs	r3, #208	; 0xd0
    6520:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6522:	e00f      	b.n	6544 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6524:	4a0f      	ldr	r2, [pc, #60]	; (6564 <system_clock_source_is_ready+0x80>)
    6526:	2350      	movs	r3, #80	; 0x50
    6528:	5cd3      	ldrb	r3, [r2, r3]
    652a:	b2db      	uxtb	r3, r3
    652c:	001a      	movs	r2, r3
    652e:	2303      	movs	r3, #3
    6530:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6532:	3b03      	subs	r3, #3
    6534:	425a      	negs	r2, r3
    6536:	4153      	adcs	r3, r2
    6538:	b2db      	uxtb	r3, r3
    653a:	e00c      	b.n	6556 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    653c:	2301      	movs	r3, #1
    653e:	e00a      	b.n	6556 <system_clock_source_is_ready+0x72>

	default:
		return false;
    6540:	2300      	movs	r3, #0
    6542:	e008      	b.n	6556 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6544:	4b07      	ldr	r3, [pc, #28]	; (6564 <system_clock_source_is_ready+0x80>)
    6546:	68db      	ldr	r3, [r3, #12]
    6548:	68fa      	ldr	r2, [r7, #12]
    654a:	401a      	ands	r2, r3
    654c:	68fb      	ldr	r3, [r7, #12]
    654e:	1ad3      	subs	r3, r2, r3
    6550:	425a      	negs	r2, r3
    6552:	4153      	adcs	r3, r2
    6554:	b2db      	uxtb	r3, r3
}
    6556:	0018      	movs	r0, r3
    6558:	46bd      	mov	sp, r7
    655a:	b004      	add	sp, #16
    655c:	bd80      	pop	{r7, pc}
    655e:	46c0      	nop			; (mov r8, r8)
    6560:	0000ca60 	.word	0x0000ca60
    6564:	40000800 	.word	0x40000800

00006568 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6568:	b580      	push	{r7, lr}
    656a:	b082      	sub	sp, #8
    656c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    656e:	003b      	movs	r3, r7
    6570:	2202      	movs	r2, #2
    6572:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6574:	2300      	movs	r3, #0
    6576:	607b      	str	r3, [r7, #4]
    6578:	e009      	b.n	658e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	b2db      	uxtb	r3, r3
    657e:	003a      	movs	r2, r7
    6580:	0011      	movs	r1, r2
    6582:	0018      	movs	r0, r3
    6584:	4b05      	ldr	r3, [pc, #20]	; (659c <_switch_peripheral_gclk+0x34>)
    6586:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	3301      	adds	r3, #1
    658c:	607b      	str	r3, [r7, #4]
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	2b24      	cmp	r3, #36	; 0x24
    6592:	d9f2      	bls.n	657a <_switch_peripheral_gclk+0x12>
	}
}
    6594:	46c0      	nop			; (mov r8, r8)
    6596:	46bd      	mov	sp, r7
    6598:	b002      	add	sp, #8
    659a:	bd80      	pop	{r7, pc}
    659c:	00006b3d 	.word	0x00006b3d

000065a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    65a0:	b580      	push	{r7, lr}
    65a2:	b0aa      	sub	sp, #168	; 0xa8
    65a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    65a6:	4b85      	ldr	r3, [pc, #532]	; (67bc <system_clock_init+0x21c>)
    65a8:	22c2      	movs	r2, #194	; 0xc2
    65aa:	00d2      	lsls	r2, r2, #3
    65ac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    65ae:	2002      	movs	r0, #2
    65b0:	4b83      	ldr	r3, [pc, #524]	; (67c0 <system_clock_init+0x220>)
    65b2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    65b4:	4b83      	ldr	r3, [pc, #524]	; (67c4 <system_clock_init+0x224>)
    65b6:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    65b8:	2394      	movs	r3, #148	; 0x94
    65ba:	18fb      	adds	r3, r7, r3
    65bc:	0018      	movs	r0, r3
    65be:	4b82      	ldr	r3, [pc, #520]	; (67c8 <system_clock_init+0x228>)
    65c0:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    65c2:	2394      	movs	r3, #148	; 0x94
    65c4:	18fb      	adds	r3, r7, r3
    65c6:	2280      	movs	r2, #128	; 0x80
    65c8:	0212      	lsls	r2, r2, #8
    65ca:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    65cc:	2394      	movs	r3, #148	; 0x94
    65ce:	18fb      	adds	r3, r7, r3
    65d0:	2200      	movs	r2, #0
    65d2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    65d4:	2394      	movs	r3, #148	; 0x94
    65d6:	18fb      	adds	r3, r7, r3
    65d8:	2206      	movs	r2, #6
    65da:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    65dc:	2394      	movs	r3, #148	; 0x94
    65de:	18fb      	adds	r3, r7, r3
    65e0:	2200      	movs	r2, #0
    65e2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    65e4:	2394      	movs	r3, #148	; 0x94
    65e6:	18fb      	adds	r3, r7, r3
    65e8:	2200      	movs	r2, #0
    65ea:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    65ec:	2394      	movs	r3, #148	; 0x94
    65ee:	18fb      	adds	r3, r7, r3
    65f0:	2201      	movs	r2, #1
    65f2:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    65f4:	2394      	movs	r3, #148	; 0x94
    65f6:	18fb      	adds	r3, r7, r3
    65f8:	2200      	movs	r2, #0
    65fa:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    65fc:	2394      	movs	r3, #148	; 0x94
    65fe:	18fb      	adds	r3, r7, r3
    6600:	2201      	movs	r2, #1
    6602:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6604:	2394      	movs	r3, #148	; 0x94
    6606:	18fb      	adds	r3, r7, r3
    6608:	0018      	movs	r0, r3
    660a:	4b70      	ldr	r3, [pc, #448]	; (67cc <system_clock_init+0x22c>)
    660c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    660e:	2005      	movs	r0, #5
    6610:	4b6f      	ldr	r3, [pc, #444]	; (67d0 <system_clock_init+0x230>)
    6612:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6614:	46c0      	nop			; (mov r8, r8)
    6616:	2005      	movs	r0, #5
    6618:	4b6e      	ldr	r3, [pc, #440]	; (67d4 <system_clock_init+0x234>)
    661a:	4798      	blx	r3
    661c:	0003      	movs	r3, r0
    661e:	001a      	movs	r2, r3
    6620:	2301      	movs	r3, #1
    6622:	4053      	eors	r3, r2
    6624:	b2db      	uxtb	r3, r3
    6626:	2b00      	cmp	r3, #0
    6628:	d1f5      	bne.n	6616 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    662a:	2380      	movs	r3, #128	; 0x80
    662c:	18fb      	adds	r3, r7, r3
    662e:	0018      	movs	r0, r3
    6630:	4b69      	ldr	r3, [pc, #420]	; (67d8 <system_clock_init+0x238>)
    6632:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6634:	2380      	movs	r3, #128	; 0x80
    6636:	18fb      	adds	r3, r7, r3
    6638:	2204      	movs	r2, #4
    663a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    663c:	2380      	movs	r3, #128	; 0x80
    663e:	18fb      	adds	r3, r7, r3
    6640:	2200      	movs	r2, #0
    6642:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6644:	4b65      	ldr	r3, [pc, #404]	; (67dc <system_clock_init+0x23c>)
    6646:	681b      	ldr	r3, [r3, #0]
    6648:	0e9b      	lsrs	r3, r3, #26
    664a:	22a4      	movs	r2, #164	; 0xa4
    664c:	18ba      	adds	r2, r7, r2
    664e:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6650:	23a4      	movs	r3, #164	; 0xa4
    6652:	18fb      	adds	r3, r7, r3
    6654:	681b      	ldr	r3, [r3, #0]
    6656:	2b3f      	cmp	r3, #63	; 0x3f
    6658:	d103      	bne.n	6662 <system_clock_init+0xc2>
		coarse = 0x1f;
    665a:	231f      	movs	r3, #31
    665c:	22a4      	movs	r2, #164	; 0xa4
    665e:	18ba      	adds	r2, r7, r2
    6660:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6662:	23a4      	movs	r3, #164	; 0xa4
    6664:	18fb      	adds	r3, r7, r3
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	b2da      	uxtb	r2, r3
    666a:	2380      	movs	r3, #128	; 0x80
    666c:	18fb      	adds	r3, r7, r3
    666e:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6670:	2380      	movs	r3, #128	; 0x80
    6672:	18fb      	adds	r3, r7, r3
    6674:	2200      	movs	r2, #0
    6676:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6678:	2380      	movs	r3, #128	; 0x80
    667a:	18fb      	adds	r3, r7, r3
    667c:	2200      	movs	r2, #0
    667e:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6680:	2380      	movs	r3, #128	; 0x80
    6682:	18fb      	adds	r3, r7, r3
    6684:	2200      	movs	r2, #0
    6686:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6688:	2380      	movs	r3, #128	; 0x80
    668a:	18fb      	adds	r3, r7, r3
    668c:	2200      	movs	r2, #0
    668e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6690:	2380      	movs	r3, #128	; 0x80
    6692:	18fb      	adds	r3, r7, r3
    6694:	22b7      	movs	r2, #183	; 0xb7
    6696:	00d2      	lsls	r2, r2, #3
    6698:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    669a:	2380      	movs	r3, #128	; 0x80
    669c:	18fb      	adds	r3, r7, r3
    669e:	2203      	movs	r2, #3
    66a0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    66a2:	2380      	movs	r3, #128	; 0x80
    66a4:	18fb      	adds	r3, r7, r3
    66a6:	221f      	movs	r2, #31
    66a8:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    66aa:	2380      	movs	r3, #128	; 0x80
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	0018      	movs	r0, r3
    66b0:	4b4b      	ldr	r3, [pc, #300]	; (67e0 <system_clock_init+0x240>)
    66b2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    66b4:	237c      	movs	r3, #124	; 0x7c
    66b6:	18fb      	adds	r3, r7, r3
    66b8:	0018      	movs	r0, r3
    66ba:	4b4a      	ldr	r3, [pc, #296]	; (67e4 <system_clock_init+0x244>)
    66bc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    66be:	237c      	movs	r3, #124	; 0x7c
    66c0:	18fb      	adds	r3, r7, r3
    66c2:	2200      	movs	r2, #0
    66c4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    66c6:	237c      	movs	r3, #124	; 0x7c
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	2201      	movs	r2, #1
    66cc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    66ce:	237c      	movs	r3, #124	; 0x7c
    66d0:	18fb      	adds	r3, r7, r3
    66d2:	2201      	movs	r2, #1
    66d4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    66d6:	237c      	movs	r3, #124	; 0x7c
    66d8:	18fb      	adds	r3, r7, r3
    66da:	0018      	movs	r0, r3
    66dc:	4b42      	ldr	r3, [pc, #264]	; (67e8 <system_clock_init+0x248>)
    66de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    66e0:	2006      	movs	r0, #6
    66e2:	4b3b      	ldr	r3, [pc, #236]	; (67d0 <system_clock_init+0x230>)
    66e4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    66e6:	4b41      	ldr	r3, [pc, #260]	; (67ec <system_clock_init+0x24c>)
    66e8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    66ea:	2364      	movs	r3, #100	; 0x64
    66ec:	18fb      	adds	r3, r7, r3
    66ee:	0018      	movs	r0, r3
    66f0:	4b3f      	ldr	r3, [pc, #252]	; (67f0 <system_clock_init+0x250>)
    66f2:	4798      	blx	r3
    66f4:	2364      	movs	r3, #100	; 0x64
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	2205      	movs	r2, #5
    66fa:	701a      	strb	r2, [r3, #0]
    66fc:	2364      	movs	r3, #100	; 0x64
    66fe:	18fb      	adds	r3, r7, r3
    6700:	2201      	movs	r2, #1
    6702:	605a      	str	r2, [r3, #4]
    6704:	2364      	movs	r3, #100	; 0x64
    6706:	18fb      	adds	r3, r7, r3
    6708:	2200      	movs	r2, #0
    670a:	721a      	strb	r2, [r3, #8]
    670c:	2364      	movs	r3, #100	; 0x64
    670e:	18fb      	adds	r3, r7, r3
    6710:	2200      	movs	r2, #0
    6712:	725a      	strb	r2, [r3, #9]
    6714:	2364      	movs	r3, #100	; 0x64
    6716:	18fb      	adds	r3, r7, r3
    6718:	0019      	movs	r1, r3
    671a:	2001      	movs	r0, #1
    671c:	4b35      	ldr	r3, [pc, #212]	; (67f4 <system_clock_init+0x254>)
    671e:	4798      	blx	r3
    6720:	2001      	movs	r0, #1
    6722:	4b35      	ldr	r3, [pc, #212]	; (67f8 <system_clock_init+0x258>)
    6724:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    6726:	230c      	movs	r3, #12
    6728:	18fb      	adds	r3, r7, r3
    672a:	0018      	movs	r0, r3
    672c:	4b33      	ldr	r3, [pc, #204]	; (67fc <system_clock_init+0x25c>)
    672e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6730:	230c      	movs	r3, #12
    6732:	18fb      	adds	r3, r7, r3
    6734:	2201      	movs	r2, #1
    6736:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6738:	230c      	movs	r3, #12
    673a:	18fb      	adds	r3, r7, r3
    673c:	0019      	movs	r1, r3
    673e:	2000      	movs	r0, #0
    6740:	4b2f      	ldr	r3, [pc, #188]	; (6800 <system_clock_init+0x260>)
    6742:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6744:	2000      	movs	r0, #0
    6746:	4b2f      	ldr	r3, [pc, #188]	; (6804 <system_clock_init+0x264>)
    6748:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    674a:	2007      	movs	r0, #7
    674c:	4b20      	ldr	r3, [pc, #128]	; (67d0 <system_clock_init+0x230>)
    674e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6750:	46c0      	nop			; (mov r8, r8)
    6752:	2007      	movs	r0, #7
    6754:	4b1f      	ldr	r3, [pc, #124]	; (67d4 <system_clock_init+0x234>)
    6756:	4798      	blx	r3
    6758:	0003      	movs	r3, r0
    675a:	001a      	movs	r2, r3
    675c:	2301      	movs	r3, #1
    675e:	4053      	eors	r3, r2
    6760:	b2db      	uxtb	r3, r3
    6762:	2b00      	cmp	r3, #0
    6764:	d1f5      	bne.n	6752 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6766:	2000      	movs	r0, #0
    6768:	4b27      	ldr	r3, [pc, #156]	; (6808 <system_clock_init+0x268>)
    676a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    676c:	2100      	movs	r1, #0
    676e:	2000      	movs	r0, #0
    6770:	4b26      	ldr	r3, [pc, #152]	; (680c <system_clock_init+0x26c>)
    6772:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6774:	2100      	movs	r1, #0
    6776:	2001      	movs	r0, #1
    6778:	4b24      	ldr	r3, [pc, #144]	; (680c <system_clock_init+0x26c>)
    677a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    677c:	2100      	movs	r1, #0
    677e:	2002      	movs	r0, #2
    6780:	4b22      	ldr	r3, [pc, #136]	; (680c <system_clock_init+0x26c>)
    6782:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6784:	003b      	movs	r3, r7
    6786:	0018      	movs	r0, r3
    6788:	4b19      	ldr	r3, [pc, #100]	; (67f0 <system_clock_init+0x250>)
    678a:	4798      	blx	r3
    678c:	003b      	movs	r3, r7
    678e:	2207      	movs	r2, #7
    6790:	701a      	strb	r2, [r3, #0]
    6792:	003b      	movs	r3, r7
    6794:	2201      	movs	r2, #1
    6796:	605a      	str	r2, [r3, #4]
    6798:	003b      	movs	r3, r7
    679a:	2201      	movs	r2, #1
    679c:	721a      	strb	r2, [r3, #8]
    679e:	003b      	movs	r3, r7
    67a0:	2200      	movs	r2, #0
    67a2:	725a      	strb	r2, [r3, #9]
    67a4:	003b      	movs	r3, r7
    67a6:	0019      	movs	r1, r3
    67a8:	2000      	movs	r0, #0
    67aa:	4b12      	ldr	r3, [pc, #72]	; (67f4 <system_clock_init+0x254>)
    67ac:	4798      	blx	r3
    67ae:	2000      	movs	r0, #0
    67b0:	4b11      	ldr	r3, [pc, #68]	; (67f8 <system_clock_init+0x258>)
    67b2:	4798      	blx	r3
#endif
}
    67b4:	46c0      	nop			; (mov r8, r8)
    67b6:	46bd      	mov	sp, r7
    67b8:	b02a      	add	sp, #168	; 0xa8
    67ba:	bd80      	pop	{r7, pc}
    67bc:	40000800 	.word	0x40000800
    67c0:	0000607d 	.word	0x0000607d
    67c4:	00006569 	.word	0x00006569
    67c8:	00005f4d 	.word	0x00005f4d
    67cc:	00006249 	.word	0x00006249
    67d0:	00006439 	.word	0x00006439
    67d4:	000064e5 	.word	0x000064e5
    67d8:	00005fb7 	.word	0x00005fb7
    67dc:	00806024 	.word	0x00806024
    67e0:	00006369 	.word	0x00006369
    67e4:	00005f95 	.word	0x00005f95
    67e8:	000061d1 	.word	0x000061d1
    67ec:	000068b5 	.word	0x000068b5
    67f0:	00005f09 	.word	0x00005f09
    67f4:	000068e5 	.word	0x000068e5
    67f8:	00006a09 	.word	0x00006a09
    67fc:	00005f37 	.word	0x00005f37
    6800:	00006b3d 	.word	0x00006b3d
    6804:	00006b81 	.word	0x00006b81
    6808:	00006009 	.word	0x00006009
    680c:	00006029 	.word	0x00006029

00006810 <system_apb_clock_set_mask>:
{
    6810:	b580      	push	{r7, lr}
    6812:	b082      	sub	sp, #8
    6814:	af00      	add	r7, sp, #0
    6816:	0002      	movs	r2, r0
    6818:	6039      	str	r1, [r7, #0]
    681a:	1dfb      	adds	r3, r7, #7
    681c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    681e:	1dfb      	adds	r3, r7, #7
    6820:	781b      	ldrb	r3, [r3, #0]
    6822:	2b01      	cmp	r3, #1
    6824:	d00a      	beq.n	683c <system_apb_clock_set_mask+0x2c>
    6826:	2b02      	cmp	r3, #2
    6828:	d00f      	beq.n	684a <system_apb_clock_set_mask+0x3a>
    682a:	2b00      	cmp	r3, #0
    682c:	d114      	bne.n	6858 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    682e:	4b0e      	ldr	r3, [pc, #56]	; (6868 <system_apb_clock_set_mask+0x58>)
    6830:	4a0d      	ldr	r2, [pc, #52]	; (6868 <system_apb_clock_set_mask+0x58>)
    6832:	6991      	ldr	r1, [r2, #24]
    6834:	683a      	ldr	r2, [r7, #0]
    6836:	430a      	orrs	r2, r1
    6838:	619a      	str	r2, [r3, #24]
			break;
    683a:	e00f      	b.n	685c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    683c:	4b0a      	ldr	r3, [pc, #40]	; (6868 <system_apb_clock_set_mask+0x58>)
    683e:	4a0a      	ldr	r2, [pc, #40]	; (6868 <system_apb_clock_set_mask+0x58>)
    6840:	69d1      	ldr	r1, [r2, #28]
    6842:	683a      	ldr	r2, [r7, #0]
    6844:	430a      	orrs	r2, r1
    6846:	61da      	str	r2, [r3, #28]
			break;
    6848:	e008      	b.n	685c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    684a:	4b07      	ldr	r3, [pc, #28]	; (6868 <system_apb_clock_set_mask+0x58>)
    684c:	4a06      	ldr	r2, [pc, #24]	; (6868 <system_apb_clock_set_mask+0x58>)
    684e:	6a11      	ldr	r1, [r2, #32]
    6850:	683a      	ldr	r2, [r7, #0]
    6852:	430a      	orrs	r2, r1
    6854:	621a      	str	r2, [r3, #32]
			break;
    6856:	e001      	b.n	685c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6858:	2317      	movs	r3, #23
    685a:	e000      	b.n	685e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    685c:	2300      	movs	r3, #0
}
    685e:	0018      	movs	r0, r3
    6860:	46bd      	mov	sp, r7
    6862:	b002      	add	sp, #8
    6864:	bd80      	pop	{r7, pc}
    6866:	46c0      	nop			; (mov r8, r8)
    6868:	40000400 	.word	0x40000400

0000686c <system_interrupt_enter_critical_section>:
{
    686c:	b580      	push	{r7, lr}
    686e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6870:	4b02      	ldr	r3, [pc, #8]	; (687c <system_interrupt_enter_critical_section+0x10>)
    6872:	4798      	blx	r3
}
    6874:	46c0      	nop			; (mov r8, r8)
    6876:	46bd      	mov	sp, r7
    6878:	bd80      	pop	{r7, pc}
    687a:	46c0      	nop			; (mov r8, r8)
    687c:	000034b1 	.word	0x000034b1

00006880 <system_interrupt_leave_critical_section>:
{
    6880:	b580      	push	{r7, lr}
    6882:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6884:	4b02      	ldr	r3, [pc, #8]	; (6890 <system_interrupt_leave_critical_section+0x10>)
    6886:	4798      	blx	r3
}
    6888:	46c0      	nop			; (mov r8, r8)
    688a:	46bd      	mov	sp, r7
    688c:	bd80      	pop	{r7, pc}
    688e:	46c0      	nop			; (mov r8, r8)
    6890:	00003505 	.word	0x00003505

00006894 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6894:	b580      	push	{r7, lr}
    6896:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6898:	4b05      	ldr	r3, [pc, #20]	; (68b0 <system_gclk_is_syncing+0x1c>)
    689a:	785b      	ldrb	r3, [r3, #1]
    689c:	b2db      	uxtb	r3, r3
    689e:	b25b      	sxtb	r3, r3
    68a0:	2b00      	cmp	r3, #0
    68a2:	da01      	bge.n	68a8 <system_gclk_is_syncing+0x14>
		return true;
    68a4:	2301      	movs	r3, #1
    68a6:	e000      	b.n	68aa <system_gclk_is_syncing+0x16>
	}

	return false;
    68a8:	2300      	movs	r3, #0
}
    68aa:	0018      	movs	r0, r3
    68ac:	46bd      	mov	sp, r7
    68ae:	bd80      	pop	{r7, pc}
    68b0:	40000c00 	.word	0x40000c00

000068b4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    68b4:	b580      	push	{r7, lr}
    68b6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    68b8:	2108      	movs	r1, #8
    68ba:	2000      	movs	r0, #0
    68bc:	4b07      	ldr	r3, [pc, #28]	; (68dc <system_gclk_init+0x28>)
    68be:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    68c0:	4b07      	ldr	r3, [pc, #28]	; (68e0 <system_gclk_init+0x2c>)
    68c2:	2201      	movs	r2, #1
    68c4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	4b05      	ldr	r3, [pc, #20]	; (68e0 <system_gclk_init+0x2c>)
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	b2db      	uxtb	r3, r3
    68ce:	001a      	movs	r2, r3
    68d0:	2301      	movs	r3, #1
    68d2:	4013      	ands	r3, r2
    68d4:	d1f8      	bne.n	68c8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    68d6:	46c0      	nop			; (mov r8, r8)
    68d8:	46bd      	mov	sp, r7
    68da:	bd80      	pop	{r7, pc}
    68dc:	00006811 	.word	0x00006811
    68e0:	40000c00 	.word	0x40000c00

000068e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    68e4:	b580      	push	{r7, lr}
    68e6:	b086      	sub	sp, #24
    68e8:	af00      	add	r7, sp, #0
    68ea:	0002      	movs	r2, r0
    68ec:	6039      	str	r1, [r7, #0]
    68ee:	1dfb      	adds	r3, r7, #7
    68f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    68f2:	1dfb      	adds	r3, r7, #7
    68f4:	781b      	ldrb	r3, [r3, #0]
    68f6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    68f8:	1dfb      	adds	r3, r7, #7
    68fa:	781b      	ldrb	r3, [r3, #0]
    68fc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    68fe:	683b      	ldr	r3, [r7, #0]
    6900:	781b      	ldrb	r3, [r3, #0]
    6902:	021b      	lsls	r3, r3, #8
    6904:	001a      	movs	r2, r3
    6906:	697b      	ldr	r3, [r7, #20]
    6908:	4313      	orrs	r3, r2
    690a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    690c:	683b      	ldr	r3, [r7, #0]
    690e:	785b      	ldrb	r3, [r3, #1]
    6910:	2b00      	cmp	r3, #0
    6912:	d004      	beq.n	691e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6914:	697b      	ldr	r3, [r7, #20]
    6916:	2280      	movs	r2, #128	; 0x80
    6918:	02d2      	lsls	r2, r2, #11
    691a:	4313      	orrs	r3, r2
    691c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    691e:	683b      	ldr	r3, [r7, #0]
    6920:	7a5b      	ldrb	r3, [r3, #9]
    6922:	2b00      	cmp	r3, #0
    6924:	d004      	beq.n	6930 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6926:	697b      	ldr	r3, [r7, #20]
    6928:	2280      	movs	r2, #128	; 0x80
    692a:	0312      	lsls	r2, r2, #12
    692c:	4313      	orrs	r3, r2
    692e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6930:	683b      	ldr	r3, [r7, #0]
    6932:	685b      	ldr	r3, [r3, #4]
    6934:	2b01      	cmp	r3, #1
    6936:	d92c      	bls.n	6992 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6938:	683b      	ldr	r3, [r7, #0]
    693a:	685a      	ldr	r2, [r3, #4]
    693c:	683b      	ldr	r3, [r7, #0]
    693e:	685b      	ldr	r3, [r3, #4]
    6940:	3b01      	subs	r3, #1
    6942:	4013      	ands	r3, r2
    6944:	d11a      	bne.n	697c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6946:	2300      	movs	r3, #0
    6948:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    694a:	2302      	movs	r3, #2
    694c:	60bb      	str	r3, [r7, #8]
    694e:	e005      	b.n	695c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6950:	68fb      	ldr	r3, [r7, #12]
    6952:	3301      	adds	r3, #1
    6954:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    6956:	68bb      	ldr	r3, [r7, #8]
    6958:	005b      	lsls	r3, r3, #1
    695a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    695c:	683b      	ldr	r3, [r7, #0]
    695e:	685a      	ldr	r2, [r3, #4]
    6960:	68bb      	ldr	r3, [r7, #8]
    6962:	429a      	cmp	r2, r3
    6964:	d8f4      	bhi.n	6950 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6966:	68fb      	ldr	r3, [r7, #12]
    6968:	021b      	lsls	r3, r3, #8
    696a:	693a      	ldr	r2, [r7, #16]
    696c:	4313      	orrs	r3, r2
    696e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6970:	697b      	ldr	r3, [r7, #20]
    6972:	2280      	movs	r2, #128	; 0x80
    6974:	0352      	lsls	r2, r2, #13
    6976:	4313      	orrs	r3, r2
    6978:	617b      	str	r3, [r7, #20]
    697a:	e00a      	b.n	6992 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    697c:	683b      	ldr	r3, [r7, #0]
    697e:	685b      	ldr	r3, [r3, #4]
    6980:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6982:	693a      	ldr	r2, [r7, #16]
    6984:	4313      	orrs	r3, r2
    6986:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6988:	697b      	ldr	r3, [r7, #20]
    698a:	2280      	movs	r2, #128	; 0x80
    698c:	0292      	lsls	r2, r2, #10
    698e:	4313      	orrs	r3, r2
    6990:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6992:	683b      	ldr	r3, [r7, #0]
    6994:	7a1b      	ldrb	r3, [r3, #8]
    6996:	2b00      	cmp	r3, #0
    6998:	d004      	beq.n	69a4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    699a:	697b      	ldr	r3, [r7, #20]
    699c:	2280      	movs	r2, #128	; 0x80
    699e:	0392      	lsls	r2, r2, #14
    69a0:	4313      	orrs	r3, r2
    69a2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    69a4:	46c0      	nop			; (mov r8, r8)
    69a6:	4b13      	ldr	r3, [pc, #76]	; (69f4 <system_gclk_gen_set_config+0x110>)
    69a8:	4798      	blx	r3
    69aa:	1e03      	subs	r3, r0, #0
    69ac:	d1fb      	bne.n	69a6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    69ae:	4b12      	ldr	r3, [pc, #72]	; (69f8 <system_gclk_gen_set_config+0x114>)
    69b0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    69b2:	4a12      	ldr	r2, [pc, #72]	; (69fc <system_gclk_gen_set_config+0x118>)
    69b4:	1dfb      	adds	r3, r7, #7
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	4b0d      	ldr	r3, [pc, #52]	; (69f4 <system_gclk_gen_set_config+0x110>)
    69be:	4798      	blx	r3
    69c0:	1e03      	subs	r3, r0, #0
    69c2:	d1fb      	bne.n	69bc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    69c4:	4b0e      	ldr	r3, [pc, #56]	; (6a00 <system_gclk_gen_set_config+0x11c>)
    69c6:	693a      	ldr	r2, [r7, #16]
    69c8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    69ca:	46c0      	nop			; (mov r8, r8)
    69cc:	4b09      	ldr	r3, [pc, #36]	; (69f4 <system_gclk_gen_set_config+0x110>)
    69ce:	4798      	blx	r3
    69d0:	1e03      	subs	r3, r0, #0
    69d2:	d1fb      	bne.n	69cc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    69d4:	4b0a      	ldr	r3, [pc, #40]	; (6a00 <system_gclk_gen_set_config+0x11c>)
    69d6:	4a0a      	ldr	r2, [pc, #40]	; (6a00 <system_gclk_gen_set_config+0x11c>)
    69d8:	6851      	ldr	r1, [r2, #4]
    69da:	2280      	movs	r2, #128	; 0x80
    69dc:	0252      	lsls	r2, r2, #9
    69de:	4011      	ands	r1, r2
    69e0:	697a      	ldr	r2, [r7, #20]
    69e2:	430a      	orrs	r2, r1
    69e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    69e6:	4b07      	ldr	r3, [pc, #28]	; (6a04 <system_gclk_gen_set_config+0x120>)
    69e8:	4798      	blx	r3
}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	46bd      	mov	sp, r7
    69ee:	b006      	add	sp, #24
    69f0:	bd80      	pop	{r7, pc}
    69f2:	46c0      	nop			; (mov r8, r8)
    69f4:	00006895 	.word	0x00006895
    69f8:	0000686d 	.word	0x0000686d
    69fc:	40000c08 	.word	0x40000c08
    6a00:	40000c00 	.word	0x40000c00
    6a04:	00006881 	.word	0x00006881

00006a08 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6a08:	b580      	push	{r7, lr}
    6a0a:	b082      	sub	sp, #8
    6a0c:	af00      	add	r7, sp, #0
    6a0e:	0002      	movs	r2, r0
    6a10:	1dfb      	adds	r3, r7, #7
    6a12:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6a14:	46c0      	nop			; (mov r8, r8)
    6a16:	4b0e      	ldr	r3, [pc, #56]	; (6a50 <system_gclk_gen_enable+0x48>)
    6a18:	4798      	blx	r3
    6a1a:	1e03      	subs	r3, r0, #0
    6a1c:	d1fb      	bne.n	6a16 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6a1e:	4b0d      	ldr	r3, [pc, #52]	; (6a54 <system_gclk_gen_enable+0x4c>)
    6a20:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6a22:	4a0d      	ldr	r2, [pc, #52]	; (6a58 <system_gclk_gen_enable+0x50>)
    6a24:	1dfb      	adds	r3, r7, #7
    6a26:	781b      	ldrb	r3, [r3, #0]
    6a28:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	4b08      	ldr	r3, [pc, #32]	; (6a50 <system_gclk_gen_enable+0x48>)
    6a2e:	4798      	blx	r3
    6a30:	1e03      	subs	r3, r0, #0
    6a32:	d1fb      	bne.n	6a2c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6a34:	4b09      	ldr	r3, [pc, #36]	; (6a5c <system_gclk_gen_enable+0x54>)
    6a36:	4a09      	ldr	r2, [pc, #36]	; (6a5c <system_gclk_gen_enable+0x54>)
    6a38:	6852      	ldr	r2, [r2, #4]
    6a3a:	2180      	movs	r1, #128	; 0x80
    6a3c:	0249      	lsls	r1, r1, #9
    6a3e:	430a      	orrs	r2, r1
    6a40:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6a42:	4b07      	ldr	r3, [pc, #28]	; (6a60 <system_gclk_gen_enable+0x58>)
    6a44:	4798      	blx	r3
}
    6a46:	46c0      	nop			; (mov r8, r8)
    6a48:	46bd      	mov	sp, r7
    6a4a:	b002      	add	sp, #8
    6a4c:	bd80      	pop	{r7, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	00006895 	.word	0x00006895
    6a54:	0000686d 	.word	0x0000686d
    6a58:	40000c04 	.word	0x40000c04
    6a5c:	40000c00 	.word	0x40000c00
    6a60:	00006881 	.word	0x00006881

00006a64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6a64:	b580      	push	{r7, lr}
    6a66:	b086      	sub	sp, #24
    6a68:	af00      	add	r7, sp, #0
    6a6a:	0002      	movs	r2, r0
    6a6c:	1dfb      	adds	r3, r7, #7
    6a6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6a70:	46c0      	nop			; (mov r8, r8)
    6a72:	4b2a      	ldr	r3, [pc, #168]	; (6b1c <system_gclk_gen_get_hz+0xb8>)
    6a74:	4798      	blx	r3
    6a76:	1e03      	subs	r3, r0, #0
    6a78:	d1fb      	bne.n	6a72 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6a7a:	4b29      	ldr	r3, [pc, #164]	; (6b20 <system_gclk_gen_get_hz+0xbc>)
    6a7c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6a7e:	4a29      	ldr	r2, [pc, #164]	; (6b24 <system_gclk_gen_get_hz+0xc0>)
    6a80:	1dfb      	adds	r3, r7, #7
    6a82:	781b      	ldrb	r3, [r3, #0]
    6a84:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6a86:	46c0      	nop			; (mov r8, r8)
    6a88:	4b24      	ldr	r3, [pc, #144]	; (6b1c <system_gclk_gen_get_hz+0xb8>)
    6a8a:	4798      	blx	r3
    6a8c:	1e03      	subs	r3, r0, #0
    6a8e:	d1fb      	bne.n	6a88 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6a90:	4b25      	ldr	r3, [pc, #148]	; (6b28 <system_gclk_gen_get_hz+0xc4>)
    6a92:	685b      	ldr	r3, [r3, #4]
    6a94:	04db      	lsls	r3, r3, #19
    6a96:	0edb      	lsrs	r3, r3, #27
    6a98:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6a9a:	0018      	movs	r0, r3
    6a9c:	4b23      	ldr	r3, [pc, #140]	; (6b2c <system_gclk_gen_get_hz+0xc8>)
    6a9e:	4798      	blx	r3
    6aa0:	0003      	movs	r3, r0
    6aa2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6aa4:	4a1f      	ldr	r2, [pc, #124]	; (6b24 <system_gclk_gen_get_hz+0xc0>)
    6aa6:	1dfb      	adds	r3, r7, #7
    6aa8:	781b      	ldrb	r3, [r3, #0]
    6aaa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6aac:	4b1e      	ldr	r3, [pc, #120]	; (6b28 <system_gclk_gen_get_hz+0xc4>)
    6aae:	685b      	ldr	r3, [r3, #4]
    6ab0:	02db      	lsls	r3, r3, #11
    6ab2:	0fdb      	lsrs	r3, r3, #31
    6ab4:	b2da      	uxtb	r2, r3
    6ab6:	2313      	movs	r3, #19
    6ab8:	18fb      	adds	r3, r7, r3
    6aba:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6abc:	4a1c      	ldr	r2, [pc, #112]	; (6b30 <system_gclk_gen_get_hz+0xcc>)
    6abe:	1dfb      	adds	r3, r7, #7
    6ac0:	781b      	ldrb	r3, [r3, #0]
    6ac2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6ac4:	46c0      	nop			; (mov r8, r8)
    6ac6:	4b15      	ldr	r3, [pc, #84]	; (6b1c <system_gclk_gen_get_hz+0xb8>)
    6ac8:	4798      	blx	r3
    6aca:	1e03      	subs	r3, r0, #0
    6acc:	d1fb      	bne.n	6ac6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6ace:	4b16      	ldr	r3, [pc, #88]	; (6b28 <system_gclk_gen_get_hz+0xc4>)
    6ad0:	689b      	ldr	r3, [r3, #8]
    6ad2:	021b      	lsls	r3, r3, #8
    6ad4:	0c1b      	lsrs	r3, r3, #16
    6ad6:	b29b      	uxth	r3, r3
    6ad8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6ada:	4b16      	ldr	r3, [pc, #88]	; (6b34 <system_gclk_gen_get_hz+0xd0>)
    6adc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6ade:	2313      	movs	r3, #19
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d109      	bne.n	6afc <system_gclk_gen_get_hz+0x98>
    6ae8:	68fb      	ldr	r3, [r7, #12]
    6aea:	2b01      	cmp	r3, #1
    6aec:	d906      	bls.n	6afc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6aee:	4b12      	ldr	r3, [pc, #72]	; (6b38 <system_gclk_gen_get_hz+0xd4>)
    6af0:	68f9      	ldr	r1, [r7, #12]
    6af2:	6978      	ldr	r0, [r7, #20]
    6af4:	4798      	blx	r3
    6af6:	0003      	movs	r3, r0
    6af8:	617b      	str	r3, [r7, #20]
    6afa:	e00a      	b.n	6b12 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6afc:	2313      	movs	r3, #19
    6afe:	18fb      	adds	r3, r7, r3
    6b00:	781b      	ldrb	r3, [r3, #0]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d005      	beq.n	6b12 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    6b06:	68fb      	ldr	r3, [r7, #12]
    6b08:	3301      	adds	r3, #1
    6b0a:	697a      	ldr	r2, [r7, #20]
    6b0c:	40da      	lsrs	r2, r3
    6b0e:	0013      	movs	r3, r2
    6b10:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6b12:	697b      	ldr	r3, [r7, #20]
}
    6b14:	0018      	movs	r0, r3
    6b16:	46bd      	mov	sp, r7
    6b18:	b006      	add	sp, #24
    6b1a:	bd80      	pop	{r7, pc}
    6b1c:	00006895 	.word	0x00006895
    6b20:	0000686d 	.word	0x0000686d
    6b24:	40000c04 	.word	0x40000c04
    6b28:	40000c00 	.word	0x40000c00
    6b2c:	00006111 	.word	0x00006111
    6b30:	40000c08 	.word	0x40000c08
    6b34:	00006881 	.word	0x00006881
    6b38:	0000b5bd 	.word	0x0000b5bd

00006b3c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6b3c:	b580      	push	{r7, lr}
    6b3e:	b084      	sub	sp, #16
    6b40:	af00      	add	r7, sp, #0
    6b42:	0002      	movs	r2, r0
    6b44:	6039      	str	r1, [r7, #0]
    6b46:	1dfb      	adds	r3, r7, #7
    6b48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6b4a:	1dfb      	adds	r3, r7, #7
    6b4c:	781b      	ldrb	r3, [r3, #0]
    6b4e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6b50:	683b      	ldr	r3, [r7, #0]
    6b52:	781b      	ldrb	r3, [r3, #0]
    6b54:	021b      	lsls	r3, r3, #8
    6b56:	001a      	movs	r2, r3
    6b58:	68fb      	ldr	r3, [r7, #12]
    6b5a:	4313      	orrs	r3, r2
    6b5c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6b5e:	1dfb      	adds	r3, r7, #7
    6b60:	781b      	ldrb	r3, [r3, #0]
    6b62:	0018      	movs	r0, r3
    6b64:	4b04      	ldr	r3, [pc, #16]	; (6b78 <system_gclk_chan_set_config+0x3c>)
    6b66:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6b68:	4b04      	ldr	r3, [pc, #16]	; (6b7c <system_gclk_chan_set_config+0x40>)
    6b6a:	68fa      	ldr	r2, [r7, #12]
    6b6c:	b292      	uxth	r2, r2
    6b6e:	805a      	strh	r2, [r3, #2]
}
    6b70:	46c0      	nop			; (mov r8, r8)
    6b72:	46bd      	mov	sp, r7
    6b74:	b004      	add	sp, #16
    6b76:	bd80      	pop	{r7, pc}
    6b78:	00006bc9 	.word	0x00006bc9
    6b7c:	40000c00 	.word	0x40000c00

00006b80 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6b80:	b580      	push	{r7, lr}
    6b82:	b082      	sub	sp, #8
    6b84:	af00      	add	r7, sp, #0
    6b86:	0002      	movs	r2, r0
    6b88:	1dfb      	adds	r3, r7, #7
    6b8a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6b8c:	4b0a      	ldr	r3, [pc, #40]	; (6bb8 <system_gclk_chan_enable+0x38>)
    6b8e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6b90:	4a0a      	ldr	r2, [pc, #40]	; (6bbc <system_gclk_chan_enable+0x3c>)
    6b92:	1dfb      	adds	r3, r7, #7
    6b94:	781b      	ldrb	r3, [r3, #0]
    6b96:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6b98:	4909      	ldr	r1, [pc, #36]	; (6bc0 <system_gclk_chan_enable+0x40>)
    6b9a:	4b09      	ldr	r3, [pc, #36]	; (6bc0 <system_gclk_chan_enable+0x40>)
    6b9c:	885b      	ldrh	r3, [r3, #2]
    6b9e:	b29b      	uxth	r3, r3
    6ba0:	2280      	movs	r2, #128	; 0x80
    6ba2:	01d2      	lsls	r2, r2, #7
    6ba4:	4313      	orrs	r3, r2
    6ba6:	b29b      	uxth	r3, r3
    6ba8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6baa:	4b06      	ldr	r3, [pc, #24]	; (6bc4 <system_gclk_chan_enable+0x44>)
    6bac:	4798      	blx	r3
}
    6bae:	46c0      	nop			; (mov r8, r8)
    6bb0:	46bd      	mov	sp, r7
    6bb2:	b002      	add	sp, #8
    6bb4:	bd80      	pop	{r7, pc}
    6bb6:	46c0      	nop			; (mov r8, r8)
    6bb8:	0000686d 	.word	0x0000686d
    6bbc:	40000c02 	.word	0x40000c02
    6bc0:	40000c00 	.word	0x40000c00
    6bc4:	00006881 	.word	0x00006881

00006bc8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	b084      	sub	sp, #16
    6bcc:	af00      	add	r7, sp, #0
    6bce:	0002      	movs	r2, r0
    6bd0:	1dfb      	adds	r3, r7, #7
    6bd2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6bd4:	4b1c      	ldr	r3, [pc, #112]	; (6c48 <system_gclk_chan_disable+0x80>)
    6bd6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6bd8:	4a1c      	ldr	r2, [pc, #112]	; (6c4c <system_gclk_chan_disable+0x84>)
    6bda:	1dfb      	adds	r3, r7, #7
    6bdc:	781b      	ldrb	r3, [r3, #0]
    6bde:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6be0:	4b1b      	ldr	r3, [pc, #108]	; (6c50 <system_gclk_chan_disable+0x88>)
    6be2:	885b      	ldrh	r3, [r3, #2]
    6be4:	051b      	lsls	r3, r3, #20
    6be6:	0f1b      	lsrs	r3, r3, #28
    6be8:	b2db      	uxtb	r3, r3
    6bea:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6bec:	4a18      	ldr	r2, [pc, #96]	; (6c50 <system_gclk_chan_disable+0x88>)
    6bee:	8853      	ldrh	r3, [r2, #2]
    6bf0:	4918      	ldr	r1, [pc, #96]	; (6c54 <system_gclk_chan_disable+0x8c>)
    6bf2:	400b      	ands	r3, r1
    6bf4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6bf6:	4a16      	ldr	r2, [pc, #88]	; (6c50 <system_gclk_chan_disable+0x88>)
    6bf8:	4b15      	ldr	r3, [pc, #84]	; (6c50 <system_gclk_chan_disable+0x88>)
    6bfa:	885b      	ldrh	r3, [r3, #2]
    6bfc:	b29b      	uxth	r3, r3
    6bfe:	4916      	ldr	r1, [pc, #88]	; (6c58 <system_gclk_chan_disable+0x90>)
    6c00:	400b      	ands	r3, r1
    6c02:	b29b      	uxth	r3, r3
    6c04:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	4b11      	ldr	r3, [pc, #68]	; (6c50 <system_gclk_chan_disable+0x88>)
    6c0a:	885b      	ldrh	r3, [r3, #2]
    6c0c:	b29b      	uxth	r3, r3
    6c0e:	001a      	movs	r2, r3
    6c10:	2380      	movs	r3, #128	; 0x80
    6c12:	01db      	lsls	r3, r3, #7
    6c14:	4013      	ands	r3, r2
    6c16:	d1f7      	bne.n	6c08 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6c18:	4a0d      	ldr	r2, [pc, #52]	; (6c50 <system_gclk_chan_disable+0x88>)
    6c1a:	68fb      	ldr	r3, [r7, #12]
    6c1c:	b2db      	uxtb	r3, r3
    6c1e:	1c19      	adds	r1, r3, #0
    6c20:	230f      	movs	r3, #15
    6c22:	400b      	ands	r3, r1
    6c24:	b2d9      	uxtb	r1, r3
    6c26:	8853      	ldrh	r3, [r2, #2]
    6c28:	1c08      	adds	r0, r1, #0
    6c2a:	210f      	movs	r1, #15
    6c2c:	4001      	ands	r1, r0
    6c2e:	0208      	lsls	r0, r1, #8
    6c30:	4908      	ldr	r1, [pc, #32]	; (6c54 <system_gclk_chan_disable+0x8c>)
    6c32:	400b      	ands	r3, r1
    6c34:	1c19      	adds	r1, r3, #0
    6c36:	1c03      	adds	r3, r0, #0
    6c38:	430b      	orrs	r3, r1
    6c3a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6c3c:	4b07      	ldr	r3, [pc, #28]	; (6c5c <system_gclk_chan_disable+0x94>)
    6c3e:	4798      	blx	r3
}
    6c40:	46c0      	nop			; (mov r8, r8)
    6c42:	46bd      	mov	sp, r7
    6c44:	b004      	add	sp, #16
    6c46:	bd80      	pop	{r7, pc}
    6c48:	0000686d 	.word	0x0000686d
    6c4c:	40000c02 	.word	0x40000c02
    6c50:	40000c00 	.word	0x40000c00
    6c54:	fffff0ff 	.word	0xfffff0ff
    6c58:	ffffbfff 	.word	0xffffbfff
    6c5c:	00006881 	.word	0x00006881

00006c60 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b084      	sub	sp, #16
    6c64:	af00      	add	r7, sp, #0
    6c66:	0002      	movs	r2, r0
    6c68:	1dfb      	adds	r3, r7, #7
    6c6a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6c6c:	4b0d      	ldr	r3, [pc, #52]	; (6ca4 <system_gclk_chan_get_hz+0x44>)
    6c6e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6c70:	4a0d      	ldr	r2, [pc, #52]	; (6ca8 <system_gclk_chan_get_hz+0x48>)
    6c72:	1dfb      	adds	r3, r7, #7
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6c78:	4b0c      	ldr	r3, [pc, #48]	; (6cac <system_gclk_chan_get_hz+0x4c>)
    6c7a:	885b      	ldrh	r3, [r3, #2]
    6c7c:	051b      	lsls	r3, r3, #20
    6c7e:	0f1b      	lsrs	r3, r3, #28
    6c80:	b2da      	uxtb	r2, r3
    6c82:	230f      	movs	r3, #15
    6c84:	18fb      	adds	r3, r7, r3
    6c86:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6c88:	4b09      	ldr	r3, [pc, #36]	; (6cb0 <system_gclk_chan_get_hz+0x50>)
    6c8a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6c8c:	230f      	movs	r3, #15
    6c8e:	18fb      	adds	r3, r7, r3
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	0018      	movs	r0, r3
    6c94:	4b07      	ldr	r3, [pc, #28]	; (6cb4 <system_gclk_chan_get_hz+0x54>)
    6c96:	4798      	blx	r3
    6c98:	0003      	movs	r3, r0
}
    6c9a:	0018      	movs	r0, r3
    6c9c:	46bd      	mov	sp, r7
    6c9e:	b004      	add	sp, #16
    6ca0:	bd80      	pop	{r7, pc}
    6ca2:	46c0      	nop			; (mov r8, r8)
    6ca4:	0000686d 	.word	0x0000686d
    6ca8:	40000c02 	.word	0x40000c02
    6cac:	40000c00 	.word	0x40000c00
    6cb0:	00006881 	.word	0x00006881
    6cb4:	00006a65 	.word	0x00006a65

00006cb8 <system_pinmux_get_group_from_gpio_pin>:
{
    6cb8:	b580      	push	{r7, lr}
    6cba:	b084      	sub	sp, #16
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	0002      	movs	r2, r0
    6cc0:	1dfb      	adds	r3, r7, #7
    6cc2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6cc4:	230f      	movs	r3, #15
    6cc6:	18fb      	adds	r3, r7, r3
    6cc8:	1dfa      	adds	r2, r7, #7
    6cca:	7812      	ldrb	r2, [r2, #0]
    6ccc:	09d2      	lsrs	r2, r2, #7
    6cce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6cd0:	230e      	movs	r3, #14
    6cd2:	18fb      	adds	r3, r7, r3
    6cd4:	1dfa      	adds	r2, r7, #7
    6cd6:	7812      	ldrb	r2, [r2, #0]
    6cd8:	0952      	lsrs	r2, r2, #5
    6cda:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6cdc:	4b0d      	ldr	r3, [pc, #52]	; (6d14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6cde:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6ce0:	230f      	movs	r3, #15
    6ce2:	18fb      	adds	r3, r7, r3
    6ce4:	781b      	ldrb	r3, [r3, #0]
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d10f      	bne.n	6d0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6cea:	230f      	movs	r3, #15
    6cec:	18fb      	adds	r3, r7, r3
    6cee:	781b      	ldrb	r3, [r3, #0]
    6cf0:	009b      	lsls	r3, r3, #2
    6cf2:	2210      	movs	r2, #16
    6cf4:	4694      	mov	ip, r2
    6cf6:	44bc      	add	ip, r7
    6cf8:	4463      	add	r3, ip
    6cfa:	3b08      	subs	r3, #8
    6cfc:	681a      	ldr	r2, [r3, #0]
    6cfe:	230e      	movs	r3, #14
    6d00:	18fb      	adds	r3, r7, r3
    6d02:	781b      	ldrb	r3, [r3, #0]
    6d04:	01db      	lsls	r3, r3, #7
    6d06:	18d3      	adds	r3, r2, r3
    6d08:	e000      	b.n	6d0c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6d0a:	2300      	movs	r3, #0
}
    6d0c:	0018      	movs	r0, r3
    6d0e:	46bd      	mov	sp, r7
    6d10:	b004      	add	sp, #16
    6d12:	bd80      	pop	{r7, pc}
    6d14:	41004400 	.word	0x41004400

00006d18 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6d18:	b580      	push	{r7, lr}
    6d1a:	b088      	sub	sp, #32
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	60f8      	str	r0, [r7, #12]
    6d20:	60b9      	str	r1, [r7, #8]
    6d22:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6d24:	2300      	movs	r3, #0
    6d26:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	78db      	ldrb	r3, [r3, #3]
    6d2c:	2201      	movs	r2, #1
    6d2e:	4053      	eors	r3, r2
    6d30:	b2db      	uxtb	r3, r3
    6d32:	2b00      	cmp	r3, #0
    6d34:	d035      	beq.n	6da2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	781b      	ldrb	r3, [r3, #0]
    6d3a:	2b80      	cmp	r3, #128	; 0x80
    6d3c:	d00b      	beq.n	6d56 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6d3e:	69fb      	ldr	r3, [r7, #28]
    6d40:	2280      	movs	r2, #128	; 0x80
    6d42:	0252      	lsls	r2, r2, #9
    6d44:	4313      	orrs	r3, r2
    6d46:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	781b      	ldrb	r3, [r3, #0]
    6d4c:	061b      	lsls	r3, r3, #24
    6d4e:	001a      	movs	r2, r3
    6d50:	69fb      	ldr	r3, [r7, #28]
    6d52:	4313      	orrs	r3, r2
    6d54:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	785b      	ldrb	r3, [r3, #1]
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d003      	beq.n	6d66 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6d5e:	687b      	ldr	r3, [r7, #4]
    6d60:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6d62:	2b02      	cmp	r3, #2
    6d64:	d110      	bne.n	6d88 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6d66:	69fb      	ldr	r3, [r7, #28]
    6d68:	2280      	movs	r2, #128	; 0x80
    6d6a:	0292      	lsls	r2, r2, #10
    6d6c:	4313      	orrs	r3, r2
    6d6e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	789b      	ldrb	r3, [r3, #2]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d004      	beq.n	6d82 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6d78:	69fb      	ldr	r3, [r7, #28]
    6d7a:	2280      	movs	r2, #128	; 0x80
    6d7c:	02d2      	lsls	r2, r2, #11
    6d7e:	4313      	orrs	r3, r2
    6d80:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6d82:	68fb      	ldr	r3, [r7, #12]
    6d84:	68ba      	ldr	r2, [r7, #8]
    6d86:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	785b      	ldrb	r3, [r3, #1]
    6d8c:	2b01      	cmp	r3, #1
    6d8e:	d003      	beq.n	6d98 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d94:	2b02      	cmp	r3, #2
    6d96:	d107      	bne.n	6da8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6d98:	69fb      	ldr	r3, [r7, #28]
    6d9a:	4a22      	ldr	r2, [pc, #136]	; (6e24 <_system_pinmux_config+0x10c>)
    6d9c:	4013      	ands	r3, r2
    6d9e:	61fb      	str	r3, [r7, #28]
    6da0:	e002      	b.n	6da8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6da2:	68fb      	ldr	r3, [r7, #12]
    6da4:	68ba      	ldr	r2, [r7, #8]
    6da6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6da8:	68bb      	ldr	r3, [r7, #8]
    6daa:	041b      	lsls	r3, r3, #16
    6dac:	0c1b      	lsrs	r3, r3, #16
    6dae:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6db0:	68bb      	ldr	r3, [r7, #8]
    6db2:	0c1b      	lsrs	r3, r3, #16
    6db4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6db6:	69ba      	ldr	r2, [r7, #24]
    6db8:	69fb      	ldr	r3, [r7, #28]
    6dba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6dbc:	22a0      	movs	r2, #160	; 0xa0
    6dbe:	05d2      	lsls	r2, r2, #23
    6dc0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6dc2:	68fb      	ldr	r3, [r7, #12]
    6dc4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6dc6:	697a      	ldr	r2, [r7, #20]
    6dc8:	69fb      	ldr	r3, [r7, #28]
    6dca:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6dcc:	22d0      	movs	r2, #208	; 0xd0
    6dce:	0612      	lsls	r2, r2, #24
    6dd0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	78db      	ldrb	r3, [r3, #3]
    6dda:	2201      	movs	r2, #1
    6ddc:	4053      	eors	r3, r2
    6dde:	b2db      	uxtb	r3, r3
    6de0:	2b00      	cmp	r3, #0
    6de2:	d01a      	beq.n	6e1a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6de4:	69fa      	ldr	r2, [r7, #28]
    6de6:	2380      	movs	r3, #128	; 0x80
    6de8:	02db      	lsls	r3, r3, #11
    6dea:	4013      	ands	r3, r2
    6dec:	d00a      	beq.n	6e04 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	789b      	ldrb	r3, [r3, #2]
    6df2:	2b01      	cmp	r3, #1
    6df4:	d103      	bne.n	6dfe <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6df6:	68fb      	ldr	r3, [r7, #12]
    6df8:	68ba      	ldr	r2, [r7, #8]
    6dfa:	619a      	str	r2, [r3, #24]
    6dfc:	e002      	b.n	6e04 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6dfe:	68fb      	ldr	r3, [r7, #12]
    6e00:	68ba      	ldr	r2, [r7, #8]
    6e02:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	785b      	ldrb	r3, [r3, #1]
    6e08:	2b01      	cmp	r3, #1
    6e0a:	d003      	beq.n	6e14 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e10:	2b02      	cmp	r3, #2
    6e12:	d102      	bne.n	6e1a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6e14:	68fb      	ldr	r3, [r7, #12]
    6e16:	68ba      	ldr	r2, [r7, #8]
    6e18:	609a      	str	r2, [r3, #8]
		}
	}
}
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	46bd      	mov	sp, r7
    6e1e:	b008      	add	sp, #32
    6e20:	bd80      	pop	{r7, pc}
    6e22:	46c0      	nop			; (mov r8, r8)
    6e24:	fffbffff 	.word	0xfffbffff

00006e28 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6e28:	b580      	push	{r7, lr}
    6e2a:	b084      	sub	sp, #16
    6e2c:	af00      	add	r7, sp, #0
    6e2e:	0002      	movs	r2, r0
    6e30:	6039      	str	r1, [r7, #0]
    6e32:	1dfb      	adds	r3, r7, #7
    6e34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6e36:	1dfb      	adds	r3, r7, #7
    6e38:	781b      	ldrb	r3, [r3, #0]
    6e3a:	0018      	movs	r0, r3
    6e3c:	4b0a      	ldr	r3, [pc, #40]	; (6e68 <system_pinmux_pin_set_config+0x40>)
    6e3e:	4798      	blx	r3
    6e40:	0003      	movs	r3, r0
    6e42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6e44:	1dfb      	adds	r3, r7, #7
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	221f      	movs	r2, #31
    6e4a:	4013      	ands	r3, r2
    6e4c:	2201      	movs	r2, #1
    6e4e:	409a      	lsls	r2, r3
    6e50:	0013      	movs	r3, r2
    6e52:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6e54:	683a      	ldr	r2, [r7, #0]
    6e56:	68b9      	ldr	r1, [r7, #8]
    6e58:	68fb      	ldr	r3, [r7, #12]
    6e5a:	0018      	movs	r0, r3
    6e5c:	4b03      	ldr	r3, [pc, #12]	; (6e6c <system_pinmux_pin_set_config+0x44>)
    6e5e:	4798      	blx	r3
}
    6e60:	46c0      	nop			; (mov r8, r8)
    6e62:	46bd      	mov	sp, r7
    6e64:	b004      	add	sp, #16
    6e66:	bd80      	pop	{r7, pc}
    6e68:	00006cb9 	.word	0x00006cb9
    6e6c:	00006d19 	.word	0x00006d19

00006e70 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6e70:	b580      	push	{r7, lr}
    6e72:	af00      	add	r7, sp, #0
	return;
    6e74:	46c0      	nop			; (mov r8, r8)
}
    6e76:	46bd      	mov	sp, r7
    6e78:	bd80      	pop	{r7, pc}
	...

00006e7c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6e7c:	b580      	push	{r7, lr}
    6e7e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6e80:	4b06      	ldr	r3, [pc, #24]	; (6e9c <system_init+0x20>)
    6e82:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6e84:	4b06      	ldr	r3, [pc, #24]	; (6ea0 <system_init+0x24>)
    6e86:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6e88:	4b06      	ldr	r3, [pc, #24]	; (6ea4 <system_init+0x28>)
    6e8a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6e8c:	4b06      	ldr	r3, [pc, #24]	; (6ea8 <system_init+0x2c>)
    6e8e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6e90:	4b06      	ldr	r3, [pc, #24]	; (6eac <system_init+0x30>)
    6e92:	4798      	blx	r3
}
    6e94:	46c0      	nop			; (mov r8, r8)
    6e96:	46bd      	mov	sp, r7
    6e98:	bd80      	pop	{r7, pc}
    6e9a:	46c0      	nop			; (mov r8, r8)
    6e9c:	000065a1 	.word	0x000065a1
    6ea0:	000002f9 	.word	0x000002f9
    6ea4:	00006e71 	.word	0x00006e71
    6ea8:	00006e71 	.word	0x00006e71
    6eac:	00006e71 	.word	0x00006e71

00006eb0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b082      	sub	sp, #8
    6eb4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6eb6:	4b2f      	ldr	r3, [pc, #188]	; (6f74 <Reset_Handler+0xc4>)
    6eb8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6eba:	4b2f      	ldr	r3, [pc, #188]	; (6f78 <Reset_Handler+0xc8>)
    6ebc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6ebe:	687a      	ldr	r2, [r7, #4]
    6ec0:	683b      	ldr	r3, [r7, #0]
    6ec2:	429a      	cmp	r2, r3
    6ec4:	d00c      	beq.n	6ee0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6ec6:	e007      	b.n	6ed8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6ec8:	683b      	ldr	r3, [r7, #0]
    6eca:	1d1a      	adds	r2, r3, #4
    6ecc:	603a      	str	r2, [r7, #0]
    6ece:	687a      	ldr	r2, [r7, #4]
    6ed0:	1d11      	adds	r1, r2, #4
    6ed2:	6079      	str	r1, [r7, #4]
    6ed4:	6812      	ldr	r2, [r2, #0]
    6ed6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6ed8:	683a      	ldr	r2, [r7, #0]
    6eda:	4b28      	ldr	r3, [pc, #160]	; (6f7c <Reset_Handler+0xcc>)
    6edc:	429a      	cmp	r2, r3
    6ede:	d3f3      	bcc.n	6ec8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6ee0:	4b27      	ldr	r3, [pc, #156]	; (6f80 <Reset_Handler+0xd0>)
    6ee2:	603b      	str	r3, [r7, #0]
    6ee4:	e004      	b.n	6ef0 <Reset_Handler+0x40>
                *pDest++ = 0;
    6ee6:	683b      	ldr	r3, [r7, #0]
    6ee8:	1d1a      	adds	r2, r3, #4
    6eea:	603a      	str	r2, [r7, #0]
    6eec:	2200      	movs	r2, #0
    6eee:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6ef0:	683a      	ldr	r2, [r7, #0]
    6ef2:	4b24      	ldr	r3, [pc, #144]	; (6f84 <Reset_Handler+0xd4>)
    6ef4:	429a      	cmp	r2, r3
    6ef6:	d3f6      	bcc.n	6ee6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6ef8:	4b23      	ldr	r3, [pc, #140]	; (6f88 <Reset_Handler+0xd8>)
    6efa:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6efc:	4b23      	ldr	r3, [pc, #140]	; (6f8c <Reset_Handler+0xdc>)
    6efe:	687a      	ldr	r2, [r7, #4]
    6f00:	21ff      	movs	r1, #255	; 0xff
    6f02:	438a      	bics	r2, r1
    6f04:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6f06:	4a22      	ldr	r2, [pc, #136]	; (6f90 <Reset_Handler+0xe0>)
    6f08:	2390      	movs	r3, #144	; 0x90
    6f0a:	005b      	lsls	r3, r3, #1
    6f0c:	2102      	movs	r1, #2
    6f0e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6f10:	4a20      	ldr	r2, [pc, #128]	; (6f94 <Reset_Handler+0xe4>)
    6f12:	78d3      	ldrb	r3, [r2, #3]
    6f14:	2103      	movs	r1, #3
    6f16:	438b      	bics	r3, r1
    6f18:	1c19      	adds	r1, r3, #0
    6f1a:	2302      	movs	r3, #2
    6f1c:	430b      	orrs	r3, r1
    6f1e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6f20:	4a1c      	ldr	r2, [pc, #112]	; (6f94 <Reset_Handler+0xe4>)
    6f22:	78d3      	ldrb	r3, [r2, #3]
    6f24:	210c      	movs	r1, #12
    6f26:	438b      	bics	r3, r1
    6f28:	1c19      	adds	r1, r3, #0
    6f2a:	2308      	movs	r3, #8
    6f2c:	430b      	orrs	r3, r1
    6f2e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6f30:	4a19      	ldr	r2, [pc, #100]	; (6f98 <Reset_Handler+0xe8>)
    6f32:	7b93      	ldrb	r3, [r2, #14]
    6f34:	2130      	movs	r1, #48	; 0x30
    6f36:	438b      	bics	r3, r1
    6f38:	1c19      	adds	r1, r3, #0
    6f3a:	2320      	movs	r3, #32
    6f3c:	430b      	orrs	r3, r1
    6f3e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6f40:	4a15      	ldr	r2, [pc, #84]	; (6f98 <Reset_Handler+0xe8>)
    6f42:	7b93      	ldrb	r3, [r2, #14]
    6f44:	210c      	movs	r1, #12
    6f46:	438b      	bics	r3, r1
    6f48:	1c19      	adds	r1, r3, #0
    6f4a:	2308      	movs	r3, #8
    6f4c:	430b      	orrs	r3, r1
    6f4e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6f50:	4a11      	ldr	r2, [pc, #68]	; (6f98 <Reset_Handler+0xe8>)
    6f52:	7b93      	ldrb	r3, [r2, #14]
    6f54:	2103      	movs	r1, #3
    6f56:	438b      	bics	r3, r1
    6f58:	1c19      	adds	r1, r3, #0
    6f5a:	2302      	movs	r3, #2
    6f5c:	430b      	orrs	r3, r1
    6f5e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6f60:	4a0e      	ldr	r2, [pc, #56]	; (6f9c <Reset_Handler+0xec>)
    6f62:	6853      	ldr	r3, [r2, #4]
    6f64:	2180      	movs	r1, #128	; 0x80
    6f66:	430b      	orrs	r3, r1
    6f68:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6f6a:	4b0d      	ldr	r3, [pc, #52]	; (6fa0 <Reset_Handler+0xf0>)
    6f6c:	4798      	blx	r3

        /* Branch to main function */
        main();
    6f6e:	4b0d      	ldr	r3, [pc, #52]	; (6fa4 <Reset_Handler+0xf4>)
    6f70:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6f72:	e7fe      	b.n	6f72 <Reset_Handler+0xc2>
    6f74:	0000d46c 	.word	0x0000d46c
    6f78:	20000000 	.word	0x20000000
    6f7c:	200000bc 	.word	0x200000bc
    6f80:	200000bc 	.word	0x200000bc
    6f84:	20000d30 	.word	0x20000d30
    6f88:	00000000 	.word	0x00000000
    6f8c:	e000ed00 	.word	0xe000ed00
    6f90:	41007000 	.word	0x41007000
    6f94:	41005000 	.word	0x41005000
    6f98:	41004800 	.word	0x41004800
    6f9c:	41004000 	.word	0x41004000
    6fa0:	0000b8fd 	.word	0x0000b8fd
    6fa4:	0000b011 	.word	0x0000b011

00006fa8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	af00      	add	r7, sp, #0
        while (1) {
    6fac:	e7fe      	b.n	6fac <Dummy_Handler+0x4>
	...

00006fb0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b086      	sub	sp, #24
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	60f8      	str	r0, [r7, #12]
    6fb8:	60b9      	str	r1, [r7, #8]
    6fba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6fbc:	2300      	movs	r3, #0
    6fbe:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6fc0:	68fb      	ldr	r3, [r7, #12]
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d012      	beq.n	6fec <_read+0x3c>
		return -1;
    6fc6:	2301      	movs	r3, #1
    6fc8:	425b      	negs	r3, r3
    6fca:	e013      	b.n	6ff4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6fcc:	4b0b      	ldr	r3, [pc, #44]	; (6ffc <_read+0x4c>)
    6fce:	681a      	ldr	r2, [r3, #0]
    6fd0:	4b0b      	ldr	r3, [pc, #44]	; (7000 <_read+0x50>)
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	68b9      	ldr	r1, [r7, #8]
    6fd6:	0018      	movs	r0, r3
    6fd8:	4790      	blx	r2
		ptr++;
    6fda:	68bb      	ldr	r3, [r7, #8]
    6fdc:	3301      	adds	r3, #1
    6fde:	60bb      	str	r3, [r7, #8]
		nChars++;
    6fe0:	697b      	ldr	r3, [r7, #20]
    6fe2:	3301      	adds	r3, #1
    6fe4:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	3b01      	subs	r3, #1
    6fea:	607b      	str	r3, [r7, #4]
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	2b00      	cmp	r3, #0
    6ff0:	dcec      	bgt.n	6fcc <_read+0x1c>
	}
	return nChars;
    6ff2:	697b      	ldr	r3, [r7, #20]
}
    6ff4:	0018      	movs	r0, r3
    6ff6:	46bd      	mov	sp, r7
    6ff8:	b006      	add	sp, #24
    6ffa:	bd80      	pop	{r7, pc}
    6ffc:	20000a18 	.word	0x20000a18
    7000:	20000a20 	.word	0x20000a20

00007004 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7004:	b580      	push	{r7, lr}
    7006:	b086      	sub	sp, #24
    7008:	af00      	add	r7, sp, #0
    700a:	60f8      	str	r0, [r7, #12]
    700c:	60b9      	str	r1, [r7, #8]
    700e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7010:	2300      	movs	r3, #0
    7012:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    7014:	68fb      	ldr	r3, [r7, #12]
    7016:	2b01      	cmp	r3, #1
    7018:	d01d      	beq.n	7056 <_write+0x52>
    701a:	68fb      	ldr	r3, [r7, #12]
    701c:	2b02      	cmp	r3, #2
    701e:	d01a      	beq.n	7056 <_write+0x52>
    7020:	68fb      	ldr	r3, [r7, #12]
    7022:	2b03      	cmp	r3, #3
    7024:	d017      	beq.n	7056 <_write+0x52>
		return -1;
    7026:	2301      	movs	r3, #1
    7028:	425b      	negs	r3, r3
    702a:	e018      	b.n	705e <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    702c:	4b0e      	ldr	r3, [pc, #56]	; (7068 <_write+0x64>)
    702e:	681a      	ldr	r2, [r3, #0]
    7030:	4b0e      	ldr	r3, [pc, #56]	; (706c <_write+0x68>)
    7032:	6818      	ldr	r0, [r3, #0]
    7034:	68bb      	ldr	r3, [r7, #8]
    7036:	1c59      	adds	r1, r3, #1
    7038:	60b9      	str	r1, [r7, #8]
    703a:	781b      	ldrb	r3, [r3, #0]
    703c:	0019      	movs	r1, r3
    703e:	4790      	blx	r2
    7040:	1e03      	subs	r3, r0, #0
    7042:	da02      	bge.n	704a <_write+0x46>
			return -1;
    7044:	2301      	movs	r3, #1
    7046:	425b      	negs	r3, r3
    7048:	e009      	b.n	705e <_write+0x5a>
		}
		++nChars;
    704a:	697b      	ldr	r3, [r7, #20]
    704c:	3301      	adds	r3, #1
    704e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	3b01      	subs	r3, #1
    7054:	607b      	str	r3, [r7, #4]
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	2b00      	cmp	r3, #0
    705a:	d1e7      	bne.n	702c <_write+0x28>
	}
	return nChars;
    705c:	697b      	ldr	r3, [r7, #20]
}
    705e:	0018      	movs	r0, r3
    7060:	46bd      	mov	sp, r7
    7062:	b006      	add	sp, #24
    7064:	bd80      	pop	{r7, pc}
    7066:	46c0      	nop			; (mov r8, r8)
    7068:	20000a1c 	.word	0x20000a1c
    706c:	20000a20 	.word	0x20000a20

00007070 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7070:	b580      	push	{r7, lr}
    7072:	b084      	sub	sp, #16
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7078:	4b0a      	ldr	r3, [pc, #40]	; (70a4 <_sbrk+0x34>)
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	2b00      	cmp	r3, #0
    707e:	d102      	bne.n	7086 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    7080:	4b08      	ldr	r3, [pc, #32]	; (70a4 <_sbrk+0x34>)
    7082:	4a09      	ldr	r2, [pc, #36]	; (70a8 <_sbrk+0x38>)
    7084:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    7086:	4b07      	ldr	r3, [pc, #28]	; (70a4 <_sbrk+0x34>)
    7088:	681b      	ldr	r3, [r3, #0]
    708a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    708c:	4b05      	ldr	r3, [pc, #20]	; (70a4 <_sbrk+0x34>)
    708e:	681a      	ldr	r2, [r3, #0]
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	18d2      	adds	r2, r2, r3
    7094:	4b03      	ldr	r3, [pc, #12]	; (70a4 <_sbrk+0x34>)
    7096:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    7098:	68fb      	ldr	r3, [r7, #12]
}
    709a:	0018      	movs	r0, r3
    709c:	46bd      	mov	sp, r7
    709e:	b004      	add	sp, #16
    70a0:	bd80      	pop	{r7, pc}
    70a2:	46c0      	nop			; (mov r8, r8)
    70a4:	200001a0 	.word	0x200001a0
    70a8:	20002d30 	.word	0x20002d30

000070ac <_close>:
{
	return -1;
}

extern int _close(int file)
{
    70ac:	b580      	push	{r7, lr}
    70ae:	b082      	sub	sp, #8
    70b0:	af00      	add	r7, sp, #0
    70b2:	6078      	str	r0, [r7, #4]
	return -1;
    70b4:	2301      	movs	r3, #1
    70b6:	425b      	negs	r3, r3
}
    70b8:	0018      	movs	r0, r3
    70ba:	46bd      	mov	sp, r7
    70bc:	b002      	add	sp, #8
    70be:	bd80      	pop	{r7, pc}

000070c0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b082      	sub	sp, #8
    70c4:	af00      	add	r7, sp, #0
    70c6:	6078      	str	r0, [r7, #4]
    70c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    70ca:	683b      	ldr	r3, [r7, #0]
    70cc:	2280      	movs	r2, #128	; 0x80
    70ce:	0192      	lsls	r2, r2, #6
    70d0:	605a      	str	r2, [r3, #4]

	return 0;
    70d2:	2300      	movs	r3, #0
}
    70d4:	0018      	movs	r0, r3
    70d6:	46bd      	mov	sp, r7
    70d8:	b002      	add	sp, #8
    70da:	bd80      	pop	{r7, pc}

000070dc <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    70dc:	b580      	push	{r7, lr}
    70de:	b084      	sub	sp, #16
    70e0:	af00      	add	r7, sp, #0
    70e2:	60f8      	str	r0, [r7, #12]
    70e4:	60b9      	str	r1, [r7, #8]
    70e6:	607a      	str	r2, [r7, #4]
	return 0;
    70e8:	2300      	movs	r3, #0
}
    70ea:	0018      	movs	r0, r3
    70ec:	46bd      	mov	sp, r7
    70ee:	b004      	add	sp, #16
    70f0:	bd80      	pop	{r7, pc}

000070f2 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    70f2:	b580      	push	{r7, lr}
    70f4:	b082      	sub	sp, #8
    70f6:	af00      	add	r7, sp, #0
    70f8:	6078      	str	r0, [r7, #4]
	time->second = 0;
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	2200      	movs	r2, #0
    70fe:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	2200      	movs	r2, #0
    7104:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	2200      	movs	r2, #0
    710a:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	2200      	movs	r2, #0
    7110:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	2201      	movs	r2, #1
    7116:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	2201      	movs	r2, #1
    711c:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    711e:	687b      	ldr	r3, [r7, #4]
    7120:	22fa      	movs	r2, #250	; 0xfa
    7122:	00d2      	lsls	r2, r2, #3
    7124:	80da      	strh	r2, [r3, #6]
}
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	46bd      	mov	sp, r7
    712a:	b002      	add	sp, #8
    712c:	bd80      	pop	{r7, pc}
	...

00007130 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    7130:	b580      	push	{r7, lr}
    7132:	b086      	sub	sp, #24
    7134:	af00      	add	r7, sp, #0
    7136:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    7138:	230c      	movs	r3, #12
    713a:	18fb      	adds	r3, r7, r3
    713c:	0018      	movs	r0, r3
    713e:	4b23      	ldr	r3, [pc, #140]	; (71cc <rtc_calendar_get_config_defaults+0x9c>)
    7140:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    7142:	687b      	ldr	r3, [r7, #4]
    7144:	22a0      	movs	r2, #160	; 0xa0
    7146:	0112      	lsls	r2, r2, #4
    7148:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	2200      	movs	r2, #0
    714e:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	2200      	movs	r2, #0
    7154:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	2200      	movs	r2, #0
    715a:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	22fa      	movs	r2, #250	; 0xfa
    7160:	00d2      	lsls	r2, r2, #3
    7162:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    7164:	2317      	movs	r3, #23
    7166:	18fb      	adds	r3, r7, r3
    7168:	2200      	movs	r2, #0
    716a:	701a      	strb	r2, [r3, #0]
    716c:	e025      	b.n	71ba <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    716e:	2317      	movs	r3, #23
    7170:	18fb      	adds	r3, r7, r3
    7172:	781a      	ldrb	r2, [r3, #0]
    7174:	6879      	ldr	r1, [r7, #4]
    7176:	2008      	movs	r0, #8
    7178:	0013      	movs	r3, r2
    717a:	009b      	lsls	r3, r3, #2
    717c:	189b      	adds	r3, r3, r2
    717e:	005b      	lsls	r3, r3, #1
    7180:	18cb      	adds	r3, r1, r3
    7182:	181a      	adds	r2, r3, r0
    7184:	230c      	movs	r3, #12
    7186:	18fb      	adds	r3, r7, r3
    7188:	0010      	movs	r0, r2
    718a:	0019      	movs	r1, r3
    718c:	2308      	movs	r3, #8
    718e:	001a      	movs	r2, r3
    7190:	4b0f      	ldr	r3, [pc, #60]	; (71d0 <rtc_calendar_get_config_defaults+0xa0>)
    7192:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7194:	2317      	movs	r3, #23
    7196:	18fb      	adds	r3, r7, r3
    7198:	781a      	ldrb	r2, [r3, #0]
    719a:	6879      	ldr	r1, [r7, #4]
    719c:	0013      	movs	r3, r2
    719e:	009b      	lsls	r3, r3, #2
    71a0:	189b      	adds	r3, r3, r2
    71a2:	005b      	lsls	r3, r3, #1
    71a4:	18cb      	adds	r3, r1, r3
    71a6:	3310      	adds	r3, #16
    71a8:	2206      	movs	r2, #6
    71aa:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    71ac:	2317      	movs	r3, #23
    71ae:	18fb      	adds	r3, r7, r3
    71b0:	781a      	ldrb	r2, [r3, #0]
    71b2:	2317      	movs	r3, #23
    71b4:	18fb      	adds	r3, r7, r3
    71b6:	3201      	adds	r2, #1
    71b8:	701a      	strb	r2, [r3, #0]
    71ba:	2317      	movs	r3, #23
    71bc:	18fb      	adds	r3, r7, r3
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	2b00      	cmp	r3, #0
    71c2:	d0d4      	beq.n	716e <rtc_calendar_get_config_defaults+0x3e>
	}
}
    71c4:	46c0      	nop			; (mov r8, r8)
    71c6:	46bd      	mov	sp, r7
    71c8:	b006      	add	sp, #24
    71ca:	bd80      	pop	{r7, pc}
    71cc:	000070f3 	.word	0x000070f3
    71d0:	0000b959 	.word	0x0000b959

000071d4 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    71d4:	b580      	push	{r7, lr}
    71d6:	b088      	sub	sp, #32
    71d8:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    71da:	230c      	movs	r3, #12
    71dc:	18fb      	adds	r3, r7, r3
    71de:	0018      	movs	r0, r3
    71e0:	4b1a      	ldr	r3, [pc, #104]	; (724c <configure_rtc_calendar+0x78>)
    71e2:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    71e4:	1d3b      	adds	r3, r7, #4
    71e6:	0018      	movs	r0, r3
    71e8:	4b19      	ldr	r3, [pc, #100]	; (7250 <configure_rtc_calendar+0x7c>)
    71ea:	4798      	blx	r3
	init_time.year   = 2014;
    71ec:	1d3b      	adds	r3, r7, #4
    71ee:	4a19      	ldr	r2, [pc, #100]	; (7254 <configure_rtc_calendar+0x80>)
    71f0:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    71f2:	1d3b      	adds	r3, r7, #4
    71f4:	2201      	movs	r2, #1
    71f6:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    71f8:	1d3b      	adds	r3, r7, #4
    71fa:	2201      	movs	r2, #1
    71fc:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    71fe:	1d3b      	adds	r3, r7, #4
    7200:	2200      	movs	r2, #0
    7202:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    7204:	1d3b      	adds	r3, r7, #4
    7206:	2200      	movs	r2, #0
    7208:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    720a:	1d3b      	adds	r3, r7, #4
    720c:	2204      	movs	r2, #4
    720e:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    7210:	230c      	movs	r3, #12
    7212:	18fb      	adds	r3, r7, r3
    7214:	2201      	movs	r2, #1
    7216:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    7218:	230c      	movs	r3, #12
    721a:	18fb      	adds	r3, r7, r3
    721c:	1d3a      	adds	r2, r7, #4
    721e:	3308      	adds	r3, #8
    7220:	ca03      	ldmia	r2!, {r0, r1}
    7222:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7224:	230c      	movs	r3, #12
    7226:	18fb      	adds	r3, r7, r3
    7228:	2206      	movs	r2, #6
    722a:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    722c:	230c      	movs	r3, #12
    722e:	18fa      	adds	r2, r7, r3
    7230:	4909      	ldr	r1, [pc, #36]	; (7258 <configure_rtc_calendar+0x84>)
    7232:	4b0a      	ldr	r3, [pc, #40]	; (725c <configure_rtc_calendar+0x88>)
    7234:	0018      	movs	r0, r3
    7236:	4b0a      	ldr	r3, [pc, #40]	; (7260 <configure_rtc_calendar+0x8c>)
    7238:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    723a:	4b08      	ldr	r3, [pc, #32]	; (725c <configure_rtc_calendar+0x88>)
    723c:	0018      	movs	r0, r3
    723e:	4b09      	ldr	r3, [pc, #36]	; (7264 <configure_rtc_calendar+0x90>)
    7240:	4798      	blx	r3
}
    7242:	46c0      	nop			; (mov r8, r8)
    7244:	46bd      	mov	sp, r7
    7246:	b008      	add	sp, #32
    7248:	bd80      	pop	{r7, pc}
    724a:	46c0      	nop			; (mov r8, r8)
    724c:	00007131 	.word	0x00007131
    7250:	000070f3 	.word	0x000070f3
    7254:	000007de 	.word	0x000007de
    7258:	40001400 	.word	0x40001400
    725c:	20000a24 	.word	0x20000a24
    7260:	00003919 	.word	0x00003919
    7264:	00003669 	.word	0x00003669

00007268 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    7268:	b590      	push	{r4, r7, lr}
    726a:	b085      	sub	sp, #20
    726c:	af00      	add	r7, sp, #0
    726e:	0002      	movs	r2, r0
    7270:	1dfb      	adds	r3, r7, #7
    7272:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    7274:	4b1a      	ldr	r3, [pc, #104]	; (72e0 <disk_initialize+0x78>)
    7276:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    7278:	1dfb      	adds	r3, r7, #7
    727a:	781b      	ldrb	r3, [r3, #0]
    727c:	2b01      	cmp	r3, #1
    727e:	d901      	bls.n	7284 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    7280:	2301      	movs	r3, #1
    7282:	e029      	b.n	72d8 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    7284:	2300      	movs	r3, #0
    7286:	60fb      	str	r3, [r7, #12]
    7288:	e010      	b.n	72ac <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    728a:	230b      	movs	r3, #11
    728c:	18fc      	adds	r4, r7, r3
    728e:	1dfb      	adds	r3, r7, #7
    7290:	781b      	ldrb	r3, [r3, #0]
    7292:	0018      	movs	r0, r3
    7294:	4b13      	ldr	r3, [pc, #76]	; (72e4 <disk_initialize+0x7c>)
    7296:	4798      	blx	r3
    7298:	0003      	movs	r3, r0
    729a:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    729c:	230b      	movs	r3, #11
    729e:	18fb      	adds	r3, r7, r3
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	2b03      	cmp	r3, #3
    72a4:	d106      	bne.n	72b4 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    72a6:	68fb      	ldr	r3, [r7, #12]
    72a8:	3301      	adds	r3, #1
    72aa:	60fb      	str	r3, [r7, #12]
    72ac:	68fb      	ldr	r3, [r7, #12]
    72ae:	2b01      	cmp	r3, #1
    72b0:	ddeb      	ble.n	728a <disk_initialize+0x22>
    72b2:	e000      	b.n	72b6 <disk_initialize+0x4e>
			break;
    72b4:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    72b6:	230b      	movs	r3, #11
    72b8:	18fb      	adds	r3, r7, r3
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	2b00      	cmp	r3, #0
    72be:	d001      	beq.n	72c4 <disk_initialize+0x5c>
		return STA_NOINIT;
    72c0:	2301      	movs	r3, #1
    72c2:	e009      	b.n	72d8 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    72c4:	1dfb      	adds	r3, r7, #7
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	0018      	movs	r0, r3
    72ca:	4b07      	ldr	r3, [pc, #28]	; (72e8 <disk_initialize+0x80>)
    72cc:	4798      	blx	r3
    72ce:	1e03      	subs	r3, r0, #0
    72d0:	d001      	beq.n	72d6 <disk_initialize+0x6e>
		return STA_PROTECT;
    72d2:	2304      	movs	r3, #4
    72d4:	e000      	b.n	72d8 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    72d6:	2300      	movs	r3, #0
}
    72d8:	0018      	movs	r0, r3
    72da:	46bd      	mov	sp, r7
    72dc:	b005      	add	sp, #20
    72de:	bd90      	pop	{r4, r7, pc}
    72e0:	000071d5 	.word	0x000071d5
    72e4:	00003309 	.word	0x00003309
    72e8:	000033c1 	.word	0x000033c1

000072ec <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    72ec:	b580      	push	{r7, lr}
    72ee:	b082      	sub	sp, #8
    72f0:	af00      	add	r7, sp, #0
    72f2:	0002      	movs	r2, r0
    72f4:	1dfb      	adds	r3, r7, #7
    72f6:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    72f8:	1dfb      	adds	r3, r7, #7
    72fa:	781b      	ldrb	r3, [r3, #0]
    72fc:	0018      	movs	r0, r3
    72fe:	4b08      	ldr	r3, [pc, #32]	; (7320 <disk_status+0x34>)
    7300:	4798      	blx	r3
    7302:	1e03      	subs	r3, r0, #0
    7304:	d002      	beq.n	730c <disk_status+0x20>
    7306:	2b02      	cmp	r3, #2
    7308:	d002      	beq.n	7310 <disk_status+0x24>
    730a:	e003      	b.n	7314 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    730c:	2300      	movs	r3, #0
    730e:	e002      	b.n	7316 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    7310:	2303      	movs	r3, #3
    7312:	e000      	b.n	7316 <disk_status+0x2a>
	default:
		return STA_NOINIT;
    7314:	2301      	movs	r3, #1
	}
}
    7316:	0018      	movs	r0, r3
    7318:	46bd      	mov	sp, r7
    731a:	b002      	add	sp, #8
    731c:	bd80      	pop	{r7, pc}
    731e:	46c0      	nop			; (mov r8, r8)
    7320:	00003309 	.word	0x00003309

00007324 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    7324:	b590      	push	{r4, r7, lr}
    7326:	b089      	sub	sp, #36	; 0x24
    7328:	af00      	add	r7, sp, #0
    732a:	60b9      	str	r1, [r7, #8]
    732c:	607a      	str	r2, [r7, #4]
    732e:	0019      	movs	r1, r3
    7330:	230f      	movs	r3, #15
    7332:	18fb      	adds	r3, r7, r3
    7334:	1c02      	adds	r2, r0, #0
    7336:	701a      	strb	r2, [r3, #0]
    7338:	230e      	movs	r3, #14
    733a:	18fb      	adds	r3, r7, r3
    733c:	1c0a      	adds	r2, r1, #0
    733e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7340:	231b      	movs	r3, #27
    7342:	18fc      	adds	r4, r7, r3
    7344:	230f      	movs	r3, #15
    7346:	18fb      	adds	r3, r7, r3
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	0018      	movs	r0, r3
    734c:	4b28      	ldr	r3, [pc, #160]	; (73f0 <disk_read+0xcc>)
    734e:	4798      	blx	r3
    7350:	0003      	movs	r3, r0
    7352:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7354:	231b      	movs	r3, #27
    7356:	18fb      	adds	r3, r7, r3
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d101      	bne.n	7362 <disk_read+0x3e>
		return RES_ERROR;
    735e:	2301      	movs	r3, #1
    7360:	e042      	b.n	73e8 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    7362:	2314      	movs	r3, #20
    7364:	18fa      	adds	r2, r7, r3
    7366:	230f      	movs	r3, #15
    7368:	18fb      	adds	r3, r7, r3
    736a:	781b      	ldrb	r3, [r3, #0]
    736c:	0011      	movs	r1, r2
    736e:	0018      	movs	r0, r3
    7370:	4b20      	ldr	r3, [pc, #128]	; (73f4 <disk_read+0xd0>)
    7372:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7374:	230e      	movs	r3, #14
    7376:	18fb      	adds	r3, r7, r3
    7378:	781b      	ldrb	r3, [r3, #0]
    737a:	221b      	movs	r2, #27
    737c:	18ba      	adds	r2, r7, r2
    737e:	7812      	ldrb	r2, [r2, #0]
    7380:	4353      	muls	r3, r2
    7382:	001a      	movs	r2, r3
    7384:	687b      	ldr	r3, [r7, #4]
    7386:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7388:	697b      	ldr	r3, [r7, #20]
    738a:	3301      	adds	r3, #1
    738c:	211b      	movs	r1, #27
    738e:	1879      	adds	r1, r7, r1
    7390:	7809      	ldrb	r1, [r1, #0]
    7392:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7394:	429a      	cmp	r2, r3
    7396:	d901      	bls.n	739c <disk_read+0x78>
		return RES_PARERR;
    7398:	2304      	movs	r3, #4
    739a:	e025      	b.n	73e8 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    739c:	2300      	movs	r3, #0
    739e:	61fb      	str	r3, [r7, #28]
    73a0:	e01b      	b.n	73da <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    73a2:	231b      	movs	r3, #27
    73a4:	18fb      	adds	r3, r7, r3
    73a6:	781b      	ldrb	r3, [r3, #0]
    73a8:	69fa      	ldr	r2, [r7, #28]
    73aa:	435a      	muls	r2, r3
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    73b0:	231b      	movs	r3, #27
    73b2:	18fb      	adds	r3, r7, r3
    73b4:	781b      	ldrb	r3, [r3, #0]
    73b6:	69fa      	ldr	r2, [r7, #28]
    73b8:	4353      	muls	r3, r2
    73ba:	025b      	lsls	r3, r3, #9
    73bc:	68ba      	ldr	r2, [r7, #8]
    73be:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    73c0:	230f      	movs	r3, #15
    73c2:	18fb      	adds	r3, r7, r3
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	0018      	movs	r0, r3
    73c8:	4b0b      	ldr	r3, [pc, #44]	; (73f8 <disk_read+0xd4>)
    73ca:	4798      	blx	r3
    73cc:	1e03      	subs	r3, r0, #0
    73ce:	d001      	beq.n	73d4 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    73d0:	2301      	movs	r3, #1
    73d2:	e009      	b.n	73e8 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    73d4:	69fb      	ldr	r3, [r7, #28]
    73d6:	3301      	adds	r3, #1
    73d8:	61fb      	str	r3, [r7, #28]
    73da:	230e      	movs	r3, #14
    73dc:	18fb      	adds	r3, r7, r3
    73de:	781a      	ldrb	r2, [r3, #0]
    73e0:	69fb      	ldr	r3, [r7, #28]
    73e2:	429a      	cmp	r2, r3
    73e4:	d8dd      	bhi.n	73a2 <disk_read+0x7e>
		}
	}

	return RES_OK;
    73e6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    73e8:	0018      	movs	r0, r3
    73ea:	46bd      	mov	sp, r7
    73ec:	b009      	add	sp, #36	; 0x24
    73ee:	bd90      	pop	{r4, r7, pc}
    73f0:	00003395 	.word	0x00003395
    73f4:	00003349 	.word	0x00003349
    73f8:	00003409 	.word	0x00003409

000073fc <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    73fc:	b590      	push	{r4, r7, lr}
    73fe:	b089      	sub	sp, #36	; 0x24
    7400:	af00      	add	r7, sp, #0
    7402:	60b9      	str	r1, [r7, #8]
    7404:	607a      	str	r2, [r7, #4]
    7406:	0019      	movs	r1, r3
    7408:	230f      	movs	r3, #15
    740a:	18fb      	adds	r3, r7, r3
    740c:	1c02      	adds	r2, r0, #0
    740e:	701a      	strb	r2, [r3, #0]
    7410:	230e      	movs	r3, #14
    7412:	18fb      	adds	r3, r7, r3
    7414:	1c0a      	adds	r2, r1, #0
    7416:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7418:	231b      	movs	r3, #27
    741a:	18fc      	adds	r4, r7, r3
    741c:	230f      	movs	r3, #15
    741e:	18fb      	adds	r3, r7, r3
    7420:	781b      	ldrb	r3, [r3, #0]
    7422:	0018      	movs	r0, r3
    7424:	4b28      	ldr	r3, [pc, #160]	; (74c8 <disk_write+0xcc>)
    7426:	4798      	blx	r3
    7428:	0003      	movs	r3, r0
    742a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    742c:	231b      	movs	r3, #27
    742e:	18fb      	adds	r3, r7, r3
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	2b00      	cmp	r3, #0
    7434:	d101      	bne.n	743a <disk_write+0x3e>
		return RES_ERROR;
    7436:	2301      	movs	r3, #1
    7438:	e042      	b.n	74c0 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    743a:	2314      	movs	r3, #20
    743c:	18fa      	adds	r2, r7, r3
    743e:	230f      	movs	r3, #15
    7440:	18fb      	adds	r3, r7, r3
    7442:	781b      	ldrb	r3, [r3, #0]
    7444:	0011      	movs	r1, r2
    7446:	0018      	movs	r0, r3
    7448:	4b20      	ldr	r3, [pc, #128]	; (74cc <disk_write+0xd0>)
    744a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    744c:	230e      	movs	r3, #14
    744e:	18fb      	adds	r3, r7, r3
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	221b      	movs	r2, #27
    7454:	18ba      	adds	r2, r7, r2
    7456:	7812      	ldrb	r2, [r2, #0]
    7458:	4353      	muls	r3, r2
    745a:	001a      	movs	r2, r3
    745c:	687b      	ldr	r3, [r7, #4]
    745e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7460:	697b      	ldr	r3, [r7, #20]
    7462:	3301      	adds	r3, #1
    7464:	211b      	movs	r1, #27
    7466:	1879      	adds	r1, r7, r1
    7468:	7809      	ldrb	r1, [r1, #0]
    746a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    746c:	429a      	cmp	r2, r3
    746e:	d901      	bls.n	7474 <disk_write+0x78>
		return RES_PARERR;
    7470:	2304      	movs	r3, #4
    7472:	e025      	b.n	74c0 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    7474:	2300      	movs	r3, #0
    7476:	61fb      	str	r3, [r7, #28]
    7478:	e01b      	b.n	74b2 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    747a:	231b      	movs	r3, #27
    747c:	18fb      	adds	r3, r7, r3
    747e:	781b      	ldrb	r3, [r3, #0]
    7480:	69fa      	ldr	r2, [r7, #28]
    7482:	435a      	muls	r2, r3
    7484:	687b      	ldr	r3, [r7, #4]
    7486:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    7488:	231b      	movs	r3, #27
    748a:	18fb      	adds	r3, r7, r3
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	69fa      	ldr	r2, [r7, #28]
    7490:	4353      	muls	r3, r2
    7492:	025b      	lsls	r3, r3, #9
    7494:	68ba      	ldr	r2, [r7, #8]
    7496:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    7498:	230f      	movs	r3, #15
    749a:	18fb      	adds	r3, r7, r3
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	0018      	movs	r0, r3
    74a0:	4b0b      	ldr	r3, [pc, #44]	; (74d0 <disk_write+0xd4>)
    74a2:	4798      	blx	r3
    74a4:	1e03      	subs	r3, r0, #0
    74a6:	d001      	beq.n	74ac <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    74a8:	2301      	movs	r3, #1
    74aa:	e009      	b.n	74c0 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    74ac:	69fb      	ldr	r3, [r7, #28]
    74ae:	3301      	adds	r3, #1
    74b0:	61fb      	str	r3, [r7, #28]
    74b2:	230e      	movs	r3, #14
    74b4:	18fb      	adds	r3, r7, r3
    74b6:	781a      	ldrb	r2, [r3, #0]
    74b8:	69fb      	ldr	r3, [r7, #28]
    74ba:	429a      	cmp	r2, r3
    74bc:	d8dd      	bhi.n	747a <disk_write+0x7e>
		}
	}

	return RES_OK;
    74be:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    74c0:	0018      	movs	r0, r3
    74c2:	46bd      	mov	sp, r7
    74c4:	b009      	add	sp, #36	; 0x24
    74c6:	bd90      	pop	{r4, r7, pc}
    74c8:	00003395 	.word	0x00003395
    74cc:	00003349 	.word	0x00003349
    74d0:	0000345d 	.word	0x0000345d

000074d4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    74d4:	b590      	push	{r4, r7, lr}
    74d6:	b085      	sub	sp, #20
    74d8:	af00      	add	r7, sp, #0
    74da:	603a      	str	r2, [r7, #0]
    74dc:	1dfb      	adds	r3, r7, #7
    74de:	1c02      	adds	r2, r0, #0
    74e0:	701a      	strb	r2, [r3, #0]
    74e2:	1dbb      	adds	r3, r7, #6
    74e4:	1c0a      	adds	r2, r1, #0
    74e6:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    74e8:	230f      	movs	r3, #15
    74ea:	18fb      	adds	r3, r7, r3
    74ec:	2204      	movs	r2, #4
    74ee:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    74f0:	1dbb      	adds	r3, r7, #6
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	2b01      	cmp	r3, #1
    74f6:	d00f      	beq.n	7518 <disk_ioctl+0x44>
    74f8:	dc02      	bgt.n	7500 <disk_ioctl+0x2c>
    74fa:	2b00      	cmp	r3, #0
    74fc:	d044      	beq.n	7588 <disk_ioctl+0xb4>
    74fe:	e054      	b.n	75aa <disk_ioctl+0xd6>
    7500:	2b02      	cmp	r3, #2
    7502:	d01a      	beq.n	753a <disk_ioctl+0x66>
    7504:	2b03      	cmp	r3, #3
    7506:	d150      	bne.n	75aa <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    7508:	683b      	ldr	r3, [r7, #0]
    750a:	2201      	movs	r2, #1
    750c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    750e:	230f      	movs	r3, #15
    7510:	18fb      	adds	r3, r7, r3
    7512:	2200      	movs	r2, #0
    7514:	701a      	strb	r2, [r3, #0]
		break;
    7516:	e04c      	b.n	75b2 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    7518:	2308      	movs	r3, #8
    751a:	18fa      	adds	r2, r7, r3
    751c:	1dfb      	adds	r3, r7, #7
    751e:	781b      	ldrb	r3, [r3, #0]
    7520:	0011      	movs	r1, r2
    7522:	0018      	movs	r0, r3
    7524:	4b26      	ldr	r3, [pc, #152]	; (75c0 <disk_ioctl+0xec>)
    7526:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    7528:	68bb      	ldr	r3, [r7, #8]
    752a:	1c5a      	adds	r2, r3, #1
    752c:	683b      	ldr	r3, [r7, #0]
    752e:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    7530:	230f      	movs	r3, #15
    7532:	18fb      	adds	r3, r7, r3
    7534:	2200      	movs	r2, #0
    7536:	701a      	strb	r2, [r3, #0]
	}
	break;
    7538:	e03b      	b.n	75b2 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    753a:	230e      	movs	r3, #14
    753c:	18fc      	adds	r4, r7, r3
    753e:	1dfb      	adds	r3, r7, #7
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	0018      	movs	r0, r3
    7544:	4b1f      	ldr	r3, [pc, #124]	; (75c4 <disk_ioctl+0xf0>)
    7546:	4798      	blx	r3
    7548:	0003      	movs	r3, r0
    754a:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    754c:	230e      	movs	r3, #14
    754e:	18fb      	adds	r3, r7, r3
    7550:	781b      	ldrb	r3, [r3, #0]
    7552:	2b01      	cmp	r3, #1
    7554:	d010      	beq.n	7578 <disk_ioctl+0xa4>
    7556:	230e      	movs	r3, #14
    7558:	18fb      	adds	r3, r7, r3
    755a:	781b      	ldrb	r3, [r3, #0]
    755c:	2b02      	cmp	r3, #2
    755e:	d00b      	beq.n	7578 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    7560:	230e      	movs	r3, #14
    7562:	18fb      	adds	r3, r7, r3
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	2b04      	cmp	r3, #4
    7568:	d006      	beq.n	7578 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    756a:	230e      	movs	r3, #14
    756c:	18fb      	adds	r3, r7, r3
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2b08      	cmp	r3, #8
    7572:	d001      	beq.n	7578 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    7574:	2301      	movs	r3, #1
    7576:	e01f      	b.n	75b8 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    7578:	683b      	ldr	r3, [r7, #0]
    757a:	2200      	movs	r2, #0
    757c:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    757e:	230f      	movs	r3, #15
    7580:	18fb      	adds	r3, r7, r3
    7582:	2200      	movs	r2, #0
    7584:	701a      	strb	r2, [r3, #0]
	}
	break;
    7586:	e014      	b.n	75b2 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    7588:	1dfb      	adds	r3, r7, #7
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	0018      	movs	r0, r3
    758e:	4b0e      	ldr	r3, [pc, #56]	; (75c8 <disk_ioctl+0xf4>)
    7590:	4798      	blx	r3
    7592:	1e03      	subs	r3, r0, #0
    7594:	d104      	bne.n	75a0 <disk_ioctl+0xcc>
			res = RES_OK;
    7596:	230f      	movs	r3, #15
    7598:	18fb      	adds	r3, r7, r3
    759a:	2200      	movs	r2, #0
    759c:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    759e:	e008      	b.n	75b2 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    75a0:	230f      	movs	r3, #15
    75a2:	18fb      	adds	r3, r7, r3
    75a4:	2203      	movs	r2, #3
    75a6:	701a      	strb	r2, [r3, #0]
		break;
    75a8:	e003      	b.n	75b2 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    75aa:	230f      	movs	r3, #15
    75ac:	18fb      	adds	r3, r7, r3
    75ae:	2204      	movs	r2, #4
    75b0:	701a      	strb	r2, [r3, #0]
	}

	return res;
    75b2:	230f      	movs	r3, #15
    75b4:	18fb      	adds	r3, r7, r3
    75b6:	781b      	ldrb	r3, [r3, #0]
}
    75b8:	0018      	movs	r0, r3
    75ba:	46bd      	mov	sp, r7
    75bc:	b005      	add	sp, #20
    75be:	bd90      	pop	{r4, r7, pc}
    75c0:	00003349 	.word	0x00003349
    75c4:	00003395 	.word	0x00003395
    75c8:	00003309 	.word	0x00003309

000075cc <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    75cc:	b580      	push	{r7, lr}
    75ce:	b084      	sub	sp, #16
    75d0:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    75d2:	1d3a      	adds	r2, r7, #4
    75d4:	4b12      	ldr	r3, [pc, #72]	; (7620 <get_fattime+0x54>)
    75d6:	0011      	movs	r1, r2
    75d8:	0018      	movs	r0, r3
    75da:	4b12      	ldr	r3, [pc, #72]	; (7624 <get_fattime+0x58>)
    75dc:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    75de:	1d3b      	adds	r3, r7, #4
    75e0:	88db      	ldrh	r3, [r3, #6]
    75e2:	4a11      	ldr	r2, [pc, #68]	; (7628 <get_fattime+0x5c>)
    75e4:	4694      	mov	ip, r2
    75e6:	4463      	add	r3, ip
    75e8:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    75ea:	1d3b      	adds	r3, r7, #4
    75ec:	795b      	ldrb	r3, [r3, #5]
    75ee:	055b      	lsls	r3, r3, #21
    75f0:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    75f2:	1d3b      	adds	r3, r7, #4
    75f4:	791b      	ldrb	r3, [r3, #4]
    75f6:	041b      	lsls	r3, r3, #16
    75f8:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    75fa:	1d3b      	adds	r3, r7, #4
    75fc:	789b      	ldrb	r3, [r3, #2]
    75fe:	02db      	lsls	r3, r3, #11
    7600:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    7602:	1d3b      	adds	r3, r7, #4
    7604:	785b      	ldrb	r3, [r3, #1]
    7606:	015b      	lsls	r3, r3, #5
    7608:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    760a:	1d3a      	adds	r2, r7, #4
    760c:	7812      	ldrb	r2, [r2, #0]
    760e:	0852      	lsrs	r2, r2, #1
    7610:	b2d2      	uxtb	r2, r2
    7612:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    7614:	60fb      	str	r3, [r7, #12]

	return ul_time;
    7616:	68fb      	ldr	r3, [r7, #12]
}
    7618:	0018      	movs	r0, r3
    761a:	46bd      	mov	sp, r7
    761c:	b004      	add	sp, #16
    761e:	bd80      	pop	{r7, pc}
    7620:	20000a24 	.word	0x20000a24
    7624:	000039ad 	.word	0x000039ad
    7628:	fffff844 	.word	0xfffff844

0000762c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    762c:	b580      	push	{r7, lr}
    762e:	b086      	sub	sp, #24
    7630:	af00      	add	r7, sp, #0
    7632:	60f8      	str	r0, [r7, #12]
    7634:	60b9      	str	r1, [r7, #8]
    7636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7638:	68fb      	ldr	r3, [r7, #12]
    763a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    763c:	68bb      	ldr	r3, [r7, #8]
    763e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7640:	e007      	b.n	7652 <mem_cpy+0x26>
		*d++ = *s++;
    7642:	697b      	ldr	r3, [r7, #20]
    7644:	1c5a      	adds	r2, r3, #1
    7646:	617a      	str	r2, [r7, #20]
    7648:	693a      	ldr	r2, [r7, #16]
    764a:	1c51      	adds	r1, r2, #1
    764c:	6139      	str	r1, [r7, #16]
    764e:	7812      	ldrb	r2, [r2, #0]
    7650:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	1e5a      	subs	r2, r3, #1
    7656:	607a      	str	r2, [r7, #4]
    7658:	2b00      	cmp	r3, #0
    765a:	d1f2      	bne.n	7642 <mem_cpy+0x16>
}
    765c:	46c0      	nop			; (mov r8, r8)
    765e:	46bd      	mov	sp, r7
    7660:	b006      	add	sp, #24
    7662:	bd80      	pop	{r7, pc}

00007664 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    7664:	b580      	push	{r7, lr}
    7666:	b086      	sub	sp, #24
    7668:	af00      	add	r7, sp, #0
    766a:	60f8      	str	r0, [r7, #12]
    766c:	60b9      	str	r1, [r7, #8]
    766e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7670:	68fb      	ldr	r3, [r7, #12]
    7672:	617b      	str	r3, [r7, #20]

	while (cnt--)
    7674:	e005      	b.n	7682 <mem_set+0x1e>
		*d++ = (BYTE)val;
    7676:	697b      	ldr	r3, [r7, #20]
    7678:	1c5a      	adds	r2, r3, #1
    767a:	617a      	str	r2, [r7, #20]
    767c:	68ba      	ldr	r2, [r7, #8]
    767e:	b2d2      	uxtb	r2, r2
    7680:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	1e5a      	subs	r2, r3, #1
    7686:	607a      	str	r2, [r7, #4]
    7688:	2b00      	cmp	r3, #0
    768a:	d1f4      	bne.n	7676 <mem_set+0x12>
}
    768c:	46c0      	nop			; (mov r8, r8)
    768e:	46bd      	mov	sp, r7
    7690:	b006      	add	sp, #24
    7692:	bd80      	pop	{r7, pc}

00007694 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    7694:	b580      	push	{r7, lr}
    7696:	b088      	sub	sp, #32
    7698:	af00      	add	r7, sp, #0
    769a:	60f8      	str	r0, [r7, #12]
    769c:	60b9      	str	r1, [r7, #8]
    769e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    76a0:	68fb      	ldr	r3, [r7, #12]
    76a2:	61fb      	str	r3, [r7, #28]
    76a4:	68bb      	ldr	r3, [r7, #8]
    76a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
    76a8:	2300      	movs	r3, #0
    76aa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    76ac:	46c0      	nop			; (mov r8, r8)
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	1e5a      	subs	r2, r3, #1
    76b2:	607a      	str	r2, [r7, #4]
    76b4:	2b00      	cmp	r3, #0
    76b6:	d00d      	beq.n	76d4 <mem_cmp+0x40>
    76b8:	69fb      	ldr	r3, [r7, #28]
    76ba:	1c5a      	adds	r2, r3, #1
    76bc:	61fa      	str	r2, [r7, #28]
    76be:	781b      	ldrb	r3, [r3, #0]
    76c0:	0019      	movs	r1, r3
    76c2:	69bb      	ldr	r3, [r7, #24]
    76c4:	1c5a      	adds	r2, r3, #1
    76c6:	61ba      	str	r2, [r7, #24]
    76c8:	781b      	ldrb	r3, [r3, #0]
    76ca:	1acb      	subs	r3, r1, r3
    76cc:	617b      	str	r3, [r7, #20]
    76ce:	697b      	ldr	r3, [r7, #20]
    76d0:	2b00      	cmp	r3, #0
    76d2:	d0ec      	beq.n	76ae <mem_cmp+0x1a>
	return r;
    76d4:	697b      	ldr	r3, [r7, #20]
}
    76d6:	0018      	movs	r0, r3
    76d8:	46bd      	mov	sp, r7
    76da:	b008      	add	sp, #32
    76dc:	bd80      	pop	{r7, pc}

000076de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    76de:	b580      	push	{r7, lr}
    76e0:	b082      	sub	sp, #8
    76e2:	af00      	add	r7, sp, #0
    76e4:	6078      	str	r0, [r7, #4]
    76e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    76e8:	e002      	b.n	76f0 <chk_chr+0x12>
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	3301      	adds	r3, #1
    76ee:	607b      	str	r3, [r7, #4]
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	781b      	ldrb	r3, [r3, #0]
    76f4:	2b00      	cmp	r3, #0
    76f6:	d005      	beq.n	7704 <chk_chr+0x26>
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	001a      	movs	r2, r3
    76fe:	683b      	ldr	r3, [r7, #0]
    7700:	429a      	cmp	r2, r3
    7702:	d1f2      	bne.n	76ea <chk_chr+0xc>
	return *str;
    7704:	687b      	ldr	r3, [r7, #4]
    7706:	781b      	ldrb	r3, [r3, #0]
}
    7708:	0018      	movs	r0, r3
    770a:	46bd      	mov	sp, r7
    770c:	b002      	add	sp, #8
    770e:	bd80      	pop	{r7, pc}

00007710 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7710:	b590      	push	{r4, r7, lr}
    7712:	b085      	sub	sp, #20
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
    7718:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    771a:	687b      	ldr	r3, [r7, #4]
    771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    771e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    7720:	68fa      	ldr	r2, [r7, #12]
    7722:	683b      	ldr	r3, [r7, #0]
    7724:	429a      	cmp	r2, r3
    7726:	d04e      	beq.n	77c6 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    7728:	687b      	ldr	r3, [r7, #4]
    772a:	791b      	ldrb	r3, [r3, #4]
    772c:	2b00      	cmp	r3, #0
    772e:	d037      	beq.n	77a0 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7730:	687b      	ldr	r3, [r7, #4]
    7732:	7858      	ldrb	r0, [r3, #1]
    7734:	687b      	ldr	r3, [r7, #4]
    7736:	3330      	adds	r3, #48	; 0x30
    7738:	0019      	movs	r1, r3
    773a:	68fa      	ldr	r2, [r7, #12]
    773c:	2301      	movs	r3, #1
    773e:	4c24      	ldr	r4, [pc, #144]	; (77d0 <move_window+0xc0>)
    7740:	47a0      	blx	r4
    7742:	1e03      	subs	r3, r0, #0
    7744:	d001      	beq.n	774a <move_window+0x3a>
				return FR_DISK_ERR;
    7746:	2301      	movs	r3, #1
    7748:	e03e      	b.n	77c8 <move_window+0xb8>
			fs->wflag = 0;
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	2200      	movs	r2, #0
    774e:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	6a1a      	ldr	r2, [r3, #32]
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	69db      	ldr	r3, [r3, #28]
    7758:	18d2      	adds	r2, r2, r3
    775a:	68fb      	ldr	r3, [r7, #12]
    775c:	429a      	cmp	r2, r3
    775e:	d91f      	bls.n	77a0 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7760:	230b      	movs	r3, #11
    7762:	18fb      	adds	r3, r7, r3
    7764:	687a      	ldr	r2, [r7, #4]
    7766:	78d2      	ldrb	r2, [r2, #3]
    7768:	701a      	strb	r2, [r3, #0]
    776a:	e014      	b.n	7796 <move_window+0x86>
					wsect += fs->fsize;
    776c:	687b      	ldr	r3, [r7, #4]
    776e:	69db      	ldr	r3, [r3, #28]
    7770:	68fa      	ldr	r2, [r7, #12]
    7772:	18d3      	adds	r3, r2, r3
    7774:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    7776:	687b      	ldr	r3, [r7, #4]
    7778:	7858      	ldrb	r0, [r3, #1]
    777a:	687b      	ldr	r3, [r7, #4]
    777c:	3330      	adds	r3, #48	; 0x30
    777e:	0019      	movs	r1, r3
    7780:	68fa      	ldr	r2, [r7, #12]
    7782:	2301      	movs	r3, #1
    7784:	4c12      	ldr	r4, [pc, #72]	; (77d0 <move_window+0xc0>)
    7786:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7788:	230b      	movs	r3, #11
    778a:	18fb      	adds	r3, r7, r3
    778c:	781a      	ldrb	r2, [r3, #0]
    778e:	230b      	movs	r3, #11
    7790:	18fb      	adds	r3, r7, r3
    7792:	3a01      	subs	r2, #1
    7794:	701a      	strb	r2, [r3, #0]
    7796:	230b      	movs	r3, #11
    7798:	18fb      	adds	r3, r7, r3
    779a:	781b      	ldrb	r3, [r3, #0]
    779c:	2b01      	cmp	r3, #1
    779e:	d8e5      	bhi.n	776c <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    77a0:	683b      	ldr	r3, [r7, #0]
    77a2:	2b00      	cmp	r3, #0
    77a4:	d00f      	beq.n	77c6 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    77a6:	687b      	ldr	r3, [r7, #4]
    77a8:	7858      	ldrb	r0, [r3, #1]
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	3330      	adds	r3, #48	; 0x30
    77ae:	0019      	movs	r1, r3
    77b0:	683a      	ldr	r2, [r7, #0]
    77b2:	2301      	movs	r3, #1
    77b4:	4c07      	ldr	r4, [pc, #28]	; (77d4 <move_window+0xc4>)
    77b6:	47a0      	blx	r4
    77b8:	1e03      	subs	r3, r0, #0
    77ba:	d001      	beq.n	77c0 <move_window+0xb0>
				return FR_DISK_ERR;
    77bc:	2301      	movs	r3, #1
    77be:	e003      	b.n	77c8 <move_window+0xb8>
			fs->winsect = sector;
    77c0:	687b      	ldr	r3, [r7, #4]
    77c2:	683a      	ldr	r2, [r7, #0]
    77c4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    77c6:	2300      	movs	r3, #0
}
    77c8:	0018      	movs	r0, r3
    77ca:	46bd      	mov	sp, r7
    77cc:	b005      	add	sp, #20
    77ce:	bd90      	pop	{r4, r7, pc}
    77d0:	000073fd 	.word	0x000073fd
    77d4:	00007325 	.word	0x00007325

000077d8 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    77d8:	b590      	push	{r4, r7, lr}
    77da:	b085      	sub	sp, #20
    77dc:	af00      	add	r7, sp, #0
    77de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    77e0:	230f      	movs	r3, #15
    77e2:	18fc      	adds	r4, r7, r3
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	2100      	movs	r1, #0
    77e8:	0018      	movs	r0, r3
    77ea:	4b52      	ldr	r3, [pc, #328]	; (7934 <sync+0x15c>)
    77ec:	4798      	blx	r3
    77ee:	0003      	movs	r3, r0
    77f0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    77f2:	230f      	movs	r3, #15
    77f4:	18fb      	adds	r3, r7, r3
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	2b00      	cmp	r3, #0
    77fa:	d000      	beq.n	77fe <sync+0x26>
    77fc:	e093      	b.n	7926 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	2b03      	cmp	r3, #3
    7804:	d000      	beq.n	7808 <sync+0x30>
    7806:	e081      	b.n	790c <sync+0x134>
    7808:	687b      	ldr	r3, [r7, #4]
    780a:	795b      	ldrb	r3, [r3, #5]
    780c:	2b00      	cmp	r3, #0
    780e:	d07d      	beq.n	790c <sync+0x134>
			fs->winsect = 0;
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	2200      	movs	r2, #0
    7814:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    7816:	687b      	ldr	r3, [r7, #4]
    7818:	3330      	adds	r3, #48	; 0x30
    781a:	0018      	movs	r0, r3
    781c:	2380      	movs	r3, #128	; 0x80
    781e:	009b      	lsls	r3, r3, #2
    7820:	001a      	movs	r2, r3
    7822:	2100      	movs	r1, #0
    7824:	4b44      	ldr	r3, [pc, #272]	; (7938 <sync+0x160>)
    7826:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	4a44      	ldr	r2, [pc, #272]	; (793c <sync+0x164>)
    782c:	2155      	movs	r1, #85	; 0x55
    782e:	5499      	strb	r1, [r3, r2]
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	4a43      	ldr	r2, [pc, #268]	; (7940 <sync+0x168>)
    7834:	21aa      	movs	r1, #170	; 0xaa
    7836:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7838:	687b      	ldr	r3, [r7, #4]
    783a:	2230      	movs	r2, #48	; 0x30
    783c:	2152      	movs	r1, #82	; 0x52
    783e:	5499      	strb	r1, [r3, r2]
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	2231      	movs	r2, #49	; 0x31
    7844:	2152      	movs	r1, #82	; 0x52
    7846:	5499      	strb	r1, [r3, r2]
    7848:	687b      	ldr	r3, [r7, #4]
    784a:	2232      	movs	r2, #50	; 0x32
    784c:	2161      	movs	r1, #97	; 0x61
    784e:	5499      	strb	r1, [r3, r2]
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	2233      	movs	r2, #51	; 0x33
    7854:	2141      	movs	r1, #65	; 0x41
    7856:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7858:	687a      	ldr	r2, [r7, #4]
    785a:	2385      	movs	r3, #133	; 0x85
    785c:	009b      	lsls	r3, r3, #2
    785e:	2172      	movs	r1, #114	; 0x72
    7860:	54d1      	strb	r1, [r2, r3]
    7862:	687b      	ldr	r3, [r7, #4]
    7864:	4a37      	ldr	r2, [pc, #220]	; (7944 <sync+0x16c>)
    7866:	2172      	movs	r1, #114	; 0x72
    7868:	5499      	strb	r1, [r3, r2]
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	4a36      	ldr	r2, [pc, #216]	; (7948 <sync+0x170>)
    786e:	2141      	movs	r1, #65	; 0x41
    7870:	5499      	strb	r1, [r3, r2]
    7872:	687b      	ldr	r3, [r7, #4]
    7874:	4a35      	ldr	r2, [pc, #212]	; (794c <sync+0x174>)
    7876:	2161      	movs	r1, #97	; 0x61
    7878:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    787a:	687b      	ldr	r3, [r7, #4]
    787c:	691b      	ldr	r3, [r3, #16]
    787e:	b2d9      	uxtb	r1, r3
    7880:	687a      	ldr	r2, [r7, #4]
    7882:	2386      	movs	r3, #134	; 0x86
    7884:	009b      	lsls	r3, r3, #2
    7886:	54d1      	strb	r1, [r2, r3]
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	691b      	ldr	r3, [r3, #16]
    788c:	b29b      	uxth	r3, r3
    788e:	0a1b      	lsrs	r3, r3, #8
    7890:	b29b      	uxth	r3, r3
    7892:	b2d9      	uxtb	r1, r3
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	4a2e      	ldr	r2, [pc, #184]	; (7950 <sync+0x178>)
    7898:	5499      	strb	r1, [r3, r2]
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	691b      	ldr	r3, [r3, #16]
    789e:	0c1b      	lsrs	r3, r3, #16
    78a0:	b2d9      	uxtb	r1, r3
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	4a2b      	ldr	r2, [pc, #172]	; (7954 <sync+0x17c>)
    78a6:	5499      	strb	r1, [r3, r2]
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	691b      	ldr	r3, [r3, #16]
    78ac:	0e1b      	lsrs	r3, r3, #24
    78ae:	b2d9      	uxtb	r1, r3
    78b0:	687b      	ldr	r3, [r7, #4]
    78b2:	4a29      	ldr	r2, [pc, #164]	; (7958 <sync+0x180>)
    78b4:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	68db      	ldr	r3, [r3, #12]
    78ba:	b2d9      	uxtb	r1, r3
    78bc:	687a      	ldr	r2, [r7, #4]
    78be:	2387      	movs	r3, #135	; 0x87
    78c0:	009b      	lsls	r3, r3, #2
    78c2:	54d1      	strb	r1, [r2, r3]
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	68db      	ldr	r3, [r3, #12]
    78c8:	b29b      	uxth	r3, r3
    78ca:	0a1b      	lsrs	r3, r3, #8
    78cc:	b29b      	uxth	r3, r3
    78ce:	b2d9      	uxtb	r1, r3
    78d0:	687b      	ldr	r3, [r7, #4]
    78d2:	4a22      	ldr	r2, [pc, #136]	; (795c <sync+0x184>)
    78d4:	5499      	strb	r1, [r3, r2]
    78d6:	687b      	ldr	r3, [r7, #4]
    78d8:	68db      	ldr	r3, [r3, #12]
    78da:	0c1b      	lsrs	r3, r3, #16
    78dc:	b2d9      	uxtb	r1, r3
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	4a1f      	ldr	r2, [pc, #124]	; (7960 <sync+0x188>)
    78e2:	5499      	strb	r1, [r3, r2]
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	68db      	ldr	r3, [r3, #12]
    78e8:	0e1b      	lsrs	r3, r3, #24
    78ea:	b2d9      	uxtb	r1, r3
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	4a1d      	ldr	r2, [pc, #116]	; (7964 <sync+0x18c>)
    78f0:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	7858      	ldrb	r0, [r3, #1]
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	3330      	adds	r3, #48	; 0x30
    78fa:	0019      	movs	r1, r3
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	695a      	ldr	r2, [r3, #20]
    7900:	2301      	movs	r3, #1
    7902:	4c19      	ldr	r4, [pc, #100]	; (7968 <sync+0x190>)
    7904:	47a0      	blx	r4
			fs->fsi_flag = 0;
    7906:	687b      	ldr	r3, [r7, #4]
    7908:	2200      	movs	r2, #0
    790a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	785b      	ldrb	r3, [r3, #1]
    7910:	2200      	movs	r2, #0
    7912:	2100      	movs	r1, #0
    7914:	0018      	movs	r0, r3
    7916:	4b15      	ldr	r3, [pc, #84]	; (796c <sync+0x194>)
    7918:	4798      	blx	r3
    791a:	1e03      	subs	r3, r0, #0
    791c:	d003      	beq.n	7926 <sync+0x14e>
			res = FR_DISK_ERR;
    791e:	230f      	movs	r3, #15
    7920:	18fb      	adds	r3, r7, r3
    7922:	2201      	movs	r2, #1
    7924:	701a      	strb	r2, [r3, #0]
	}

	return res;
    7926:	230f      	movs	r3, #15
    7928:	18fb      	adds	r3, r7, r3
    792a:	781b      	ldrb	r3, [r3, #0]
}
    792c:	0018      	movs	r0, r3
    792e:	46bd      	mov	sp, r7
    7930:	b005      	add	sp, #20
    7932:	bd90      	pop	{r4, r7, pc}
    7934:	00007711 	.word	0x00007711
    7938:	00007665 	.word	0x00007665
    793c:	0000022e 	.word	0x0000022e
    7940:	0000022f 	.word	0x0000022f
    7944:	00000215 	.word	0x00000215
    7948:	00000216 	.word	0x00000216
    794c:	00000217 	.word	0x00000217
    7950:	00000219 	.word	0x00000219
    7954:	0000021a 	.word	0x0000021a
    7958:	0000021b 	.word	0x0000021b
    795c:	0000021d 	.word	0x0000021d
    7960:	0000021e 	.word	0x0000021e
    7964:	0000021f 	.word	0x0000021f
    7968:	000073fd 	.word	0x000073fd
    796c:	000074d5 	.word	0x000074d5

00007970 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7970:	b580      	push	{r7, lr}
    7972:	b082      	sub	sp, #8
    7974:	af00      	add	r7, sp, #0
    7976:	6078      	str	r0, [r7, #4]
    7978:	6039      	str	r1, [r7, #0]
	clst -= 2;
    797a:	683b      	ldr	r3, [r7, #0]
    797c:	3b02      	subs	r3, #2
    797e:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	699b      	ldr	r3, [r3, #24]
    7984:	1e9a      	subs	r2, r3, #2
    7986:	683b      	ldr	r3, [r7, #0]
    7988:	429a      	cmp	r2, r3
    798a:	d801      	bhi.n	7990 <clust2sect+0x20>
    798c:	2300      	movs	r3, #0
    798e:	e007      	b.n	79a0 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	789b      	ldrb	r3, [r3, #2]
    7994:	001a      	movs	r2, r3
    7996:	683b      	ldr	r3, [r7, #0]
    7998:	435a      	muls	r2, r3
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    799e:	18d3      	adds	r3, r2, r3
}
    79a0:	0018      	movs	r0, r3
    79a2:	46bd      	mov	sp, r7
    79a4:	b002      	add	sp, #8
    79a6:	bd80      	pop	{r7, pc}

000079a8 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    79a8:	b580      	push	{r7, lr}
    79aa:	b086      	sub	sp, #24
    79ac:	af00      	add	r7, sp, #0
    79ae:	6078      	str	r0, [r7, #4]
    79b0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    79b2:	683b      	ldr	r3, [r7, #0]
    79b4:	2b01      	cmp	r3, #1
    79b6:	d904      	bls.n	79c2 <get_fat+0x1a>
    79b8:	687b      	ldr	r3, [r7, #4]
    79ba:	699a      	ldr	r2, [r3, #24]
    79bc:	683b      	ldr	r3, [r7, #0]
    79be:	429a      	cmp	r2, r3
    79c0:	d801      	bhi.n	79c6 <get_fat+0x1e>
		return 1;
    79c2:	2301      	movs	r3, #1
    79c4:	e09f      	b.n	7b06 <get_fat+0x15e>

	switch (fs->fs_type) {
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	781b      	ldrb	r3, [r3, #0]
    79ca:	2b02      	cmp	r3, #2
    79cc:	d048      	beq.n	7a60 <get_fat+0xb8>
    79ce:	2b03      	cmp	r3, #3
    79d0:	d067      	beq.n	7aa2 <get_fat+0xfa>
    79d2:	2b01      	cmp	r3, #1
    79d4:	d000      	beq.n	79d8 <get_fat+0x30>
    79d6:	e094      	b.n	7b02 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    79d8:	683b      	ldr	r3, [r7, #0]
    79da:	617b      	str	r3, [r7, #20]
    79dc:	697b      	ldr	r3, [r7, #20]
    79de:	085b      	lsrs	r3, r3, #1
    79e0:	697a      	ldr	r2, [r7, #20]
    79e2:	18d3      	adds	r3, r2, r3
    79e4:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	6a1a      	ldr	r2, [r3, #32]
    79ea:	697b      	ldr	r3, [r7, #20]
    79ec:	0a5b      	lsrs	r3, r3, #9
    79ee:	18d2      	adds	r2, r2, r3
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	0011      	movs	r1, r2
    79f4:	0018      	movs	r0, r3
    79f6:	4b46      	ldr	r3, [pc, #280]	; (7b10 <get_fat+0x168>)
    79f8:	4798      	blx	r3
    79fa:	1e03      	subs	r3, r0, #0
    79fc:	d000      	beq.n	7a00 <get_fat+0x58>
    79fe:	e079      	b.n	7af4 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    7a00:	697b      	ldr	r3, [r7, #20]
    7a02:	05db      	lsls	r3, r3, #23
    7a04:	0ddb      	lsrs	r3, r3, #23
    7a06:	687a      	ldr	r2, [r7, #4]
    7a08:	2130      	movs	r1, #48	; 0x30
    7a0a:	18d3      	adds	r3, r2, r3
    7a0c:	185b      	adds	r3, r3, r1
    7a0e:	781b      	ldrb	r3, [r3, #0]
    7a10:	613b      	str	r3, [r7, #16]
    7a12:	697b      	ldr	r3, [r7, #20]
    7a14:	3301      	adds	r3, #1
    7a16:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	6a1a      	ldr	r2, [r3, #32]
    7a1c:	697b      	ldr	r3, [r7, #20]
    7a1e:	0a5b      	lsrs	r3, r3, #9
    7a20:	18d2      	adds	r2, r2, r3
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	0011      	movs	r1, r2
    7a26:	0018      	movs	r0, r3
    7a28:	4b39      	ldr	r3, [pc, #228]	; (7b10 <get_fat+0x168>)
    7a2a:	4798      	blx	r3
    7a2c:	1e03      	subs	r3, r0, #0
    7a2e:	d163      	bne.n	7af8 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    7a30:	697b      	ldr	r3, [r7, #20]
    7a32:	05db      	lsls	r3, r3, #23
    7a34:	0ddb      	lsrs	r3, r3, #23
    7a36:	687a      	ldr	r2, [r7, #4]
    7a38:	2130      	movs	r1, #48	; 0x30
    7a3a:	18d3      	adds	r3, r2, r3
    7a3c:	185b      	adds	r3, r3, r1
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	021b      	lsls	r3, r3, #8
    7a42:	001a      	movs	r2, r3
    7a44:	693b      	ldr	r3, [r7, #16]
    7a46:	4313      	orrs	r3, r2
    7a48:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7a4a:	683b      	ldr	r3, [r7, #0]
    7a4c:	2201      	movs	r2, #1
    7a4e:	4013      	ands	r3, r2
    7a50:	d002      	beq.n	7a58 <get_fat+0xb0>
    7a52:	693b      	ldr	r3, [r7, #16]
    7a54:	091b      	lsrs	r3, r3, #4
    7a56:	e056      	b.n	7b06 <get_fat+0x15e>
    7a58:	693b      	ldr	r3, [r7, #16]
    7a5a:	051b      	lsls	r3, r3, #20
    7a5c:	0d1b      	lsrs	r3, r3, #20
    7a5e:	e052      	b.n	7b06 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	6a1a      	ldr	r2, [r3, #32]
    7a64:	683b      	ldr	r3, [r7, #0]
    7a66:	0a1b      	lsrs	r3, r3, #8
    7a68:	18d2      	adds	r2, r2, r3
    7a6a:	687b      	ldr	r3, [r7, #4]
    7a6c:	0011      	movs	r1, r2
    7a6e:	0018      	movs	r0, r3
    7a70:	4b27      	ldr	r3, [pc, #156]	; (7b10 <get_fat+0x168>)
    7a72:	4798      	blx	r3
    7a74:	1e03      	subs	r3, r0, #0
    7a76:	d141      	bne.n	7afc <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7a78:	683b      	ldr	r3, [r7, #0]
    7a7a:	005a      	lsls	r2, r3, #1
    7a7c:	23ff      	movs	r3, #255	; 0xff
    7a7e:	005b      	lsls	r3, r3, #1
    7a80:	4013      	ands	r3, r2
    7a82:	3330      	adds	r3, #48	; 0x30
    7a84:	687a      	ldr	r2, [r7, #4]
    7a86:	18d3      	adds	r3, r2, r3
    7a88:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7a8a:	68fb      	ldr	r3, [r7, #12]
    7a8c:	3301      	adds	r3, #1
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	021b      	lsls	r3, r3, #8
    7a92:	b21a      	sxth	r2, r3
    7a94:	68fb      	ldr	r3, [r7, #12]
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	b21b      	sxth	r3, r3
    7a9a:	4313      	orrs	r3, r2
    7a9c:	b21b      	sxth	r3, r3
    7a9e:	b29b      	uxth	r3, r3
    7aa0:	e031      	b.n	7b06 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	6a1a      	ldr	r2, [r3, #32]
    7aa6:	683b      	ldr	r3, [r7, #0]
    7aa8:	09db      	lsrs	r3, r3, #7
    7aaa:	18d2      	adds	r2, r2, r3
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	0011      	movs	r1, r2
    7ab0:	0018      	movs	r0, r3
    7ab2:	4b17      	ldr	r3, [pc, #92]	; (7b10 <get_fat+0x168>)
    7ab4:	4798      	blx	r3
    7ab6:	1e03      	subs	r3, r0, #0
    7ab8:	d122      	bne.n	7b00 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    7aba:	683b      	ldr	r3, [r7, #0]
    7abc:	009a      	lsls	r2, r3, #2
    7abe:	23fe      	movs	r3, #254	; 0xfe
    7ac0:	005b      	lsls	r3, r3, #1
    7ac2:	4013      	ands	r3, r2
    7ac4:	3330      	adds	r3, #48	; 0x30
    7ac6:	687a      	ldr	r2, [r7, #4]
    7ac8:	18d3      	adds	r3, r2, r3
    7aca:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7acc:	68fb      	ldr	r3, [r7, #12]
    7ace:	3303      	adds	r3, #3
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	061a      	lsls	r2, r3, #24
    7ad4:	68fb      	ldr	r3, [r7, #12]
    7ad6:	3302      	adds	r3, #2
    7ad8:	781b      	ldrb	r3, [r3, #0]
    7ada:	041b      	lsls	r3, r3, #16
    7adc:	4313      	orrs	r3, r2
    7ade:	68fa      	ldr	r2, [r7, #12]
    7ae0:	3201      	adds	r2, #1
    7ae2:	7812      	ldrb	r2, [r2, #0]
    7ae4:	0212      	lsls	r2, r2, #8
    7ae6:	4313      	orrs	r3, r2
    7ae8:	68fa      	ldr	r2, [r7, #12]
    7aea:	7812      	ldrb	r2, [r2, #0]
    7aec:	4313      	orrs	r3, r2
    7aee:	011b      	lsls	r3, r3, #4
    7af0:	091b      	lsrs	r3, r3, #4
    7af2:	e008      	b.n	7b06 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7af4:	46c0      	nop			; (mov r8, r8)
    7af6:	e004      	b.n	7b02 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7af8:	46c0      	nop			; (mov r8, r8)
    7afa:	e002      	b.n	7b02 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7afc:	46c0      	nop			; (mov r8, r8)
    7afe:	e000      	b.n	7b02 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7b00:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7b02:	2301      	movs	r3, #1
    7b04:	425b      	negs	r3, r3
}
    7b06:	0018      	movs	r0, r3
    7b08:	46bd      	mov	sp, r7
    7b0a:	b006      	add	sp, #24
    7b0c:	bd80      	pop	{r7, pc}
    7b0e:	46c0      	nop			; (mov r8, r8)
    7b10:	00007711 	.word	0x00007711

00007b14 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7b14:	b590      	push	{r4, r7, lr}
    7b16:	b089      	sub	sp, #36	; 0x24
    7b18:	af00      	add	r7, sp, #0
    7b1a:	60f8      	str	r0, [r7, #12]
    7b1c:	60b9      	str	r1, [r7, #8]
    7b1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7b20:	68bb      	ldr	r3, [r7, #8]
    7b22:	2b01      	cmp	r3, #1
    7b24:	d904      	bls.n	7b30 <put_fat+0x1c>
    7b26:	68fb      	ldr	r3, [r7, #12]
    7b28:	699a      	ldr	r2, [r3, #24]
    7b2a:	68bb      	ldr	r3, [r7, #8]
    7b2c:	429a      	cmp	r2, r3
    7b2e:	d804      	bhi.n	7b3a <put_fat+0x26>
		res = FR_INT_ERR;
    7b30:	231f      	movs	r3, #31
    7b32:	18fb      	adds	r3, r7, r3
    7b34:	2202      	movs	r2, #2
    7b36:	701a      	strb	r2, [r3, #0]
    7b38:	e100      	b.n	7d3c <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7b3a:	68fb      	ldr	r3, [r7, #12]
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	2b02      	cmp	r3, #2
    7b40:	d100      	bne.n	7b44 <put_fat+0x30>
    7b42:	e078      	b.n	7c36 <put_fat+0x122>
    7b44:	2b03      	cmp	r3, #3
    7b46:	d100      	bne.n	7b4a <put_fat+0x36>
    7b48:	e09e      	b.n	7c88 <put_fat+0x174>
    7b4a:	2b01      	cmp	r3, #1
    7b4c:	d000      	beq.n	7b50 <put_fat+0x3c>
    7b4e:	e0e6      	b.n	7d1e <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7b50:	68bb      	ldr	r3, [r7, #8]
    7b52:	61bb      	str	r3, [r7, #24]
    7b54:	69bb      	ldr	r3, [r7, #24]
    7b56:	085b      	lsrs	r3, r3, #1
    7b58:	69ba      	ldr	r2, [r7, #24]
    7b5a:	18d3      	adds	r3, r2, r3
    7b5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7b5e:	68fb      	ldr	r3, [r7, #12]
    7b60:	6a1a      	ldr	r2, [r3, #32]
    7b62:	69bb      	ldr	r3, [r7, #24]
    7b64:	0a5b      	lsrs	r3, r3, #9
    7b66:	18d2      	adds	r2, r2, r3
    7b68:	231f      	movs	r3, #31
    7b6a:	18fc      	adds	r4, r7, r3
    7b6c:	68fb      	ldr	r3, [r7, #12]
    7b6e:	0011      	movs	r1, r2
    7b70:	0018      	movs	r0, r3
    7b72:	4b76      	ldr	r3, [pc, #472]	; (7d4c <put_fat+0x238>)
    7b74:	4798      	blx	r3
    7b76:	0003      	movs	r3, r0
    7b78:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b7a:	231f      	movs	r3, #31
    7b7c:	18fb      	adds	r3, r7, r3
    7b7e:	781b      	ldrb	r3, [r3, #0]
    7b80:	2b00      	cmp	r3, #0
    7b82:	d000      	beq.n	7b86 <put_fat+0x72>
    7b84:	e0d0      	b.n	7d28 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7b86:	69bb      	ldr	r3, [r7, #24]
    7b88:	05db      	lsls	r3, r3, #23
    7b8a:	0ddb      	lsrs	r3, r3, #23
    7b8c:	3330      	adds	r3, #48	; 0x30
    7b8e:	68fa      	ldr	r2, [r7, #12]
    7b90:	18d3      	adds	r3, r2, r3
    7b92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7b94:	68bb      	ldr	r3, [r7, #8]
    7b96:	2201      	movs	r2, #1
    7b98:	4013      	ands	r3, r2
    7b9a:	d00d      	beq.n	7bb8 <put_fat+0xa4>
    7b9c:	697b      	ldr	r3, [r7, #20]
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	b25b      	sxtb	r3, r3
    7ba2:	220f      	movs	r2, #15
    7ba4:	4013      	ands	r3, r2
    7ba6:	b25a      	sxtb	r2, r3
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	b2db      	uxtb	r3, r3
    7bac:	011b      	lsls	r3, r3, #4
    7bae:	b25b      	sxtb	r3, r3
    7bb0:	4313      	orrs	r3, r2
    7bb2:	b25b      	sxtb	r3, r3
    7bb4:	b2db      	uxtb	r3, r3
    7bb6:	e001      	b.n	7bbc <put_fat+0xa8>
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	b2db      	uxtb	r3, r3
    7bbc:	697a      	ldr	r2, [r7, #20]
    7bbe:	7013      	strb	r3, [r2, #0]
			bc++;
    7bc0:	69bb      	ldr	r3, [r7, #24]
    7bc2:	3301      	adds	r3, #1
    7bc4:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    7bc6:	68fb      	ldr	r3, [r7, #12]
    7bc8:	2201      	movs	r2, #1
    7bca:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7bcc:	68fb      	ldr	r3, [r7, #12]
    7bce:	6a1a      	ldr	r2, [r3, #32]
    7bd0:	69bb      	ldr	r3, [r7, #24]
    7bd2:	0a5b      	lsrs	r3, r3, #9
    7bd4:	18d2      	adds	r2, r2, r3
    7bd6:	231f      	movs	r3, #31
    7bd8:	18fc      	adds	r4, r7, r3
    7bda:	68fb      	ldr	r3, [r7, #12]
    7bdc:	0011      	movs	r1, r2
    7bde:	0018      	movs	r0, r3
    7be0:	4b5a      	ldr	r3, [pc, #360]	; (7d4c <put_fat+0x238>)
    7be2:	4798      	blx	r3
    7be4:	0003      	movs	r3, r0
    7be6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7be8:	231f      	movs	r3, #31
    7bea:	18fb      	adds	r3, r7, r3
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	2b00      	cmp	r3, #0
    7bf0:	d000      	beq.n	7bf4 <put_fat+0xe0>
    7bf2:	e09b      	b.n	7d2c <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    7bf4:	69bb      	ldr	r3, [r7, #24]
    7bf6:	05db      	lsls	r3, r3, #23
    7bf8:	0ddb      	lsrs	r3, r3, #23
    7bfa:	3330      	adds	r3, #48	; 0x30
    7bfc:	68fa      	ldr	r2, [r7, #12]
    7bfe:	18d3      	adds	r3, r2, r3
    7c00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7c02:	68bb      	ldr	r3, [r7, #8]
    7c04:	2201      	movs	r2, #1
    7c06:	4013      	ands	r3, r2
    7c08:	d003      	beq.n	7c12 <put_fat+0xfe>
    7c0a:	687b      	ldr	r3, [r7, #4]
    7c0c:	091b      	lsrs	r3, r3, #4
    7c0e:	b2db      	uxtb	r3, r3
    7c10:	e00e      	b.n	7c30 <put_fat+0x11c>
    7c12:	697b      	ldr	r3, [r7, #20]
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	b25b      	sxtb	r3, r3
    7c18:	220f      	movs	r2, #15
    7c1a:	4393      	bics	r3, r2
    7c1c:	b25a      	sxtb	r2, r3
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	0a1b      	lsrs	r3, r3, #8
    7c22:	b25b      	sxtb	r3, r3
    7c24:	210f      	movs	r1, #15
    7c26:	400b      	ands	r3, r1
    7c28:	b25b      	sxtb	r3, r3
    7c2a:	4313      	orrs	r3, r2
    7c2c:	b25b      	sxtb	r3, r3
    7c2e:	b2db      	uxtb	r3, r3
    7c30:	697a      	ldr	r2, [r7, #20]
    7c32:	7013      	strb	r3, [r2, #0]
			break;
    7c34:	e07f      	b.n	7d36 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7c36:	68fb      	ldr	r3, [r7, #12]
    7c38:	6a1a      	ldr	r2, [r3, #32]
    7c3a:	68bb      	ldr	r3, [r7, #8]
    7c3c:	0a1b      	lsrs	r3, r3, #8
    7c3e:	18d2      	adds	r2, r2, r3
    7c40:	231f      	movs	r3, #31
    7c42:	18fc      	adds	r4, r7, r3
    7c44:	68fb      	ldr	r3, [r7, #12]
    7c46:	0011      	movs	r1, r2
    7c48:	0018      	movs	r0, r3
    7c4a:	4b40      	ldr	r3, [pc, #256]	; (7d4c <put_fat+0x238>)
    7c4c:	4798      	blx	r3
    7c4e:	0003      	movs	r3, r0
    7c50:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7c52:	231f      	movs	r3, #31
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d169      	bne.n	7d30 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7c5c:	68bb      	ldr	r3, [r7, #8]
    7c5e:	005a      	lsls	r2, r3, #1
    7c60:	23ff      	movs	r3, #255	; 0xff
    7c62:	005b      	lsls	r3, r3, #1
    7c64:	4013      	ands	r3, r2
    7c66:	3330      	adds	r3, #48	; 0x30
    7c68:	68fa      	ldr	r2, [r7, #12]
    7c6a:	18d3      	adds	r3, r2, r3
    7c6c:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	b2da      	uxtb	r2, r3
    7c72:	697b      	ldr	r3, [r7, #20]
    7c74:	701a      	strb	r2, [r3, #0]
    7c76:	697b      	ldr	r3, [r7, #20]
    7c78:	3301      	adds	r3, #1
    7c7a:	687a      	ldr	r2, [r7, #4]
    7c7c:	b292      	uxth	r2, r2
    7c7e:	0a12      	lsrs	r2, r2, #8
    7c80:	b292      	uxth	r2, r2
    7c82:	b2d2      	uxtb	r2, r2
    7c84:	701a      	strb	r2, [r3, #0]
			break;
    7c86:	e056      	b.n	7d36 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7c88:	68fb      	ldr	r3, [r7, #12]
    7c8a:	6a1a      	ldr	r2, [r3, #32]
    7c8c:	68bb      	ldr	r3, [r7, #8]
    7c8e:	09db      	lsrs	r3, r3, #7
    7c90:	18d2      	adds	r2, r2, r3
    7c92:	231f      	movs	r3, #31
    7c94:	18fc      	adds	r4, r7, r3
    7c96:	68fb      	ldr	r3, [r7, #12]
    7c98:	0011      	movs	r1, r2
    7c9a:	0018      	movs	r0, r3
    7c9c:	4b2b      	ldr	r3, [pc, #172]	; (7d4c <put_fat+0x238>)
    7c9e:	4798      	blx	r3
    7ca0:	0003      	movs	r3, r0
    7ca2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7ca4:	231f      	movs	r3, #31
    7ca6:	18fb      	adds	r3, r7, r3
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	2b00      	cmp	r3, #0
    7cac:	d142      	bne.n	7d34 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7cae:	68bb      	ldr	r3, [r7, #8]
    7cb0:	009a      	lsls	r2, r3, #2
    7cb2:	23fe      	movs	r3, #254	; 0xfe
    7cb4:	005b      	lsls	r3, r3, #1
    7cb6:	4013      	ands	r3, r2
    7cb8:	3330      	adds	r3, #48	; 0x30
    7cba:	68fa      	ldr	r2, [r7, #12]
    7cbc:	18d3      	adds	r3, r2, r3
    7cbe:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7cc0:	697b      	ldr	r3, [r7, #20]
    7cc2:	3303      	adds	r3, #3
    7cc4:	781b      	ldrb	r3, [r3, #0]
    7cc6:	061a      	lsls	r2, r3, #24
    7cc8:	697b      	ldr	r3, [r7, #20]
    7cca:	3302      	adds	r3, #2
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	041b      	lsls	r3, r3, #16
    7cd0:	4313      	orrs	r3, r2
    7cd2:	697a      	ldr	r2, [r7, #20]
    7cd4:	3201      	adds	r2, #1
    7cd6:	7812      	ldrb	r2, [r2, #0]
    7cd8:	0212      	lsls	r2, r2, #8
    7cda:	4313      	orrs	r3, r2
    7cdc:	697a      	ldr	r2, [r7, #20]
    7cde:	7812      	ldrb	r2, [r2, #0]
    7ce0:	4313      	orrs	r3, r2
    7ce2:	0f1b      	lsrs	r3, r3, #28
    7ce4:	071b      	lsls	r3, r3, #28
    7ce6:	687a      	ldr	r2, [r7, #4]
    7ce8:	4313      	orrs	r3, r2
    7cea:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	b2da      	uxtb	r2, r3
    7cf0:	697b      	ldr	r3, [r7, #20]
    7cf2:	701a      	strb	r2, [r3, #0]
    7cf4:	697b      	ldr	r3, [r7, #20]
    7cf6:	3301      	adds	r3, #1
    7cf8:	687a      	ldr	r2, [r7, #4]
    7cfa:	b292      	uxth	r2, r2
    7cfc:	0a12      	lsrs	r2, r2, #8
    7cfe:	b292      	uxth	r2, r2
    7d00:	b2d2      	uxtb	r2, r2
    7d02:	701a      	strb	r2, [r3, #0]
    7d04:	697b      	ldr	r3, [r7, #20]
    7d06:	3302      	adds	r3, #2
    7d08:	687a      	ldr	r2, [r7, #4]
    7d0a:	0c12      	lsrs	r2, r2, #16
    7d0c:	b2d2      	uxtb	r2, r2
    7d0e:	701a      	strb	r2, [r3, #0]
    7d10:	697b      	ldr	r3, [r7, #20]
    7d12:	3303      	adds	r3, #3
    7d14:	687a      	ldr	r2, [r7, #4]
    7d16:	0e12      	lsrs	r2, r2, #24
    7d18:	b2d2      	uxtb	r2, r2
    7d1a:	701a      	strb	r2, [r3, #0]
			break;
    7d1c:	e00b      	b.n	7d36 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7d1e:	231f      	movs	r3, #31
    7d20:	18fb      	adds	r3, r7, r3
    7d22:	2202      	movs	r2, #2
    7d24:	701a      	strb	r2, [r3, #0]
    7d26:	e006      	b.n	7d36 <put_fat+0x222>
			if (res != FR_OK) break;
    7d28:	46c0      	nop			; (mov r8, r8)
    7d2a:	e004      	b.n	7d36 <put_fat+0x222>
			if (res != FR_OK) break;
    7d2c:	46c0      	nop			; (mov r8, r8)
    7d2e:	e002      	b.n	7d36 <put_fat+0x222>
			if (res != FR_OK) break;
    7d30:	46c0      	nop			; (mov r8, r8)
    7d32:	e000      	b.n	7d36 <put_fat+0x222>
			if (res != FR_OK) break;
    7d34:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7d36:	68fb      	ldr	r3, [r7, #12]
    7d38:	2201      	movs	r2, #1
    7d3a:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7d3c:	231f      	movs	r3, #31
    7d3e:	18fb      	adds	r3, r7, r3
    7d40:	781b      	ldrb	r3, [r3, #0]
}
    7d42:	0018      	movs	r0, r3
    7d44:	46bd      	mov	sp, r7
    7d46:	b009      	add	sp, #36	; 0x24
    7d48:	bd90      	pop	{r4, r7, pc}
    7d4a:	46c0      	nop			; (mov r8, r8)
    7d4c:	00007711 	.word	0x00007711

00007d50 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7d50:	b590      	push	{r4, r7, lr}
    7d52:	b085      	sub	sp, #20
    7d54:	af00      	add	r7, sp, #0
    7d56:	6078      	str	r0, [r7, #4]
    7d58:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7d5a:	683b      	ldr	r3, [r7, #0]
    7d5c:	2b01      	cmp	r3, #1
    7d5e:	d904      	bls.n	7d6a <remove_chain+0x1a>
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	699a      	ldr	r2, [r3, #24]
    7d64:	683b      	ldr	r3, [r7, #0]
    7d66:	429a      	cmp	r2, r3
    7d68:	d804      	bhi.n	7d74 <remove_chain+0x24>
		res = FR_INT_ERR;
    7d6a:	230f      	movs	r3, #15
    7d6c:	18fb      	adds	r3, r7, r3
    7d6e:	2202      	movs	r2, #2
    7d70:	701a      	strb	r2, [r3, #0]
    7d72:	e045      	b.n	7e00 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7d74:	230f      	movs	r3, #15
    7d76:	18fb      	adds	r3, r7, r3
    7d78:	2200      	movs	r2, #0
    7d7a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7d7c:	e037      	b.n	7dee <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7d7e:	683a      	ldr	r2, [r7, #0]
    7d80:	687b      	ldr	r3, [r7, #4]
    7d82:	0011      	movs	r1, r2
    7d84:	0018      	movs	r0, r3
    7d86:	4b22      	ldr	r3, [pc, #136]	; (7e10 <remove_chain+0xc0>)
    7d88:	4798      	blx	r3
    7d8a:	0003      	movs	r3, r0
    7d8c:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7d8e:	68bb      	ldr	r3, [r7, #8]
    7d90:	2b00      	cmp	r3, #0
    7d92:	d032      	beq.n	7dfa <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7d94:	68bb      	ldr	r3, [r7, #8]
    7d96:	2b01      	cmp	r3, #1
    7d98:	d104      	bne.n	7da4 <remove_chain+0x54>
    7d9a:	230f      	movs	r3, #15
    7d9c:	18fb      	adds	r3, r7, r3
    7d9e:	2202      	movs	r2, #2
    7da0:	701a      	strb	r2, [r3, #0]
    7da2:	e02d      	b.n	7e00 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7da4:	68bb      	ldr	r3, [r7, #8]
    7da6:	3301      	adds	r3, #1
    7da8:	d104      	bne.n	7db4 <remove_chain+0x64>
    7daa:	230f      	movs	r3, #15
    7dac:	18fb      	adds	r3, r7, r3
    7dae:	2201      	movs	r2, #1
    7db0:	701a      	strb	r2, [r3, #0]
    7db2:	e025      	b.n	7e00 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7db4:	230f      	movs	r3, #15
    7db6:	18fc      	adds	r4, r7, r3
    7db8:	6839      	ldr	r1, [r7, #0]
    7dba:	687b      	ldr	r3, [r7, #4]
    7dbc:	2200      	movs	r2, #0
    7dbe:	0018      	movs	r0, r3
    7dc0:	4b14      	ldr	r3, [pc, #80]	; (7e14 <remove_chain+0xc4>)
    7dc2:	4798      	blx	r3
    7dc4:	0003      	movs	r3, r0
    7dc6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7dc8:	230f      	movs	r3, #15
    7dca:	18fb      	adds	r3, r7, r3
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d115      	bne.n	7dfe <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	691b      	ldr	r3, [r3, #16]
    7dd6:	3301      	adds	r3, #1
    7dd8:	d007      	beq.n	7dea <remove_chain+0x9a>
				fs->free_clust++;
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	691b      	ldr	r3, [r3, #16]
    7dde:	1c5a      	adds	r2, r3, #1
    7de0:	687b      	ldr	r3, [r7, #4]
    7de2:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7de4:	687b      	ldr	r3, [r7, #4]
    7de6:	2201      	movs	r2, #1
    7de8:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7dea:	68bb      	ldr	r3, [r7, #8]
    7dec:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7dee:	687b      	ldr	r3, [r7, #4]
    7df0:	699a      	ldr	r2, [r3, #24]
    7df2:	683b      	ldr	r3, [r7, #0]
    7df4:	429a      	cmp	r2, r3
    7df6:	d8c2      	bhi.n	7d7e <remove_chain+0x2e>
    7df8:	e002      	b.n	7e00 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	e000      	b.n	7e00 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7dfe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7e00:	230f      	movs	r3, #15
    7e02:	18fb      	adds	r3, r7, r3
    7e04:	781b      	ldrb	r3, [r3, #0]
}
    7e06:	0018      	movs	r0, r3
    7e08:	46bd      	mov	sp, r7
    7e0a:	b005      	add	sp, #20
    7e0c:	bd90      	pop	{r4, r7, pc}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	000079a9 	.word	0x000079a9
    7e14:	00007b15 	.word	0x00007b15

00007e18 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7e18:	b590      	push	{r4, r7, lr}
    7e1a:	b087      	sub	sp, #28
    7e1c:	af00      	add	r7, sp, #0
    7e1e:	6078      	str	r0, [r7, #4]
    7e20:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7e22:	683b      	ldr	r3, [r7, #0]
    7e24:	2b00      	cmp	r3, #0
    7e26:	d10d      	bne.n	7e44 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7e28:	687b      	ldr	r3, [r7, #4]
    7e2a:	68db      	ldr	r3, [r3, #12]
    7e2c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7e2e:	693b      	ldr	r3, [r7, #16]
    7e30:	2b00      	cmp	r3, #0
    7e32:	d004      	beq.n	7e3e <create_chain+0x26>
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	699a      	ldr	r2, [r3, #24]
    7e38:	693b      	ldr	r3, [r7, #16]
    7e3a:	429a      	cmp	r2, r3
    7e3c:	d818      	bhi.n	7e70 <create_chain+0x58>
    7e3e:	2301      	movs	r3, #1
    7e40:	613b      	str	r3, [r7, #16]
    7e42:	e015      	b.n	7e70 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7e44:	683a      	ldr	r2, [r7, #0]
    7e46:	687b      	ldr	r3, [r7, #4]
    7e48:	0011      	movs	r1, r2
    7e4a:	0018      	movs	r0, r3
    7e4c:	4b3e      	ldr	r3, [pc, #248]	; (7f48 <create_chain+0x130>)
    7e4e:	4798      	blx	r3
    7e50:	0003      	movs	r3, r0
    7e52:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7e54:	68bb      	ldr	r3, [r7, #8]
    7e56:	2b01      	cmp	r3, #1
    7e58:	d801      	bhi.n	7e5e <create_chain+0x46>
    7e5a:	2301      	movs	r3, #1
    7e5c:	e070      	b.n	7f40 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7e5e:	687b      	ldr	r3, [r7, #4]
    7e60:	699a      	ldr	r2, [r3, #24]
    7e62:	68bb      	ldr	r3, [r7, #8]
    7e64:	429a      	cmp	r2, r3
    7e66:	d901      	bls.n	7e6c <create_chain+0x54>
    7e68:	68bb      	ldr	r3, [r7, #8]
    7e6a:	e069      	b.n	7f40 <create_chain+0x128>
		scl = clst;
    7e6c:	683b      	ldr	r3, [r7, #0]
    7e6e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7e70:	693b      	ldr	r3, [r7, #16]
    7e72:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7e74:	697b      	ldr	r3, [r7, #20]
    7e76:	3301      	adds	r3, #1
    7e78:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	699a      	ldr	r2, [r3, #24]
    7e7e:	697b      	ldr	r3, [r7, #20]
    7e80:	429a      	cmp	r2, r3
    7e82:	d807      	bhi.n	7e94 <create_chain+0x7c>
			ncl = 2;
    7e84:	2302      	movs	r3, #2
    7e86:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7e88:	697a      	ldr	r2, [r7, #20]
    7e8a:	693b      	ldr	r3, [r7, #16]
    7e8c:	429a      	cmp	r2, r3
    7e8e:	d901      	bls.n	7e94 <create_chain+0x7c>
    7e90:	2300      	movs	r3, #0
    7e92:	e055      	b.n	7f40 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7e94:	697a      	ldr	r2, [r7, #20]
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	0011      	movs	r1, r2
    7e9a:	0018      	movs	r0, r3
    7e9c:	4b2a      	ldr	r3, [pc, #168]	; (7f48 <create_chain+0x130>)
    7e9e:	4798      	blx	r3
    7ea0:	0003      	movs	r3, r0
    7ea2:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7ea4:	68bb      	ldr	r3, [r7, #8]
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d00d      	beq.n	7ec6 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7eaa:	68bb      	ldr	r3, [r7, #8]
    7eac:	3301      	adds	r3, #1
    7eae:	d002      	beq.n	7eb6 <create_chain+0x9e>
    7eb0:	68bb      	ldr	r3, [r7, #8]
    7eb2:	2b01      	cmp	r3, #1
    7eb4:	d101      	bne.n	7eba <create_chain+0xa2>
			return cs;
    7eb6:	68bb      	ldr	r3, [r7, #8]
    7eb8:	e042      	b.n	7f40 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7eba:	697a      	ldr	r2, [r7, #20]
    7ebc:	693b      	ldr	r3, [r7, #16]
    7ebe:	429a      	cmp	r2, r3
    7ec0:	d1d8      	bne.n	7e74 <create_chain+0x5c>
    7ec2:	2300      	movs	r3, #0
    7ec4:	e03c      	b.n	7f40 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7ec6:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7ec8:	230f      	movs	r3, #15
    7eca:	18fc      	adds	r4, r7, r3
    7ecc:	4a1f      	ldr	r2, [pc, #124]	; (7f4c <create_chain+0x134>)
    7ece:	6979      	ldr	r1, [r7, #20]
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	0018      	movs	r0, r3
    7ed4:	4b1e      	ldr	r3, [pc, #120]	; (7f50 <create_chain+0x138>)
    7ed6:	4798      	blx	r3
    7ed8:	0003      	movs	r3, r0
    7eda:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7edc:	230f      	movs	r3, #15
    7ede:	18fb      	adds	r3, r7, r3
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	d10c      	bne.n	7f00 <create_chain+0xe8>
    7ee6:	683b      	ldr	r3, [r7, #0]
    7ee8:	2b00      	cmp	r3, #0
    7eea:	d009      	beq.n	7f00 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7eec:	230f      	movs	r3, #15
    7eee:	18fc      	adds	r4, r7, r3
    7ef0:	697a      	ldr	r2, [r7, #20]
    7ef2:	6839      	ldr	r1, [r7, #0]
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	0018      	movs	r0, r3
    7ef8:	4b15      	ldr	r3, [pc, #84]	; (7f50 <create_chain+0x138>)
    7efa:	4798      	blx	r3
    7efc:	0003      	movs	r3, r0
    7efe:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7f00:	230f      	movs	r3, #15
    7f02:	18fb      	adds	r3, r7, r3
    7f04:	781b      	ldrb	r3, [r3, #0]
    7f06:	2b00      	cmp	r3, #0
    7f08:	d10f      	bne.n	7f2a <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	697a      	ldr	r2, [r7, #20]
    7f0e:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	691b      	ldr	r3, [r3, #16]
    7f14:	3301      	adds	r3, #1
    7f16:	d012      	beq.n	7f3e <create_chain+0x126>
			fs->free_clust--;
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	691b      	ldr	r3, [r3, #16]
    7f1c:	1e5a      	subs	r2, r3, #1
    7f1e:	687b      	ldr	r3, [r7, #4]
    7f20:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	2201      	movs	r2, #1
    7f26:	715a      	strb	r2, [r3, #5]
    7f28:	e009      	b.n	7f3e <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7f2a:	230f      	movs	r3, #15
    7f2c:	18fb      	adds	r3, r7, r3
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	2b01      	cmp	r3, #1
    7f32:	d102      	bne.n	7f3a <create_chain+0x122>
    7f34:	2301      	movs	r3, #1
    7f36:	425b      	negs	r3, r3
    7f38:	e000      	b.n	7f3c <create_chain+0x124>
    7f3a:	2301      	movs	r3, #1
    7f3c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7f3e:	697b      	ldr	r3, [r7, #20]
}
    7f40:	0018      	movs	r0, r3
    7f42:	46bd      	mov	sp, r7
    7f44:	b007      	add	sp, #28
    7f46:	bd90      	pop	{r4, r7, pc}
    7f48:	000079a9 	.word	0x000079a9
    7f4c:	0fffffff 	.word	0x0fffffff
    7f50:	00007b15 	.word	0x00007b15

00007f54 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7f54:	b580      	push	{r7, lr}
    7f56:	b084      	sub	sp, #16
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
    7f5c:	000a      	movs	r2, r1
    7f5e:	1cbb      	adds	r3, r7, #2
    7f60:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	1cba      	adds	r2, r7, #2
    7f66:	8812      	ldrh	r2, [r2, #0]
    7f68:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7f6a:	687b      	ldr	r3, [r7, #4]
    7f6c:	689b      	ldr	r3, [r3, #8]
    7f6e:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7f70:	68fb      	ldr	r3, [r7, #12]
    7f72:	2b01      	cmp	r3, #1
    7f74:	d005      	beq.n	7f82 <dir_sdi+0x2e>
    7f76:	687b      	ldr	r3, [r7, #4]
    7f78:	681b      	ldr	r3, [r3, #0]
    7f7a:	699a      	ldr	r2, [r3, #24]
    7f7c:	68fb      	ldr	r3, [r7, #12]
    7f7e:	429a      	cmp	r2, r3
    7f80:	d801      	bhi.n	7f86 <dir_sdi+0x32>
		return FR_INT_ERR;
    7f82:	2302      	movs	r3, #2
    7f84:	e075      	b.n	8072 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7f86:	68fb      	ldr	r3, [r7, #12]
    7f88:	2b00      	cmp	r3, #0
    7f8a:	d108      	bne.n	7f9e <dir_sdi+0x4a>
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	2b03      	cmp	r3, #3
    7f94:	d103      	bne.n	7f9e <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7f96:	687b      	ldr	r3, [r7, #4]
    7f98:	681b      	ldr	r3, [r3, #0]
    7f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f9c:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7f9e:	68fb      	ldr	r3, [r7, #12]
    7fa0:	2b00      	cmp	r3, #0
    7fa2:	d116      	bne.n	7fd2 <dir_sdi+0x7e>
		dj->clust = clst;
    7fa4:	687b      	ldr	r3, [r7, #4]
    7fa6:	68fa      	ldr	r2, [r7, #12]
    7fa8:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7faa:	687b      	ldr	r3, [r7, #4]
    7fac:	681b      	ldr	r3, [r3, #0]
    7fae:	891b      	ldrh	r3, [r3, #8]
    7fb0:	1cba      	adds	r2, r7, #2
    7fb2:	8812      	ldrh	r2, [r2, #0]
    7fb4:	429a      	cmp	r2, r3
    7fb6:	d301      	bcc.n	7fbc <dir_sdi+0x68>
			return FR_INT_ERR;
    7fb8:	2302      	movs	r3, #2
    7fba:	e05a      	b.n	8072 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	681b      	ldr	r3, [r3, #0]
    7fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fc2:	1cba      	adds	r2, r7, #2
    7fc4:	8812      	ldrh	r2, [r2, #0]
    7fc6:	0912      	lsrs	r2, r2, #4
    7fc8:	b292      	uxth	r2, r2
    7fca:	189a      	adds	r2, r3, r2
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	611a      	str	r2, [r3, #16]
    7fd0:	e042      	b.n	8058 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	789b      	ldrb	r3, [r3, #2]
    7fd8:	b29a      	uxth	r2, r3
    7fda:	230a      	movs	r3, #10
    7fdc:	18fb      	adds	r3, r7, r3
    7fde:	0112      	lsls	r2, r2, #4
    7fe0:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7fe2:	e020      	b.n	8026 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	681b      	ldr	r3, [r3, #0]
    7fe8:	68fa      	ldr	r2, [r7, #12]
    7fea:	0011      	movs	r1, r2
    7fec:	0018      	movs	r0, r3
    7fee:	4b23      	ldr	r3, [pc, #140]	; (807c <dir_sdi+0x128>)
    7ff0:	4798      	blx	r3
    7ff2:	0003      	movs	r3, r0
    7ff4:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7ff6:	68fb      	ldr	r3, [r7, #12]
    7ff8:	3301      	adds	r3, #1
    7ffa:	d101      	bne.n	8000 <dir_sdi+0xac>
    7ffc:	2301      	movs	r3, #1
    7ffe:	e038      	b.n	8072 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    8000:	68fb      	ldr	r3, [r7, #12]
    8002:	2b01      	cmp	r3, #1
    8004:	d905      	bls.n	8012 <dir_sdi+0xbe>
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	699a      	ldr	r2, [r3, #24]
    800c:	68fb      	ldr	r3, [r7, #12]
    800e:	429a      	cmp	r2, r3
    8010:	d801      	bhi.n	8016 <dir_sdi+0xc2>
				return FR_INT_ERR;
    8012:	2302      	movs	r3, #2
    8014:	e02d      	b.n	8072 <dir_sdi+0x11e>
			idx -= ic;
    8016:	1cbb      	adds	r3, r7, #2
    8018:	1cb9      	adds	r1, r7, #2
    801a:	220a      	movs	r2, #10
    801c:	18ba      	adds	r2, r7, r2
    801e:	8809      	ldrh	r1, [r1, #0]
    8020:	8812      	ldrh	r2, [r2, #0]
    8022:	1a8a      	subs	r2, r1, r2
    8024:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    8026:	1cba      	adds	r2, r7, #2
    8028:	230a      	movs	r3, #10
    802a:	18fb      	adds	r3, r7, r3
    802c:	8812      	ldrh	r2, [r2, #0]
    802e:	881b      	ldrh	r3, [r3, #0]
    8030:	429a      	cmp	r2, r3
    8032:	d2d7      	bcs.n	7fe4 <dir_sdi+0x90>
		}
		dj->clust = clst;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	68fa      	ldr	r2, [r7, #12]
    8038:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	681b      	ldr	r3, [r3, #0]
    803e:	68fa      	ldr	r2, [r7, #12]
    8040:	0011      	movs	r1, r2
    8042:	0018      	movs	r0, r3
    8044:	4b0e      	ldr	r3, [pc, #56]	; (8080 <dir_sdi+0x12c>)
    8046:	4798      	blx	r3
    8048:	0002      	movs	r2, r0
    804a:	1cbb      	adds	r3, r7, #2
    804c:	881b      	ldrh	r3, [r3, #0]
    804e:	091b      	lsrs	r3, r3, #4
    8050:	b29b      	uxth	r3, r3
    8052:	18d2      	adds	r2, r2, r3
    8054:	687b      	ldr	r3, [r7, #4]
    8056:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    8058:	687b      	ldr	r3, [r7, #4]
    805a:	681b      	ldr	r3, [r3, #0]
    805c:	3330      	adds	r3, #48	; 0x30
    805e:	001a      	movs	r2, r3
    8060:	1cbb      	adds	r3, r7, #2
    8062:	881b      	ldrh	r3, [r3, #0]
    8064:	210f      	movs	r1, #15
    8066:	400b      	ands	r3, r1
    8068:	015b      	lsls	r3, r3, #5
    806a:	18d2      	adds	r2, r2, r3
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    8070:	2300      	movs	r3, #0
}
    8072:	0018      	movs	r0, r3
    8074:	46bd      	mov	sp, r7
    8076:	b004      	add	sp, #16
    8078:	bd80      	pop	{r7, pc}
    807a:	46c0      	nop			; (mov r8, r8)
    807c:	000079a9 	.word	0x000079a9
    8080:	00007971 	.word	0x00007971

00008084 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    8084:	b590      	push	{r4, r7, lr}
    8086:	b085      	sub	sp, #20
    8088:	af00      	add	r7, sp, #0
    808a:	6078      	str	r0, [r7, #4]
    808c:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	88da      	ldrh	r2, [r3, #6]
    8092:	2308      	movs	r3, #8
    8094:	18fb      	adds	r3, r7, r3
    8096:	3201      	adds	r2, #1
    8098:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    809a:	2308      	movs	r3, #8
    809c:	18fb      	adds	r3, r7, r3
    809e:	881b      	ldrh	r3, [r3, #0]
    80a0:	2b00      	cmp	r3, #0
    80a2:	d003      	beq.n	80ac <dir_next+0x28>
    80a4:	687b      	ldr	r3, [r7, #4]
    80a6:	691b      	ldr	r3, [r3, #16]
    80a8:	2b00      	cmp	r3, #0
    80aa:	d101      	bne.n	80b0 <dir_next+0x2c>
		return FR_NO_FILE;
    80ac:	2304      	movs	r3, #4
    80ae:	e0d2      	b.n	8256 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    80b0:	2308      	movs	r3, #8
    80b2:	18fb      	adds	r3, r7, r3
    80b4:	881b      	ldrh	r3, [r3, #0]
    80b6:	220f      	movs	r2, #15
    80b8:	4013      	ands	r3, r2
    80ba:	b29b      	uxth	r3, r3
    80bc:	2b00      	cmp	r3, #0
    80be:	d000      	beq.n	80c2 <dir_next+0x3e>
    80c0:	e0b6      	b.n	8230 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    80c2:	687b      	ldr	r3, [r7, #4]
    80c4:	691b      	ldr	r3, [r3, #16]
    80c6:	1c5a      	adds	r2, r3, #1
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	68db      	ldr	r3, [r3, #12]
    80d0:	2b00      	cmp	r3, #0
    80d2:	d10a      	bne.n	80ea <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    80d4:	687b      	ldr	r3, [r7, #4]
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	891b      	ldrh	r3, [r3, #8]
    80da:	2208      	movs	r2, #8
    80dc:	18ba      	adds	r2, r7, r2
    80de:	8812      	ldrh	r2, [r2, #0]
    80e0:	429a      	cmp	r2, r3
    80e2:	d200      	bcs.n	80e6 <dir_next+0x62>
    80e4:	e0a4      	b.n	8230 <dir_next+0x1ac>
				return FR_NO_FILE;
    80e6:	2304      	movs	r3, #4
    80e8:	e0b5      	b.n	8256 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    80ea:	2308      	movs	r3, #8
    80ec:	18fb      	adds	r3, r7, r3
    80ee:	881b      	ldrh	r3, [r3, #0]
    80f0:	091b      	lsrs	r3, r3, #4
    80f2:	b29b      	uxth	r3, r3
    80f4:	001a      	movs	r2, r3
    80f6:	687b      	ldr	r3, [r7, #4]
    80f8:	681b      	ldr	r3, [r3, #0]
    80fa:	789b      	ldrb	r3, [r3, #2]
    80fc:	3b01      	subs	r3, #1
    80fe:	4013      	ands	r3, r2
    8100:	d000      	beq.n	8104 <dir_next+0x80>
    8102:	e095      	b.n	8230 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	681a      	ldr	r2, [r3, #0]
    8108:	687b      	ldr	r3, [r7, #4]
    810a:	68db      	ldr	r3, [r3, #12]
    810c:	0019      	movs	r1, r3
    810e:	0010      	movs	r0, r2
    8110:	4b53      	ldr	r3, [pc, #332]	; (8260 <dir_next+0x1dc>)
    8112:	4798      	blx	r3
    8114:	0003      	movs	r3, r0
    8116:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    8118:	68fb      	ldr	r3, [r7, #12]
    811a:	2b01      	cmp	r3, #1
    811c:	d801      	bhi.n	8122 <dir_next+0x9e>
    811e:	2302      	movs	r3, #2
    8120:	e099      	b.n	8256 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8122:	68fb      	ldr	r3, [r7, #12]
    8124:	3301      	adds	r3, #1
    8126:	d101      	bne.n	812c <dir_next+0xa8>
    8128:	2301      	movs	r3, #1
    812a:	e094      	b.n	8256 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    812c:	687b      	ldr	r3, [r7, #4]
    812e:	681b      	ldr	r3, [r3, #0]
    8130:	699a      	ldr	r2, [r3, #24]
    8132:	68fb      	ldr	r3, [r7, #12]
    8134:	429a      	cmp	r2, r3
    8136:	d900      	bls.n	813a <dir_next+0xb6>
    8138:	e06d      	b.n	8216 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    813a:	683b      	ldr	r3, [r7, #0]
    813c:	2b00      	cmp	r3, #0
    813e:	d101      	bne.n	8144 <dir_next+0xc0>
    8140:	2304      	movs	r3, #4
    8142:	e088      	b.n	8256 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	681a      	ldr	r2, [r3, #0]
    8148:	687b      	ldr	r3, [r7, #4]
    814a:	68db      	ldr	r3, [r3, #12]
    814c:	0019      	movs	r1, r3
    814e:	0010      	movs	r0, r2
    8150:	4b44      	ldr	r3, [pc, #272]	; (8264 <dir_next+0x1e0>)
    8152:	4798      	blx	r3
    8154:	0003      	movs	r3, r0
    8156:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    8158:	68fb      	ldr	r3, [r7, #12]
    815a:	2b00      	cmp	r3, #0
    815c:	d101      	bne.n	8162 <dir_next+0xde>
    815e:	2307      	movs	r3, #7
    8160:	e079      	b.n	8256 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    8162:	68fb      	ldr	r3, [r7, #12]
    8164:	2b01      	cmp	r3, #1
    8166:	d101      	bne.n	816c <dir_next+0xe8>
    8168:	2302      	movs	r3, #2
    816a:	e074      	b.n	8256 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    816c:	68fb      	ldr	r3, [r7, #12]
    816e:	3301      	adds	r3, #1
    8170:	d101      	bne.n	8176 <dir_next+0xf2>
    8172:	2301      	movs	r3, #1
    8174:	e06f      	b.n	8256 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	2100      	movs	r1, #0
    817c:	0018      	movs	r0, r3
    817e:	4b3a      	ldr	r3, [pc, #232]	; (8268 <dir_next+0x1e4>)
    8180:	4798      	blx	r3
    8182:	1e03      	subs	r3, r0, #0
    8184:	d001      	beq.n	818a <dir_next+0x106>
    8186:	2301      	movs	r3, #1
    8188:	e065      	b.n	8256 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	681b      	ldr	r3, [r3, #0]
    818e:	3330      	adds	r3, #48	; 0x30
    8190:	0018      	movs	r0, r3
    8192:	2380      	movs	r3, #128	; 0x80
    8194:	009b      	lsls	r3, r3, #2
    8196:	001a      	movs	r2, r3
    8198:	2100      	movs	r1, #0
    819a:	4b34      	ldr	r3, [pc, #208]	; (826c <dir_next+0x1e8>)
    819c:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    819e:	687b      	ldr	r3, [r7, #4]
    81a0:	681c      	ldr	r4, [r3, #0]
    81a2:	687b      	ldr	r3, [r7, #4]
    81a4:	681b      	ldr	r3, [r3, #0]
    81a6:	68fa      	ldr	r2, [r7, #12]
    81a8:	0011      	movs	r1, r2
    81aa:	0018      	movs	r0, r3
    81ac:	4b30      	ldr	r3, [pc, #192]	; (8270 <dir_next+0x1ec>)
    81ae:	4798      	blx	r3
    81b0:	0003      	movs	r3, r0
    81b2:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    81b4:	230b      	movs	r3, #11
    81b6:	18fb      	adds	r3, r7, r3
    81b8:	2200      	movs	r2, #0
    81ba:	701a      	strb	r2, [r3, #0]
    81bc:	e019      	b.n	81f2 <dir_next+0x16e>
						dj->fs->wflag = 1;
    81be:	687b      	ldr	r3, [r7, #4]
    81c0:	681b      	ldr	r3, [r3, #0]
    81c2:	2201      	movs	r2, #1
    81c4:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	2100      	movs	r1, #0
    81cc:	0018      	movs	r0, r3
    81ce:	4b26      	ldr	r3, [pc, #152]	; (8268 <dir_next+0x1e4>)
    81d0:	4798      	blx	r3
    81d2:	1e03      	subs	r3, r0, #0
    81d4:	d001      	beq.n	81da <dir_next+0x156>
    81d6:	2301      	movs	r3, #1
    81d8:	e03d      	b.n	8256 <dir_next+0x1d2>
						dj->fs->winsect++;
    81da:	687b      	ldr	r3, [r7, #4]
    81dc:	681b      	ldr	r3, [r3, #0]
    81de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    81e0:	3201      	adds	r2, #1
    81e2:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    81e4:	230b      	movs	r3, #11
    81e6:	18fb      	adds	r3, r7, r3
    81e8:	781a      	ldrb	r2, [r3, #0]
    81ea:	230b      	movs	r3, #11
    81ec:	18fb      	adds	r3, r7, r3
    81ee:	3201      	adds	r2, #1
    81f0:	701a      	strb	r2, [r3, #0]
    81f2:	687b      	ldr	r3, [r7, #4]
    81f4:	681b      	ldr	r3, [r3, #0]
    81f6:	789b      	ldrb	r3, [r3, #2]
    81f8:	220b      	movs	r2, #11
    81fa:	18ba      	adds	r2, r7, r2
    81fc:	7812      	ldrb	r2, [r2, #0]
    81fe:	429a      	cmp	r2, r3
    8200:	d3dd      	bcc.n	81be <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8202:	687b      	ldr	r3, [r7, #4]
    8204:	681b      	ldr	r3, [r3, #0]
    8206:	687a      	ldr	r2, [r7, #4]
    8208:	6812      	ldr	r2, [r2, #0]
    820a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    820c:	220b      	movs	r2, #11
    820e:	18ba      	adds	r2, r7, r2
    8210:	7812      	ldrb	r2, [r2, #0]
    8212:	1a8a      	subs	r2, r1, r2
    8214:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	68fa      	ldr	r2, [r7, #12]
    821a:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    821c:	687b      	ldr	r3, [r7, #4]
    821e:	681b      	ldr	r3, [r3, #0]
    8220:	68fa      	ldr	r2, [r7, #12]
    8222:	0011      	movs	r1, r2
    8224:	0018      	movs	r0, r3
    8226:	4b12      	ldr	r3, [pc, #72]	; (8270 <dir_next+0x1ec>)
    8228:	4798      	blx	r3
    822a:	0002      	movs	r2, r0
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    8230:	687b      	ldr	r3, [r7, #4]
    8232:	2208      	movs	r2, #8
    8234:	18ba      	adds	r2, r7, r2
    8236:	8812      	ldrh	r2, [r2, #0]
    8238:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    823a:	687b      	ldr	r3, [r7, #4]
    823c:	681b      	ldr	r3, [r3, #0]
    823e:	3330      	adds	r3, #48	; 0x30
    8240:	001a      	movs	r2, r3
    8242:	2308      	movs	r3, #8
    8244:	18fb      	adds	r3, r7, r3
    8246:	881b      	ldrh	r3, [r3, #0]
    8248:	210f      	movs	r1, #15
    824a:	400b      	ands	r3, r1
    824c:	015b      	lsls	r3, r3, #5
    824e:	18d2      	adds	r2, r2, r3
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	615a      	str	r2, [r3, #20]

	return FR_OK;
    8254:	2300      	movs	r3, #0
}
    8256:	0018      	movs	r0, r3
    8258:	46bd      	mov	sp, r7
    825a:	b005      	add	sp, #20
    825c:	bd90      	pop	{r4, r7, pc}
    825e:	46c0      	nop			; (mov r8, r8)
    8260:	000079a9 	.word	0x000079a9
    8264:	00007e19 	.word	0x00007e19
    8268:	00007711 	.word	0x00007711
    826c:	00007665 	.word	0x00007665
    8270:	00007971 	.word	0x00007971

00008274 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    8274:	b590      	push	{r4, r7, lr}
    8276:	b087      	sub	sp, #28
    8278:	af00      	add	r7, sp, #0
    827a:	6078      	str	r0, [r7, #4]
    827c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    827e:	683b      	ldr	r3, [r7, #0]
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	001a      	movs	r2, r3
    8284:	2340      	movs	r3, #64	; 0x40
    8286:	439a      	bics	r2, r3
    8288:	0013      	movs	r3, r2
    828a:	1e5a      	subs	r2, r3, #1
    828c:	0013      	movs	r3, r2
    828e:	005b      	lsls	r3, r3, #1
    8290:	189b      	adds	r3, r3, r2
    8292:	009b      	lsls	r3, r3, #2
    8294:	189b      	adds	r3, r3, r2
    8296:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    8298:	2300      	movs	r3, #0
    829a:	613b      	str	r3, [r7, #16]
    829c:	230e      	movs	r3, #14
    829e:	18fb      	adds	r3, r7, r3
    82a0:	2201      	movs	r2, #1
    82a2:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    82a4:	4a31      	ldr	r2, [pc, #196]	; (836c <cmp_lfn+0xf8>)
    82a6:	693b      	ldr	r3, [r7, #16]
    82a8:	18d3      	adds	r3, r2, r3
    82aa:	781b      	ldrb	r3, [r3, #0]
    82ac:	3301      	adds	r3, #1
    82ae:	683a      	ldr	r2, [r7, #0]
    82b0:	18d3      	adds	r3, r2, r3
    82b2:	781b      	ldrb	r3, [r3, #0]
    82b4:	021b      	lsls	r3, r3, #8
    82b6:	b21a      	sxth	r2, r3
    82b8:	492c      	ldr	r1, [pc, #176]	; (836c <cmp_lfn+0xf8>)
    82ba:	693b      	ldr	r3, [r7, #16]
    82bc:	18cb      	adds	r3, r1, r3
    82be:	781b      	ldrb	r3, [r3, #0]
    82c0:	0019      	movs	r1, r3
    82c2:	683b      	ldr	r3, [r7, #0]
    82c4:	185b      	adds	r3, r3, r1
    82c6:	781b      	ldrb	r3, [r3, #0]
    82c8:	b21b      	sxth	r3, r3
    82ca:	4313      	orrs	r3, r2
    82cc:	b21a      	sxth	r2, r3
    82ce:	230c      	movs	r3, #12
    82d0:	18fb      	adds	r3, r7, r3
    82d2:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    82d4:	230e      	movs	r3, #14
    82d6:	18fb      	adds	r3, r7, r3
    82d8:	881b      	ldrh	r3, [r3, #0]
    82da:	2b00      	cmp	r3, #0
    82dc:	d01f      	beq.n	831e <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    82de:	230e      	movs	r3, #14
    82e0:	18fc      	adds	r4, r7, r3
    82e2:	230c      	movs	r3, #12
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	881b      	ldrh	r3, [r3, #0]
    82e8:	0018      	movs	r0, r3
    82ea:	4b21      	ldr	r3, [pc, #132]	; (8370 <cmp_lfn+0xfc>)
    82ec:	4798      	blx	r3
    82ee:	0003      	movs	r3, r0
    82f0:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    82f2:	697b      	ldr	r3, [r7, #20]
    82f4:	2bfe      	cmp	r3, #254	; 0xfe
    82f6:	d810      	bhi.n	831a <cmp_lfn+0xa6>
    82f8:	697b      	ldr	r3, [r7, #20]
    82fa:	1c5a      	adds	r2, r3, #1
    82fc:	617a      	str	r2, [r7, #20]
    82fe:	005b      	lsls	r3, r3, #1
    8300:	687a      	ldr	r2, [r7, #4]
    8302:	18d3      	adds	r3, r2, r3
    8304:	881b      	ldrh	r3, [r3, #0]
    8306:	0018      	movs	r0, r3
    8308:	4b19      	ldr	r3, [pc, #100]	; (8370 <cmp_lfn+0xfc>)
    830a:	4798      	blx	r3
    830c:	0003      	movs	r3, r0
    830e:	001a      	movs	r2, r3
    8310:	230e      	movs	r3, #14
    8312:	18fb      	adds	r3, r7, r3
    8314:	881b      	ldrh	r3, [r3, #0]
    8316:	4293      	cmp	r3, r2
    8318:	d009      	beq.n	832e <cmp_lfn+0xba>
				return 0;				/* Not matched */
    831a:	2300      	movs	r3, #0
    831c:	e022      	b.n	8364 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    831e:	230c      	movs	r3, #12
    8320:	18fb      	adds	r3, r7, r3
    8322:	881b      	ldrh	r3, [r3, #0]
    8324:	4a13      	ldr	r2, [pc, #76]	; (8374 <cmp_lfn+0x100>)
    8326:	4293      	cmp	r3, r2
    8328:	d001      	beq.n	832e <cmp_lfn+0xba>
    832a:	2300      	movs	r3, #0
    832c:	e01a      	b.n	8364 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    832e:	693b      	ldr	r3, [r7, #16]
    8330:	3301      	adds	r3, #1
    8332:	613b      	str	r3, [r7, #16]
    8334:	693b      	ldr	r3, [r7, #16]
    8336:	2b0c      	cmp	r3, #12
    8338:	d9b4      	bls.n	82a4 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    833a:	683b      	ldr	r3, [r7, #0]
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	001a      	movs	r2, r3
    8340:	2340      	movs	r3, #64	; 0x40
    8342:	4013      	ands	r3, r2
    8344:	d00d      	beq.n	8362 <cmp_lfn+0xee>
    8346:	230e      	movs	r3, #14
    8348:	18fb      	adds	r3, r7, r3
    834a:	881b      	ldrh	r3, [r3, #0]
    834c:	2b00      	cmp	r3, #0
    834e:	d008      	beq.n	8362 <cmp_lfn+0xee>
    8350:	697b      	ldr	r3, [r7, #20]
    8352:	005b      	lsls	r3, r3, #1
    8354:	687a      	ldr	r2, [r7, #4]
    8356:	18d3      	adds	r3, r2, r3
    8358:	881b      	ldrh	r3, [r3, #0]
    835a:	2b00      	cmp	r3, #0
    835c:	d001      	beq.n	8362 <cmp_lfn+0xee>
		return 0;
    835e:	2300      	movs	r3, #0
    8360:	e000      	b.n	8364 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    8362:	2301      	movs	r3, #1
}
    8364:	0018      	movs	r0, r3
    8366:	46bd      	mov	sp, r7
    8368:	b007      	add	sp, #28
    836a:	bd90      	pop	{r4, r7, pc}
    836c:	0000ca84 	.word	0x0000ca84
    8370:	0000ac31 	.word	0x0000ac31
    8374:	0000ffff 	.word	0x0000ffff

00008378 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    8378:	b580      	push	{r7, lr}
    837a:	b086      	sub	sp, #24
    837c:	af00      	add	r7, sp, #0
    837e:	6078      	str	r0, [r7, #4]
    8380:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    8382:	683b      	ldr	r3, [r7, #0]
    8384:	781b      	ldrb	r3, [r3, #0]
    8386:	001a      	movs	r2, r3
    8388:	233f      	movs	r3, #63	; 0x3f
    838a:	4013      	ands	r3, r2
    838c:	1e5a      	subs	r2, r3, #1
    838e:	0013      	movs	r3, r2
    8390:	005b      	lsls	r3, r3, #1
    8392:	189b      	adds	r3, r3, r2
    8394:	009b      	lsls	r3, r3, #2
    8396:	189b      	adds	r3, r3, r2
    8398:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    839a:	2300      	movs	r3, #0
    839c:	613b      	str	r3, [r7, #16]
    839e:	230e      	movs	r3, #14
    83a0:	18fb      	adds	r3, r7, r3
    83a2:	2201      	movs	r2, #1
    83a4:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    83a6:	4a2b      	ldr	r2, [pc, #172]	; (8454 <pick_lfn+0xdc>)
    83a8:	693b      	ldr	r3, [r7, #16]
    83aa:	18d3      	adds	r3, r2, r3
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	3301      	adds	r3, #1
    83b0:	683a      	ldr	r2, [r7, #0]
    83b2:	18d3      	adds	r3, r2, r3
    83b4:	781b      	ldrb	r3, [r3, #0]
    83b6:	021b      	lsls	r3, r3, #8
    83b8:	b21a      	sxth	r2, r3
    83ba:	4926      	ldr	r1, [pc, #152]	; (8454 <pick_lfn+0xdc>)
    83bc:	693b      	ldr	r3, [r7, #16]
    83be:	18cb      	adds	r3, r1, r3
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	0019      	movs	r1, r3
    83c4:	683b      	ldr	r3, [r7, #0]
    83c6:	185b      	adds	r3, r3, r1
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	b21b      	sxth	r3, r3
    83cc:	4313      	orrs	r3, r2
    83ce:	b21a      	sxth	r2, r3
    83d0:	230c      	movs	r3, #12
    83d2:	18fb      	adds	r3, r7, r3
    83d4:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    83d6:	230e      	movs	r3, #14
    83d8:	18fb      	adds	r3, r7, r3
    83da:	881b      	ldrh	r3, [r3, #0]
    83dc:	2b00      	cmp	r3, #0
    83de:	d015      	beq.n	840c <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    83e0:	697b      	ldr	r3, [r7, #20]
    83e2:	2bfe      	cmp	r3, #254	; 0xfe
    83e4:	d901      	bls.n	83ea <pick_lfn+0x72>
    83e6:	2300      	movs	r3, #0
    83e8:	e030      	b.n	844c <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    83ea:	697b      	ldr	r3, [r7, #20]
    83ec:	1c5a      	adds	r2, r3, #1
    83ee:	617a      	str	r2, [r7, #20]
    83f0:	005b      	lsls	r3, r3, #1
    83f2:	687a      	ldr	r2, [r7, #4]
    83f4:	18d3      	adds	r3, r2, r3
    83f6:	220e      	movs	r2, #14
    83f8:	18ba      	adds	r2, r7, r2
    83fa:	210c      	movs	r1, #12
    83fc:	1879      	adds	r1, r7, r1
    83fe:	8809      	ldrh	r1, [r1, #0]
    8400:	8011      	strh	r1, [r2, #0]
    8402:	220e      	movs	r2, #14
    8404:	18ba      	adds	r2, r7, r2
    8406:	8812      	ldrh	r2, [r2, #0]
    8408:	801a      	strh	r2, [r3, #0]
    840a:	e007      	b.n	841c <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    840c:	230c      	movs	r3, #12
    840e:	18fb      	adds	r3, r7, r3
    8410:	881b      	ldrh	r3, [r3, #0]
    8412:	4a11      	ldr	r2, [pc, #68]	; (8458 <pick_lfn+0xe0>)
    8414:	4293      	cmp	r3, r2
    8416:	d001      	beq.n	841c <pick_lfn+0xa4>
    8418:	2300      	movs	r3, #0
    841a:	e017      	b.n	844c <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    841c:	693b      	ldr	r3, [r7, #16]
    841e:	3301      	adds	r3, #1
    8420:	613b      	str	r3, [r7, #16]
    8422:	693b      	ldr	r3, [r7, #16]
    8424:	2b0c      	cmp	r3, #12
    8426:	d9be      	bls.n	83a6 <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    8428:	683b      	ldr	r3, [r7, #0]
    842a:	781b      	ldrb	r3, [r3, #0]
    842c:	001a      	movs	r2, r3
    842e:	2340      	movs	r3, #64	; 0x40
    8430:	4013      	ands	r3, r2
    8432:	d00a      	beq.n	844a <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    8434:	697b      	ldr	r3, [r7, #20]
    8436:	2bfe      	cmp	r3, #254	; 0xfe
    8438:	d901      	bls.n	843e <pick_lfn+0xc6>
    843a:	2300      	movs	r3, #0
    843c:	e006      	b.n	844c <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    843e:	697b      	ldr	r3, [r7, #20]
    8440:	005b      	lsls	r3, r3, #1
    8442:	687a      	ldr	r2, [r7, #4]
    8444:	18d3      	adds	r3, r2, r3
    8446:	2200      	movs	r2, #0
    8448:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    844a:	2301      	movs	r3, #1
}
    844c:	0018      	movs	r0, r3
    844e:	46bd      	mov	sp, r7
    8450:	b006      	add	sp, #24
    8452:	bd80      	pop	{r7, pc}
    8454:	0000ca84 	.word	0x0000ca84
    8458:	0000ffff 	.word	0x0000ffff

0000845c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    845c:	b580      	push	{r7, lr}
    845e:	b088      	sub	sp, #32
    8460:	af00      	add	r7, sp, #0
    8462:	60f8      	str	r0, [r7, #12]
    8464:	60b9      	str	r1, [r7, #8]
    8466:	0019      	movs	r1, r3
    8468:	1dfb      	adds	r3, r7, #7
    846a:	701a      	strb	r2, [r3, #0]
    846c:	1dbb      	adds	r3, r7, #6
    846e:	1c0a      	adds	r2, r1, #0
    8470:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    8472:	68bb      	ldr	r3, [r7, #8]
    8474:	330d      	adds	r3, #13
    8476:	1dba      	adds	r2, r7, #6
    8478:	7812      	ldrb	r2, [r2, #0]
    847a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    847c:	68bb      	ldr	r3, [r7, #8]
    847e:	330b      	adds	r3, #11
    8480:	220f      	movs	r2, #15
    8482:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    8484:	68bb      	ldr	r3, [r7, #8]
    8486:	330c      	adds	r3, #12
    8488:	2200      	movs	r2, #0
    848a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    848c:	68bb      	ldr	r3, [r7, #8]
    848e:	331a      	adds	r3, #26
    8490:	2200      	movs	r2, #0
    8492:	701a      	strb	r2, [r3, #0]
    8494:	68bb      	ldr	r3, [r7, #8]
    8496:	331b      	adds	r3, #27
    8498:	2200      	movs	r2, #0
    849a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    849c:	1dfb      	adds	r3, r7, #7
    849e:	781b      	ldrb	r3, [r3, #0]
    84a0:	1e5a      	subs	r2, r3, #1
    84a2:	0013      	movs	r3, r2
    84a4:	005b      	lsls	r3, r3, #1
    84a6:	189b      	adds	r3, r3, r2
    84a8:	009b      	lsls	r3, r3, #2
    84aa:	189b      	adds	r3, r3, r2
    84ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    84ae:	2316      	movs	r3, #22
    84b0:	18fb      	adds	r3, r7, r3
    84b2:	2200      	movs	r2, #0
    84b4:	801a      	strh	r2, [r3, #0]
    84b6:	2300      	movs	r3, #0
    84b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    84ba:	2316      	movs	r3, #22
    84bc:	18fb      	adds	r3, r7, r3
    84be:	881b      	ldrh	r3, [r3, #0]
    84c0:	4a28      	ldr	r2, [pc, #160]	; (8564 <fit_lfn+0x108>)
    84c2:	4293      	cmp	r3, r2
    84c4:	d009      	beq.n	84da <fit_lfn+0x7e>
    84c6:	69fb      	ldr	r3, [r7, #28]
    84c8:	1c5a      	adds	r2, r3, #1
    84ca:	61fa      	str	r2, [r7, #28]
    84cc:	005b      	lsls	r3, r3, #1
    84ce:	68fa      	ldr	r2, [r7, #12]
    84d0:	18d2      	adds	r2, r2, r3
    84d2:	2316      	movs	r3, #22
    84d4:	18fb      	adds	r3, r7, r3
    84d6:	8812      	ldrh	r2, [r2, #0]
    84d8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    84da:	4a23      	ldr	r2, [pc, #140]	; (8568 <fit_lfn+0x10c>)
    84dc:	69bb      	ldr	r3, [r7, #24]
    84de:	18d3      	adds	r3, r2, r3
    84e0:	781b      	ldrb	r3, [r3, #0]
    84e2:	001a      	movs	r2, r3
    84e4:	68bb      	ldr	r3, [r7, #8]
    84e6:	189b      	adds	r3, r3, r2
    84e8:	2216      	movs	r2, #22
    84ea:	18ba      	adds	r2, r7, r2
    84ec:	8812      	ldrh	r2, [r2, #0]
    84ee:	b2d2      	uxtb	r2, r2
    84f0:	701a      	strb	r2, [r3, #0]
    84f2:	4a1d      	ldr	r2, [pc, #116]	; (8568 <fit_lfn+0x10c>)
    84f4:	69bb      	ldr	r3, [r7, #24]
    84f6:	18d3      	adds	r3, r2, r3
    84f8:	781b      	ldrb	r3, [r3, #0]
    84fa:	3301      	adds	r3, #1
    84fc:	68ba      	ldr	r2, [r7, #8]
    84fe:	18d3      	adds	r3, r2, r3
    8500:	2216      	movs	r2, #22
    8502:	18ba      	adds	r2, r7, r2
    8504:	8812      	ldrh	r2, [r2, #0]
    8506:	0a12      	lsrs	r2, r2, #8
    8508:	b292      	uxth	r2, r2
    850a:	b2d2      	uxtb	r2, r2
    850c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    850e:	2316      	movs	r3, #22
    8510:	18fb      	adds	r3, r7, r3
    8512:	881b      	ldrh	r3, [r3, #0]
    8514:	2b00      	cmp	r3, #0
    8516:	d104      	bne.n	8522 <fit_lfn+0xc6>
    8518:	2316      	movs	r3, #22
    851a:	18fb      	adds	r3, r7, r3
    851c:	2201      	movs	r2, #1
    851e:	4252      	negs	r2, r2
    8520:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    8522:	69bb      	ldr	r3, [r7, #24]
    8524:	3301      	adds	r3, #1
    8526:	61bb      	str	r3, [r7, #24]
    8528:	69bb      	ldr	r3, [r7, #24]
    852a:	2b0c      	cmp	r3, #12
    852c:	d9c5      	bls.n	84ba <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    852e:	2316      	movs	r3, #22
    8530:	18fb      	adds	r3, r7, r3
    8532:	881b      	ldrh	r3, [r3, #0]
    8534:	4a0b      	ldr	r2, [pc, #44]	; (8564 <fit_lfn+0x108>)
    8536:	4293      	cmp	r3, r2
    8538:	d006      	beq.n	8548 <fit_lfn+0xec>
    853a:	69fb      	ldr	r3, [r7, #28]
    853c:	005b      	lsls	r3, r3, #1
    853e:	68fa      	ldr	r2, [r7, #12]
    8540:	18d3      	adds	r3, r2, r3
    8542:	881b      	ldrh	r3, [r3, #0]
    8544:	2b00      	cmp	r3, #0
    8546:	d105      	bne.n	8554 <fit_lfn+0xf8>
    8548:	1dfb      	adds	r3, r7, #7
    854a:	1dfa      	adds	r2, r7, #7
    854c:	7812      	ldrb	r2, [r2, #0]
    854e:	2140      	movs	r1, #64	; 0x40
    8550:	430a      	orrs	r2, r1
    8552:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    8554:	68bb      	ldr	r3, [r7, #8]
    8556:	1dfa      	adds	r2, r7, #7
    8558:	7812      	ldrb	r2, [r2, #0]
    855a:	701a      	strb	r2, [r3, #0]
}
    855c:	46c0      	nop			; (mov r8, r8)
    855e:	46bd      	mov	sp, r7
    8560:	b008      	add	sp, #32
    8562:	bd80      	pop	{r7, pc}
    8564:	0000ffff 	.word	0x0000ffff
    8568:	0000ca84 	.word	0x0000ca84

0000856c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    856c:	b580      	push	{r7, lr}
    856e:	b08a      	sub	sp, #40	; 0x28
    8570:	af00      	add	r7, sp, #0
    8572:	60f8      	str	r0, [r7, #12]
    8574:	60b9      	str	r1, [r7, #8]
    8576:	607a      	str	r2, [r7, #4]
    8578:	001a      	movs	r2, r3
    857a:	1cbb      	adds	r3, r7, #2
    857c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    857e:	68b9      	ldr	r1, [r7, #8]
    8580:	68fb      	ldr	r3, [r7, #12]
    8582:	220b      	movs	r2, #11
    8584:	0018      	movs	r0, r3
    8586:	4b38      	ldr	r3, [pc, #224]	; (8668 <gen_numname+0xfc>)
    8588:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    858a:	1cbb      	adds	r3, r7, #2
    858c:	881b      	ldrh	r3, [r3, #0]
    858e:	2b05      	cmp	r3, #5
    8590:	d911      	bls.n	85b6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    8592:	1cbb      	adds	r3, r7, #2
    8594:	881b      	ldrh	r3, [r3, #0]
    8596:	b29a      	uxth	r2, r3
    8598:	0852      	lsrs	r2, r2, #1
    859a:	03db      	lsls	r3, r3, #15
    859c:	4313      	orrs	r3, r2
    859e:	b299      	uxth	r1, r3
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	1c9a      	adds	r2, r3, #2
    85a4:	607a      	str	r2, [r7, #4]
    85a6:	881a      	ldrh	r2, [r3, #0]
    85a8:	1cbb      	adds	r3, r7, #2
    85aa:	188a      	adds	r2, r1, r2
    85ac:	801a      	strh	r2, [r3, #0]
    85ae:	687b      	ldr	r3, [r7, #4]
    85b0:	881b      	ldrh	r3, [r3, #0]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d1ed      	bne.n	8592 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    85b6:	2307      	movs	r3, #7
    85b8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    85ba:	1cbb      	adds	r3, r7, #2
    85bc:	881b      	ldrh	r3, [r3, #0]
    85be:	b2db      	uxtb	r3, r3
    85c0:	220f      	movs	r2, #15
    85c2:	4013      	ands	r3, r2
    85c4:	b2da      	uxtb	r2, r3
    85c6:	2327      	movs	r3, #39	; 0x27
    85c8:	18fb      	adds	r3, r7, r3
    85ca:	3230      	adds	r2, #48	; 0x30
    85cc:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    85ce:	2327      	movs	r3, #39	; 0x27
    85d0:	18fb      	adds	r3, r7, r3
    85d2:	781b      	ldrb	r3, [r3, #0]
    85d4:	2b39      	cmp	r3, #57	; 0x39
    85d6:	d906      	bls.n	85e6 <gen_numname+0x7a>
    85d8:	2327      	movs	r3, #39	; 0x27
    85da:	18fb      	adds	r3, r7, r3
    85dc:	2227      	movs	r2, #39	; 0x27
    85de:	18ba      	adds	r2, r7, r2
    85e0:	7812      	ldrb	r2, [r2, #0]
    85e2:	3207      	adds	r2, #7
    85e4:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    85e6:	6a3b      	ldr	r3, [r7, #32]
    85e8:	1e5a      	subs	r2, r3, #1
    85ea:	623a      	str	r2, [r7, #32]
    85ec:	2214      	movs	r2, #20
    85ee:	18ba      	adds	r2, r7, r2
    85f0:	2127      	movs	r1, #39	; 0x27
    85f2:	1879      	adds	r1, r7, r1
    85f4:	7809      	ldrb	r1, [r1, #0]
    85f6:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    85f8:	1cbb      	adds	r3, r7, #2
    85fa:	1cba      	adds	r2, r7, #2
    85fc:	8812      	ldrh	r2, [r2, #0]
    85fe:	0912      	lsrs	r2, r2, #4
    8600:	801a      	strh	r2, [r3, #0]
	} while (seq);
    8602:	1cbb      	adds	r3, r7, #2
    8604:	881b      	ldrh	r3, [r3, #0]
    8606:	2b00      	cmp	r3, #0
    8608:	d1d7      	bne.n	85ba <gen_numname+0x4e>
	ns[i] = '~';
    860a:	2314      	movs	r3, #20
    860c:	18fa      	adds	r2, r7, r3
    860e:	6a3b      	ldr	r3, [r7, #32]
    8610:	18d3      	adds	r3, r2, r3
    8612:	227e      	movs	r2, #126	; 0x7e
    8614:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    8616:	2300      	movs	r3, #0
    8618:	61fb      	str	r3, [r7, #28]
    861a:	e002      	b.n	8622 <gen_numname+0xb6>
    861c:	69fb      	ldr	r3, [r7, #28]
    861e:	3301      	adds	r3, #1
    8620:	61fb      	str	r3, [r7, #28]
    8622:	69fa      	ldr	r2, [r7, #28]
    8624:	6a3b      	ldr	r3, [r7, #32]
    8626:	429a      	cmp	r2, r3
    8628:	d205      	bcs.n	8636 <gen_numname+0xca>
    862a:	68fa      	ldr	r2, [r7, #12]
    862c:	69fb      	ldr	r3, [r7, #28]
    862e:	18d3      	adds	r3, r2, r3
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	2b20      	cmp	r3, #32
    8634:	d1f2      	bne.n	861c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    8636:	69fb      	ldr	r3, [r7, #28]
    8638:	1c5a      	adds	r2, r3, #1
    863a:	61fa      	str	r2, [r7, #28]
    863c:	68fa      	ldr	r2, [r7, #12]
    863e:	18d2      	adds	r2, r2, r3
    8640:	6a3b      	ldr	r3, [r7, #32]
    8642:	2b07      	cmp	r3, #7
    8644:	d806      	bhi.n	8654 <gen_numname+0xe8>
    8646:	6a3b      	ldr	r3, [r7, #32]
    8648:	1c59      	adds	r1, r3, #1
    864a:	6239      	str	r1, [r7, #32]
    864c:	2114      	movs	r1, #20
    864e:	1879      	adds	r1, r7, r1
    8650:	5ccb      	ldrb	r3, [r1, r3]
    8652:	e000      	b.n	8656 <gen_numname+0xea>
    8654:	2320      	movs	r3, #32
    8656:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    8658:	69fb      	ldr	r3, [r7, #28]
    865a:	2b07      	cmp	r3, #7
    865c:	d9eb      	bls.n	8636 <gen_numname+0xca>
}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	46bd      	mov	sp, r7
    8662:	b00a      	add	sp, #40	; 0x28
    8664:	bd80      	pop	{r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	0000762d 	.word	0x0000762d

0000866c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    866c:	b580      	push	{r7, lr}
    866e:	b084      	sub	sp, #16
    8670:	af00      	add	r7, sp, #0
    8672:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    8674:	230f      	movs	r3, #15
    8676:	18fb      	adds	r3, r7, r3
    8678:	2200      	movs	r2, #0
    867a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    867c:	230b      	movs	r3, #11
    867e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    8680:	230f      	movs	r3, #15
    8682:	18fb      	adds	r3, r7, r3
    8684:	781b      	ldrb	r3, [r3, #0]
    8686:	b2da      	uxtb	r2, r3
    8688:	0852      	lsrs	r2, r2, #1
    868a:	01db      	lsls	r3, r3, #7
    868c:	4313      	orrs	r3, r2
    868e:	b2d9      	uxtb	r1, r3
    8690:	687b      	ldr	r3, [r7, #4]
    8692:	1c5a      	adds	r2, r3, #1
    8694:	607a      	str	r2, [r7, #4]
    8696:	781a      	ldrb	r2, [r3, #0]
    8698:	230f      	movs	r3, #15
    869a:	18fb      	adds	r3, r7, r3
    869c:	188a      	adds	r2, r1, r2
    869e:	701a      	strb	r2, [r3, #0]
    86a0:	68bb      	ldr	r3, [r7, #8]
    86a2:	3b01      	subs	r3, #1
    86a4:	60bb      	str	r3, [r7, #8]
    86a6:	68bb      	ldr	r3, [r7, #8]
    86a8:	2b00      	cmp	r3, #0
    86aa:	d1e9      	bne.n	8680 <sum_sfn+0x14>
	return sum;
    86ac:	230f      	movs	r3, #15
    86ae:	18fb      	adds	r3, r7, r3
    86b0:	781b      	ldrb	r3, [r3, #0]
}
    86b2:	0018      	movs	r0, r3
    86b4:	46bd      	mov	sp, r7
    86b6:	b004      	add	sp, #16
    86b8:	bd80      	pop	{r7, pc}
	...

000086bc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    86bc:	b590      	push	{r4, r7, lr}
    86be:	b087      	sub	sp, #28
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    86c4:	2317      	movs	r3, #23
    86c6:	18fc      	adds	r4, r7, r3
    86c8:	687b      	ldr	r3, [r7, #4]
    86ca:	2100      	movs	r1, #0
    86cc:	0018      	movs	r0, r3
    86ce:	4b74      	ldr	r3, [pc, #464]	; (88a0 <dir_find+0x1e4>)
    86d0:	4798      	blx	r3
    86d2:	0003      	movs	r3, r0
    86d4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    86d6:	2317      	movs	r3, #23
    86d8:	18fb      	adds	r3, r7, r3
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	2b00      	cmp	r3, #0
    86de:	d003      	beq.n	86e8 <dir_find+0x2c>
    86e0:	2317      	movs	r3, #23
    86e2:	18fb      	adds	r3, r7, r3
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	e0d6      	b.n	8896 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    86e8:	2314      	movs	r3, #20
    86ea:	18fb      	adds	r3, r7, r3
    86ec:	22ff      	movs	r2, #255	; 0xff
    86ee:	701a      	strb	r2, [r3, #0]
    86f0:	2315      	movs	r3, #21
    86f2:	18fb      	adds	r3, r7, r3
    86f4:	2214      	movs	r2, #20
    86f6:	18ba      	adds	r2, r7, r2
    86f8:	7812      	ldrb	r2, [r2, #0]
    86fa:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	681a      	ldr	r2, [r3, #0]
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	691b      	ldr	r3, [r3, #16]
    8704:	2117      	movs	r1, #23
    8706:	187c      	adds	r4, r7, r1
    8708:	0019      	movs	r1, r3
    870a:	0010      	movs	r0, r2
    870c:	4b65      	ldr	r3, [pc, #404]	; (88a4 <dir_find+0x1e8>)
    870e:	4798      	blx	r3
    8710:	0003      	movs	r3, r0
    8712:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8714:	2317      	movs	r3, #23
    8716:	18fb      	adds	r3, r7, r3
    8718:	781b      	ldrb	r3, [r3, #0]
    871a:	2b00      	cmp	r3, #0
    871c:	d000      	beq.n	8720 <dir_find+0x64>
    871e:	e0b2      	b.n	8886 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	695b      	ldr	r3, [r3, #20]
    8724:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8726:	2316      	movs	r3, #22
    8728:	18fb      	adds	r3, r7, r3
    872a:	693a      	ldr	r2, [r7, #16]
    872c:	7812      	ldrb	r2, [r2, #0]
    872e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8730:	2316      	movs	r3, #22
    8732:	18fb      	adds	r3, r7, r3
    8734:	781b      	ldrb	r3, [r3, #0]
    8736:	2b00      	cmp	r3, #0
    8738:	d104      	bne.n	8744 <dir_find+0x88>
    873a:	2317      	movs	r3, #23
    873c:	18fb      	adds	r3, r7, r3
    873e:	2204      	movs	r2, #4
    8740:	701a      	strb	r2, [r3, #0]
    8742:	e0a5      	b.n	8890 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8744:	693b      	ldr	r3, [r7, #16]
    8746:	330b      	adds	r3, #11
    8748:	781a      	ldrb	r2, [r3, #0]
    874a:	230f      	movs	r3, #15
    874c:	18fb      	adds	r3, r7, r3
    874e:	213f      	movs	r1, #63	; 0x3f
    8750:	400a      	ands	r2, r1
    8752:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8754:	2316      	movs	r3, #22
    8756:	18fb      	adds	r3, r7, r3
    8758:	781b      	ldrb	r3, [r3, #0]
    875a:	2be5      	cmp	r3, #229	; 0xe5
    875c:	d00a      	beq.n	8774 <dir_find+0xb8>
    875e:	230f      	movs	r3, #15
    8760:	18fb      	adds	r3, r7, r3
    8762:	781b      	ldrb	r3, [r3, #0]
    8764:	2208      	movs	r2, #8
    8766:	4013      	ands	r3, r2
    8768:	d009      	beq.n	877e <dir_find+0xc2>
    876a:	230f      	movs	r3, #15
    876c:	18fb      	adds	r3, r7, r3
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2b0f      	cmp	r3, #15
    8772:	d004      	beq.n	877e <dir_find+0xc2>
			ord = 0xFF;
    8774:	2315      	movs	r3, #21
    8776:	18fb      	adds	r3, r7, r3
    8778:	22ff      	movs	r2, #255	; 0xff
    877a:	701a      	strb	r2, [r3, #0]
    877c:	e073      	b.n	8866 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    877e:	230f      	movs	r3, #15
    8780:	18fb      	adds	r3, r7, r3
    8782:	781b      	ldrb	r3, [r3, #0]
    8784:	2b0f      	cmp	r3, #15
    8786:	d145      	bne.n	8814 <dir_find+0x158>
				if (dj->lfn) {
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	69db      	ldr	r3, [r3, #28]
    878c:	2b00      	cmp	r3, #0
    878e:	d100      	bne.n	8792 <dir_find+0xd6>
    8790:	e069      	b.n	8866 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    8792:	2316      	movs	r3, #22
    8794:	18fb      	adds	r3, r7, r3
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	2240      	movs	r2, #64	; 0x40
    879a:	4013      	ands	r3, r2
    879c:	d016      	beq.n	87cc <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    879e:	2314      	movs	r3, #20
    87a0:	18fb      	adds	r3, r7, r3
    87a2:	693a      	ldr	r2, [r7, #16]
    87a4:	7b52      	ldrb	r2, [r2, #13]
    87a6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    87a8:	2316      	movs	r3, #22
    87aa:	18fb      	adds	r3, r7, r3
    87ac:	2216      	movs	r2, #22
    87ae:	18ba      	adds	r2, r7, r2
    87b0:	7812      	ldrb	r2, [r2, #0]
    87b2:	2140      	movs	r1, #64	; 0x40
    87b4:	438a      	bics	r2, r1
    87b6:	701a      	strb	r2, [r3, #0]
    87b8:	2315      	movs	r3, #21
    87ba:	18fb      	adds	r3, r7, r3
    87bc:	2216      	movs	r2, #22
    87be:	18ba      	adds	r2, r7, r2
    87c0:	7812      	ldrb	r2, [r2, #0]
    87c2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    87c4:	687b      	ldr	r3, [r7, #4]
    87c6:	88da      	ldrh	r2, [r3, #6]
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    87cc:	2316      	movs	r3, #22
    87ce:	18fa      	adds	r2, r7, r3
    87d0:	2315      	movs	r3, #21
    87d2:	18fb      	adds	r3, r7, r3
    87d4:	7812      	ldrb	r2, [r2, #0]
    87d6:	781b      	ldrb	r3, [r3, #0]
    87d8:	429a      	cmp	r2, r3
    87da:	d116      	bne.n	880a <dir_find+0x14e>
    87dc:	693b      	ldr	r3, [r7, #16]
    87de:	330d      	adds	r3, #13
    87e0:	781b      	ldrb	r3, [r3, #0]
    87e2:	2214      	movs	r2, #20
    87e4:	18ba      	adds	r2, r7, r2
    87e6:	7812      	ldrb	r2, [r2, #0]
    87e8:	429a      	cmp	r2, r3
    87ea:	d10e      	bne.n	880a <dir_find+0x14e>
    87ec:	687b      	ldr	r3, [r7, #4]
    87ee:	69db      	ldr	r3, [r3, #28]
    87f0:	693a      	ldr	r2, [r7, #16]
    87f2:	0011      	movs	r1, r2
    87f4:	0018      	movs	r0, r3
    87f6:	4b2c      	ldr	r3, [pc, #176]	; (88a8 <dir_find+0x1ec>)
    87f8:	4798      	blx	r3
    87fa:	1e03      	subs	r3, r0, #0
    87fc:	d005      	beq.n	880a <dir_find+0x14e>
    87fe:	2315      	movs	r3, #21
    8800:	18fb      	adds	r3, r7, r3
    8802:	781b      	ldrb	r3, [r3, #0]
    8804:	3b01      	subs	r3, #1
    8806:	b2da      	uxtb	r2, r3
    8808:	e000      	b.n	880c <dir_find+0x150>
    880a:	22ff      	movs	r2, #255	; 0xff
    880c:	2315      	movs	r3, #21
    880e:	18fb      	adds	r3, r7, r3
    8810:	701a      	strb	r2, [r3, #0]
    8812:	e028      	b.n	8866 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8814:	2315      	movs	r3, #21
    8816:	18fb      	adds	r3, r7, r3
    8818:	781b      	ldrb	r3, [r3, #0]
    881a:	2b00      	cmp	r3, #0
    881c:	d10a      	bne.n	8834 <dir_find+0x178>
    881e:	693b      	ldr	r3, [r7, #16]
    8820:	0018      	movs	r0, r3
    8822:	4b22      	ldr	r3, [pc, #136]	; (88ac <dir_find+0x1f0>)
    8824:	4798      	blx	r3
    8826:	0003      	movs	r3, r0
    8828:	001a      	movs	r2, r3
    882a:	2314      	movs	r3, #20
    882c:	18fb      	adds	r3, r7, r3
    882e:	781b      	ldrb	r3, [r3, #0]
    8830:	4293      	cmp	r3, r2
    8832:	d02a      	beq.n	888a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    8834:	2315      	movs	r3, #21
    8836:	18fb      	adds	r3, r7, r3
    8838:	22ff      	movs	r2, #255	; 0xff
    883a:	701a      	strb	r2, [r3, #0]
    883c:	687b      	ldr	r3, [r7, #4]
    883e:	2201      	movs	r2, #1
    8840:	4252      	negs	r2, r2
    8842:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8844:	687b      	ldr	r3, [r7, #4]
    8846:	699b      	ldr	r3, [r3, #24]
    8848:	330b      	adds	r3, #11
    884a:	781b      	ldrb	r3, [r3, #0]
    884c:	001a      	movs	r2, r3
    884e:	2301      	movs	r3, #1
    8850:	4013      	ands	r3, r2
    8852:	d108      	bne.n	8866 <dir_find+0x1aa>
    8854:	687b      	ldr	r3, [r7, #4]
    8856:	6999      	ldr	r1, [r3, #24]
    8858:	693b      	ldr	r3, [r7, #16]
    885a:	220b      	movs	r2, #11
    885c:	0018      	movs	r0, r3
    885e:	4b14      	ldr	r3, [pc, #80]	; (88b0 <dir_find+0x1f4>)
    8860:	4798      	blx	r3
    8862:	1e03      	subs	r3, r0, #0
    8864:	d013      	beq.n	888e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    8866:	2317      	movs	r3, #23
    8868:	18fc      	adds	r4, r7, r3
    886a:	687b      	ldr	r3, [r7, #4]
    886c:	2100      	movs	r1, #0
    886e:	0018      	movs	r0, r3
    8870:	4b10      	ldr	r3, [pc, #64]	; (88b4 <dir_find+0x1f8>)
    8872:	4798      	blx	r3
    8874:	0003      	movs	r3, r0
    8876:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8878:	2317      	movs	r3, #23
    887a:	18fb      	adds	r3, r7, r3
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	2b00      	cmp	r3, #0
    8880:	d100      	bne.n	8884 <dir_find+0x1c8>
    8882:	e73b      	b.n	86fc <dir_find+0x40>
    8884:	e004      	b.n	8890 <dir_find+0x1d4>
		if (res != FR_OK) break;
    8886:	46c0      	nop			; (mov r8, r8)
    8888:	e002      	b.n	8890 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    888a:	46c0      	nop			; (mov r8, r8)
    888c:	e000      	b.n	8890 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    888e:	46c0      	nop			; (mov r8, r8)

	return res;
    8890:	2317      	movs	r3, #23
    8892:	18fb      	adds	r3, r7, r3
    8894:	781b      	ldrb	r3, [r3, #0]
}
    8896:	0018      	movs	r0, r3
    8898:	46bd      	mov	sp, r7
    889a:	b007      	add	sp, #28
    889c:	bd90      	pop	{r4, r7, pc}
    889e:	46c0      	nop			; (mov r8, r8)
    88a0:	00007f55 	.word	0x00007f55
    88a4:	00007711 	.word	0x00007711
    88a8:	00008275 	.word	0x00008275
    88ac:	0000866d 	.word	0x0000866d
    88b0:	00007695 	.word	0x00007695
    88b4:	00008085 	.word	0x00008085

000088b8 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    88b8:	b590      	push	{r4, r7, lr}
    88ba:	b087      	sub	sp, #28
    88bc:	af00      	add	r7, sp, #0
    88be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    88c0:	2315      	movs	r3, #21
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	22ff      	movs	r2, #255	; 0xff
    88c6:	701a      	strb	r2, [r3, #0]
    88c8:	2314      	movs	r3, #20
    88ca:	18fb      	adds	r3, r7, r3
    88cc:	22ff      	movs	r2, #255	; 0xff
    88ce:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    88d0:	2317      	movs	r3, #23
    88d2:	18fb      	adds	r3, r7, r3
    88d4:	2204      	movs	r2, #4
    88d6:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    88d8:	e0ae      	b.n	8a38 <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	681a      	ldr	r2, [r3, #0]
    88de:	687b      	ldr	r3, [r7, #4]
    88e0:	691b      	ldr	r3, [r3, #16]
    88e2:	2117      	movs	r1, #23
    88e4:	187c      	adds	r4, r7, r1
    88e6:	0019      	movs	r1, r3
    88e8:	0010      	movs	r0, r2
    88ea:	4b60      	ldr	r3, [pc, #384]	; (8a6c <dir_read+0x1b4>)
    88ec:	4798      	blx	r3
    88ee:	0003      	movs	r3, r0
    88f0:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    88f2:	2317      	movs	r3, #23
    88f4:	18fb      	adds	r3, r7, r3
    88f6:	781b      	ldrb	r3, [r3, #0]
    88f8:	2b00      	cmp	r3, #0
    88fa:	d000      	beq.n	88fe <dir_read+0x46>
    88fc:	e0a2      	b.n	8a44 <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	695b      	ldr	r3, [r3, #20]
    8902:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8904:	2316      	movs	r3, #22
    8906:	18fb      	adds	r3, r7, r3
    8908:	693a      	ldr	r2, [r7, #16]
    890a:	7812      	ldrb	r2, [r2, #0]
    890c:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    890e:	2316      	movs	r3, #22
    8910:	18fb      	adds	r3, r7, r3
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	2b00      	cmp	r3, #0
    8916:	d104      	bne.n	8922 <dir_read+0x6a>
    8918:	2317      	movs	r3, #23
    891a:	18fb      	adds	r3, r7, r3
    891c:	2204      	movs	r2, #4
    891e:	701a      	strb	r2, [r3, #0]
    8920:	e095      	b.n	8a4e <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8922:	693b      	ldr	r3, [r7, #16]
    8924:	330b      	adds	r3, #11
    8926:	781a      	ldrb	r2, [r3, #0]
    8928:	230f      	movs	r3, #15
    892a:	18fb      	adds	r3, r7, r3
    892c:	213f      	movs	r1, #63	; 0x3f
    892e:	400a      	ands	r2, r1
    8930:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8932:	2316      	movs	r3, #22
    8934:	18fb      	adds	r3, r7, r3
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	2be5      	cmp	r3, #229	; 0xe5
    893a:	d00f      	beq.n	895c <dir_read+0xa4>
    893c:	2316      	movs	r3, #22
    893e:	18fb      	adds	r3, r7, r3
    8940:	781b      	ldrb	r3, [r3, #0]
    8942:	2b2e      	cmp	r3, #46	; 0x2e
    8944:	d00a      	beq.n	895c <dir_read+0xa4>
    8946:	230f      	movs	r3, #15
    8948:	18fb      	adds	r3, r7, r3
    894a:	781b      	ldrb	r3, [r3, #0]
    894c:	2208      	movs	r2, #8
    894e:	4013      	ands	r3, r2
    8950:	d009      	beq.n	8966 <dir_read+0xae>
    8952:	230f      	movs	r3, #15
    8954:	18fb      	adds	r3, r7, r3
    8956:	781b      	ldrb	r3, [r3, #0]
    8958:	2b0f      	cmp	r3, #15
    895a:	d004      	beq.n	8966 <dir_read+0xae>
			ord = 0xFF;
    895c:	2315      	movs	r3, #21
    895e:	18fb      	adds	r3, r7, r3
    8960:	22ff      	movs	r2, #255	; 0xff
    8962:	701a      	strb	r2, [r3, #0]
    8964:	e05a      	b.n	8a1c <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8966:	230f      	movs	r3, #15
    8968:	18fb      	adds	r3, r7, r3
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	2b0f      	cmp	r3, #15
    896e:	d140      	bne.n	89f2 <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    8970:	2316      	movs	r3, #22
    8972:	18fb      	adds	r3, r7, r3
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	2240      	movs	r2, #64	; 0x40
    8978:	4013      	ands	r3, r2
    897a:	d016      	beq.n	89aa <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    897c:	2314      	movs	r3, #20
    897e:	18fb      	adds	r3, r7, r3
    8980:	693a      	ldr	r2, [r7, #16]
    8982:	7b52      	ldrb	r2, [r2, #13]
    8984:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    8986:	2316      	movs	r3, #22
    8988:	18fb      	adds	r3, r7, r3
    898a:	2216      	movs	r2, #22
    898c:	18ba      	adds	r2, r7, r2
    898e:	7812      	ldrb	r2, [r2, #0]
    8990:	2140      	movs	r1, #64	; 0x40
    8992:	438a      	bics	r2, r1
    8994:	701a      	strb	r2, [r3, #0]
    8996:	2315      	movs	r3, #21
    8998:	18fb      	adds	r3, r7, r3
    899a:	2216      	movs	r2, #22
    899c:	18ba      	adds	r2, r7, r2
    899e:	7812      	ldrb	r2, [r2, #0]
    89a0:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	88da      	ldrh	r2, [r3, #6]
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    89aa:	2316      	movs	r3, #22
    89ac:	18fa      	adds	r2, r7, r3
    89ae:	2315      	movs	r3, #21
    89b0:	18fb      	adds	r3, r7, r3
    89b2:	7812      	ldrb	r2, [r2, #0]
    89b4:	781b      	ldrb	r3, [r3, #0]
    89b6:	429a      	cmp	r2, r3
    89b8:	d116      	bne.n	89e8 <dir_read+0x130>
    89ba:	693b      	ldr	r3, [r7, #16]
    89bc:	330d      	adds	r3, #13
    89be:	781b      	ldrb	r3, [r3, #0]
    89c0:	2214      	movs	r2, #20
    89c2:	18ba      	adds	r2, r7, r2
    89c4:	7812      	ldrb	r2, [r2, #0]
    89c6:	429a      	cmp	r2, r3
    89c8:	d10e      	bne.n	89e8 <dir_read+0x130>
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	69db      	ldr	r3, [r3, #28]
    89ce:	693a      	ldr	r2, [r7, #16]
    89d0:	0011      	movs	r1, r2
    89d2:	0018      	movs	r0, r3
    89d4:	4b26      	ldr	r3, [pc, #152]	; (8a70 <dir_read+0x1b8>)
    89d6:	4798      	blx	r3
    89d8:	1e03      	subs	r3, r0, #0
    89da:	d005      	beq.n	89e8 <dir_read+0x130>
    89dc:	2315      	movs	r3, #21
    89de:	18fb      	adds	r3, r7, r3
    89e0:	781b      	ldrb	r3, [r3, #0]
    89e2:	3b01      	subs	r3, #1
    89e4:	b2da      	uxtb	r2, r3
    89e6:	e000      	b.n	89ea <dir_read+0x132>
    89e8:	22ff      	movs	r2, #255	; 0xff
    89ea:	2315      	movs	r3, #21
    89ec:	18fb      	adds	r3, r7, r3
    89ee:	701a      	strb	r2, [r3, #0]
    89f0:	e014      	b.n	8a1c <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    89f2:	2315      	movs	r3, #21
    89f4:	18fb      	adds	r3, r7, r3
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	2b00      	cmp	r3, #0
    89fa:	d10a      	bne.n	8a12 <dir_read+0x15a>
    89fc:	693b      	ldr	r3, [r7, #16]
    89fe:	0018      	movs	r0, r3
    8a00:	4b1c      	ldr	r3, [pc, #112]	; (8a74 <dir_read+0x1bc>)
    8a02:	4798      	blx	r3
    8a04:	0003      	movs	r3, r0
    8a06:	001a      	movs	r2, r3
    8a08:	2314      	movs	r3, #20
    8a0a:	18fb      	adds	r3, r7, r3
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	4293      	cmp	r3, r2
    8a10:	d01a      	beq.n	8a48 <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    8a12:	687b      	ldr	r3, [r7, #4]
    8a14:	2201      	movs	r2, #1
    8a16:	4252      	negs	r2, r2
    8a18:	841a      	strh	r2, [r3, #32]
				break;
    8a1a:	e015      	b.n	8a48 <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    8a1c:	2317      	movs	r3, #23
    8a1e:	18fc      	adds	r4, r7, r3
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	2100      	movs	r1, #0
    8a24:	0018      	movs	r0, r3
    8a26:	4b14      	ldr	r3, [pc, #80]	; (8a78 <dir_read+0x1c0>)
    8a28:	4798      	blx	r3
    8a2a:	0003      	movs	r3, r0
    8a2c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8a2e:	2317      	movs	r3, #23
    8a30:	18fb      	adds	r3, r7, r3
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	2b00      	cmp	r3, #0
    8a36:	d109      	bne.n	8a4c <dir_read+0x194>
	while (dj->sect) {
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	691b      	ldr	r3, [r3, #16]
    8a3c:	2b00      	cmp	r3, #0
    8a3e:	d000      	beq.n	8a42 <dir_read+0x18a>
    8a40:	e74b      	b.n	88da <dir_read+0x22>
    8a42:	e004      	b.n	8a4e <dir_read+0x196>
		if (res != FR_OK) break;
    8a44:	46c0      	nop			; (mov r8, r8)
    8a46:	e002      	b.n	8a4e <dir_read+0x196>
				break;
    8a48:	46c0      	nop			; (mov r8, r8)
    8a4a:	e000      	b.n	8a4e <dir_read+0x196>
		if (res != FR_OK) break;
    8a4c:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8a4e:	2317      	movs	r3, #23
    8a50:	18fb      	adds	r3, r7, r3
    8a52:	781b      	ldrb	r3, [r3, #0]
    8a54:	2b00      	cmp	r3, #0
    8a56:	d002      	beq.n	8a5e <dir_read+0x1a6>
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	2200      	movs	r2, #0
    8a5c:	611a      	str	r2, [r3, #16]

	return res;
    8a5e:	2317      	movs	r3, #23
    8a60:	18fb      	adds	r3, r7, r3
    8a62:	781b      	ldrb	r3, [r3, #0]
}
    8a64:	0018      	movs	r0, r3
    8a66:	46bd      	mov	sp, r7
    8a68:	b007      	add	sp, #28
    8a6a:	bd90      	pop	{r4, r7, pc}
    8a6c:	00007711 	.word	0x00007711
    8a70:	00008379 	.word	0x00008379
    8a74:	0000866d 	.word	0x0000866d
    8a78:	00008085 	.word	0x00008085

00008a7c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8a7c:	b590      	push	{r4, r7, lr}
    8a7e:	b08d      	sub	sp, #52	; 0x34
    8a80:	af00      	add	r7, sp, #0
    8a82:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    8a84:	687b      	ldr	r3, [r7, #4]
    8a86:	699b      	ldr	r3, [r3, #24]
    8a88:	627b      	str	r3, [r7, #36]	; 0x24
    8a8a:	687b      	ldr	r3, [r7, #4]
    8a8c:	69db      	ldr	r3, [r3, #28]
    8a8e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8a92:	230c      	movs	r3, #12
    8a94:	18fb      	adds	r3, r7, r3
    8a96:	220c      	movs	r2, #12
    8a98:	0018      	movs	r0, r3
    8a9a:	4bc8      	ldr	r3, [pc, #800]	; (8dbc <dir_register+0x340>)
    8a9c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8a9e:	230c      	movs	r3, #12
    8aa0:	18fb      	adds	r3, r7, r3
    8aa2:	7adb      	ldrb	r3, [r3, #11]
    8aa4:	001a      	movs	r2, r3
    8aa6:	2301      	movs	r3, #1
    8aa8:	4013      	ands	r3, r2
    8aaa:	d048      	beq.n	8b3e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8aae:	330b      	adds	r3, #11
    8ab0:	2200      	movs	r2, #0
    8ab2:	701a      	strb	r2, [r3, #0]
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	2200      	movs	r2, #0
    8ab8:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    8aba:	232c      	movs	r3, #44	; 0x2c
    8abc:	18fb      	adds	r3, r7, r3
    8abe:	2201      	movs	r2, #1
    8ac0:	801a      	strh	r2, [r3, #0]
    8ac2:	e01c      	b.n	8afe <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    8ac4:	232c      	movs	r3, #44	; 0x2c
    8ac6:	18fb      	adds	r3, r7, r3
    8ac8:	881b      	ldrh	r3, [r3, #0]
    8aca:	6a3a      	ldr	r2, [r7, #32]
    8acc:	210c      	movs	r1, #12
    8ace:	1879      	adds	r1, r7, r1
    8ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8ad2:	4cbb      	ldr	r4, [pc, #748]	; (8dc0 <dir_register+0x344>)
    8ad4:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    8ad6:	232f      	movs	r3, #47	; 0x2f
    8ad8:	18fc      	adds	r4, r7, r3
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	0018      	movs	r0, r3
    8ade:	4bb9      	ldr	r3, [pc, #740]	; (8dc4 <dir_register+0x348>)
    8ae0:	4798      	blx	r3
    8ae2:	0003      	movs	r3, r0
    8ae4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8ae6:	232f      	movs	r3, #47	; 0x2f
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	781b      	ldrb	r3, [r3, #0]
    8aec:	2b00      	cmp	r3, #0
    8aee:	d10c      	bne.n	8b0a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    8af0:	232c      	movs	r3, #44	; 0x2c
    8af2:	18fb      	adds	r3, r7, r3
    8af4:	881a      	ldrh	r2, [r3, #0]
    8af6:	232c      	movs	r3, #44	; 0x2c
    8af8:	18fb      	adds	r3, r7, r3
    8afa:	3201      	adds	r2, #1
    8afc:	801a      	strh	r2, [r3, #0]
    8afe:	232c      	movs	r3, #44	; 0x2c
    8b00:	18fb      	adds	r3, r7, r3
    8b02:	881b      	ldrh	r3, [r3, #0]
    8b04:	2b63      	cmp	r3, #99	; 0x63
    8b06:	d9dd      	bls.n	8ac4 <dir_register+0x48>
    8b08:	e000      	b.n	8b0c <dir_register+0x90>
			if (res != FR_OK) break;
    8b0a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8b0c:	232c      	movs	r3, #44	; 0x2c
    8b0e:	18fb      	adds	r3, r7, r3
    8b10:	881b      	ldrh	r3, [r3, #0]
    8b12:	2b64      	cmp	r3, #100	; 0x64
    8b14:	d101      	bne.n	8b1a <dir_register+0x9e>
    8b16:	2307      	movs	r3, #7
    8b18:	e14c      	b.n	8db4 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    8b1a:	232f      	movs	r3, #47	; 0x2f
    8b1c:	18fb      	adds	r3, r7, r3
    8b1e:	781b      	ldrb	r3, [r3, #0]
    8b20:	2b04      	cmp	r3, #4
    8b22:	d003      	beq.n	8b2c <dir_register+0xb0>
    8b24:	232f      	movs	r3, #47	; 0x2f
    8b26:	18fb      	adds	r3, r7, r3
    8b28:	781b      	ldrb	r3, [r3, #0]
    8b2a:	e143      	b.n	8db4 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b2e:	330b      	adds	r3, #11
    8b30:	220c      	movs	r2, #12
    8b32:	18ba      	adds	r2, r7, r2
    8b34:	7ad2      	ldrb	r2, [r2, #11]
    8b36:	701a      	strb	r2, [r3, #0]
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	6a3a      	ldr	r2, [r7, #32]
    8b3c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8b3e:	230c      	movs	r3, #12
    8b40:	18fb      	adds	r3, r7, r3
    8b42:	7adb      	ldrb	r3, [r3, #11]
    8b44:	001a      	movs	r2, r3
    8b46:	2302      	movs	r3, #2
    8b48:	4013      	ands	r3, r2
    8b4a:	d023      	beq.n	8b94 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8b4c:	232a      	movs	r3, #42	; 0x2a
    8b4e:	18fb      	adds	r3, r7, r3
    8b50:	2200      	movs	r2, #0
    8b52:	801a      	strh	r2, [r3, #0]
    8b54:	e006      	b.n	8b64 <dir_register+0xe8>
    8b56:	232a      	movs	r3, #42	; 0x2a
    8b58:	18fb      	adds	r3, r7, r3
    8b5a:	881a      	ldrh	r2, [r3, #0]
    8b5c:	232a      	movs	r3, #42	; 0x2a
    8b5e:	18fb      	adds	r3, r7, r3
    8b60:	3201      	adds	r2, #1
    8b62:	801a      	strh	r2, [r3, #0]
    8b64:	232a      	movs	r3, #42	; 0x2a
    8b66:	18fb      	adds	r3, r7, r3
    8b68:	881b      	ldrh	r3, [r3, #0]
    8b6a:	005b      	lsls	r3, r3, #1
    8b6c:	6a3a      	ldr	r2, [r7, #32]
    8b6e:	18d3      	adds	r3, r2, r3
    8b70:	881b      	ldrh	r3, [r3, #0]
    8b72:	2b00      	cmp	r3, #0
    8b74:	d1ef      	bne.n	8b56 <dir_register+0xda>
		ne = (ne + 25) / 13;
    8b76:	232a      	movs	r3, #42	; 0x2a
    8b78:	18fb      	adds	r3, r7, r3
    8b7a:	881b      	ldrh	r3, [r3, #0]
    8b7c:	3319      	adds	r3, #25
    8b7e:	001a      	movs	r2, r3
    8b80:	4b91      	ldr	r3, [pc, #580]	; (8dc8 <dir_register+0x34c>)
    8b82:	210d      	movs	r1, #13
    8b84:	0010      	movs	r0, r2
    8b86:	4798      	blx	r3
    8b88:	0003      	movs	r3, r0
    8b8a:	001a      	movs	r2, r3
    8b8c:	232a      	movs	r3, #42	; 0x2a
    8b8e:	18fb      	adds	r3, r7, r3
    8b90:	801a      	strh	r2, [r3, #0]
    8b92:	e003      	b.n	8b9c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8b94:	232a      	movs	r3, #42	; 0x2a
    8b96:	18fb      	adds	r3, r7, r3
    8b98:	2201      	movs	r2, #1
    8b9a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8b9c:	232f      	movs	r3, #47	; 0x2f
    8b9e:	18fc      	adds	r4, r7, r3
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	2100      	movs	r1, #0
    8ba4:	0018      	movs	r0, r3
    8ba6:	4b89      	ldr	r3, [pc, #548]	; (8dcc <dir_register+0x350>)
    8ba8:	4798      	blx	r3
    8baa:	0003      	movs	r3, r0
    8bac:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8bae:	232f      	movs	r3, #47	; 0x2f
    8bb0:	18fb      	adds	r3, r7, r3
    8bb2:	781b      	ldrb	r3, [r3, #0]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d003      	beq.n	8bc0 <dir_register+0x144>
    8bb8:	232f      	movs	r3, #47	; 0x2f
    8bba:	18fb      	adds	r3, r7, r3
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	e0f9      	b.n	8db4 <dir_register+0x338>
	n = is = 0;
    8bc0:	2328      	movs	r3, #40	; 0x28
    8bc2:	18fb      	adds	r3, r7, r3
    8bc4:	2200      	movs	r2, #0
    8bc6:	801a      	strh	r2, [r3, #0]
    8bc8:	232c      	movs	r3, #44	; 0x2c
    8bca:	18fb      	adds	r3, r7, r3
    8bcc:	2228      	movs	r2, #40	; 0x28
    8bce:	18ba      	adds	r2, r7, r2
    8bd0:	8812      	ldrh	r2, [r2, #0]
    8bd2:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	681a      	ldr	r2, [r3, #0]
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	691b      	ldr	r3, [r3, #16]
    8bdc:	212f      	movs	r1, #47	; 0x2f
    8bde:	187c      	adds	r4, r7, r1
    8be0:	0019      	movs	r1, r3
    8be2:	0010      	movs	r0, r2
    8be4:	4b7a      	ldr	r3, [pc, #488]	; (8dd0 <dir_register+0x354>)
    8be6:	4798      	blx	r3
    8be8:	0003      	movs	r3, r0
    8bea:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8bec:	232f      	movs	r3, #47	; 0x2f
    8bee:	18fb      	adds	r3, r7, r3
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d13c      	bne.n	8c70 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    8bf6:	687b      	ldr	r3, [r7, #4]
    8bf8:	695a      	ldr	r2, [r3, #20]
    8bfa:	231f      	movs	r3, #31
    8bfc:	18fb      	adds	r3, r7, r3
    8bfe:	7812      	ldrb	r2, [r2, #0]
    8c00:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8c02:	231f      	movs	r3, #31
    8c04:	18fb      	adds	r3, r7, r3
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	2be5      	cmp	r3, #229	; 0xe5
    8c0a:	d004      	beq.n	8c16 <dir_register+0x19a>
    8c0c:	231f      	movs	r3, #31
    8c0e:	18fb      	adds	r3, r7, r3
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	2b00      	cmp	r3, #0
    8c14:	d119      	bne.n	8c4a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    8c16:	232c      	movs	r3, #44	; 0x2c
    8c18:	18fb      	adds	r3, r7, r3
    8c1a:	881b      	ldrh	r3, [r3, #0]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d104      	bne.n	8c2a <dir_register+0x1ae>
    8c20:	2328      	movs	r3, #40	; 0x28
    8c22:	18fb      	adds	r3, r7, r3
    8c24:	687a      	ldr	r2, [r7, #4]
    8c26:	88d2      	ldrh	r2, [r2, #6]
    8c28:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    8c2a:	232c      	movs	r3, #44	; 0x2c
    8c2c:	18fb      	adds	r3, r7, r3
    8c2e:	222c      	movs	r2, #44	; 0x2c
    8c30:	18ba      	adds	r2, r7, r2
    8c32:	8812      	ldrh	r2, [r2, #0]
    8c34:	3201      	adds	r2, #1
    8c36:	801a      	strh	r2, [r3, #0]
    8c38:	232c      	movs	r3, #44	; 0x2c
    8c3a:	18fa      	adds	r2, r7, r3
    8c3c:	232a      	movs	r3, #42	; 0x2a
    8c3e:	18fb      	adds	r3, r7, r3
    8c40:	8812      	ldrh	r2, [r2, #0]
    8c42:	881b      	ldrh	r3, [r3, #0]
    8c44:	429a      	cmp	r2, r3
    8c46:	d104      	bne.n	8c52 <dir_register+0x1d6>
    8c48:	e013      	b.n	8c72 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8c4a:	232c      	movs	r3, #44	; 0x2c
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	2200      	movs	r2, #0
    8c50:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8c52:	232f      	movs	r3, #47	; 0x2f
    8c54:	18fc      	adds	r4, r7, r3
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	2101      	movs	r1, #1
    8c5a:	0018      	movs	r0, r3
    8c5c:	4b5d      	ldr	r3, [pc, #372]	; (8dd4 <dir_register+0x358>)
    8c5e:	4798      	blx	r3
    8c60:	0003      	movs	r3, r0
    8c62:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8c64:	232f      	movs	r3, #47	; 0x2f
    8c66:	18fb      	adds	r3, r7, r3
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	d0b2      	beq.n	8bd4 <dir_register+0x158>
    8c6e:	e000      	b.n	8c72 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8c70:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8c72:	232f      	movs	r3, #47	; 0x2f
    8c74:	18fb      	adds	r3, r7, r3
    8c76:	781b      	ldrb	r3, [r3, #0]
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d163      	bne.n	8d44 <dir_register+0x2c8>
    8c7c:	232a      	movs	r3, #42	; 0x2a
    8c7e:	18fb      	adds	r3, r7, r3
    8c80:	881b      	ldrh	r3, [r3, #0]
    8c82:	2b01      	cmp	r3, #1
    8c84:	d95e      	bls.n	8d44 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8c86:	232f      	movs	r3, #47	; 0x2f
    8c88:	18fc      	adds	r4, r7, r3
    8c8a:	2328      	movs	r3, #40	; 0x28
    8c8c:	18fb      	adds	r3, r7, r3
    8c8e:	881a      	ldrh	r2, [r3, #0]
    8c90:	687b      	ldr	r3, [r7, #4]
    8c92:	0011      	movs	r1, r2
    8c94:	0018      	movs	r0, r3
    8c96:	4b4d      	ldr	r3, [pc, #308]	; (8dcc <dir_register+0x350>)
    8c98:	4798      	blx	r3
    8c9a:	0003      	movs	r3, r0
    8c9c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8c9e:	232f      	movs	r3, #47	; 0x2f
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	d14d      	bne.n	8d44 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	699b      	ldr	r3, [r3, #24]
    8cac:	221e      	movs	r2, #30
    8cae:	18bc      	adds	r4, r7, r2
    8cb0:	0018      	movs	r0, r3
    8cb2:	4b49      	ldr	r3, [pc, #292]	; (8dd8 <dir_register+0x35c>)
    8cb4:	4798      	blx	r3
    8cb6:	0003      	movs	r3, r0
    8cb8:	7023      	strb	r3, [r4, #0]
			ne--;
    8cba:	232a      	movs	r3, #42	; 0x2a
    8cbc:	18fb      	adds	r3, r7, r3
    8cbe:	881a      	ldrh	r2, [r3, #0]
    8cc0:	232a      	movs	r3, #42	; 0x2a
    8cc2:	18fb      	adds	r3, r7, r3
    8cc4:	3a01      	subs	r2, #1
    8cc6:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8cc8:	687b      	ldr	r3, [r7, #4]
    8cca:	681a      	ldr	r2, [r3, #0]
    8ccc:	687b      	ldr	r3, [r7, #4]
    8cce:	691b      	ldr	r3, [r3, #16]
    8cd0:	212f      	movs	r1, #47	; 0x2f
    8cd2:	187c      	adds	r4, r7, r1
    8cd4:	0019      	movs	r1, r3
    8cd6:	0010      	movs	r0, r2
    8cd8:	4b3d      	ldr	r3, [pc, #244]	; (8dd0 <dir_register+0x354>)
    8cda:	4798      	blx	r3
    8cdc:	0003      	movs	r3, r0
    8cde:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8ce0:	232f      	movs	r3, #47	; 0x2f
    8ce2:	18fb      	adds	r3, r7, r3
    8ce4:	781b      	ldrb	r3, [r3, #0]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d12b      	bne.n	8d42 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8cea:	687b      	ldr	r3, [r7, #4]
    8cec:	69d8      	ldr	r0, [r3, #28]
    8cee:	687b      	ldr	r3, [r7, #4]
    8cf0:	6959      	ldr	r1, [r3, #20]
    8cf2:	232a      	movs	r3, #42	; 0x2a
    8cf4:	18fb      	adds	r3, r7, r3
    8cf6:	881b      	ldrh	r3, [r3, #0]
    8cf8:	b2da      	uxtb	r2, r3
    8cfa:	231e      	movs	r3, #30
    8cfc:	18fb      	adds	r3, r7, r3
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	4c36      	ldr	r4, [pc, #216]	; (8ddc <dir_register+0x360>)
    8d02:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	2201      	movs	r2, #1
    8d0a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8d0c:	232f      	movs	r3, #47	; 0x2f
    8d0e:	18fc      	adds	r4, r7, r3
    8d10:	687b      	ldr	r3, [r7, #4]
    8d12:	2100      	movs	r1, #0
    8d14:	0018      	movs	r0, r3
    8d16:	4b2f      	ldr	r3, [pc, #188]	; (8dd4 <dir_register+0x358>)
    8d18:	4798      	blx	r3
    8d1a:	0003      	movs	r3, r0
    8d1c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8d1e:	232f      	movs	r3, #47	; 0x2f
    8d20:	18fb      	adds	r3, r7, r3
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d10d      	bne.n	8d44 <dir_register+0x2c8>
    8d28:	232a      	movs	r3, #42	; 0x2a
    8d2a:	18fb      	adds	r3, r7, r3
    8d2c:	222a      	movs	r2, #42	; 0x2a
    8d2e:	18ba      	adds	r2, r7, r2
    8d30:	8812      	ldrh	r2, [r2, #0]
    8d32:	3a01      	subs	r2, #1
    8d34:	801a      	strh	r2, [r3, #0]
    8d36:	232a      	movs	r3, #42	; 0x2a
    8d38:	18fb      	adds	r3, r7, r3
    8d3a:	881b      	ldrh	r3, [r3, #0]
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	d1c3      	bne.n	8cc8 <dir_register+0x24c>
    8d40:	e000      	b.n	8d44 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8d42:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8d44:	232f      	movs	r3, #47	; 0x2f
    8d46:	18fb      	adds	r3, r7, r3
    8d48:	781b      	ldrb	r3, [r3, #0]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d12f      	bne.n	8dae <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	681a      	ldr	r2, [r3, #0]
    8d52:	687b      	ldr	r3, [r7, #4]
    8d54:	691b      	ldr	r3, [r3, #16]
    8d56:	212f      	movs	r1, #47	; 0x2f
    8d58:	187c      	adds	r4, r7, r1
    8d5a:	0019      	movs	r1, r3
    8d5c:	0010      	movs	r0, r2
    8d5e:	4b1c      	ldr	r3, [pc, #112]	; (8dd0 <dir_register+0x354>)
    8d60:	4798      	blx	r3
    8d62:	0003      	movs	r3, r0
    8d64:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8d66:	232f      	movs	r3, #47	; 0x2f
    8d68:	18fb      	adds	r3, r7, r3
    8d6a:	781b      	ldrb	r3, [r3, #0]
    8d6c:	2b00      	cmp	r3, #0
    8d6e:	d11e      	bne.n	8dae <dir_register+0x332>
			dir = dj->dir;
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	695b      	ldr	r3, [r3, #20]
    8d74:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8d76:	69bb      	ldr	r3, [r7, #24]
    8d78:	2220      	movs	r2, #32
    8d7a:	2100      	movs	r1, #0
    8d7c:	0018      	movs	r0, r3
    8d7e:	4b18      	ldr	r3, [pc, #96]	; (8de0 <dir_register+0x364>)
    8d80:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8d82:	687b      	ldr	r3, [r7, #4]
    8d84:	6999      	ldr	r1, [r3, #24]
    8d86:	69bb      	ldr	r3, [r7, #24]
    8d88:	220b      	movs	r2, #11
    8d8a:	0018      	movs	r0, r3
    8d8c:	4b0b      	ldr	r3, [pc, #44]	; (8dbc <dir_register+0x340>)
    8d8e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8d90:	69bb      	ldr	r3, [r7, #24]
    8d92:	330c      	adds	r3, #12
    8d94:	001a      	movs	r2, r3
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	699b      	ldr	r3, [r3, #24]
    8d9a:	330b      	adds	r3, #11
    8d9c:	781b      	ldrb	r3, [r3, #0]
    8d9e:	2118      	movs	r1, #24
    8da0:	400b      	ands	r3, r1
    8da2:	b2db      	uxtb	r3, r3
    8da4:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8da6:	687b      	ldr	r3, [r7, #4]
    8da8:	681b      	ldr	r3, [r3, #0]
    8daa:	2201      	movs	r2, #1
    8dac:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8dae:	232f      	movs	r3, #47	; 0x2f
    8db0:	18fb      	adds	r3, r7, r3
    8db2:	781b      	ldrb	r3, [r3, #0]
}
    8db4:	0018      	movs	r0, r3
    8db6:	46bd      	mov	sp, r7
    8db8:	b00d      	add	sp, #52	; 0x34
    8dba:	bd90      	pop	{r4, r7, pc}
    8dbc:	0000762d 	.word	0x0000762d
    8dc0:	0000856d 	.word	0x0000856d
    8dc4:	000086bd 	.word	0x000086bd
    8dc8:	0000b6d1 	.word	0x0000b6d1
    8dcc:	00007f55 	.word	0x00007f55
    8dd0:	00007711 	.word	0x00007711
    8dd4:	00008085 	.word	0x00008085
    8dd8:	0000866d 	.word	0x0000866d
    8ddc:	0000845d 	.word	0x0000845d
    8de0:	00007665 	.word	0x00007665

00008de4 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8de4:	b590      	push	{r4, r7, lr}
    8de6:	b085      	sub	sp, #20
    8de8:	af00      	add	r7, sp, #0
    8dea:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8dec:	230c      	movs	r3, #12
    8dee:	18fb      	adds	r3, r7, r3
    8df0:	687a      	ldr	r2, [r7, #4]
    8df2:	88d2      	ldrh	r2, [r2, #6]
    8df4:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	8c1b      	ldrh	r3, [r3, #32]
    8dfa:	4a2c      	ldr	r2, [pc, #176]	; (8eac <dir_remove+0xc8>)
    8dfc:	4293      	cmp	r3, r2
    8dfe:	d002      	beq.n	8e06 <dir_remove+0x22>
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	8c1b      	ldrh	r3, [r3, #32]
    8e04:	e002      	b.n	8e0c <dir_remove+0x28>
    8e06:	230c      	movs	r3, #12
    8e08:	18fb      	adds	r3, r7, r3
    8e0a:	881b      	ldrh	r3, [r3, #0]
    8e0c:	220f      	movs	r2, #15
    8e0e:	18bc      	adds	r4, r7, r2
    8e10:	687a      	ldr	r2, [r7, #4]
    8e12:	0019      	movs	r1, r3
    8e14:	0010      	movs	r0, r2
    8e16:	4b26      	ldr	r3, [pc, #152]	; (8eb0 <dir_remove+0xcc>)
    8e18:	4798      	blx	r3
    8e1a:	0003      	movs	r3, r0
    8e1c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8e1e:	230f      	movs	r3, #15
    8e20:	18fb      	adds	r3, r7, r3
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	2b00      	cmp	r3, #0
    8e26:	d13a      	bne.n	8e9e <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	681a      	ldr	r2, [r3, #0]
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	691b      	ldr	r3, [r3, #16]
    8e30:	210f      	movs	r1, #15
    8e32:	187c      	adds	r4, r7, r1
    8e34:	0019      	movs	r1, r3
    8e36:	0010      	movs	r0, r2
    8e38:	4b1e      	ldr	r3, [pc, #120]	; (8eb4 <dir_remove+0xd0>)
    8e3a:	4798      	blx	r3
    8e3c:	0003      	movs	r3, r0
    8e3e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8e40:	230f      	movs	r3, #15
    8e42:	18fb      	adds	r3, r7, r3
    8e44:	781b      	ldrb	r3, [r3, #0]
    8e46:	2b00      	cmp	r3, #0
    8e48:	d11d      	bne.n	8e86 <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	695b      	ldr	r3, [r3, #20]
    8e4e:	22e5      	movs	r2, #229	; 0xe5
    8e50:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8e52:	687b      	ldr	r3, [r7, #4]
    8e54:	681b      	ldr	r3, [r3, #0]
    8e56:	2201      	movs	r2, #1
    8e58:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	88db      	ldrh	r3, [r3, #6]
    8e5e:	220c      	movs	r2, #12
    8e60:	18ba      	adds	r2, r7, r2
    8e62:	8812      	ldrh	r2, [r2, #0]
    8e64:	429a      	cmp	r2, r3
    8e66:	d910      	bls.n	8e8a <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8e68:	230f      	movs	r3, #15
    8e6a:	18fc      	adds	r4, r7, r3
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	2100      	movs	r1, #0
    8e70:	0018      	movs	r0, r3
    8e72:	4b11      	ldr	r3, [pc, #68]	; (8eb8 <dir_remove+0xd4>)
    8e74:	4798      	blx	r3
    8e76:	0003      	movs	r3, r0
    8e78:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8e7a:	230f      	movs	r3, #15
    8e7c:	18fb      	adds	r3, r7, r3
    8e7e:	781b      	ldrb	r3, [r3, #0]
    8e80:	2b00      	cmp	r3, #0
    8e82:	d0d1      	beq.n	8e28 <dir_remove+0x44>
    8e84:	e002      	b.n	8e8c <dir_remove+0xa8>
			if (res != FR_OK) break;
    8e86:	46c0      	nop			; (mov r8, r8)
    8e88:	e000      	b.n	8e8c <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8e8a:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8e8c:	230f      	movs	r3, #15
    8e8e:	18fb      	adds	r3, r7, r3
    8e90:	781b      	ldrb	r3, [r3, #0]
    8e92:	2b04      	cmp	r3, #4
    8e94:	d103      	bne.n	8e9e <dir_remove+0xba>
    8e96:	230f      	movs	r3, #15
    8e98:	18fb      	adds	r3, r7, r3
    8e9a:	2202      	movs	r2, #2
    8e9c:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8e9e:	230f      	movs	r3, #15
    8ea0:	18fb      	adds	r3, r7, r3
    8ea2:	781b      	ldrb	r3, [r3, #0]
}
    8ea4:	0018      	movs	r0, r3
    8ea6:	46bd      	mov	sp, r7
    8ea8:	b005      	add	sp, #20
    8eaa:	bd90      	pop	{r4, r7, pc}
    8eac:	0000ffff 	.word	0x0000ffff
    8eb0:	00007f55 	.word	0x00007f55
    8eb4:	00007711 	.word	0x00007711
    8eb8:	00008085 	.word	0x00008085

00008ebc <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8ebc:	b590      	push	{r4, r7, lr}
    8ebe:	b08b      	sub	sp, #44	; 0x2c
    8ec0:	af00      	add	r7, sp, #0
    8ec2:	6078      	str	r0, [r7, #4]
    8ec4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8ec6:	683b      	ldr	r3, [r7, #0]
    8ec8:	681b      	ldr	r3, [r3, #0]
    8eca:	613b      	str	r3, [r7, #16]
    8ecc:	e002      	b.n	8ed4 <create_name+0x18>
    8ece:	693b      	ldr	r3, [r7, #16]
    8ed0:	3301      	adds	r3, #1
    8ed2:	613b      	str	r3, [r7, #16]
    8ed4:	693b      	ldr	r3, [r7, #16]
    8ed6:	781b      	ldrb	r3, [r3, #0]
    8ed8:	2b2f      	cmp	r3, #47	; 0x2f
    8eda:	d0f8      	beq.n	8ece <create_name+0x12>
    8edc:	693b      	ldr	r3, [r7, #16]
    8ede:	781b      	ldrb	r3, [r3, #0]
    8ee0:	2b5c      	cmp	r3, #92	; 0x5c
    8ee2:	d0f4      	beq.n	8ece <create_name+0x12>
	lfn = dj->lfn;
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	69db      	ldr	r3, [r3, #28]
    8ee8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8eea:	2300      	movs	r3, #0
    8eec:	617b      	str	r3, [r7, #20]
    8eee:	697b      	ldr	r3, [r7, #20]
    8ef0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8ef2:	69bb      	ldr	r3, [r7, #24]
    8ef4:	1c5a      	adds	r2, r3, #1
    8ef6:	61ba      	str	r2, [r7, #24]
    8ef8:	693a      	ldr	r2, [r7, #16]
    8efa:	18d3      	adds	r3, r2, r3
    8efc:	781a      	ldrb	r2, [r3, #0]
    8efe:	2324      	movs	r3, #36	; 0x24
    8f00:	18fb      	adds	r3, r7, r3
    8f02:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8f04:	2324      	movs	r3, #36	; 0x24
    8f06:	18fb      	adds	r3, r7, r3
    8f08:	881b      	ldrh	r3, [r3, #0]
    8f0a:	2b1f      	cmp	r3, #31
    8f0c:	d944      	bls.n	8f98 <create_name+0xdc>
    8f0e:	2324      	movs	r3, #36	; 0x24
    8f10:	18fb      	adds	r3, r7, r3
    8f12:	881b      	ldrh	r3, [r3, #0]
    8f14:	2b2f      	cmp	r3, #47	; 0x2f
    8f16:	d03f      	beq.n	8f98 <create_name+0xdc>
    8f18:	2324      	movs	r3, #36	; 0x24
    8f1a:	18fb      	adds	r3, r7, r3
    8f1c:	881b      	ldrh	r3, [r3, #0]
    8f1e:	2b5c      	cmp	r3, #92	; 0x5c
    8f20:	d03a      	beq.n	8f98 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8f22:	697b      	ldr	r3, [r7, #20]
    8f24:	2bfe      	cmp	r3, #254	; 0xfe
    8f26:	d901      	bls.n	8f2c <create_name+0x70>
			return FR_INVALID_NAME;
    8f28:	2306      	movs	r3, #6
    8f2a:	e1e7      	b.n	92fc <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8f2c:	2324      	movs	r3, #36	; 0x24
    8f2e:	18fb      	adds	r3, r7, r3
    8f30:	2224      	movs	r2, #36	; 0x24
    8f32:	18ba      	adds	r2, r7, r2
    8f34:	8812      	ldrh	r2, [r2, #0]
    8f36:	21ff      	movs	r1, #255	; 0xff
    8f38:	400a      	ands	r2, r1
    8f3a:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8f3c:	2324      	movs	r3, #36	; 0x24
    8f3e:	18fc      	adds	r4, r7, r3
    8f40:	2324      	movs	r3, #36	; 0x24
    8f42:	18fb      	adds	r3, r7, r3
    8f44:	881b      	ldrh	r3, [r3, #0]
    8f46:	2101      	movs	r1, #1
    8f48:	0018      	movs	r0, r3
    8f4a:	4bba      	ldr	r3, [pc, #744]	; (9234 <create_name+0x378>)
    8f4c:	4798      	blx	r3
    8f4e:	0003      	movs	r3, r0
    8f50:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8f52:	2324      	movs	r3, #36	; 0x24
    8f54:	18fb      	adds	r3, r7, r3
    8f56:	881b      	ldrh	r3, [r3, #0]
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d101      	bne.n	8f60 <create_name+0xa4>
    8f5c:	2306      	movs	r3, #6
    8f5e:	e1cd      	b.n	92fc <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8f60:	2324      	movs	r3, #36	; 0x24
    8f62:	18fb      	adds	r3, r7, r3
    8f64:	881b      	ldrh	r3, [r3, #0]
    8f66:	2b7f      	cmp	r3, #127	; 0x7f
    8f68:	d80b      	bhi.n	8f82 <create_name+0xc6>
    8f6a:	2324      	movs	r3, #36	; 0x24
    8f6c:	18fb      	adds	r3, r7, r3
    8f6e:	881a      	ldrh	r2, [r3, #0]
    8f70:	4bb1      	ldr	r3, [pc, #708]	; (9238 <create_name+0x37c>)
    8f72:	0011      	movs	r1, r2
    8f74:	0018      	movs	r0, r3
    8f76:	4bb1      	ldr	r3, [pc, #708]	; (923c <create_name+0x380>)
    8f78:	4798      	blx	r3
    8f7a:	1e03      	subs	r3, r0, #0
    8f7c:	d001      	beq.n	8f82 <create_name+0xc6>
			return FR_INVALID_NAME;
    8f7e:	2306      	movs	r3, #6
    8f80:	e1bc      	b.n	92fc <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8f82:	697b      	ldr	r3, [r7, #20]
    8f84:	1c5a      	adds	r2, r3, #1
    8f86:	617a      	str	r2, [r7, #20]
    8f88:	005b      	lsls	r3, r3, #1
    8f8a:	68fa      	ldr	r2, [r7, #12]
    8f8c:	18d3      	adds	r3, r2, r3
    8f8e:	2224      	movs	r2, #36	; 0x24
    8f90:	18ba      	adds	r2, r7, r2
    8f92:	8812      	ldrh	r2, [r2, #0]
    8f94:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8f96:	e7ac      	b.n	8ef2 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8f98:	693a      	ldr	r2, [r7, #16]
    8f9a:	69bb      	ldr	r3, [r7, #24]
    8f9c:	18d2      	adds	r2, r2, r3
    8f9e:	683b      	ldr	r3, [r7, #0]
    8fa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8fa2:	2324      	movs	r3, #36	; 0x24
    8fa4:	18fb      	adds	r3, r7, r3
    8fa6:	881b      	ldrh	r3, [r3, #0]
    8fa8:	2b1f      	cmp	r3, #31
    8faa:	d801      	bhi.n	8fb0 <create_name+0xf4>
    8fac:	2204      	movs	r2, #4
    8fae:	e000      	b.n	8fb2 <create_name+0xf6>
    8fb0:	2200      	movs	r2, #0
    8fb2:	2326      	movs	r3, #38	; 0x26
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8fb8:	e017      	b.n	8fea <create_name+0x12e>
		w = lfn[di-1];
    8fba:	697b      	ldr	r3, [r7, #20]
    8fbc:	4aa0      	ldr	r2, [pc, #640]	; (9240 <create_name+0x384>)
    8fbe:	4694      	mov	ip, r2
    8fc0:	4463      	add	r3, ip
    8fc2:	005b      	lsls	r3, r3, #1
    8fc4:	68fa      	ldr	r2, [r7, #12]
    8fc6:	18d2      	adds	r2, r2, r3
    8fc8:	2324      	movs	r3, #36	; 0x24
    8fca:	18fb      	adds	r3, r7, r3
    8fcc:	8812      	ldrh	r2, [r2, #0]
    8fce:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8fd0:	2324      	movs	r3, #36	; 0x24
    8fd2:	18fb      	adds	r3, r7, r3
    8fd4:	881b      	ldrh	r3, [r3, #0]
    8fd6:	2b20      	cmp	r3, #32
    8fd8:	d004      	beq.n	8fe4 <create_name+0x128>
    8fda:	2324      	movs	r3, #36	; 0x24
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	881b      	ldrh	r3, [r3, #0]
    8fe0:	2b2e      	cmp	r3, #46	; 0x2e
    8fe2:	d106      	bne.n	8ff2 <create_name+0x136>
		di--;
    8fe4:	697b      	ldr	r3, [r7, #20]
    8fe6:	3b01      	subs	r3, #1
    8fe8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8fea:	697b      	ldr	r3, [r7, #20]
    8fec:	2b00      	cmp	r3, #0
    8fee:	d1e4      	bne.n	8fba <create_name+0xfe>
    8ff0:	e000      	b.n	8ff4 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8ff2:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8ff4:	697b      	ldr	r3, [r7, #20]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d101      	bne.n	8ffe <create_name+0x142>
    8ffa:	2306      	movs	r3, #6
    8ffc:	e17e      	b.n	92fc <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8ffe:	697b      	ldr	r3, [r7, #20]
    9000:	005b      	lsls	r3, r3, #1
    9002:	68fa      	ldr	r2, [r7, #12]
    9004:	18d3      	adds	r3, r2, r3
    9006:	2200      	movs	r2, #0
    9008:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    900a:	687b      	ldr	r3, [r7, #4]
    900c:	699b      	ldr	r3, [r3, #24]
    900e:	220b      	movs	r2, #11
    9010:	2120      	movs	r1, #32
    9012:	0018      	movs	r0, r3
    9014:	4b8b      	ldr	r3, [pc, #556]	; (9244 <create_name+0x388>)
    9016:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    9018:	2300      	movs	r3, #0
    901a:	61bb      	str	r3, [r7, #24]
    901c:	e002      	b.n	9024 <create_name+0x168>
    901e:	69bb      	ldr	r3, [r7, #24]
    9020:	3301      	adds	r3, #1
    9022:	61bb      	str	r3, [r7, #24]
    9024:	69bb      	ldr	r3, [r7, #24]
    9026:	005b      	lsls	r3, r3, #1
    9028:	68fa      	ldr	r2, [r7, #12]
    902a:	18d3      	adds	r3, r2, r3
    902c:	881b      	ldrh	r3, [r3, #0]
    902e:	2b20      	cmp	r3, #32
    9030:	d0f5      	beq.n	901e <create_name+0x162>
    9032:	69bb      	ldr	r3, [r7, #24]
    9034:	005b      	lsls	r3, r3, #1
    9036:	68fa      	ldr	r2, [r7, #12]
    9038:	18d3      	adds	r3, r2, r3
    903a:	881b      	ldrh	r3, [r3, #0]
    903c:	2b2e      	cmp	r3, #46	; 0x2e
    903e:	d0ee      	beq.n	901e <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    9040:	69bb      	ldr	r3, [r7, #24]
    9042:	2b00      	cmp	r3, #0
    9044:	d00b      	beq.n	905e <create_name+0x1a2>
    9046:	2326      	movs	r3, #38	; 0x26
    9048:	18fb      	adds	r3, r7, r3
    904a:	2226      	movs	r2, #38	; 0x26
    904c:	18ba      	adds	r2, r7, r2
    904e:	7812      	ldrb	r2, [r2, #0]
    9050:	2103      	movs	r1, #3
    9052:	430a      	orrs	r2, r1
    9054:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    9056:	e002      	b.n	905e <create_name+0x1a2>
    9058:	697b      	ldr	r3, [r7, #20]
    905a:	3b01      	subs	r3, #1
    905c:	617b      	str	r3, [r7, #20]
    905e:	697b      	ldr	r3, [r7, #20]
    9060:	2b00      	cmp	r3, #0
    9062:	d009      	beq.n	9078 <create_name+0x1bc>
    9064:	697b      	ldr	r3, [r7, #20]
    9066:	4a76      	ldr	r2, [pc, #472]	; (9240 <create_name+0x384>)
    9068:	4694      	mov	ip, r2
    906a:	4463      	add	r3, ip
    906c:	005b      	lsls	r3, r3, #1
    906e:	68fa      	ldr	r2, [r7, #12]
    9070:	18d3      	adds	r3, r2, r3
    9072:	881b      	ldrh	r3, [r3, #0]
    9074:	2b2e      	cmp	r3, #46	; 0x2e
    9076:	d1ef      	bne.n	9058 <create_name+0x19c>

	b = i = 0; ni = 8;
    9078:	2300      	movs	r3, #0
    907a:	623b      	str	r3, [r7, #32]
    907c:	2327      	movs	r3, #39	; 0x27
    907e:	18fb      	adds	r3, r7, r3
    9080:	2200      	movs	r2, #0
    9082:	701a      	strb	r2, [r3, #0]
    9084:	2308      	movs	r3, #8
    9086:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    9088:	69bb      	ldr	r3, [r7, #24]
    908a:	1c5a      	adds	r2, r3, #1
    908c:	61ba      	str	r2, [r7, #24]
    908e:	005b      	lsls	r3, r3, #1
    9090:	68fa      	ldr	r2, [r7, #12]
    9092:	18d2      	adds	r2, r2, r3
    9094:	2324      	movs	r3, #36	; 0x24
    9096:	18fb      	adds	r3, r7, r3
    9098:	8812      	ldrh	r2, [r2, #0]
    909a:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    909c:	2324      	movs	r3, #36	; 0x24
    909e:	18fb      	adds	r3, r7, r3
    90a0:	881b      	ldrh	r3, [r3, #0]
    90a2:	2b00      	cmp	r3, #0
    90a4:	d100      	bne.n	90a8 <create_name+0x1ec>
    90a6:	e0c3      	b.n	9230 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    90a8:	2324      	movs	r3, #36	; 0x24
    90aa:	18fb      	adds	r3, r7, r3
    90ac:	881b      	ldrh	r3, [r3, #0]
    90ae:	2b20      	cmp	r3, #32
    90b0:	d008      	beq.n	90c4 <create_name+0x208>
    90b2:	2324      	movs	r3, #36	; 0x24
    90b4:	18fb      	adds	r3, r7, r3
    90b6:	881b      	ldrh	r3, [r3, #0]
    90b8:	2b2e      	cmp	r3, #46	; 0x2e
    90ba:	d10c      	bne.n	90d6 <create_name+0x21a>
    90bc:	69ba      	ldr	r2, [r7, #24]
    90be:	697b      	ldr	r3, [r7, #20]
    90c0:	429a      	cmp	r2, r3
    90c2:	d008      	beq.n	90d6 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    90c4:	2326      	movs	r3, #38	; 0x26
    90c6:	18fb      	adds	r3, r7, r3
    90c8:	2226      	movs	r2, #38	; 0x26
    90ca:	18ba      	adds	r2, r7, r2
    90cc:	7812      	ldrb	r2, [r2, #0]
    90ce:	2103      	movs	r1, #3
    90d0:	430a      	orrs	r2, r1
    90d2:	701a      	strb	r2, [r3, #0]
    90d4:	e0ab      	b.n	922e <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    90d6:	6a3a      	ldr	r2, [r7, #32]
    90d8:	69fb      	ldr	r3, [r7, #28]
    90da:	429a      	cmp	r2, r3
    90dc:	d203      	bcs.n	90e6 <create_name+0x22a>
    90de:	69ba      	ldr	r2, [r7, #24]
    90e0:	697b      	ldr	r3, [r7, #20]
    90e2:	429a      	cmp	r2, r3
    90e4:	d12a      	bne.n	913c <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    90e6:	69fb      	ldr	r3, [r7, #28]
    90e8:	2b0b      	cmp	r3, #11
    90ea:	d108      	bne.n	90fe <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    90ec:	2326      	movs	r3, #38	; 0x26
    90ee:	18fb      	adds	r3, r7, r3
    90f0:	2226      	movs	r2, #38	; 0x26
    90f2:	18ba      	adds	r2, r7, r2
    90f4:	7812      	ldrb	r2, [r2, #0]
    90f6:	2103      	movs	r1, #3
    90f8:	430a      	orrs	r2, r1
    90fa:	701a      	strb	r2, [r3, #0]
    90fc:	e0a9      	b.n	9252 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    90fe:	69ba      	ldr	r2, [r7, #24]
    9100:	697b      	ldr	r3, [r7, #20]
    9102:	429a      	cmp	r2, r3
    9104:	d007      	beq.n	9116 <create_name+0x25a>
    9106:	2326      	movs	r3, #38	; 0x26
    9108:	18fb      	adds	r3, r7, r3
    910a:	2226      	movs	r2, #38	; 0x26
    910c:	18ba      	adds	r2, r7, r2
    910e:	7812      	ldrb	r2, [r2, #0]
    9110:	2103      	movs	r1, #3
    9112:	430a      	orrs	r2, r1
    9114:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    9116:	69ba      	ldr	r2, [r7, #24]
    9118:	697b      	ldr	r3, [r7, #20]
    911a:	429a      	cmp	r2, r3
    911c:	d900      	bls.n	9120 <create_name+0x264>
    911e:	e097      	b.n	9250 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    9120:	697b      	ldr	r3, [r7, #20]
    9122:	61bb      	str	r3, [r7, #24]
    9124:	2308      	movs	r3, #8
    9126:	623b      	str	r3, [r7, #32]
    9128:	230b      	movs	r3, #11
    912a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    912c:	2327      	movs	r3, #39	; 0x27
    912e:	18fb      	adds	r3, r7, r3
    9130:	2227      	movs	r2, #39	; 0x27
    9132:	18ba      	adds	r2, r7, r2
    9134:	7812      	ldrb	r2, [r2, #0]
    9136:	0092      	lsls	r2, r2, #2
    9138:	701a      	strb	r2, [r3, #0]
    913a:	e078      	b.n	922e <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    913c:	2324      	movs	r3, #36	; 0x24
    913e:	18fb      	adds	r3, r7, r3
    9140:	881b      	ldrh	r3, [r3, #0]
    9142:	2b7f      	cmp	r3, #127	; 0x7f
    9144:	d920      	bls.n	9188 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    9146:	2324      	movs	r3, #36	; 0x24
    9148:	18fc      	adds	r4, r7, r3
    914a:	2324      	movs	r3, #36	; 0x24
    914c:	18fb      	adds	r3, r7, r3
    914e:	881b      	ldrh	r3, [r3, #0]
    9150:	2100      	movs	r1, #0
    9152:	0018      	movs	r0, r3
    9154:	4b37      	ldr	r3, [pc, #220]	; (9234 <create_name+0x378>)
    9156:	4798      	blx	r3
    9158:	0003      	movs	r3, r0
    915a:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    915c:	2324      	movs	r3, #36	; 0x24
    915e:	18fb      	adds	r3, r7, r3
    9160:	881b      	ldrh	r3, [r3, #0]
    9162:	2b00      	cmp	r3, #0
    9164:	d008      	beq.n	9178 <create_name+0x2bc>
    9166:	2324      	movs	r3, #36	; 0x24
    9168:	18fb      	adds	r3, r7, r3
    916a:	881b      	ldrh	r3, [r3, #0]
    916c:	3b80      	subs	r3, #128	; 0x80
    916e:	4a36      	ldr	r2, [pc, #216]	; (9248 <create_name+0x38c>)
    9170:	5cd2      	ldrb	r2, [r2, r3]
    9172:	2324      	movs	r3, #36	; 0x24
    9174:	18fb      	adds	r3, r7, r3
    9176:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    9178:	2326      	movs	r3, #38	; 0x26
    917a:	18fb      	adds	r3, r7, r3
    917c:	2226      	movs	r2, #38	; 0x26
    917e:	18ba      	adds	r2, r7, r2
    9180:	7812      	ldrb	r2, [r2, #0]
    9182:	2102      	movs	r1, #2
    9184:	430a      	orrs	r2, r1
    9186:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    9188:	2324      	movs	r3, #36	; 0x24
    918a:	18fb      	adds	r3, r7, r3
    918c:	881b      	ldrh	r3, [r3, #0]
    918e:	2b00      	cmp	r3, #0
    9190:	d009      	beq.n	91a6 <create_name+0x2ea>
    9192:	2324      	movs	r3, #36	; 0x24
    9194:	18fb      	adds	r3, r7, r3
    9196:	881a      	ldrh	r2, [r3, #0]
    9198:	4b2c      	ldr	r3, [pc, #176]	; (924c <create_name+0x390>)
    919a:	0011      	movs	r1, r2
    919c:	0018      	movs	r0, r3
    919e:	4b27      	ldr	r3, [pc, #156]	; (923c <create_name+0x380>)
    91a0:	4798      	blx	r3
    91a2:	1e03      	subs	r3, r0, #0
    91a4:	d00c      	beq.n	91c0 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    91a6:	2324      	movs	r3, #36	; 0x24
    91a8:	18fb      	adds	r3, r7, r3
    91aa:	225f      	movs	r2, #95	; 0x5f
    91ac:	801a      	strh	r2, [r3, #0]
    91ae:	2326      	movs	r3, #38	; 0x26
    91b0:	18fb      	adds	r3, r7, r3
    91b2:	2226      	movs	r2, #38	; 0x26
    91b4:	18ba      	adds	r2, r7, r2
    91b6:	7812      	ldrb	r2, [r2, #0]
    91b8:	2103      	movs	r1, #3
    91ba:	430a      	orrs	r2, r1
    91bc:	701a      	strb	r2, [r3, #0]
    91be:	e02b      	b.n	9218 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    91c0:	2324      	movs	r3, #36	; 0x24
    91c2:	18fb      	adds	r3, r7, r3
    91c4:	881b      	ldrh	r3, [r3, #0]
    91c6:	2b40      	cmp	r3, #64	; 0x40
    91c8:	d90d      	bls.n	91e6 <create_name+0x32a>
    91ca:	2324      	movs	r3, #36	; 0x24
    91cc:	18fb      	adds	r3, r7, r3
    91ce:	881b      	ldrh	r3, [r3, #0]
    91d0:	2b5a      	cmp	r3, #90	; 0x5a
    91d2:	d808      	bhi.n	91e6 <create_name+0x32a>
					b |= 2;
    91d4:	2327      	movs	r3, #39	; 0x27
    91d6:	18fb      	adds	r3, r7, r3
    91d8:	2227      	movs	r2, #39	; 0x27
    91da:	18ba      	adds	r2, r7, r2
    91dc:	7812      	ldrb	r2, [r2, #0]
    91de:	2102      	movs	r1, #2
    91e0:	430a      	orrs	r2, r1
    91e2:	701a      	strb	r2, [r3, #0]
    91e4:	e018      	b.n	9218 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    91e6:	2324      	movs	r3, #36	; 0x24
    91e8:	18fb      	adds	r3, r7, r3
    91ea:	881b      	ldrh	r3, [r3, #0]
    91ec:	2b60      	cmp	r3, #96	; 0x60
    91ee:	d913      	bls.n	9218 <create_name+0x35c>
    91f0:	2324      	movs	r3, #36	; 0x24
    91f2:	18fb      	adds	r3, r7, r3
    91f4:	881b      	ldrh	r3, [r3, #0]
    91f6:	2b7a      	cmp	r3, #122	; 0x7a
    91f8:	d80e      	bhi.n	9218 <create_name+0x35c>
						b |= 1; w -= 0x20;
    91fa:	2327      	movs	r3, #39	; 0x27
    91fc:	18fb      	adds	r3, r7, r3
    91fe:	2227      	movs	r2, #39	; 0x27
    9200:	18ba      	adds	r2, r7, r2
    9202:	7812      	ldrb	r2, [r2, #0]
    9204:	2101      	movs	r1, #1
    9206:	430a      	orrs	r2, r1
    9208:	701a      	strb	r2, [r3, #0]
    920a:	2324      	movs	r3, #36	; 0x24
    920c:	18fb      	adds	r3, r7, r3
    920e:	2224      	movs	r2, #36	; 0x24
    9210:	18ba      	adds	r2, r7, r2
    9212:	8812      	ldrh	r2, [r2, #0]
    9214:	3a20      	subs	r2, #32
    9216:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	699a      	ldr	r2, [r3, #24]
    921c:	6a3b      	ldr	r3, [r7, #32]
    921e:	1c59      	adds	r1, r3, #1
    9220:	6239      	str	r1, [r7, #32]
    9222:	18d3      	adds	r3, r2, r3
    9224:	2224      	movs	r2, #36	; 0x24
    9226:	18ba      	adds	r2, r7, r2
    9228:	8812      	ldrh	r2, [r2, #0]
    922a:	b2d2      	uxtb	r2, r2
    922c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    922e:	e72b      	b.n	9088 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    9230:	46c0      	nop			; (mov r8, r8)
    9232:	e00e      	b.n	9252 <create_name+0x396>
    9234:	0000ab85 	.word	0x0000ab85
    9238:	0000ca94 	.word	0x0000ca94
    923c:	000076df 	.word	0x000076df
    9240:	7fffffff 	.word	0x7fffffff
    9244:	00007665 	.word	0x00007665
    9248:	0000cadc 	.word	0x0000cadc
    924c:	0000caa0 	.word	0x0000caa0
			if (si > di) break;			/* No extension */
    9250:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	699b      	ldr	r3, [r3, #24]
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	2be5      	cmp	r3, #229	; 0xe5
    925a:	d103      	bne.n	9264 <create_name+0x3a8>
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	699b      	ldr	r3, [r3, #24]
    9260:	2205      	movs	r2, #5
    9262:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    9264:	69fb      	ldr	r3, [r7, #28]
    9266:	2b08      	cmp	r3, #8
    9268:	d106      	bne.n	9278 <create_name+0x3bc>
    926a:	2327      	movs	r3, #39	; 0x27
    926c:	18fb      	adds	r3, r7, r3
    926e:	2227      	movs	r2, #39	; 0x27
    9270:	18ba      	adds	r2, r7, r2
    9272:	7812      	ldrb	r2, [r2, #0]
    9274:	0092      	lsls	r2, r2, #2
    9276:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    9278:	2327      	movs	r3, #39	; 0x27
    927a:	18fb      	adds	r3, r7, r3
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	220c      	movs	r2, #12
    9280:	4013      	ands	r3, r2
    9282:	2b0c      	cmp	r3, #12
    9284:	d006      	beq.n	9294 <create_name+0x3d8>
    9286:	2327      	movs	r3, #39	; 0x27
    9288:	18fb      	adds	r3, r7, r3
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	2203      	movs	r2, #3
    928e:	4013      	ands	r3, r2
    9290:	2b03      	cmp	r3, #3
    9292:	d107      	bne.n	92a4 <create_name+0x3e8>
		cf |= NS_LFN;
    9294:	2326      	movs	r3, #38	; 0x26
    9296:	18fb      	adds	r3, r7, r3
    9298:	2226      	movs	r2, #38	; 0x26
    929a:	18ba      	adds	r2, r7, r2
    929c:	7812      	ldrb	r2, [r2, #0]
    929e:	2102      	movs	r1, #2
    92a0:	430a      	orrs	r2, r1
    92a2:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    92a4:	2326      	movs	r3, #38	; 0x26
    92a6:	18fb      	adds	r3, r7, r3
    92a8:	781b      	ldrb	r3, [r3, #0]
    92aa:	2202      	movs	r2, #2
    92ac:	4013      	ands	r3, r2
    92ae:	d11d      	bne.n	92ec <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    92b0:	2327      	movs	r3, #39	; 0x27
    92b2:	18fb      	adds	r3, r7, r3
    92b4:	781b      	ldrb	r3, [r3, #0]
    92b6:	2203      	movs	r2, #3
    92b8:	4013      	ands	r3, r2
    92ba:	2b01      	cmp	r3, #1
    92bc:	d107      	bne.n	92ce <create_name+0x412>
    92be:	2326      	movs	r3, #38	; 0x26
    92c0:	18fb      	adds	r3, r7, r3
    92c2:	2226      	movs	r2, #38	; 0x26
    92c4:	18ba      	adds	r2, r7, r2
    92c6:	7812      	ldrb	r2, [r2, #0]
    92c8:	2110      	movs	r1, #16
    92ca:	430a      	orrs	r2, r1
    92cc:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    92ce:	2327      	movs	r3, #39	; 0x27
    92d0:	18fb      	adds	r3, r7, r3
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	220c      	movs	r2, #12
    92d6:	4013      	ands	r3, r2
    92d8:	2b04      	cmp	r3, #4
    92da:	d107      	bne.n	92ec <create_name+0x430>
    92dc:	2326      	movs	r3, #38	; 0x26
    92de:	18fb      	adds	r3, r7, r3
    92e0:	2226      	movs	r2, #38	; 0x26
    92e2:	18ba      	adds	r2, r7, r2
    92e4:	7812      	ldrb	r2, [r2, #0]
    92e6:	2108      	movs	r1, #8
    92e8:	430a      	orrs	r2, r1
    92ea:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    92ec:	687b      	ldr	r3, [r7, #4]
    92ee:	699b      	ldr	r3, [r3, #24]
    92f0:	330b      	adds	r3, #11
    92f2:	2226      	movs	r2, #38	; 0x26
    92f4:	18ba      	adds	r2, r7, r2
    92f6:	7812      	ldrb	r2, [r2, #0]
    92f8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    92fa:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    92fc:	0018      	movs	r0, r3
    92fe:	46bd      	mov	sp, r7
    9300:	b00b      	add	sp, #44	; 0x2c
    9302:	bd90      	pop	{r4, r7, pc}

00009304 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    9304:	b590      	push	{r4, r7, lr}
    9306:	b085      	sub	sp, #20
    9308:	af00      	add	r7, sp, #0
    930a:	6078      	str	r0, [r7, #4]
    930c:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    930e:	683b      	ldr	r3, [r7, #0]
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	2b2f      	cmp	r3, #47	; 0x2f
    9314:	d003      	beq.n	931e <follow_path+0x1a>
    9316:	683b      	ldr	r3, [r7, #0]
    9318:	781b      	ldrb	r3, [r3, #0]
    931a:	2b5c      	cmp	r3, #92	; 0x5c
    931c:	d102      	bne.n	9324 <follow_path+0x20>
		path++;
    931e:	683b      	ldr	r3, [r7, #0]
    9320:	3301      	adds	r3, #1
    9322:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	2200      	movs	r2, #0
    9328:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    932a:	683b      	ldr	r3, [r7, #0]
    932c:	781b      	ldrb	r3, [r3, #0]
    932e:	2b1f      	cmp	r3, #31
    9330:	d80c      	bhi.n	934c <follow_path+0x48>
		res = dir_sdi(dj, 0);
    9332:	230f      	movs	r3, #15
    9334:	18fc      	adds	r4, r7, r3
    9336:	687b      	ldr	r3, [r7, #4]
    9338:	2100      	movs	r1, #0
    933a:	0018      	movs	r0, r3
    933c:	4b3c      	ldr	r3, [pc, #240]	; (9430 <follow_path+0x12c>)
    933e:	4798      	blx	r3
    9340:	0003      	movs	r3, r0
    9342:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	2200      	movs	r2, #0
    9348:	615a      	str	r2, [r3, #20]
    934a:	e06a      	b.n	9422 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    934c:	230f      	movs	r3, #15
    934e:	18fc      	adds	r4, r7, r3
    9350:	003a      	movs	r2, r7
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	0011      	movs	r1, r2
    9356:	0018      	movs	r0, r3
    9358:	4b36      	ldr	r3, [pc, #216]	; (9434 <follow_path+0x130>)
    935a:	4798      	blx	r3
    935c:	0003      	movs	r3, r0
    935e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9360:	230f      	movs	r3, #15
    9362:	18fb      	adds	r3, r7, r3
    9364:	781b      	ldrb	r3, [r3, #0]
    9366:	2b00      	cmp	r3, #0
    9368:	d154      	bne.n	9414 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    936a:	230f      	movs	r3, #15
    936c:	18fc      	adds	r4, r7, r3
    936e:	687b      	ldr	r3, [r7, #4]
    9370:	0018      	movs	r0, r3
    9372:	4b31      	ldr	r3, [pc, #196]	; (9438 <follow_path+0x134>)
    9374:	4798      	blx	r3
    9376:	0003      	movs	r3, r0
    9378:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	699a      	ldr	r2, [r3, #24]
    937e:	230e      	movs	r3, #14
    9380:	18fb      	adds	r3, r7, r3
    9382:	7ad2      	ldrb	r2, [r2, #11]
    9384:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    9386:	230f      	movs	r3, #15
    9388:	18fb      	adds	r3, r7, r3
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	2b00      	cmp	r3, #0
    938e:	d00f      	beq.n	93b0 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9390:	230f      	movs	r3, #15
    9392:	18fb      	adds	r3, r7, r3
    9394:	781b      	ldrb	r3, [r3, #0]
    9396:	2b04      	cmp	r3, #4
    9398:	d13e      	bne.n	9418 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    939a:	230e      	movs	r3, #14
    939c:	18fb      	adds	r3, r7, r3
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	2204      	movs	r2, #4
    93a2:	4013      	ands	r3, r2
    93a4:	d13a      	bne.n	941c <follow_path+0x118>
    93a6:	230f      	movs	r3, #15
    93a8:	18fb      	adds	r3, r7, r3
    93aa:	2205      	movs	r2, #5
    93ac:	701a      	strb	r2, [r3, #0]
				}
				break;
    93ae:	e035      	b.n	941c <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    93b0:	230e      	movs	r3, #14
    93b2:	18fb      	adds	r3, r7, r3
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	2204      	movs	r2, #4
    93b8:	4013      	ands	r3, r2
    93ba:	d131      	bne.n	9420 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	695b      	ldr	r3, [r3, #20]
    93c0:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    93c2:	68bb      	ldr	r3, [r7, #8]
    93c4:	330b      	adds	r3, #11
    93c6:	781b      	ldrb	r3, [r3, #0]
    93c8:	001a      	movs	r2, r3
    93ca:	2310      	movs	r3, #16
    93cc:	4013      	ands	r3, r2
    93ce:	d104      	bne.n	93da <follow_path+0xd6>
				res = FR_NO_PATH; break;
    93d0:	230f      	movs	r3, #15
    93d2:	18fb      	adds	r3, r7, r3
    93d4:	2205      	movs	r2, #5
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	e023      	b.n	9422 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    93da:	68bb      	ldr	r3, [r7, #8]
    93dc:	3315      	adds	r3, #21
    93de:	781b      	ldrb	r3, [r3, #0]
    93e0:	021b      	lsls	r3, r3, #8
    93e2:	b21a      	sxth	r2, r3
    93e4:	68bb      	ldr	r3, [r7, #8]
    93e6:	3314      	adds	r3, #20
    93e8:	781b      	ldrb	r3, [r3, #0]
    93ea:	b21b      	sxth	r3, r3
    93ec:	4313      	orrs	r3, r2
    93ee:	b21b      	sxth	r3, r3
    93f0:	b29b      	uxth	r3, r3
    93f2:	041b      	lsls	r3, r3, #16
    93f4:	68ba      	ldr	r2, [r7, #8]
    93f6:	321b      	adds	r2, #27
    93f8:	7812      	ldrb	r2, [r2, #0]
    93fa:	0212      	lsls	r2, r2, #8
    93fc:	b211      	sxth	r1, r2
    93fe:	68ba      	ldr	r2, [r7, #8]
    9400:	321a      	adds	r2, #26
    9402:	7812      	ldrb	r2, [r2, #0]
    9404:	b212      	sxth	r2, r2
    9406:	430a      	orrs	r2, r1
    9408:	b212      	sxth	r2, r2
    940a:	b292      	uxth	r2, r2
    940c:	431a      	orrs	r2, r3
    940e:	687b      	ldr	r3, [r7, #4]
    9410:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    9412:	e79b      	b.n	934c <follow_path+0x48>
			if (res != FR_OK) break;
    9414:	46c0      	nop			; (mov r8, r8)
    9416:	e004      	b.n	9422 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9418:	46c0      	nop			; (mov r8, r8)
    941a:	e002      	b.n	9422 <follow_path+0x11e>
				break;
    941c:	46c0      	nop			; (mov r8, r8)
    941e:	e000      	b.n	9422 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9420:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    9422:	230f      	movs	r3, #15
    9424:	18fb      	adds	r3, r7, r3
    9426:	781b      	ldrb	r3, [r3, #0]
}
    9428:	0018      	movs	r0, r3
    942a:	46bd      	mov	sp, r7
    942c:	b005      	add	sp, #20
    942e:	bd90      	pop	{r4, r7, pc}
    9430:	00007f55 	.word	0x00007f55
    9434:	00008ebd 	.word	0x00008ebd
    9438:	000086bd 	.word	0x000086bd

0000943c <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    943c:	b590      	push	{r4, r7, lr}
    943e:	b083      	sub	sp, #12
    9440:	af00      	add	r7, sp, #0
    9442:	6078      	str	r0, [r7, #4]
    9444:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	7858      	ldrb	r0, [r3, #1]
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	3330      	adds	r3, #48	; 0x30
    944e:	0019      	movs	r1, r3
    9450:	683a      	ldr	r2, [r7, #0]
    9452:	2301      	movs	r3, #1
    9454:	4c2a      	ldr	r4, [pc, #168]	; (9500 <check_fs+0xc4>)
    9456:	47a0      	blx	r4
    9458:	1e03      	subs	r3, r0, #0
    945a:	d001      	beq.n	9460 <check_fs+0x24>
		return 3;
    945c:	2303      	movs	r3, #3
    945e:	e04b      	b.n	94f8 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9460:	687b      	ldr	r3, [r7, #4]
    9462:	4a28      	ldr	r2, [pc, #160]	; (9504 <check_fs+0xc8>)
    9464:	4694      	mov	ip, r2
    9466:	4463      	add	r3, ip
    9468:	3301      	adds	r3, #1
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	021b      	lsls	r3, r3, #8
    946e:	b21a      	sxth	r2, r3
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	4924      	ldr	r1, [pc, #144]	; (9504 <check_fs+0xc8>)
    9474:	5c5b      	ldrb	r3, [r3, r1]
    9476:	b21b      	sxth	r3, r3
    9478:	4313      	orrs	r3, r2
    947a:	b21b      	sxth	r3, r3
    947c:	4a22      	ldr	r2, [pc, #136]	; (9508 <check_fs+0xcc>)
    947e:	4293      	cmp	r3, r2
    9480:	d001      	beq.n	9486 <check_fs+0x4a>
		return 2;
    9482:	2302      	movs	r3, #2
    9484:	e038      	b.n	94f8 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    9486:	687b      	ldr	r3, [r7, #4]
    9488:	3366      	adds	r3, #102	; 0x66
    948a:	3303      	adds	r3, #3
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	061a      	lsls	r2, r3, #24
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	3366      	adds	r3, #102	; 0x66
    9494:	3302      	adds	r3, #2
    9496:	781b      	ldrb	r3, [r3, #0]
    9498:	041b      	lsls	r3, r3, #16
    949a:	4313      	orrs	r3, r2
    949c:	687a      	ldr	r2, [r7, #4]
    949e:	3266      	adds	r2, #102	; 0x66
    94a0:	3201      	adds	r2, #1
    94a2:	7812      	ldrb	r2, [r2, #0]
    94a4:	0212      	lsls	r2, r2, #8
    94a6:	4313      	orrs	r3, r2
    94a8:	687a      	ldr	r2, [r7, #4]
    94aa:	2166      	movs	r1, #102	; 0x66
    94ac:	5c52      	ldrb	r2, [r2, r1]
    94ae:	4313      	orrs	r3, r2
    94b0:	021b      	lsls	r3, r3, #8
    94b2:	0a1b      	lsrs	r3, r3, #8
    94b4:	4a15      	ldr	r2, [pc, #84]	; (950c <check_fs+0xd0>)
    94b6:	4293      	cmp	r3, r2
    94b8:	d101      	bne.n	94be <check_fs+0x82>
		return 0;
    94ba:	2300      	movs	r3, #0
    94bc:	e01c      	b.n	94f8 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    94be:	687b      	ldr	r3, [r7, #4]
    94c0:	3382      	adds	r3, #130	; 0x82
    94c2:	3303      	adds	r3, #3
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	061a      	lsls	r2, r3, #24
    94c8:	687b      	ldr	r3, [r7, #4]
    94ca:	3382      	adds	r3, #130	; 0x82
    94cc:	3302      	adds	r3, #2
    94ce:	781b      	ldrb	r3, [r3, #0]
    94d0:	041b      	lsls	r3, r3, #16
    94d2:	4313      	orrs	r3, r2
    94d4:	687a      	ldr	r2, [r7, #4]
    94d6:	3282      	adds	r2, #130	; 0x82
    94d8:	3201      	adds	r2, #1
    94da:	7812      	ldrb	r2, [r2, #0]
    94dc:	0212      	lsls	r2, r2, #8
    94de:	4313      	orrs	r3, r2
    94e0:	687a      	ldr	r2, [r7, #4]
    94e2:	2182      	movs	r1, #130	; 0x82
    94e4:	5c52      	ldrb	r2, [r2, r1]
    94e6:	4313      	orrs	r3, r2
    94e8:	021b      	lsls	r3, r3, #8
    94ea:	0a1b      	lsrs	r3, r3, #8
    94ec:	4a07      	ldr	r2, [pc, #28]	; (950c <check_fs+0xd0>)
    94ee:	4293      	cmp	r3, r2
    94f0:	d101      	bne.n	94f6 <check_fs+0xba>
		return 0;
    94f2:	2300      	movs	r3, #0
    94f4:	e000      	b.n	94f8 <check_fs+0xbc>

	return 1;
    94f6:	2301      	movs	r3, #1
}
    94f8:	0018      	movs	r0, r3
    94fa:	46bd      	mov	sp, r7
    94fc:	b003      	add	sp, #12
    94fe:	bd90      	pop	{r4, r7, pc}
    9500:	00007325 	.word	0x00007325
    9504:	0000022e 	.word	0x0000022e
    9508:	ffffaa55 	.word	0xffffaa55
    950c:	00544146 	.word	0x00544146

00009510 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    9510:	b590      	push	{r4, r7, lr}
    9512:	b093      	sub	sp, #76	; 0x4c
    9514:	af00      	add	r7, sp, #0
    9516:	60f8      	str	r0, [r7, #12]
    9518:	60b9      	str	r1, [r7, #8]
    951a:	1dfb      	adds	r3, r7, #7
    951c:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    951e:	68fb      	ldr	r3, [r7, #12]
    9520:	681b      	ldr	r3, [r3, #0]
    9522:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    9524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9526:	781b      	ldrb	r3, [r3, #0]
    9528:	3b30      	subs	r3, #48	; 0x30
    952a:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    952c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    952e:	2b09      	cmp	r3, #9
    9530:	d80b      	bhi.n	954a <chk_mounted+0x3a>
    9532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9534:	3301      	adds	r3, #1
    9536:	781b      	ldrb	r3, [r3, #0]
    9538:	2b3a      	cmp	r3, #58	; 0x3a
    953a:	d106      	bne.n	954a <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    953e:	3302      	adds	r3, #2
    9540:	62fb      	str	r3, [r7, #44]	; 0x2c
    9542:	68fb      	ldr	r3, [r7, #12]
    9544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9546:	601a      	str	r2, [r3, #0]
    9548:	e001      	b.n	954e <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    954a:	2300      	movs	r3, #0
    954c:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    954e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9550:	2b00      	cmp	r3, #0
    9552:	d001      	beq.n	9558 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9554:	230b      	movs	r3, #11
    9556:	e2af      	b.n	9ab8 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    9558:	4bc5      	ldr	r3, [pc, #788]	; (9870 <chk_mounted+0x360>)
    955a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    955c:	0092      	lsls	r2, r2, #2
    955e:	58d3      	ldr	r3, [r2, r3]
    9560:	62bb      	str	r3, [r7, #40]	; 0x28
    9562:	68bb      	ldr	r3, [r7, #8]
    9564:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9566:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    9568:	6abb      	ldr	r3, [r7, #40]	; 0x28
    956a:	2b00      	cmp	r3, #0
    956c:	d101      	bne.n	9572 <chk_mounted+0x62>
    956e:	230c      	movs	r3, #12
    9570:	e2a2      	b.n	9ab8 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    9572:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	2b00      	cmp	r3, #0
    9578:	d01c      	beq.n	95b4 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    957c:	785b      	ldrb	r3, [r3, #1]
    957e:	2227      	movs	r2, #39	; 0x27
    9580:	18bc      	adds	r4, r7, r2
    9582:	0018      	movs	r0, r3
    9584:	4bbb      	ldr	r3, [pc, #748]	; (9874 <chk_mounted+0x364>)
    9586:	4798      	blx	r3
    9588:	0003      	movs	r3, r0
    958a:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    958c:	2327      	movs	r3, #39	; 0x27
    958e:	18fb      	adds	r3, r7, r3
    9590:	781b      	ldrb	r3, [r3, #0]
    9592:	2201      	movs	r2, #1
    9594:	4013      	ands	r3, r2
    9596:	d10d      	bne.n	95b4 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    9598:	1dfb      	adds	r3, r7, #7
    959a:	781b      	ldrb	r3, [r3, #0]
    959c:	2b00      	cmp	r3, #0
    959e:	d007      	beq.n	95b0 <chk_mounted+0xa0>
    95a0:	2327      	movs	r3, #39	; 0x27
    95a2:	18fb      	adds	r3, r7, r3
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	2204      	movs	r2, #4
    95a8:	4013      	ands	r3, r2
    95aa:	d001      	beq.n	95b0 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    95ac:	230a      	movs	r3, #10
    95ae:	e283      	b.n	9ab8 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    95b0:	2300      	movs	r3, #0
    95b2:	e281      	b.n	9ab8 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    95b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b6:	2200      	movs	r2, #0
    95b8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    95ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95bc:	b2da      	uxtb	r2, r3
    95be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95c0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    95c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95c4:	785b      	ldrb	r3, [r3, #1]
    95c6:	2227      	movs	r2, #39	; 0x27
    95c8:	18bc      	adds	r4, r7, r2
    95ca:	0018      	movs	r0, r3
    95cc:	4baa      	ldr	r3, [pc, #680]	; (9878 <chk_mounted+0x368>)
    95ce:	4798      	blx	r3
    95d0:	0003      	movs	r3, r0
    95d2:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    95d4:	2327      	movs	r3, #39	; 0x27
    95d6:	18fb      	adds	r3, r7, r3
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	2201      	movs	r2, #1
    95dc:	4013      	ands	r3, r2
    95de:	d001      	beq.n	95e4 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    95e0:	2303      	movs	r3, #3
    95e2:	e269      	b.n	9ab8 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    95e4:	1dfb      	adds	r3, r7, #7
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	2b00      	cmp	r3, #0
    95ea:	d007      	beq.n	95fc <chk_mounted+0xec>
    95ec:	2327      	movs	r3, #39	; 0x27
    95ee:	18fb      	adds	r3, r7, r3
    95f0:	781b      	ldrb	r3, [r3, #0]
    95f2:	2204      	movs	r2, #4
    95f4:	4013      	ands	r3, r2
    95f6:	d001      	beq.n	95fc <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    95f8:	230a      	movs	r3, #10
    95fa:	e25d      	b.n	9ab8 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    95fc:	2300      	movs	r3, #0
    95fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    9600:	2347      	movs	r3, #71	; 0x47
    9602:	18fc      	adds	r4, r7, r3
    9604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9608:	0011      	movs	r1, r2
    960a:	0018      	movs	r0, r3
    960c:	4b9b      	ldr	r3, [pc, #620]	; (987c <chk_mounted+0x36c>)
    960e:	4798      	blx	r3
    9610:	0003      	movs	r3, r0
    9612:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    9614:	2347      	movs	r3, #71	; 0x47
    9616:	18fb      	adds	r3, r7, r3
    9618:	781b      	ldrb	r3, [r3, #0]
    961a:	2b01      	cmp	r3, #1
    961c:	d13b      	bne.n	9696 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    961e:	2346      	movs	r3, #70	; 0x46
    9620:	18fb      	adds	r3, r7, r3
    9622:	2200      	movs	r2, #0
    9624:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    9626:	2346      	movs	r3, #70	; 0x46
    9628:	18fb      	adds	r3, r7, r3
    962a:	781b      	ldrb	r3, [r3, #0]
    962c:	2b00      	cmp	r3, #0
    962e:	d006      	beq.n	963e <chk_mounted+0x12e>
    9630:	2346      	movs	r3, #70	; 0x46
    9632:	18fb      	adds	r3, r7, r3
    9634:	781a      	ldrb	r2, [r3, #0]
    9636:	2346      	movs	r3, #70	; 0x46
    9638:	18fb      	adds	r3, r7, r3
    963a:	3a01      	subs	r2, #1
    963c:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    963e:	2346      	movs	r3, #70	; 0x46
    9640:	18fb      	adds	r3, r7, r3
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	011b      	lsls	r3, r3, #4
    9646:	33bf      	adds	r3, #191	; 0xbf
    9648:	33ff      	adds	r3, #255	; 0xff
    964a:	3330      	adds	r3, #48	; 0x30
    964c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    964e:	18d3      	adds	r3, r2, r3
    9650:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    9652:	6a3b      	ldr	r3, [r7, #32]
    9654:	3304      	adds	r3, #4
    9656:	781b      	ldrb	r3, [r3, #0]
    9658:	2b00      	cmp	r3, #0
    965a:	d01c      	beq.n	9696 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    965c:	6a3b      	ldr	r3, [r7, #32]
    965e:	330b      	adds	r3, #11
    9660:	781b      	ldrb	r3, [r3, #0]
    9662:	061a      	lsls	r2, r3, #24
    9664:	6a3b      	ldr	r3, [r7, #32]
    9666:	330a      	adds	r3, #10
    9668:	781b      	ldrb	r3, [r3, #0]
    966a:	041b      	lsls	r3, r3, #16
    966c:	4313      	orrs	r3, r2
    966e:	6a3a      	ldr	r2, [r7, #32]
    9670:	3209      	adds	r2, #9
    9672:	7812      	ldrb	r2, [r2, #0]
    9674:	0212      	lsls	r2, r2, #8
    9676:	4313      	orrs	r3, r2
    9678:	6a3a      	ldr	r2, [r7, #32]
    967a:	3208      	adds	r2, #8
    967c:	7812      	ldrb	r2, [r2, #0]
    967e:	4313      	orrs	r3, r2
    9680:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    9682:	2347      	movs	r3, #71	; 0x47
    9684:	18fc      	adds	r4, r7, r3
    9686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9688:	6abb      	ldr	r3, [r7, #40]	; 0x28
    968a:	0011      	movs	r1, r2
    968c:	0018      	movs	r0, r3
    968e:	4b7b      	ldr	r3, [pc, #492]	; (987c <chk_mounted+0x36c>)
    9690:	4798      	blx	r3
    9692:	0003      	movs	r3, r0
    9694:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    9696:	2347      	movs	r3, #71	; 0x47
    9698:	18fb      	adds	r3, r7, r3
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	2b03      	cmp	r3, #3
    969e:	d101      	bne.n	96a4 <chk_mounted+0x194>
    96a0:	2301      	movs	r3, #1
    96a2:	e209      	b.n	9ab8 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    96a4:	2347      	movs	r3, #71	; 0x47
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	2b00      	cmp	r3, #0
    96ac:	d001      	beq.n	96b2 <chk_mounted+0x1a2>
    96ae:	230d      	movs	r3, #13
    96b0:	e202      	b.n	9ab8 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    96b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b4:	223c      	movs	r2, #60	; 0x3c
    96b6:	5c9b      	ldrb	r3, [r3, r2]
    96b8:	021b      	lsls	r3, r3, #8
    96ba:	b21a      	sxth	r2, r3
    96bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96be:	213b      	movs	r1, #59	; 0x3b
    96c0:	5c5b      	ldrb	r3, [r3, r1]
    96c2:	b21b      	sxth	r3, r3
    96c4:	4313      	orrs	r3, r2
    96c6:	b21a      	sxth	r2, r3
    96c8:	2380      	movs	r3, #128	; 0x80
    96ca:	009b      	lsls	r3, r3, #2
    96cc:	429a      	cmp	r2, r3
    96ce:	d001      	beq.n	96d4 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    96d0:	230d      	movs	r3, #13
    96d2:	e1f1      	b.n	9ab8 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    96d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96d6:	2247      	movs	r2, #71	; 0x47
    96d8:	5c9b      	ldrb	r3, [r3, r2]
    96da:	021b      	lsls	r3, r3, #8
    96dc:	b21a      	sxth	r2, r3
    96de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96e0:	2146      	movs	r1, #70	; 0x46
    96e2:	5c5b      	ldrb	r3, [r3, r1]
    96e4:	b21b      	sxth	r3, r3
    96e6:	4313      	orrs	r3, r2
    96e8:	b21b      	sxth	r3, r3
    96ea:	b29b      	uxth	r3, r3
    96ec:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    96ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96f0:	2b00      	cmp	r3, #0
    96f2:	d112      	bne.n	971a <chk_mounted+0x20a>
    96f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f6:	2257      	movs	r2, #87	; 0x57
    96f8:	5c9b      	ldrb	r3, [r3, r2]
    96fa:	061a      	lsls	r2, r3, #24
    96fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96fe:	2156      	movs	r1, #86	; 0x56
    9700:	5c5b      	ldrb	r3, [r3, r1]
    9702:	041b      	lsls	r3, r3, #16
    9704:	4313      	orrs	r3, r2
    9706:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9708:	2155      	movs	r1, #85	; 0x55
    970a:	5c52      	ldrb	r2, [r2, r1]
    970c:	0212      	lsls	r2, r2, #8
    970e:	4313      	orrs	r3, r2
    9710:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9712:	2154      	movs	r1, #84	; 0x54
    9714:	5c52      	ldrb	r2, [r2, r1]
    9716:	4313      	orrs	r3, r2
    9718:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    971c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    971e:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    9720:	231f      	movs	r3, #31
    9722:	18fb      	adds	r3, r7, r3
    9724:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9726:	2140      	movs	r1, #64	; 0x40
    9728:	5c52      	ldrb	r2, [r2, r1]
    972a:	701a      	strb	r2, [r3, #0]
    972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    972e:	221f      	movs	r2, #31
    9730:	18ba      	adds	r2, r7, r2
    9732:	7812      	ldrb	r2, [r2, #0]
    9734:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    9736:	231f      	movs	r3, #31
    9738:	18fb      	adds	r3, r7, r3
    973a:	781b      	ldrb	r3, [r3, #0]
    973c:	2b01      	cmp	r3, #1
    973e:	d006      	beq.n	974e <chk_mounted+0x23e>
    9740:	231f      	movs	r3, #31
    9742:	18fb      	adds	r3, r7, r3
    9744:	781b      	ldrb	r3, [r3, #0]
    9746:	2b02      	cmp	r3, #2
    9748:	d001      	beq.n	974e <chk_mounted+0x23e>
    974a:	230d      	movs	r3, #13
    974c:	e1b4      	b.n	9ab8 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    974e:	231f      	movs	r3, #31
    9750:	18fb      	adds	r3, r7, r3
    9752:	781a      	ldrb	r2, [r3, #0]
    9754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9756:	4353      	muls	r3, r2
    9758:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    975a:	231f      	movs	r3, #31
    975c:	18fb      	adds	r3, r7, r3
    975e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9760:	213d      	movs	r1, #61	; 0x3d
    9762:	5c52      	ldrb	r2, [r2, r1]
    9764:	701a      	strb	r2, [r3, #0]
    9766:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9768:	221f      	movs	r2, #31
    976a:	18ba      	adds	r2, r7, r2
    976c:	7812      	ldrb	r2, [r2, #0]
    976e:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9770:	231f      	movs	r3, #31
    9772:	18fb      	adds	r3, r7, r3
    9774:	781b      	ldrb	r3, [r3, #0]
    9776:	2b00      	cmp	r3, #0
    9778:	d008      	beq.n	978c <chk_mounted+0x27c>
    977a:	231f      	movs	r3, #31
    977c:	18fb      	adds	r3, r7, r3
    977e:	781b      	ldrb	r3, [r3, #0]
    9780:	221f      	movs	r2, #31
    9782:	18ba      	adds	r2, r7, r2
    9784:	7812      	ldrb	r2, [r2, #0]
    9786:	3a01      	subs	r2, #1
    9788:	4013      	ands	r3, r2
    978a:	d001      	beq.n	9790 <chk_mounted+0x280>
    978c:	230d      	movs	r3, #13
    978e:	e193      	b.n	9ab8 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9790:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9792:	2242      	movs	r2, #66	; 0x42
    9794:	5c9b      	ldrb	r3, [r3, r2]
    9796:	021b      	lsls	r3, r3, #8
    9798:	b21a      	sxth	r2, r3
    979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    979c:	2141      	movs	r1, #65	; 0x41
    979e:	5c5b      	ldrb	r3, [r3, r1]
    97a0:	b21b      	sxth	r3, r3
    97a2:	4313      	orrs	r3, r2
    97a4:	b21b      	sxth	r3, r3
    97a6:	b29a      	uxth	r2, r3
    97a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97aa:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    97ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97ae:	891b      	ldrh	r3, [r3, #8]
    97b0:	220f      	movs	r2, #15
    97b2:	4013      	ands	r3, r2
    97b4:	b29b      	uxth	r3, r3
    97b6:	2b00      	cmp	r3, #0
    97b8:	d001      	beq.n	97be <chk_mounted+0x2ae>
    97ba:	230d      	movs	r3, #13
    97bc:	e17c      	b.n	9ab8 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    97be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97c0:	2244      	movs	r2, #68	; 0x44
    97c2:	5c9b      	ldrb	r3, [r3, r2]
    97c4:	021b      	lsls	r3, r3, #8
    97c6:	b21a      	sxth	r2, r3
    97c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97ca:	2143      	movs	r1, #67	; 0x43
    97cc:	5c5b      	ldrb	r3, [r3, r1]
    97ce:	b21b      	sxth	r3, r3
    97d0:	4313      	orrs	r3, r2
    97d2:	b21b      	sxth	r3, r3
    97d4:	b29b      	uxth	r3, r3
    97d6:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    97d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    97da:	2b00      	cmp	r3, #0
    97dc:	d112      	bne.n	9804 <chk_mounted+0x2f4>
    97de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97e0:	2253      	movs	r2, #83	; 0x53
    97e2:	5c9b      	ldrb	r3, [r3, r2]
    97e4:	061a      	lsls	r2, r3, #24
    97e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97e8:	2152      	movs	r1, #82	; 0x52
    97ea:	5c5b      	ldrb	r3, [r3, r1]
    97ec:	041b      	lsls	r3, r3, #16
    97ee:	4313      	orrs	r3, r2
    97f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    97f2:	2151      	movs	r1, #81	; 0x51
    97f4:	5c52      	ldrb	r2, [r2, r1]
    97f6:	0212      	lsls	r2, r2, #8
    97f8:	4313      	orrs	r3, r2
    97fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    97fc:	2150      	movs	r1, #80	; 0x50
    97fe:	5c52      	ldrb	r2, [r2, r1]
    9800:	4313      	orrs	r3, r2
    9802:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    9804:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9806:	223f      	movs	r2, #63	; 0x3f
    9808:	5c9b      	ldrb	r3, [r3, r2]
    980a:	021b      	lsls	r3, r3, #8
    980c:	b21a      	sxth	r2, r3
    980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9810:	213e      	movs	r1, #62	; 0x3e
    9812:	5c5b      	ldrb	r3, [r3, r1]
    9814:	b21b      	sxth	r3, r3
    9816:	4313      	orrs	r3, r2
    9818:	b21a      	sxth	r2, r3
    981a:	231c      	movs	r3, #28
    981c:	18fb      	adds	r3, r7, r3
    981e:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    9820:	231c      	movs	r3, #28
    9822:	18fb      	adds	r3, r7, r3
    9824:	881b      	ldrh	r3, [r3, #0]
    9826:	2b00      	cmp	r3, #0
    9828:	d101      	bne.n	982e <chk_mounted+0x31e>
    982a:	230d      	movs	r3, #13
    982c:	e144      	b.n	9ab8 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    982e:	231c      	movs	r3, #28
    9830:	18fb      	adds	r3, r7, r3
    9832:	881a      	ldrh	r2, [r3, #0]
    9834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9836:	18d3      	adds	r3, r2, r3
    9838:	6aba      	ldr	r2, [r7, #40]	; 0x28
    983a:	8912      	ldrh	r2, [r2, #8]
    983c:	0912      	lsrs	r2, r2, #4
    983e:	b292      	uxth	r2, r2
    9840:	189b      	adds	r3, r3, r2
    9842:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9846:	69bb      	ldr	r3, [r7, #24]
    9848:	429a      	cmp	r2, r3
    984a:	d201      	bcs.n	9850 <chk_mounted+0x340>
    984c:	230d      	movs	r3, #13
    984e:	e133      	b.n	9ab8 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9852:	69bb      	ldr	r3, [r7, #24]
    9854:	1ad2      	subs	r2, r2, r3
    9856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9858:	789b      	ldrb	r3, [r3, #2]
    985a:	0019      	movs	r1, r3
    985c:	4b08      	ldr	r3, [pc, #32]	; (9880 <chk_mounted+0x370>)
    985e:	0010      	movs	r0, r2
    9860:	4798      	blx	r3
    9862:	0003      	movs	r3, r0
    9864:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    9866:	697b      	ldr	r3, [r7, #20]
    9868:	2b00      	cmp	r3, #0
    986a:	d10b      	bne.n	9884 <chk_mounted+0x374>
    986c:	230d      	movs	r3, #13
    986e:	e123      	b.n	9ab8 <chk_mounted+0x5a8>
    9870:	200001a4 	.word	0x200001a4
    9874:	000072ed 	.word	0x000072ed
    9878:	00007269 	.word	0x00007269
    987c:	0000943d 	.word	0x0000943d
    9880:	0000b5bd 	.word	0x0000b5bd
	fmt = FS_FAT12;
    9884:	2347      	movs	r3, #71	; 0x47
    9886:	18fb      	adds	r3, r7, r3
    9888:	2201      	movs	r2, #1
    988a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    988c:	697b      	ldr	r3, [r7, #20]
    988e:	4a8c      	ldr	r2, [pc, #560]	; (9ac0 <chk_mounted+0x5b0>)
    9890:	4293      	cmp	r3, r2
    9892:	d903      	bls.n	989c <chk_mounted+0x38c>
    9894:	2347      	movs	r3, #71	; 0x47
    9896:	18fb      	adds	r3, r7, r3
    9898:	2202      	movs	r2, #2
    989a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    989c:	697b      	ldr	r3, [r7, #20]
    989e:	4a89      	ldr	r2, [pc, #548]	; (9ac4 <chk_mounted+0x5b4>)
    98a0:	4293      	cmp	r3, r2
    98a2:	d903      	bls.n	98ac <chk_mounted+0x39c>
    98a4:	2347      	movs	r3, #71	; 0x47
    98a6:	18fb      	adds	r3, r7, r3
    98a8:	2203      	movs	r2, #3
    98aa:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    98ac:	697b      	ldr	r3, [r7, #20]
    98ae:	1c9a      	adds	r2, r3, #2
    98b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98b2:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    98b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    98b6:	69bb      	ldr	r3, [r7, #24]
    98b8:	18d2      	adds	r2, r2, r3
    98ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98bc:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    98be:	231c      	movs	r3, #28
    98c0:	18fb      	adds	r3, r7, r3
    98c2:	881a      	ldrh	r2, [r3, #0]
    98c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98c6:	18d2      	adds	r2, r2, r3
    98c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ca:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    98cc:	2347      	movs	r3, #71	; 0x47
    98ce:	18fb      	adds	r3, r7, r3
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	2b03      	cmp	r3, #3
    98d4:	d11e      	bne.n	9914 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    98d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98d8:	891b      	ldrh	r3, [r3, #8]
    98da:	2b00      	cmp	r3, #0
    98dc:	d001      	beq.n	98e2 <chk_mounted+0x3d2>
    98de:	230d      	movs	r3, #13
    98e0:	e0ea      	b.n	9ab8 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    98e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98e4:	225f      	movs	r2, #95	; 0x5f
    98e6:	5c9b      	ldrb	r3, [r3, r2]
    98e8:	061a      	lsls	r2, r3, #24
    98ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ec:	215e      	movs	r1, #94	; 0x5e
    98ee:	5c5b      	ldrb	r3, [r3, r1]
    98f0:	041b      	lsls	r3, r3, #16
    98f2:	4313      	orrs	r3, r2
    98f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    98f6:	215d      	movs	r1, #93	; 0x5d
    98f8:	5c52      	ldrb	r2, [r2, r1]
    98fa:	0212      	lsls	r2, r2, #8
    98fc:	4313      	orrs	r3, r2
    98fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9900:	215c      	movs	r1, #92	; 0x5c
    9902:	5c52      	ldrb	r2, [r2, r1]
    9904:	431a      	orrs	r2, r3
    9906:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9908:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    990c:	699b      	ldr	r3, [r3, #24]
    990e:	009b      	lsls	r3, r3, #2
    9910:	633b      	str	r3, [r7, #48]	; 0x30
    9912:	e020      	b.n	9956 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9914:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9916:	891b      	ldrh	r3, [r3, #8]
    9918:	2b00      	cmp	r3, #0
    991a:	d101      	bne.n	9920 <chk_mounted+0x410>
    991c:	230d      	movs	r3, #13
    991e:	e0cb      	b.n	9ab8 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9920:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9922:	6a1a      	ldr	r2, [r3, #32]
    9924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9926:	18d2      	adds	r2, r2, r3
    9928:	6abb      	ldr	r3, [r7, #40]	; 0x28
    992a:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    992c:	2347      	movs	r3, #71	; 0x47
    992e:	18fb      	adds	r3, r7, r3
    9930:	781b      	ldrb	r3, [r3, #0]
    9932:	2b02      	cmp	r3, #2
    9934:	d103      	bne.n	993e <chk_mounted+0x42e>
    9936:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9938:	699b      	ldr	r3, [r3, #24]
    993a:	005b      	lsls	r3, r3, #1
    993c:	e00a      	b.n	9954 <chk_mounted+0x444>
    993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9940:	699a      	ldr	r2, [r3, #24]
    9942:	0013      	movs	r3, r2
    9944:	005b      	lsls	r3, r3, #1
    9946:	189b      	adds	r3, r3, r2
    9948:	085a      	lsrs	r2, r3, #1
    994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    994c:	699b      	ldr	r3, [r3, #24]
    994e:	2101      	movs	r1, #1
    9950:	400b      	ands	r3, r1
    9952:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9954:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    9956:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9958:	69da      	ldr	r2, [r3, #28]
    995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    995c:	495a      	ldr	r1, [pc, #360]	; (9ac8 <chk_mounted+0x5b8>)
    995e:	468c      	mov	ip, r1
    9960:	4463      	add	r3, ip
    9962:	0a5b      	lsrs	r3, r3, #9
    9964:	429a      	cmp	r2, r3
    9966:	d201      	bcs.n	996c <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    9968:	230d      	movs	r3, #13
    996a:	e0a5      	b.n	9ab8 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    996e:	2201      	movs	r2, #1
    9970:	4252      	negs	r2, r2
    9972:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9974:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9976:	2200      	movs	r2, #0
    9978:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    997a:	2347      	movs	r3, #71	; 0x47
    997c:	18fb      	adds	r3, r7, r3
    997e:	781b      	ldrb	r3, [r3, #0]
    9980:	2b03      	cmp	r3, #3
    9982:	d000      	beq.n	9986 <chk_mounted+0x476>
    9984:	e082      	b.n	9a8c <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    9986:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9988:	2200      	movs	r2, #0
    998a:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    998e:	2261      	movs	r2, #97	; 0x61
    9990:	5c9b      	ldrb	r3, [r3, r2]
    9992:	021b      	lsls	r3, r3, #8
    9994:	b21a      	sxth	r2, r3
    9996:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9998:	2160      	movs	r1, #96	; 0x60
    999a:	5c5b      	ldrb	r3, [r3, r1]
    999c:	b21b      	sxth	r3, r3
    999e:	4313      	orrs	r3, r2
    99a0:	b21b      	sxth	r3, r3
    99a2:	b29b      	uxth	r3, r3
    99a4:	001a      	movs	r2, r3
    99a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99a8:	18d2      	adds	r2, r2, r3
    99aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ac:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    99ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99b0:	7858      	ldrb	r0, [r3, #1]
    99b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99b4:	3330      	adds	r3, #48	; 0x30
    99b6:	0019      	movs	r1, r3
    99b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ba:	695a      	ldr	r2, [r3, #20]
    99bc:	2301      	movs	r3, #1
    99be:	4c43      	ldr	r4, [pc, #268]	; (9acc <chk_mounted+0x5bc>)
    99c0:	47a0      	blx	r4
    99c2:	1e03      	subs	r3, r0, #0
    99c4:	d162      	bne.n	9a8c <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    99c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99c8:	4a41      	ldr	r2, [pc, #260]	; (9ad0 <chk_mounted+0x5c0>)
    99ca:	5c9b      	ldrb	r3, [r3, r2]
    99cc:	021b      	lsls	r3, r3, #8
    99ce:	b21a      	sxth	r2, r3
    99d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99d2:	4940      	ldr	r1, [pc, #256]	; (9ad4 <chk_mounted+0x5c4>)
    99d4:	5c5b      	ldrb	r3, [r3, r1]
    99d6:	b21b      	sxth	r3, r3
    99d8:	4313      	orrs	r3, r2
    99da:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    99dc:	4a3e      	ldr	r2, [pc, #248]	; (9ad8 <chk_mounted+0x5c8>)
    99de:	4293      	cmp	r3, r2
    99e0:	d154      	bne.n	9a8c <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    99e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99e4:	2233      	movs	r2, #51	; 0x33
    99e6:	5c9b      	ldrb	r3, [r3, r2]
    99e8:	061a      	lsls	r2, r3, #24
    99ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ec:	2132      	movs	r1, #50	; 0x32
    99ee:	5c5b      	ldrb	r3, [r3, r1]
    99f0:	041b      	lsls	r3, r3, #16
    99f2:	4313      	orrs	r3, r2
    99f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99f6:	2131      	movs	r1, #49	; 0x31
    99f8:	5c52      	ldrb	r2, [r2, r1]
    99fa:	0212      	lsls	r2, r2, #8
    99fc:	4313      	orrs	r3, r2
    99fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9a00:	2130      	movs	r1, #48	; 0x30
    9a02:	5c52      	ldrb	r2, [r2, r1]
    9a04:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9a06:	4a35      	ldr	r2, [pc, #212]	; (9adc <chk_mounted+0x5cc>)
    9a08:	4293      	cmp	r3, r2
    9a0a:	d13f      	bne.n	9a8c <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a0e:	4a34      	ldr	r2, [pc, #208]	; (9ae0 <chk_mounted+0x5d0>)
    9a10:	5c9b      	ldrb	r3, [r3, r2]
    9a12:	061a      	lsls	r2, r3, #24
    9a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a16:	4933      	ldr	r1, [pc, #204]	; (9ae4 <chk_mounted+0x5d4>)
    9a18:	5c5b      	ldrb	r3, [r3, r1]
    9a1a:	041b      	lsls	r3, r3, #16
    9a1c:	4313      	orrs	r3, r2
    9a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9a20:	4931      	ldr	r1, [pc, #196]	; (9ae8 <chk_mounted+0x5d8>)
    9a22:	5c52      	ldrb	r2, [r2, r1]
    9a24:	0212      	lsls	r2, r2, #8
    9a26:	4313      	orrs	r3, r2
    9a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9a2a:	2285      	movs	r2, #133	; 0x85
    9a2c:	0092      	lsls	r2, r2, #2
    9a2e:	5c8a      	ldrb	r2, [r1, r2]
    9a30:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9a32:	4a2e      	ldr	r2, [pc, #184]	; (9aec <chk_mounted+0x5dc>)
    9a34:	4293      	cmp	r3, r2
    9a36:	d129      	bne.n	9a8c <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a3a:	4a2d      	ldr	r2, [pc, #180]	; (9af0 <chk_mounted+0x5e0>)
    9a3c:	5c9b      	ldrb	r3, [r3, r2]
    9a3e:	061a      	lsls	r2, r3, #24
    9a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a42:	492c      	ldr	r1, [pc, #176]	; (9af4 <chk_mounted+0x5e4>)
    9a44:	5c5b      	ldrb	r3, [r3, r1]
    9a46:	041b      	lsls	r3, r3, #16
    9a48:	4313      	orrs	r3, r2
    9a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9a4c:	492a      	ldr	r1, [pc, #168]	; (9af8 <chk_mounted+0x5e8>)
    9a4e:	5c52      	ldrb	r2, [r2, r1]
    9a50:	0212      	lsls	r2, r2, #8
    9a52:	4313      	orrs	r3, r2
    9a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9a56:	2287      	movs	r2, #135	; 0x87
    9a58:	0092      	lsls	r2, r2, #2
    9a5a:	5c8a      	ldrb	r2, [r1, r2]
    9a5c:	431a      	orrs	r2, r3
    9a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a60:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a64:	4a25      	ldr	r2, [pc, #148]	; (9afc <chk_mounted+0x5ec>)
    9a66:	5c9b      	ldrb	r3, [r3, r2]
    9a68:	061a      	lsls	r2, r3, #24
    9a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a6c:	4924      	ldr	r1, [pc, #144]	; (9b00 <chk_mounted+0x5f0>)
    9a6e:	5c5b      	ldrb	r3, [r3, r1]
    9a70:	041b      	lsls	r3, r3, #16
    9a72:	4313      	orrs	r3, r2
    9a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9a76:	4923      	ldr	r1, [pc, #140]	; (9b04 <chk_mounted+0x5f4>)
    9a78:	5c52      	ldrb	r2, [r2, r1]
    9a7a:	0212      	lsls	r2, r2, #8
    9a7c:	4313      	orrs	r3, r2
    9a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9a80:	2286      	movs	r2, #134	; 0x86
    9a82:	0092      	lsls	r2, r2, #2
    9a84:	5c8a      	ldrb	r2, [r1, r2]
    9a86:	431a      	orrs	r2, r3
    9a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a8a:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a8e:	2247      	movs	r2, #71	; 0x47
    9a90:	18ba      	adds	r2, r7, r2
    9a92:	7812      	ldrb	r2, [r2, #0]
    9a94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    9a96:	4b1c      	ldr	r3, [pc, #112]	; (9b08 <chk_mounted+0x5f8>)
    9a98:	881b      	ldrh	r3, [r3, #0]
    9a9a:	3301      	adds	r3, #1
    9a9c:	b29a      	uxth	r2, r3
    9a9e:	4b1a      	ldr	r3, [pc, #104]	; (9b08 <chk_mounted+0x5f8>)
    9aa0:	801a      	strh	r2, [r3, #0]
    9aa2:	4b19      	ldr	r3, [pc, #100]	; (9b08 <chk_mounted+0x5f8>)
    9aa4:	881a      	ldrh	r2, [r3, #0]
    9aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9aa8:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    9aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9aac:	2200      	movs	r2, #0
    9aae:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    9ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ab2:	2200      	movs	r2, #0
    9ab4:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    9ab6:	2300      	movs	r3, #0
}
    9ab8:	0018      	movs	r0, r3
    9aba:	46bd      	mov	sp, r7
    9abc:	b013      	add	sp, #76	; 0x4c
    9abe:	bd90      	pop	{r4, r7, pc}
    9ac0:	00000ff5 	.word	0x00000ff5
    9ac4:	0000fff5 	.word	0x0000fff5
    9ac8:	000001ff 	.word	0x000001ff
    9acc:	00007325 	.word	0x00007325
    9ad0:	0000022f 	.word	0x0000022f
    9ad4:	0000022e 	.word	0x0000022e
    9ad8:	ffffaa55 	.word	0xffffaa55
    9adc:	41615252 	.word	0x41615252
    9ae0:	00000217 	.word	0x00000217
    9ae4:	00000216 	.word	0x00000216
    9ae8:	00000215 	.word	0x00000215
    9aec:	61417272 	.word	0x61417272
    9af0:	0000021f 	.word	0x0000021f
    9af4:	0000021e 	.word	0x0000021e
    9af8:	0000021d 	.word	0x0000021d
    9afc:	0000021b 	.word	0x0000021b
    9b00:	0000021a 	.word	0x0000021a
    9b04:	00000219 	.word	0x00000219
    9b08:	200001a8 	.word	0x200001a8

00009b0c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b082      	sub	sp, #8
    9b10:	af00      	add	r7, sp, #0
    9b12:	6078      	str	r0, [r7, #4]
    9b14:	000a      	movs	r2, r1
    9b16:	1cbb      	adds	r3, r7, #2
    9b18:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    9b1a:	687b      	ldr	r3, [r7, #4]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d009      	beq.n	9b34 <validate+0x28>
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	781b      	ldrb	r3, [r3, #0]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d005      	beq.n	9b34 <validate+0x28>
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	88db      	ldrh	r3, [r3, #6]
    9b2c:	1cba      	adds	r2, r7, #2
    9b2e:	8812      	ldrh	r2, [r2, #0]
    9b30:	429a      	cmp	r2, r3
    9b32:	d001      	beq.n	9b38 <validate+0x2c>
		return FR_INVALID_OBJECT;
    9b34:	2309      	movs	r3, #9
    9b36:	e00c      	b.n	9b52 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	785b      	ldrb	r3, [r3, #1]
    9b3c:	0018      	movs	r0, r3
    9b3e:	4b07      	ldr	r3, [pc, #28]	; (9b5c <validate+0x50>)
    9b40:	4798      	blx	r3
    9b42:	0003      	movs	r3, r0
    9b44:	001a      	movs	r2, r3
    9b46:	2301      	movs	r3, #1
    9b48:	4013      	ands	r3, r2
    9b4a:	d001      	beq.n	9b50 <validate+0x44>
		return FR_NOT_READY;
    9b4c:	2303      	movs	r3, #3
    9b4e:	e000      	b.n	9b52 <validate+0x46>

	return FR_OK;
    9b50:	2300      	movs	r3, #0
}
    9b52:	0018      	movs	r0, r3
    9b54:	46bd      	mov	sp, r7
    9b56:	b002      	add	sp, #8
    9b58:	bd80      	pop	{r7, pc}
    9b5a:	46c0      	nop			; (mov r8, r8)
    9b5c:	000072ed 	.word	0x000072ed

00009b60 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9b60:	b580      	push	{r7, lr}
    9b62:	b084      	sub	sp, #16
    9b64:	af00      	add	r7, sp, #0
    9b66:	0002      	movs	r2, r0
    9b68:	6039      	str	r1, [r7, #0]
    9b6a:	1dfb      	adds	r3, r7, #7
    9b6c:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9b6e:	1dfb      	adds	r3, r7, #7
    9b70:	781b      	ldrb	r3, [r3, #0]
    9b72:	2b00      	cmp	r3, #0
    9b74:	d001      	beq.n	9b7a <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9b76:	230b      	movs	r3, #11
    9b78:	e018      	b.n	9bac <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9b7a:	1dfb      	adds	r3, r7, #7
    9b7c:	781a      	ldrb	r2, [r3, #0]
    9b7e:	4b0d      	ldr	r3, [pc, #52]	; (9bb4 <f_mount+0x54>)
    9b80:	0092      	lsls	r2, r2, #2
    9b82:	58d3      	ldr	r3, [r2, r3]
    9b84:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9b86:	68fb      	ldr	r3, [r7, #12]
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d002      	beq.n	9b92 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9b8c:	68fb      	ldr	r3, [r7, #12]
    9b8e:	2200      	movs	r2, #0
    9b90:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9b92:	683b      	ldr	r3, [r7, #0]
    9b94:	2b00      	cmp	r3, #0
    9b96:	d002      	beq.n	9b9e <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9b98:	683b      	ldr	r3, [r7, #0]
    9b9a:	2200      	movs	r2, #0
    9b9c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    9b9e:	1dfb      	adds	r3, r7, #7
    9ba0:	781a      	ldrb	r2, [r3, #0]
    9ba2:	4b04      	ldr	r3, [pc, #16]	; (9bb4 <f_mount+0x54>)
    9ba4:	0092      	lsls	r2, r2, #2
    9ba6:	6839      	ldr	r1, [r7, #0]
    9ba8:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    9baa:	2300      	movs	r3, #0
}
    9bac:	0018      	movs	r0, r3
    9bae:	46bd      	mov	sp, r7
    9bb0:	b004      	add	sp, #16
    9bb2:	bd80      	pop	{r7, pc}
    9bb4:	200001a4 	.word	0x200001a4

00009bb8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9bb8:	b590      	push	{r4, r7, lr}
    9bba:	4ce5      	ldr	r4, [pc, #916]	; (9f50 <f_open+0x398>)
    9bbc:	44a5      	add	sp, r4
    9bbe:	af00      	add	r7, sp, #0
    9bc0:	60f8      	str	r0, [r7, #12]
    9bc2:	60b9      	str	r1, [r7, #8]
    9bc4:	4be3      	ldr	r3, [pc, #908]	; (9f54 <f_open+0x39c>)
    9bc6:	2194      	movs	r1, #148	; 0x94
    9bc8:	0089      	lsls	r1, r1, #2
    9bca:	468c      	mov	ip, r1
    9bcc:	44bc      	add	ip, r7
    9bce:	4463      	add	r3, ip
    9bd0:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    9bd2:	68fb      	ldr	r3, [r7, #12]
    9bd4:	2200      	movs	r2, #0
    9bd6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    9bd8:	4bde      	ldr	r3, [pc, #888]	; (9f54 <f_open+0x39c>)
    9bda:	2294      	movs	r2, #148	; 0x94
    9bdc:	0092      	lsls	r2, r2, #2
    9bde:	4694      	mov	ip, r2
    9be0:	44bc      	add	ip, r7
    9be2:	4463      	add	r3, ip
    9be4:	4adb      	ldr	r2, [pc, #876]	; (9f54 <f_open+0x39c>)
    9be6:	2194      	movs	r1, #148	; 0x94
    9be8:	0089      	lsls	r1, r1, #2
    9bea:	468c      	mov	ip, r1
    9bec:	44bc      	add	ip, r7
    9bee:	4462      	add	r2, ip
    9bf0:	7812      	ldrb	r2, [r2, #0]
    9bf2:	211f      	movs	r1, #31
    9bf4:	400a      	ands	r2, r1
    9bf6:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9bf8:	4bd6      	ldr	r3, [pc, #856]	; (9f54 <f_open+0x39c>)
    9bfa:	2294      	movs	r2, #148	; 0x94
    9bfc:	0092      	lsls	r2, r2, #2
    9bfe:	4694      	mov	ip, r2
    9c00:	44bc      	add	ip, r7
    9c02:	4463      	add	r3, ip
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	2201      	movs	r2, #1
    9c08:	4393      	bics	r3, r2
    9c0a:	b2da      	uxtb	r2, r3
    9c0c:	4bd2      	ldr	r3, [pc, #840]	; (9f58 <f_open+0x3a0>)
    9c0e:	18fc      	adds	r4, r7, r3
    9c10:	2387      	movs	r3, #135	; 0x87
    9c12:	009b      	lsls	r3, r3, #2
    9c14:	18f9      	adds	r1, r7, r3
    9c16:	2308      	movs	r3, #8
    9c18:	18fb      	adds	r3, r7, r3
    9c1a:	0018      	movs	r0, r3
    9c1c:	4bcf      	ldr	r3, [pc, #828]	; (9f5c <f_open+0x3a4>)
    9c1e:	4798      	blx	r3
    9c20:	0003      	movs	r3, r0
    9c22:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9c24:	2387      	movs	r3, #135	; 0x87
    9c26:	009b      	lsls	r3, r3, #2
    9c28:	18fb      	adds	r3, r7, r3
    9c2a:	2284      	movs	r2, #132	; 0x84
    9c2c:	0092      	lsls	r2, r2, #2
    9c2e:	18ba      	adds	r2, r7, r2
    9c30:	619a      	str	r2, [r3, #24]
    9c32:	2387      	movs	r3, #135	; 0x87
    9c34:	009b      	lsls	r3, r3, #2
    9c36:	18fb      	adds	r3, r7, r3
    9c38:	2210      	movs	r2, #16
    9c3a:	18ba      	adds	r2, r7, r2
    9c3c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9c3e:	4bc6      	ldr	r3, [pc, #792]	; (9f58 <f_open+0x3a0>)
    9c40:	18fb      	adds	r3, r7, r3
    9c42:	781b      	ldrb	r3, [r3, #0]
    9c44:	2b00      	cmp	r3, #0
    9c46:	d10b      	bne.n	9c60 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9c48:	68ba      	ldr	r2, [r7, #8]
    9c4a:	4bc3      	ldr	r3, [pc, #780]	; (9f58 <f_open+0x3a0>)
    9c4c:	18fc      	adds	r4, r7, r3
    9c4e:	2387      	movs	r3, #135	; 0x87
    9c50:	009b      	lsls	r3, r3, #2
    9c52:	18fb      	adds	r3, r7, r3
    9c54:	0011      	movs	r1, r2
    9c56:	0018      	movs	r0, r3
    9c58:	4bc1      	ldr	r3, [pc, #772]	; (9f60 <f_open+0x3a8>)
    9c5a:	4798      	blx	r3
    9c5c:	0003      	movs	r3, r0
    9c5e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9c60:	2387      	movs	r3, #135	; 0x87
    9c62:	009b      	lsls	r3, r3, #2
    9c64:	18fb      	adds	r3, r7, r3
    9c66:	695b      	ldr	r3, [r3, #20]
    9c68:	2292      	movs	r2, #146	; 0x92
    9c6a:	0092      	lsls	r2, r2, #2
    9c6c:	18ba      	adds	r2, r7, r2
    9c6e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9c70:	4bb9      	ldr	r3, [pc, #740]	; (9f58 <f_open+0x3a0>)
    9c72:	18fb      	adds	r3, r7, r3
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	2b00      	cmp	r3, #0
    9c78:	d109      	bne.n	9c8e <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9c7a:	2392      	movs	r3, #146	; 0x92
    9c7c:	009b      	lsls	r3, r3, #2
    9c7e:	18fb      	adds	r3, r7, r3
    9c80:	681b      	ldr	r3, [r3, #0]
    9c82:	2b00      	cmp	r3, #0
    9c84:	d103      	bne.n	9c8e <f_open+0xd6>
			res = FR_INVALID_NAME;
    9c86:	4bb4      	ldr	r3, [pc, #720]	; (9f58 <f_open+0x3a0>)
    9c88:	18fb      	adds	r3, r7, r3
    9c8a:	2206      	movs	r2, #6
    9c8c:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9c8e:	4bb1      	ldr	r3, [pc, #708]	; (9f54 <f_open+0x39c>)
    9c90:	2294      	movs	r2, #148	; 0x94
    9c92:	0092      	lsls	r2, r2, #2
    9c94:	4694      	mov	ip, r2
    9c96:	44bc      	add	ip, r7
    9c98:	4463      	add	r3, ip
    9c9a:	781b      	ldrb	r3, [r3, #0]
    9c9c:	221c      	movs	r2, #28
    9c9e:	4013      	ands	r3, r2
    9ca0:	d100      	bne.n	9ca4 <f_open+0xec>
    9ca2:	e141      	b.n	9f28 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9ca4:	4bac      	ldr	r3, [pc, #688]	; (9f58 <f_open+0x3a0>)
    9ca6:	18fb      	adds	r3, r7, r3
    9ca8:	781b      	ldrb	r3, [r3, #0]
    9caa:	2b00      	cmp	r3, #0
    9cac:	d027      	beq.n	9cfe <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9cae:	4baa      	ldr	r3, [pc, #680]	; (9f58 <f_open+0x3a0>)
    9cb0:	18fb      	adds	r3, r7, r3
    9cb2:	781b      	ldrb	r3, [r3, #0]
    9cb4:	2b04      	cmp	r3, #4
    9cb6:	d109      	bne.n	9ccc <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9cb8:	4ba7      	ldr	r3, [pc, #668]	; (9f58 <f_open+0x3a0>)
    9cba:	18fc      	adds	r4, r7, r3
    9cbc:	2387      	movs	r3, #135	; 0x87
    9cbe:	009b      	lsls	r3, r3, #2
    9cc0:	18fb      	adds	r3, r7, r3
    9cc2:	0018      	movs	r0, r3
    9cc4:	4ba7      	ldr	r3, [pc, #668]	; (9f64 <f_open+0x3ac>)
    9cc6:	4798      	blx	r3
    9cc8:	0003      	movs	r3, r0
    9cca:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9ccc:	4ba1      	ldr	r3, [pc, #644]	; (9f54 <f_open+0x39c>)
    9cce:	2294      	movs	r2, #148	; 0x94
    9cd0:	0092      	lsls	r2, r2, #2
    9cd2:	4694      	mov	ip, r2
    9cd4:	44bc      	add	ip, r7
    9cd6:	4463      	add	r3, ip
    9cd8:	4a9e      	ldr	r2, [pc, #632]	; (9f54 <f_open+0x39c>)
    9cda:	2194      	movs	r1, #148	; 0x94
    9cdc:	0089      	lsls	r1, r1, #2
    9cde:	468c      	mov	ip, r1
    9ce0:	44bc      	add	ip, r7
    9ce2:	4462      	add	r2, ip
    9ce4:	7812      	ldrb	r2, [r2, #0]
    9ce6:	2108      	movs	r1, #8
    9ce8:	430a      	orrs	r2, r1
    9cea:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9cec:	2387      	movs	r3, #135	; 0x87
    9cee:	009b      	lsls	r3, r3, #2
    9cf0:	18fb      	adds	r3, r7, r3
    9cf2:	695b      	ldr	r3, [r3, #20]
    9cf4:	2292      	movs	r2, #146	; 0x92
    9cf6:	0092      	lsls	r2, r2, #2
    9cf8:	18ba      	adds	r2, r7, r2
    9cfa:	6013      	str	r3, [r2, #0]
    9cfc:	e01c      	b.n	9d38 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9cfe:	2392      	movs	r3, #146	; 0x92
    9d00:	009b      	lsls	r3, r3, #2
    9d02:	18fb      	adds	r3, r7, r3
    9d04:	681b      	ldr	r3, [r3, #0]
    9d06:	330b      	adds	r3, #11
    9d08:	781b      	ldrb	r3, [r3, #0]
    9d0a:	001a      	movs	r2, r3
    9d0c:	2311      	movs	r3, #17
    9d0e:	4013      	ands	r3, r2
    9d10:	d004      	beq.n	9d1c <f_open+0x164>
				res = FR_DENIED;
    9d12:	4b91      	ldr	r3, [pc, #580]	; (9f58 <f_open+0x3a0>)
    9d14:	18fb      	adds	r3, r7, r3
    9d16:	2207      	movs	r2, #7
    9d18:	701a      	strb	r2, [r3, #0]
    9d1a:	e00d      	b.n	9d38 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9d1c:	4b8d      	ldr	r3, [pc, #564]	; (9f54 <f_open+0x39c>)
    9d1e:	2294      	movs	r2, #148	; 0x94
    9d20:	0092      	lsls	r2, r2, #2
    9d22:	4694      	mov	ip, r2
    9d24:	44bc      	add	ip, r7
    9d26:	4463      	add	r3, ip
    9d28:	781b      	ldrb	r3, [r3, #0]
    9d2a:	2204      	movs	r2, #4
    9d2c:	4013      	ands	r3, r2
    9d2e:	d003      	beq.n	9d38 <f_open+0x180>
					res = FR_EXIST;
    9d30:	4b89      	ldr	r3, [pc, #548]	; (9f58 <f_open+0x3a0>)
    9d32:	18fb      	adds	r3, r7, r3
    9d34:	2208      	movs	r2, #8
    9d36:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9d38:	4b87      	ldr	r3, [pc, #540]	; (9f58 <f_open+0x3a0>)
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	781b      	ldrb	r3, [r3, #0]
    9d3e:	2b00      	cmp	r3, #0
    9d40:	d000      	beq.n	9d44 <f_open+0x18c>
    9d42:	e12f      	b.n	9fa4 <f_open+0x3ec>
    9d44:	4b83      	ldr	r3, [pc, #524]	; (9f54 <f_open+0x39c>)
    9d46:	2294      	movs	r2, #148	; 0x94
    9d48:	0092      	lsls	r2, r2, #2
    9d4a:	4694      	mov	ip, r2
    9d4c:	44bc      	add	ip, r7
    9d4e:	4463      	add	r3, ip
    9d50:	781b      	ldrb	r3, [r3, #0]
    9d52:	2208      	movs	r2, #8
    9d54:	4013      	ands	r3, r2
    9d56:	d100      	bne.n	9d5a <f_open+0x1a2>
    9d58:	e124      	b.n	9fa4 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9d5a:	4b83      	ldr	r3, [pc, #524]	; (9f68 <f_open+0x3b0>)
    9d5c:	4798      	blx	r3
    9d5e:	0003      	movs	r3, r0
    9d60:	2291      	movs	r2, #145	; 0x91
    9d62:	0092      	lsls	r2, r2, #2
    9d64:	18ba      	adds	r2, r7, r2
    9d66:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9d68:	2392      	movs	r3, #146	; 0x92
    9d6a:	009b      	lsls	r3, r3, #2
    9d6c:	18fb      	adds	r3, r7, r3
    9d6e:	681b      	ldr	r3, [r3, #0]
    9d70:	330e      	adds	r3, #14
    9d72:	2291      	movs	r2, #145	; 0x91
    9d74:	0092      	lsls	r2, r2, #2
    9d76:	18ba      	adds	r2, r7, r2
    9d78:	6812      	ldr	r2, [r2, #0]
    9d7a:	b2d2      	uxtb	r2, r2
    9d7c:	701a      	strb	r2, [r3, #0]
    9d7e:	2392      	movs	r3, #146	; 0x92
    9d80:	009b      	lsls	r3, r3, #2
    9d82:	18fb      	adds	r3, r7, r3
    9d84:	681b      	ldr	r3, [r3, #0]
    9d86:	330f      	adds	r3, #15
    9d88:	2291      	movs	r2, #145	; 0x91
    9d8a:	0092      	lsls	r2, r2, #2
    9d8c:	18ba      	adds	r2, r7, r2
    9d8e:	6812      	ldr	r2, [r2, #0]
    9d90:	b292      	uxth	r2, r2
    9d92:	0a12      	lsrs	r2, r2, #8
    9d94:	b292      	uxth	r2, r2
    9d96:	b2d2      	uxtb	r2, r2
    9d98:	701a      	strb	r2, [r3, #0]
    9d9a:	2392      	movs	r3, #146	; 0x92
    9d9c:	009b      	lsls	r3, r3, #2
    9d9e:	18fb      	adds	r3, r7, r3
    9da0:	681b      	ldr	r3, [r3, #0]
    9da2:	3310      	adds	r3, #16
    9da4:	2291      	movs	r2, #145	; 0x91
    9da6:	0092      	lsls	r2, r2, #2
    9da8:	18ba      	adds	r2, r7, r2
    9daa:	6812      	ldr	r2, [r2, #0]
    9dac:	0c12      	lsrs	r2, r2, #16
    9dae:	b2d2      	uxtb	r2, r2
    9db0:	701a      	strb	r2, [r3, #0]
    9db2:	2392      	movs	r3, #146	; 0x92
    9db4:	009b      	lsls	r3, r3, #2
    9db6:	18fb      	adds	r3, r7, r3
    9db8:	681b      	ldr	r3, [r3, #0]
    9dba:	3311      	adds	r3, #17
    9dbc:	2291      	movs	r2, #145	; 0x91
    9dbe:	0092      	lsls	r2, r2, #2
    9dc0:	18ba      	adds	r2, r7, r2
    9dc2:	6812      	ldr	r2, [r2, #0]
    9dc4:	0e12      	lsrs	r2, r2, #24
    9dc6:	b2d2      	uxtb	r2, r2
    9dc8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9dca:	2392      	movs	r3, #146	; 0x92
    9dcc:	009b      	lsls	r3, r3, #2
    9dce:	18fb      	adds	r3, r7, r3
    9dd0:	681b      	ldr	r3, [r3, #0]
    9dd2:	330b      	adds	r3, #11
    9dd4:	2200      	movs	r2, #0
    9dd6:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9dd8:	2392      	movs	r3, #146	; 0x92
    9dda:	009b      	lsls	r3, r3, #2
    9ddc:	18fb      	adds	r3, r7, r3
    9dde:	681b      	ldr	r3, [r3, #0]
    9de0:	331c      	adds	r3, #28
    9de2:	2200      	movs	r2, #0
    9de4:	701a      	strb	r2, [r3, #0]
    9de6:	2392      	movs	r3, #146	; 0x92
    9de8:	009b      	lsls	r3, r3, #2
    9dea:	18fb      	adds	r3, r7, r3
    9dec:	681b      	ldr	r3, [r3, #0]
    9dee:	331d      	adds	r3, #29
    9df0:	2200      	movs	r2, #0
    9df2:	701a      	strb	r2, [r3, #0]
    9df4:	2392      	movs	r3, #146	; 0x92
    9df6:	009b      	lsls	r3, r3, #2
    9df8:	18fb      	adds	r3, r7, r3
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	331e      	adds	r3, #30
    9dfe:	2200      	movs	r2, #0
    9e00:	701a      	strb	r2, [r3, #0]
    9e02:	2392      	movs	r3, #146	; 0x92
    9e04:	009b      	lsls	r3, r3, #2
    9e06:	18fb      	adds	r3, r7, r3
    9e08:	681b      	ldr	r3, [r3, #0]
    9e0a:	331f      	adds	r3, #31
    9e0c:	2200      	movs	r2, #0
    9e0e:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9e10:	2392      	movs	r3, #146	; 0x92
    9e12:	009b      	lsls	r3, r3, #2
    9e14:	18fb      	adds	r3, r7, r3
    9e16:	681b      	ldr	r3, [r3, #0]
    9e18:	3315      	adds	r3, #21
    9e1a:	781b      	ldrb	r3, [r3, #0]
    9e1c:	021b      	lsls	r3, r3, #8
    9e1e:	b21a      	sxth	r2, r3
    9e20:	2392      	movs	r3, #146	; 0x92
    9e22:	009b      	lsls	r3, r3, #2
    9e24:	18fb      	adds	r3, r7, r3
    9e26:	681b      	ldr	r3, [r3, #0]
    9e28:	3314      	adds	r3, #20
    9e2a:	781b      	ldrb	r3, [r3, #0]
    9e2c:	b21b      	sxth	r3, r3
    9e2e:	4313      	orrs	r3, r2
    9e30:	b21b      	sxth	r3, r3
    9e32:	b29b      	uxth	r3, r3
    9e34:	041b      	lsls	r3, r3, #16
    9e36:	2292      	movs	r2, #146	; 0x92
    9e38:	0092      	lsls	r2, r2, #2
    9e3a:	18ba      	adds	r2, r7, r2
    9e3c:	6812      	ldr	r2, [r2, #0]
    9e3e:	321b      	adds	r2, #27
    9e40:	7812      	ldrb	r2, [r2, #0]
    9e42:	0212      	lsls	r2, r2, #8
    9e44:	b211      	sxth	r1, r2
    9e46:	2292      	movs	r2, #146	; 0x92
    9e48:	0092      	lsls	r2, r2, #2
    9e4a:	18ba      	adds	r2, r7, r2
    9e4c:	6812      	ldr	r2, [r2, #0]
    9e4e:	321a      	adds	r2, #26
    9e50:	7812      	ldrb	r2, [r2, #0]
    9e52:	b212      	sxth	r2, r2
    9e54:	430a      	orrs	r2, r1
    9e56:	b212      	sxth	r2, r2
    9e58:	b292      	uxth	r2, r2
    9e5a:	4313      	orrs	r3, r2
    9e5c:	2290      	movs	r2, #144	; 0x90
    9e5e:	0092      	lsls	r2, r2, #2
    9e60:	18ba      	adds	r2, r7, r2
    9e62:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9e64:	2392      	movs	r3, #146	; 0x92
    9e66:	009b      	lsls	r3, r3, #2
    9e68:	18fb      	adds	r3, r7, r3
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	331a      	adds	r3, #26
    9e6e:	2200      	movs	r2, #0
    9e70:	701a      	strb	r2, [r3, #0]
    9e72:	2392      	movs	r3, #146	; 0x92
    9e74:	009b      	lsls	r3, r3, #2
    9e76:	18fb      	adds	r3, r7, r3
    9e78:	681b      	ldr	r3, [r3, #0]
    9e7a:	331b      	adds	r3, #27
    9e7c:	2200      	movs	r2, #0
    9e7e:	701a      	strb	r2, [r3, #0]
    9e80:	2392      	movs	r3, #146	; 0x92
    9e82:	009b      	lsls	r3, r3, #2
    9e84:	18fb      	adds	r3, r7, r3
    9e86:	681b      	ldr	r3, [r3, #0]
    9e88:	3314      	adds	r3, #20
    9e8a:	2200      	movs	r2, #0
    9e8c:	701a      	strb	r2, [r3, #0]
    9e8e:	2392      	movs	r3, #146	; 0x92
    9e90:	009b      	lsls	r3, r3, #2
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	681b      	ldr	r3, [r3, #0]
    9e96:	3315      	adds	r3, #21
    9e98:	2200      	movs	r2, #0
    9e9a:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9e9c:	2387      	movs	r3, #135	; 0x87
    9e9e:	009b      	lsls	r3, r3, #2
    9ea0:	18fb      	adds	r3, r7, r3
    9ea2:	681b      	ldr	r3, [r3, #0]
    9ea4:	2201      	movs	r2, #1
    9ea6:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9ea8:	2390      	movs	r3, #144	; 0x90
    9eaa:	009b      	lsls	r3, r3, #2
    9eac:	18fb      	adds	r3, r7, r3
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d100      	bne.n	9eb6 <f_open+0x2fe>
    9eb4:	e076      	b.n	9fa4 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9eb6:	2387      	movs	r3, #135	; 0x87
    9eb8:	009b      	lsls	r3, r3, #2
    9eba:	18fb      	adds	r3, r7, r3
    9ebc:	681b      	ldr	r3, [r3, #0]
    9ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ec0:	2291      	movs	r2, #145	; 0x91
    9ec2:	0092      	lsls	r2, r2, #2
    9ec4:	18ba      	adds	r2, r7, r2
    9ec6:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9ec8:	2387      	movs	r3, #135	; 0x87
    9eca:	009b      	lsls	r3, r3, #2
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	681b      	ldr	r3, [r3, #0]
    9ed0:	4a21      	ldr	r2, [pc, #132]	; (9f58 <f_open+0x3a0>)
    9ed2:	18bc      	adds	r4, r7, r2
    9ed4:	2290      	movs	r2, #144	; 0x90
    9ed6:	0092      	lsls	r2, r2, #2
    9ed8:	18ba      	adds	r2, r7, r2
    9eda:	6812      	ldr	r2, [r2, #0]
    9edc:	0011      	movs	r1, r2
    9ede:	0018      	movs	r0, r3
    9ee0:	4b22      	ldr	r3, [pc, #136]	; (9f6c <f_open+0x3b4>)
    9ee2:	4798      	blx	r3
    9ee4:	0003      	movs	r3, r0
    9ee6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9ee8:	4b1b      	ldr	r3, [pc, #108]	; (9f58 <f_open+0x3a0>)
    9eea:	18fb      	adds	r3, r7, r3
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d158      	bne.n	9fa4 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9ef2:	2387      	movs	r3, #135	; 0x87
    9ef4:	009b      	lsls	r3, r3, #2
    9ef6:	18fb      	adds	r3, r7, r3
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	2290      	movs	r2, #144	; 0x90
    9efc:	0092      	lsls	r2, r2, #2
    9efe:	18ba      	adds	r2, r7, r2
    9f00:	6812      	ldr	r2, [r2, #0]
    9f02:	3a01      	subs	r2, #1
    9f04:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9f06:	2387      	movs	r3, #135	; 0x87
    9f08:	009b      	lsls	r3, r3, #2
    9f0a:	18fb      	adds	r3, r7, r3
    9f0c:	681b      	ldr	r3, [r3, #0]
    9f0e:	4a12      	ldr	r2, [pc, #72]	; (9f58 <f_open+0x3a0>)
    9f10:	18bc      	adds	r4, r7, r2
    9f12:	2291      	movs	r2, #145	; 0x91
    9f14:	0092      	lsls	r2, r2, #2
    9f16:	18ba      	adds	r2, r7, r2
    9f18:	6812      	ldr	r2, [r2, #0]
    9f1a:	0011      	movs	r1, r2
    9f1c:	0018      	movs	r0, r3
    9f1e:	4b14      	ldr	r3, [pc, #80]	; (9f70 <f_open+0x3b8>)
    9f20:	4798      	blx	r3
    9f22:	0003      	movs	r3, r0
    9f24:	7023      	strb	r3, [r4, #0]
    9f26:	e03d      	b.n	9fa4 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9f28:	4b0b      	ldr	r3, [pc, #44]	; (9f58 <f_open+0x3a0>)
    9f2a:	18fb      	adds	r3, r7, r3
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d138      	bne.n	9fa4 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9f32:	2392      	movs	r3, #146	; 0x92
    9f34:	009b      	lsls	r3, r3, #2
    9f36:	18fb      	adds	r3, r7, r3
    9f38:	681b      	ldr	r3, [r3, #0]
    9f3a:	330b      	adds	r3, #11
    9f3c:	781b      	ldrb	r3, [r3, #0]
    9f3e:	001a      	movs	r2, r3
    9f40:	2310      	movs	r3, #16
    9f42:	4013      	ands	r3, r2
    9f44:	d016      	beq.n	9f74 <f_open+0x3bc>
				res = FR_NO_FILE;
    9f46:	4b04      	ldr	r3, [pc, #16]	; (9f58 <f_open+0x3a0>)
    9f48:	18fb      	adds	r3, r7, r3
    9f4a:	2204      	movs	r2, #4
    9f4c:	701a      	strb	r2, [r3, #0]
    9f4e:	e029      	b.n	9fa4 <f_open+0x3ec>
    9f50:	fffffdac 	.word	0xfffffdac
    9f54:	fffffdb7 	.word	0xfffffdb7
    9f58:	0000024f 	.word	0x0000024f
    9f5c:	00009511 	.word	0x00009511
    9f60:	00009305 	.word	0x00009305
    9f64:	00008a7d 	.word	0x00008a7d
    9f68:	000075cd 	.word	0x000075cd
    9f6c:	00007d51 	.word	0x00007d51
    9f70:	00007711 	.word	0x00007711
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9f74:	4b5a      	ldr	r3, [pc, #360]	; (a0e0 <f_open+0x528>)
    9f76:	2294      	movs	r2, #148	; 0x94
    9f78:	0092      	lsls	r2, r2, #2
    9f7a:	4694      	mov	ip, r2
    9f7c:	44bc      	add	ip, r7
    9f7e:	4463      	add	r3, ip
    9f80:	781b      	ldrb	r3, [r3, #0]
    9f82:	2202      	movs	r2, #2
    9f84:	4013      	ands	r3, r2
    9f86:	d00d      	beq.n	9fa4 <f_open+0x3ec>
    9f88:	2392      	movs	r3, #146	; 0x92
    9f8a:	009b      	lsls	r3, r3, #2
    9f8c:	18fb      	adds	r3, r7, r3
    9f8e:	681b      	ldr	r3, [r3, #0]
    9f90:	330b      	adds	r3, #11
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	001a      	movs	r2, r3
    9f96:	2301      	movs	r3, #1
    9f98:	4013      	ands	r3, r2
    9f9a:	d003      	beq.n	9fa4 <f_open+0x3ec>
					res = FR_DENIED;
    9f9c:	4b51      	ldr	r3, [pc, #324]	; (a0e4 <f_open+0x52c>)
    9f9e:	18fb      	adds	r3, r7, r3
    9fa0:	2207      	movs	r2, #7
    9fa2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9fa4:	4b4f      	ldr	r3, [pc, #316]	; (a0e4 <f_open+0x52c>)
    9fa6:	18fb      	adds	r3, r7, r3
    9fa8:	781b      	ldrb	r3, [r3, #0]
    9faa:	2b00      	cmp	r3, #0
    9fac:	d126      	bne.n	9ffc <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9fae:	4b4c      	ldr	r3, [pc, #304]	; (a0e0 <f_open+0x528>)
    9fb0:	2294      	movs	r2, #148	; 0x94
    9fb2:	0092      	lsls	r2, r2, #2
    9fb4:	4694      	mov	ip, r2
    9fb6:	44bc      	add	ip, r7
    9fb8:	4463      	add	r3, ip
    9fba:	781b      	ldrb	r3, [r3, #0]
    9fbc:	2208      	movs	r2, #8
    9fbe:	4013      	ands	r3, r2
    9fc0:	d00f      	beq.n	9fe2 <f_open+0x42a>
			mode |= FA__WRITTEN;
    9fc2:	4b47      	ldr	r3, [pc, #284]	; (a0e0 <f_open+0x528>)
    9fc4:	2294      	movs	r2, #148	; 0x94
    9fc6:	0092      	lsls	r2, r2, #2
    9fc8:	4694      	mov	ip, r2
    9fca:	44bc      	add	ip, r7
    9fcc:	4463      	add	r3, ip
    9fce:	4a44      	ldr	r2, [pc, #272]	; (a0e0 <f_open+0x528>)
    9fd0:	2194      	movs	r1, #148	; 0x94
    9fd2:	0089      	lsls	r1, r1, #2
    9fd4:	468c      	mov	ip, r1
    9fd6:	44bc      	add	ip, r7
    9fd8:	4462      	add	r2, ip
    9fda:	7812      	ldrb	r2, [r2, #0]
    9fdc:	2120      	movs	r1, #32
    9fde:	430a      	orrs	r2, r1
    9fe0:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9fe2:	2387      	movs	r3, #135	; 0x87
    9fe4:	009b      	lsls	r3, r3, #2
    9fe6:	18fb      	adds	r3, r7, r3
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9fec:	68fb      	ldr	r3, [r7, #12]
    9fee:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9ff0:	68fb      	ldr	r3, [r7, #12]
    9ff2:	2292      	movs	r2, #146	; 0x92
    9ff4:	0092      	lsls	r2, r2, #2
    9ff6:	18ba      	adds	r2, r7, r2
    9ff8:	6812      	ldr	r2, [r2, #0]
    9ffa:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9ffc:	4b39      	ldr	r3, [pc, #228]	; (a0e4 <f_open+0x52c>)
    9ffe:	18fb      	adds	r3, r7, r3
    a000:	781b      	ldrb	r3, [r3, #0]
    a002:	2b00      	cmp	r3, #0
    a004:	d163      	bne.n	a0ce <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    a006:	68fb      	ldr	r3, [r7, #12]
    a008:	4a35      	ldr	r2, [pc, #212]	; (a0e0 <f_open+0x528>)
    a00a:	2194      	movs	r1, #148	; 0x94
    a00c:	0089      	lsls	r1, r1, #2
    a00e:	468c      	mov	ip, r1
    a010:	44bc      	add	ip, r7
    a012:	4462      	add	r2, ip
    a014:	7812      	ldrb	r2, [r2, #0]
    a016:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    a018:	2392      	movs	r3, #146	; 0x92
    a01a:	009b      	lsls	r3, r3, #2
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	3315      	adds	r3, #21
    a022:	781b      	ldrb	r3, [r3, #0]
    a024:	021b      	lsls	r3, r3, #8
    a026:	b21a      	sxth	r2, r3
    a028:	2392      	movs	r3, #146	; 0x92
    a02a:	009b      	lsls	r3, r3, #2
    a02c:	18fb      	adds	r3, r7, r3
    a02e:	681b      	ldr	r3, [r3, #0]
    a030:	3314      	adds	r3, #20
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	b21b      	sxth	r3, r3
    a036:	4313      	orrs	r3, r2
    a038:	b21b      	sxth	r3, r3
    a03a:	b29b      	uxth	r3, r3
    a03c:	041b      	lsls	r3, r3, #16
    a03e:	2292      	movs	r2, #146	; 0x92
    a040:	0092      	lsls	r2, r2, #2
    a042:	18ba      	adds	r2, r7, r2
    a044:	6812      	ldr	r2, [r2, #0]
    a046:	321b      	adds	r2, #27
    a048:	7812      	ldrb	r2, [r2, #0]
    a04a:	0212      	lsls	r2, r2, #8
    a04c:	b211      	sxth	r1, r2
    a04e:	2292      	movs	r2, #146	; 0x92
    a050:	0092      	lsls	r2, r2, #2
    a052:	18ba      	adds	r2, r7, r2
    a054:	6812      	ldr	r2, [r2, #0]
    a056:	321a      	adds	r2, #26
    a058:	7812      	ldrb	r2, [r2, #0]
    a05a:	b212      	sxth	r2, r2
    a05c:	430a      	orrs	r2, r1
    a05e:	b212      	sxth	r2, r2
    a060:	b292      	uxth	r2, r2
    a062:	431a      	orrs	r2, r3
    a064:	68fb      	ldr	r3, [r7, #12]
    a066:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    a068:	2392      	movs	r3, #146	; 0x92
    a06a:	009b      	lsls	r3, r3, #2
    a06c:	18fb      	adds	r3, r7, r3
    a06e:	681b      	ldr	r3, [r3, #0]
    a070:	331f      	adds	r3, #31
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	061a      	lsls	r2, r3, #24
    a076:	2392      	movs	r3, #146	; 0x92
    a078:	009b      	lsls	r3, r3, #2
    a07a:	18fb      	adds	r3, r7, r3
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	331e      	adds	r3, #30
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	041b      	lsls	r3, r3, #16
    a084:	4313      	orrs	r3, r2
    a086:	2292      	movs	r2, #146	; 0x92
    a088:	0092      	lsls	r2, r2, #2
    a08a:	18ba      	adds	r2, r7, r2
    a08c:	6812      	ldr	r2, [r2, #0]
    a08e:	321d      	adds	r2, #29
    a090:	7812      	ldrb	r2, [r2, #0]
    a092:	0212      	lsls	r2, r2, #8
    a094:	4313      	orrs	r3, r2
    a096:	2292      	movs	r2, #146	; 0x92
    a098:	0092      	lsls	r2, r2, #2
    a09a:	18ba      	adds	r2, r7, r2
    a09c:	6812      	ldr	r2, [r2, #0]
    a09e:	321c      	adds	r2, #28
    a0a0:	7812      	ldrb	r2, [r2, #0]
    a0a2:	431a      	orrs	r2, r3
    a0a4:	68fb      	ldr	r3, [r7, #12]
    a0a6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    a0a8:	68fb      	ldr	r3, [r7, #12]
    a0aa:	2200      	movs	r2, #0
    a0ac:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    a0ae:	68fb      	ldr	r3, [r7, #12]
    a0b0:	2200      	movs	r2, #0
    a0b2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    a0b4:	2387      	movs	r3, #135	; 0x87
    a0b6:	009b      	lsls	r3, r3, #2
    a0b8:	18fb      	adds	r3, r7, r3
    a0ba:	681a      	ldr	r2, [r3, #0]
    a0bc:	68fb      	ldr	r3, [r7, #12]
    a0be:	601a      	str	r2, [r3, #0]
    a0c0:	2387      	movs	r3, #135	; 0x87
    a0c2:	009b      	lsls	r3, r3, #2
    a0c4:	18fb      	adds	r3, r7, r3
    a0c6:	681b      	ldr	r3, [r3, #0]
    a0c8:	88da      	ldrh	r2, [r3, #6]
    a0ca:	68fb      	ldr	r3, [r7, #12]
    a0cc:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    a0ce:	4b05      	ldr	r3, [pc, #20]	; (a0e4 <f_open+0x52c>)
    a0d0:	18fb      	adds	r3, r7, r3
    a0d2:	781b      	ldrb	r3, [r3, #0]
}
    a0d4:	0018      	movs	r0, r3
    a0d6:	46bd      	mov	sp, r7
    a0d8:	2395      	movs	r3, #149	; 0x95
    a0da:	009b      	lsls	r3, r3, #2
    a0dc:	449d      	add	sp, r3
    a0de:	bd90      	pop	{r4, r7, pc}
    a0e0:	fffffdb7 	.word	0xfffffdb7
    a0e4:	0000024f 	.word	0x0000024f

0000a0e8 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    a0e8:	b590      	push	{r4, r7, lr}
    a0ea:	b08d      	sub	sp, #52	; 0x34
    a0ec:	af00      	add	r7, sp, #0
    a0ee:	60f8      	str	r0, [r7, #12]
    a0f0:	60b9      	str	r1, [r7, #8]
    a0f2:	607a      	str	r2, [r7, #4]
    a0f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    a0f6:	68bb      	ldr	r3, [r7, #8]
    a0f8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    a0fa:	683b      	ldr	r3, [r7, #0]
    a0fc:	2200      	movs	r2, #0
    a0fe:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    a100:	68fb      	ldr	r3, [r7, #12]
    a102:	681a      	ldr	r2, [r3, #0]
    a104:	68fb      	ldr	r3, [r7, #12]
    a106:	889b      	ldrh	r3, [r3, #4]
    a108:	211f      	movs	r1, #31
    a10a:	187c      	adds	r4, r7, r1
    a10c:	0019      	movs	r1, r3
    a10e:	0010      	movs	r0, r2
    a110:	4b96      	ldr	r3, [pc, #600]	; (a36c <f_read+0x284>)
    a112:	4798      	blx	r3
    a114:	0003      	movs	r3, r0
    a116:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a118:	231f      	movs	r3, #31
    a11a:	18fb      	adds	r3, r7, r3
    a11c:	781b      	ldrb	r3, [r3, #0]
    a11e:	2b00      	cmp	r3, #0
    a120:	d003      	beq.n	a12a <f_read+0x42>
    a122:	231f      	movs	r3, #31
    a124:	18fb      	adds	r3, r7, r3
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	e11b      	b.n	a362 <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    a12a:	68fb      	ldr	r3, [r7, #12]
    a12c:	799b      	ldrb	r3, [r3, #6]
    a12e:	b25b      	sxtb	r3, r3
    a130:	2b00      	cmp	r3, #0
    a132:	da01      	bge.n	a138 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a134:	2302      	movs	r3, #2
    a136:	e114      	b.n	a362 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    a138:	68fb      	ldr	r3, [r7, #12]
    a13a:	799b      	ldrb	r3, [r3, #6]
    a13c:	001a      	movs	r2, r3
    a13e:	2301      	movs	r3, #1
    a140:	4013      	ands	r3, r2
    a142:	d101      	bne.n	a148 <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a144:	2307      	movs	r3, #7
    a146:	e10c      	b.n	a362 <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    a148:	68fb      	ldr	r3, [r7, #12]
    a14a:	68da      	ldr	r2, [r3, #12]
    a14c:	68fb      	ldr	r3, [r7, #12]
    a14e:	689b      	ldr	r3, [r3, #8]
    a150:	1ad3      	subs	r3, r2, r3
    a152:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    a154:	687a      	ldr	r2, [r7, #4]
    a156:	69bb      	ldr	r3, [r7, #24]
    a158:	429a      	cmp	r2, r3
    a15a:	d800      	bhi.n	a15e <f_read+0x76>
    a15c:	e0fc      	b.n	a358 <f_read+0x270>
    a15e:	69bb      	ldr	r3, [r7, #24]
    a160:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    a162:	e0f9      	b.n	a358 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    a164:	68fb      	ldr	r3, [r7, #12]
    a166:	689b      	ldr	r3, [r3, #8]
    a168:	05db      	lsls	r3, r3, #23
    a16a:	0ddb      	lsrs	r3, r3, #23
    a16c:	d000      	beq.n	a170 <f_read+0x88>
    a16e:	e0b0      	b.n	a2d2 <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a170:	68fb      	ldr	r3, [r7, #12]
    a172:	689b      	ldr	r3, [r3, #8]
    a174:	0a5b      	lsrs	r3, r3, #9
    a176:	b2da      	uxtb	r2, r3
    a178:	68fb      	ldr	r3, [r7, #12]
    a17a:	681b      	ldr	r3, [r3, #0]
    a17c:	789b      	ldrb	r3, [r3, #2]
    a17e:	3b01      	subs	r3, #1
    a180:	b2d9      	uxtb	r1, r3
    a182:	2317      	movs	r3, #23
    a184:	18fb      	adds	r3, r7, r3
    a186:	400a      	ands	r2, r1
    a188:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    a18a:	2317      	movs	r3, #23
    a18c:	18fb      	adds	r3, r7, r3
    a18e:	781b      	ldrb	r3, [r3, #0]
    a190:	2b00      	cmp	r3, #0
    a192:	d12e      	bne.n	a1f2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    a194:	68fb      	ldr	r3, [r7, #12]
    a196:	689b      	ldr	r3, [r3, #8]
    a198:	2b00      	cmp	r3, #0
    a19a:	d103      	bne.n	a1a4 <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    a19c:	68fb      	ldr	r3, [r7, #12]
    a19e:	691b      	ldr	r3, [r3, #16]
    a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    a1a2:	e009      	b.n	a1b8 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    a1a4:	68fb      	ldr	r3, [r7, #12]
    a1a6:	681a      	ldr	r2, [r3, #0]
    a1a8:	68fb      	ldr	r3, [r7, #12]
    a1aa:	695b      	ldr	r3, [r3, #20]
    a1ac:	0019      	movs	r1, r3
    a1ae:	0010      	movs	r0, r2
    a1b0:	4b6f      	ldr	r3, [pc, #444]	; (a370 <f_read+0x288>)
    a1b2:	4798      	blx	r3
    a1b4:	0003      	movs	r3, r0
    a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1ba:	2b01      	cmp	r3, #1
    a1bc:	d809      	bhi.n	a1d2 <f_read+0xea>
    a1be:	68fb      	ldr	r3, [r7, #12]
    a1c0:	799b      	ldrb	r3, [r3, #6]
    a1c2:	2280      	movs	r2, #128	; 0x80
    a1c4:	4252      	negs	r2, r2
    a1c6:	4313      	orrs	r3, r2
    a1c8:	b2da      	uxtb	r2, r3
    a1ca:	68fb      	ldr	r3, [r7, #12]
    a1cc:	719a      	strb	r2, [r3, #6]
    a1ce:	2302      	movs	r3, #2
    a1d0:	e0c7      	b.n	a362 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1d4:	3301      	adds	r3, #1
    a1d6:	d109      	bne.n	a1ec <f_read+0x104>
    a1d8:	68fb      	ldr	r3, [r7, #12]
    a1da:	799b      	ldrb	r3, [r3, #6]
    a1dc:	2280      	movs	r2, #128	; 0x80
    a1de:	4252      	negs	r2, r2
    a1e0:	4313      	orrs	r3, r2
    a1e2:	b2da      	uxtb	r2, r3
    a1e4:	68fb      	ldr	r3, [r7, #12]
    a1e6:	719a      	strb	r2, [r3, #6]
    a1e8:	2301      	movs	r3, #1
    a1ea:	e0ba      	b.n	a362 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    a1ec:	68fb      	ldr	r3, [r7, #12]
    a1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a1f0:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a1f2:	68fb      	ldr	r3, [r7, #12]
    a1f4:	681a      	ldr	r2, [r3, #0]
    a1f6:	68fb      	ldr	r3, [r7, #12]
    a1f8:	695b      	ldr	r3, [r3, #20]
    a1fa:	0019      	movs	r1, r3
    a1fc:	0010      	movs	r0, r2
    a1fe:	4b5d      	ldr	r3, [pc, #372]	; (a374 <f_read+0x28c>)
    a200:	4798      	blx	r3
    a202:	0003      	movs	r3, r0
    a204:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a206:	693b      	ldr	r3, [r7, #16]
    a208:	2b00      	cmp	r3, #0
    a20a:	d109      	bne.n	a220 <f_read+0x138>
    a20c:	68fb      	ldr	r3, [r7, #12]
    a20e:	799b      	ldrb	r3, [r3, #6]
    a210:	2280      	movs	r2, #128	; 0x80
    a212:	4252      	negs	r2, r2
    a214:	4313      	orrs	r3, r2
    a216:	b2da      	uxtb	r2, r3
    a218:	68fb      	ldr	r3, [r7, #12]
    a21a:	719a      	strb	r2, [r3, #6]
    a21c:	2302      	movs	r3, #2
    a21e:	e0a0      	b.n	a362 <f_read+0x27a>
			sect += csect;
    a220:	2317      	movs	r3, #23
    a222:	18fb      	adds	r3, r7, r3
    a224:	781b      	ldrb	r3, [r3, #0]
    a226:	693a      	ldr	r2, [r7, #16]
    a228:	18d3      	adds	r3, r2, r3
    a22a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    a22c:	687b      	ldr	r3, [r7, #4]
    a22e:	0a5b      	lsrs	r3, r3, #9
    a230:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a234:	2b00      	cmp	r3, #0
    a236:	d049      	beq.n	a2cc <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a238:	2317      	movs	r3, #23
    a23a:	18fb      	adds	r3, r7, r3
    a23c:	781a      	ldrb	r2, [r3, #0]
    a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a240:	18d2      	adds	r2, r2, r3
    a242:	68fb      	ldr	r3, [r7, #12]
    a244:	681b      	ldr	r3, [r3, #0]
    a246:	789b      	ldrb	r3, [r3, #2]
    a248:	429a      	cmp	r2, r3
    a24a:	d908      	bls.n	a25e <f_read+0x176>
					cc = fp->fs->csize - csect;
    a24c:	68fb      	ldr	r3, [r7, #12]
    a24e:	681b      	ldr	r3, [r3, #0]
    a250:	789b      	ldrb	r3, [r3, #2]
    a252:	001a      	movs	r2, r3
    a254:	2317      	movs	r3, #23
    a256:	18fb      	adds	r3, r7, r3
    a258:	781b      	ldrb	r3, [r3, #0]
    a25a:	1ad3      	subs	r3, r2, r3
    a25c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    a25e:	68fb      	ldr	r3, [r7, #12]
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	7858      	ldrb	r0, [r3, #1]
    a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a266:	b2db      	uxtb	r3, r3
    a268:	693a      	ldr	r2, [r7, #16]
    a26a:	6a39      	ldr	r1, [r7, #32]
    a26c:	4c42      	ldr	r4, [pc, #264]	; (a378 <f_read+0x290>)
    a26e:	47a0      	blx	r4
    a270:	1e03      	subs	r3, r0, #0
    a272:	d009      	beq.n	a288 <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    a274:	68fb      	ldr	r3, [r7, #12]
    a276:	799b      	ldrb	r3, [r3, #6]
    a278:	2280      	movs	r2, #128	; 0x80
    a27a:	4252      	negs	r2, r2
    a27c:	4313      	orrs	r3, r2
    a27e:	b2da      	uxtb	r2, r3
    a280:	68fb      	ldr	r3, [r7, #12]
    a282:	719a      	strb	r2, [r3, #6]
    a284:	2301      	movs	r3, #1
    a286:	e06c      	b.n	a362 <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    a288:	68fb      	ldr	r3, [r7, #12]
    a28a:	681b      	ldr	r3, [r3, #0]
    a28c:	791b      	ldrb	r3, [r3, #4]
    a28e:	2b00      	cmp	r3, #0
    a290:	d018      	beq.n	a2c4 <f_read+0x1dc>
    a292:	68fb      	ldr	r3, [r7, #12]
    a294:	681b      	ldr	r3, [r3, #0]
    a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a298:	693b      	ldr	r3, [r7, #16]
    a29a:	1ad2      	subs	r2, r2, r3
    a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a29e:	429a      	cmp	r2, r3
    a2a0:	d210      	bcs.n	a2c4 <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    a2a2:	68fb      	ldr	r3, [r7, #12]
    a2a4:	681b      	ldr	r3, [r3, #0]
    a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a2a8:	693b      	ldr	r3, [r7, #16]
    a2aa:	1ad3      	subs	r3, r2, r3
    a2ac:	025b      	lsls	r3, r3, #9
    a2ae:	6a3a      	ldr	r2, [r7, #32]
    a2b0:	18d0      	adds	r0, r2, r3
    a2b2:	68fb      	ldr	r3, [r7, #12]
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	3330      	adds	r3, #48	; 0x30
    a2b8:	0019      	movs	r1, r3
    a2ba:	2380      	movs	r3, #128	; 0x80
    a2bc:	009b      	lsls	r3, r3, #2
    a2be:	001a      	movs	r2, r3
    a2c0:	4b2e      	ldr	r3, [pc, #184]	; (a37c <f_read+0x294>)
    a2c2:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2c6:	025b      	lsls	r3, r3, #9
    a2c8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    a2ca:	e031      	b.n	a330 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a2cc:	68fb      	ldr	r3, [r7, #12]
    a2ce:	693a      	ldr	r2, [r7, #16]
    a2d0:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a2d2:	68fb      	ldr	r3, [r7, #12]
    a2d4:	689b      	ldr	r3, [r3, #8]
    a2d6:	05db      	lsls	r3, r3, #23
    a2d8:	0ddb      	lsrs	r3, r3, #23
    a2da:	2280      	movs	r2, #128	; 0x80
    a2dc:	0092      	lsls	r2, r2, #2
    a2de:	1ad3      	subs	r3, r2, r3
    a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    a2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a2e4:	687b      	ldr	r3, [r7, #4]
    a2e6:	429a      	cmp	r2, r3
    a2e8:	d901      	bls.n	a2ee <f_read+0x206>
    a2ea:	687b      	ldr	r3, [r7, #4]
    a2ec:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    a2ee:	68fb      	ldr	r3, [r7, #12]
    a2f0:	681a      	ldr	r2, [r3, #0]
    a2f2:	68fb      	ldr	r3, [r7, #12]
    a2f4:	699b      	ldr	r3, [r3, #24]
    a2f6:	0019      	movs	r1, r3
    a2f8:	0010      	movs	r0, r2
    a2fa:	4b21      	ldr	r3, [pc, #132]	; (a380 <f_read+0x298>)
    a2fc:	4798      	blx	r3
    a2fe:	1e03      	subs	r3, r0, #0
    a300:	d009      	beq.n	a316 <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    a302:	68fb      	ldr	r3, [r7, #12]
    a304:	799b      	ldrb	r3, [r3, #6]
    a306:	2280      	movs	r2, #128	; 0x80
    a308:	4252      	negs	r2, r2
    a30a:	4313      	orrs	r3, r2
    a30c:	b2da      	uxtb	r2, r3
    a30e:	68fb      	ldr	r3, [r7, #12]
    a310:	719a      	strb	r2, [r3, #6]
    a312:	2301      	movs	r3, #1
    a314:	e025      	b.n	a362 <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    a316:	68fb      	ldr	r3, [r7, #12]
    a318:	681a      	ldr	r2, [r3, #0]
    a31a:	68fb      	ldr	r3, [r7, #12]
    a31c:	689b      	ldr	r3, [r3, #8]
    a31e:	05db      	lsls	r3, r3, #23
    a320:	0ddb      	lsrs	r3, r3, #23
    a322:	3330      	adds	r3, #48	; 0x30
    a324:	18d1      	adds	r1, r2, r3
    a326:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a328:	6a3b      	ldr	r3, [r7, #32]
    a32a:	0018      	movs	r0, r3
    a32c:	4b13      	ldr	r3, [pc, #76]	; (a37c <f_read+0x294>)
    a32e:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a330:	6a3a      	ldr	r2, [r7, #32]
    a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a334:	18d3      	adds	r3, r2, r3
    a336:	623b      	str	r3, [r7, #32]
    a338:	68fb      	ldr	r3, [r7, #12]
    a33a:	689a      	ldr	r2, [r3, #8]
    a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a33e:	18d2      	adds	r2, r2, r3
    a340:	68fb      	ldr	r3, [r7, #12]
    a342:	609a      	str	r2, [r3, #8]
    a344:	683b      	ldr	r3, [r7, #0]
    a346:	681a      	ldr	r2, [r3, #0]
    a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a34a:	18d2      	adds	r2, r2, r3
    a34c:	683b      	ldr	r3, [r7, #0]
    a34e:	601a      	str	r2, [r3, #0]
    a350:	687a      	ldr	r2, [r7, #4]
    a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a354:	1ad3      	subs	r3, r2, r3
    a356:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	2b00      	cmp	r3, #0
    a35c:	d000      	beq.n	a360 <f_read+0x278>
    a35e:	e701      	b.n	a164 <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a360:	2300      	movs	r3, #0
}
    a362:	0018      	movs	r0, r3
    a364:	46bd      	mov	sp, r7
    a366:	b00d      	add	sp, #52	; 0x34
    a368:	bd90      	pop	{r4, r7, pc}
    a36a:	46c0      	nop			; (mov r8, r8)
    a36c:	00009b0d 	.word	0x00009b0d
    a370:	000079a9 	.word	0x000079a9
    a374:	00007971 	.word	0x00007971
    a378:	00007325 	.word	0x00007325
    a37c:	0000762d 	.word	0x0000762d
    a380:	00007711 	.word	0x00007711

0000a384 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a384:	b590      	push	{r4, r7, lr}
    a386:	b08b      	sub	sp, #44	; 0x2c
    a388:	af00      	add	r7, sp, #0
    a38a:	60f8      	str	r0, [r7, #12]
    a38c:	60b9      	str	r1, [r7, #8]
    a38e:	607a      	str	r2, [r7, #4]
    a390:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a392:	68bb      	ldr	r3, [r7, #8]
    a394:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a396:	683b      	ldr	r3, [r7, #0]
    a398:	2200      	movs	r2, #0
    a39a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a39c:	68fb      	ldr	r3, [r7, #12]
    a39e:	681a      	ldr	r2, [r3, #0]
    a3a0:	68fb      	ldr	r3, [r7, #12]
    a3a2:	889b      	ldrh	r3, [r3, #4]
    a3a4:	2117      	movs	r1, #23
    a3a6:	187c      	adds	r4, r7, r1
    a3a8:	0019      	movs	r1, r3
    a3aa:	0010      	movs	r0, r2
    a3ac:	4bc3      	ldr	r3, [pc, #780]	; (a6bc <f_write+0x338>)
    a3ae:	4798      	blx	r3
    a3b0:	0003      	movs	r3, r0
    a3b2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a3b4:	2317      	movs	r3, #23
    a3b6:	18fb      	adds	r3, r7, r3
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	2b00      	cmp	r3, #0
    a3bc:	d003      	beq.n	a3c6 <f_write+0x42>
    a3be:	2317      	movs	r3, #23
    a3c0:	18fb      	adds	r3, r7, r3
    a3c2:	781b      	ldrb	r3, [r3, #0]
    a3c4:	e176      	b.n	a6b4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a3c6:	68fb      	ldr	r3, [r7, #12]
    a3c8:	799b      	ldrb	r3, [r3, #6]
    a3ca:	b25b      	sxtb	r3, r3
    a3cc:	2b00      	cmp	r3, #0
    a3ce:	da01      	bge.n	a3d4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a3d0:	2302      	movs	r3, #2
    a3d2:	e16f      	b.n	a6b4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a3d4:	68fb      	ldr	r3, [r7, #12]
    a3d6:	799b      	ldrb	r3, [r3, #6]
    a3d8:	001a      	movs	r2, r3
    a3da:	2302      	movs	r3, #2
    a3dc:	4013      	ands	r3, r2
    a3de:	d101      	bne.n	a3e4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a3e0:	2307      	movs	r3, #7
    a3e2:	e167      	b.n	a6b4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a3e4:	68fb      	ldr	r3, [r7, #12]
    a3e6:	68da      	ldr	r2, [r3, #12]
    a3e8:	687b      	ldr	r3, [r7, #4]
    a3ea:	18d2      	adds	r2, r2, r3
    a3ec:	68fb      	ldr	r3, [r7, #12]
    a3ee:	68db      	ldr	r3, [r3, #12]
    a3f0:	429a      	cmp	r2, r3
    a3f2:	d300      	bcc.n	a3f6 <f_write+0x72>
    a3f4:	e146      	b.n	a684 <f_write+0x300>
    a3f6:	2300      	movs	r3, #0
    a3f8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a3fa:	e143      	b.n	a684 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a3fc:	68fb      	ldr	r3, [r7, #12]
    a3fe:	689b      	ldr	r3, [r3, #8]
    a400:	05db      	lsls	r3, r3, #23
    a402:	0ddb      	lsrs	r3, r3, #23
    a404:	d000      	beq.n	a408 <f_write+0x84>
    a406:	e0f6      	b.n	a5f6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a408:	68fb      	ldr	r3, [r7, #12]
    a40a:	689b      	ldr	r3, [r3, #8]
    a40c:	0a5b      	lsrs	r3, r3, #9
    a40e:	b2da      	uxtb	r2, r3
    a410:	68fb      	ldr	r3, [r7, #12]
    a412:	681b      	ldr	r3, [r3, #0]
    a414:	789b      	ldrb	r3, [r3, #2]
    a416:	3b01      	subs	r3, #1
    a418:	b2d9      	uxtb	r1, r3
    a41a:	2316      	movs	r3, #22
    a41c:	18fb      	adds	r3, r7, r3
    a41e:	400a      	ands	r2, r1
    a420:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a422:	2316      	movs	r3, #22
    a424:	18fb      	adds	r3, r7, r3
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	2b00      	cmp	r3, #0
    a42a:	d140      	bne.n	a4ae <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a42c:	68fb      	ldr	r3, [r7, #12]
    a42e:	689b      	ldr	r3, [r3, #8]
    a430:	2b00      	cmp	r3, #0
    a432:	d111      	bne.n	a458 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a434:	68fb      	ldr	r3, [r7, #12]
    a436:	691b      	ldr	r3, [r3, #16]
    a438:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a43c:	2b00      	cmp	r3, #0
    a43e:	d115      	bne.n	a46c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a440:	68fb      	ldr	r3, [r7, #12]
    a442:	681b      	ldr	r3, [r3, #0]
    a444:	2100      	movs	r1, #0
    a446:	0018      	movs	r0, r3
    a448:	4b9d      	ldr	r3, [pc, #628]	; (a6c0 <f_write+0x33c>)
    a44a:	4798      	blx	r3
    a44c:	0003      	movs	r3, r0
    a44e:	627b      	str	r3, [r7, #36]	; 0x24
    a450:	68fb      	ldr	r3, [r7, #12]
    a452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a454:	611a      	str	r2, [r3, #16]
    a456:	e009      	b.n	a46c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a458:	68fb      	ldr	r3, [r7, #12]
    a45a:	681a      	ldr	r2, [r3, #0]
    a45c:	68fb      	ldr	r3, [r7, #12]
    a45e:	695b      	ldr	r3, [r3, #20]
    a460:	0019      	movs	r1, r3
    a462:	0010      	movs	r0, r2
    a464:	4b96      	ldr	r3, [pc, #600]	; (a6c0 <f_write+0x33c>)
    a466:	4798      	blx	r3
    a468:	0003      	movs	r3, r0
    a46a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a46e:	2b00      	cmp	r3, #0
    a470:	d100      	bne.n	a474 <f_write+0xf0>
    a472:	e10c      	b.n	a68e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a476:	2b01      	cmp	r3, #1
    a478:	d109      	bne.n	a48e <f_write+0x10a>
    a47a:	68fb      	ldr	r3, [r7, #12]
    a47c:	799b      	ldrb	r3, [r3, #6]
    a47e:	2280      	movs	r2, #128	; 0x80
    a480:	4252      	negs	r2, r2
    a482:	4313      	orrs	r3, r2
    a484:	b2da      	uxtb	r2, r3
    a486:	68fb      	ldr	r3, [r7, #12]
    a488:	719a      	strb	r2, [r3, #6]
    a48a:	2302      	movs	r3, #2
    a48c:	e112      	b.n	a6b4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a490:	3301      	adds	r3, #1
    a492:	d109      	bne.n	a4a8 <f_write+0x124>
    a494:	68fb      	ldr	r3, [r7, #12]
    a496:	799b      	ldrb	r3, [r3, #6]
    a498:	2280      	movs	r2, #128	; 0x80
    a49a:	4252      	negs	r2, r2
    a49c:	4313      	orrs	r3, r2
    a49e:	b2da      	uxtb	r2, r3
    a4a0:	68fb      	ldr	r3, [r7, #12]
    a4a2:	719a      	strb	r2, [r3, #6]
    a4a4:	2301      	movs	r3, #1
    a4a6:	e105      	b.n	a6b4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a4a8:	68fb      	ldr	r3, [r7, #12]
    a4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a4ac:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a4ae:	68fb      	ldr	r3, [r7, #12]
    a4b0:	681b      	ldr	r3, [r3, #0]
    a4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a4b4:	68fb      	ldr	r3, [r7, #12]
    a4b6:	699b      	ldr	r3, [r3, #24]
    a4b8:	429a      	cmp	r2, r3
    a4ba:	d111      	bne.n	a4e0 <f_write+0x15c>
    a4bc:	68fb      	ldr	r3, [r7, #12]
    a4be:	681b      	ldr	r3, [r3, #0]
    a4c0:	2100      	movs	r1, #0
    a4c2:	0018      	movs	r0, r3
    a4c4:	4b7f      	ldr	r3, [pc, #508]	; (a6c4 <f_write+0x340>)
    a4c6:	4798      	blx	r3
    a4c8:	1e03      	subs	r3, r0, #0
    a4ca:	d009      	beq.n	a4e0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a4cc:	68fb      	ldr	r3, [r7, #12]
    a4ce:	799b      	ldrb	r3, [r3, #6]
    a4d0:	2280      	movs	r2, #128	; 0x80
    a4d2:	4252      	negs	r2, r2
    a4d4:	4313      	orrs	r3, r2
    a4d6:	b2da      	uxtb	r2, r3
    a4d8:	68fb      	ldr	r3, [r7, #12]
    a4da:	719a      	strb	r2, [r3, #6]
    a4dc:	2301      	movs	r3, #1
    a4de:	e0e9      	b.n	a6b4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a4e0:	68fb      	ldr	r3, [r7, #12]
    a4e2:	681a      	ldr	r2, [r3, #0]
    a4e4:	68fb      	ldr	r3, [r7, #12]
    a4e6:	695b      	ldr	r3, [r3, #20]
    a4e8:	0019      	movs	r1, r3
    a4ea:	0010      	movs	r0, r2
    a4ec:	4b76      	ldr	r3, [pc, #472]	; (a6c8 <f_write+0x344>)
    a4ee:	4798      	blx	r3
    a4f0:	0003      	movs	r3, r0
    a4f2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a4f4:	693b      	ldr	r3, [r7, #16]
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d109      	bne.n	a50e <f_write+0x18a>
    a4fa:	68fb      	ldr	r3, [r7, #12]
    a4fc:	799b      	ldrb	r3, [r3, #6]
    a4fe:	2280      	movs	r2, #128	; 0x80
    a500:	4252      	negs	r2, r2
    a502:	4313      	orrs	r3, r2
    a504:	b2da      	uxtb	r2, r3
    a506:	68fb      	ldr	r3, [r7, #12]
    a508:	719a      	strb	r2, [r3, #6]
    a50a:	2302      	movs	r3, #2
    a50c:	e0d2      	b.n	a6b4 <f_write+0x330>
			sect += csect;
    a50e:	2316      	movs	r3, #22
    a510:	18fb      	adds	r3, r7, r3
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	693a      	ldr	r2, [r7, #16]
    a516:	18d3      	adds	r3, r2, r3
    a518:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a51a:	687b      	ldr	r3, [r7, #4]
    a51c:	0a5b      	lsrs	r3, r3, #9
    a51e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a520:	69fb      	ldr	r3, [r7, #28]
    a522:	2b00      	cmp	r3, #0
    a524:	d048      	beq.n	a5b8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a526:	2316      	movs	r3, #22
    a528:	18fb      	adds	r3, r7, r3
    a52a:	781a      	ldrb	r2, [r3, #0]
    a52c:	69fb      	ldr	r3, [r7, #28]
    a52e:	18d2      	adds	r2, r2, r3
    a530:	68fb      	ldr	r3, [r7, #12]
    a532:	681b      	ldr	r3, [r3, #0]
    a534:	789b      	ldrb	r3, [r3, #2]
    a536:	429a      	cmp	r2, r3
    a538:	d908      	bls.n	a54c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a53a:	68fb      	ldr	r3, [r7, #12]
    a53c:	681b      	ldr	r3, [r3, #0]
    a53e:	789b      	ldrb	r3, [r3, #2]
    a540:	001a      	movs	r2, r3
    a542:	2316      	movs	r3, #22
    a544:	18fb      	adds	r3, r7, r3
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	1ad3      	subs	r3, r2, r3
    a54a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a54c:	68fb      	ldr	r3, [r7, #12]
    a54e:	681b      	ldr	r3, [r3, #0]
    a550:	7858      	ldrb	r0, [r3, #1]
    a552:	69fb      	ldr	r3, [r7, #28]
    a554:	b2db      	uxtb	r3, r3
    a556:	693a      	ldr	r2, [r7, #16]
    a558:	69b9      	ldr	r1, [r7, #24]
    a55a:	4c5c      	ldr	r4, [pc, #368]	; (a6cc <f_write+0x348>)
    a55c:	47a0      	blx	r4
    a55e:	1e03      	subs	r3, r0, #0
    a560:	d009      	beq.n	a576 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a562:	68fb      	ldr	r3, [r7, #12]
    a564:	799b      	ldrb	r3, [r3, #6]
    a566:	2280      	movs	r2, #128	; 0x80
    a568:	4252      	negs	r2, r2
    a56a:	4313      	orrs	r3, r2
    a56c:	b2da      	uxtb	r2, r3
    a56e:	68fb      	ldr	r3, [r7, #12]
    a570:	719a      	strb	r2, [r3, #6]
    a572:	2301      	movs	r3, #1
    a574:	e09e      	b.n	a6b4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a576:	68fb      	ldr	r3, [r7, #12]
    a578:	681b      	ldr	r3, [r3, #0]
    a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a57c:	693b      	ldr	r3, [r7, #16]
    a57e:	1ad2      	subs	r2, r2, r3
    a580:	69fb      	ldr	r3, [r7, #28]
    a582:	429a      	cmp	r2, r3
    a584:	d214      	bcs.n	a5b0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a586:	68fb      	ldr	r3, [r7, #12]
    a588:	681b      	ldr	r3, [r3, #0]
    a58a:	3330      	adds	r3, #48	; 0x30
    a58c:	0018      	movs	r0, r3
    a58e:	68fb      	ldr	r3, [r7, #12]
    a590:	681b      	ldr	r3, [r3, #0]
    a592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a594:	693b      	ldr	r3, [r7, #16]
    a596:	1ad3      	subs	r3, r2, r3
    a598:	025b      	lsls	r3, r3, #9
    a59a:	69ba      	ldr	r2, [r7, #24]
    a59c:	18d1      	adds	r1, r2, r3
    a59e:	2380      	movs	r3, #128	; 0x80
    a5a0:	009b      	lsls	r3, r3, #2
    a5a2:	001a      	movs	r2, r3
    a5a4:	4b4a      	ldr	r3, [pc, #296]	; (a6d0 <f_write+0x34c>)
    a5a6:	4798      	blx	r3
					fp->fs->wflag = 0;
    a5a8:	68fb      	ldr	r3, [r7, #12]
    a5aa:	681b      	ldr	r3, [r3, #0]
    a5ac:	2200      	movs	r2, #0
    a5ae:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a5b0:	69fb      	ldr	r3, [r7, #28]
    a5b2:	025b      	lsls	r3, r3, #9
    a5b4:	623b      	str	r3, [r7, #32]
				continue;
    a5b6:	e051      	b.n	a65c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a5b8:	68fb      	ldr	r3, [r7, #12]
    a5ba:	689a      	ldr	r2, [r3, #8]
    a5bc:	68fb      	ldr	r3, [r7, #12]
    a5be:	68db      	ldr	r3, [r3, #12]
    a5c0:	429a      	cmp	r2, r3
    a5c2:	d315      	bcc.n	a5f0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a5c4:	68fb      	ldr	r3, [r7, #12]
    a5c6:	681b      	ldr	r3, [r3, #0]
    a5c8:	2100      	movs	r1, #0
    a5ca:	0018      	movs	r0, r3
    a5cc:	4b3d      	ldr	r3, [pc, #244]	; (a6c4 <f_write+0x340>)
    a5ce:	4798      	blx	r3
    a5d0:	1e03      	subs	r3, r0, #0
    a5d2:	d009      	beq.n	a5e8 <f_write+0x264>
    a5d4:	68fb      	ldr	r3, [r7, #12]
    a5d6:	799b      	ldrb	r3, [r3, #6]
    a5d8:	2280      	movs	r2, #128	; 0x80
    a5da:	4252      	negs	r2, r2
    a5dc:	4313      	orrs	r3, r2
    a5de:	b2da      	uxtb	r2, r3
    a5e0:	68fb      	ldr	r3, [r7, #12]
    a5e2:	719a      	strb	r2, [r3, #6]
    a5e4:	2301      	movs	r3, #1
    a5e6:	e065      	b.n	a6b4 <f_write+0x330>
				fp->fs->winsect = sect;
    a5e8:	68fb      	ldr	r3, [r7, #12]
    a5ea:	681b      	ldr	r3, [r3, #0]
    a5ec:	693a      	ldr	r2, [r7, #16]
    a5ee:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a5f0:	68fb      	ldr	r3, [r7, #12]
    a5f2:	693a      	ldr	r2, [r7, #16]
    a5f4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a5f6:	68fb      	ldr	r3, [r7, #12]
    a5f8:	689b      	ldr	r3, [r3, #8]
    a5fa:	05db      	lsls	r3, r3, #23
    a5fc:	0ddb      	lsrs	r3, r3, #23
    a5fe:	2280      	movs	r2, #128	; 0x80
    a600:	0092      	lsls	r2, r2, #2
    a602:	1ad3      	subs	r3, r2, r3
    a604:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a606:	6a3a      	ldr	r2, [r7, #32]
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	429a      	cmp	r2, r3
    a60c:	d901      	bls.n	a612 <f_write+0x28e>
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a612:	68fb      	ldr	r3, [r7, #12]
    a614:	681a      	ldr	r2, [r3, #0]
    a616:	68fb      	ldr	r3, [r7, #12]
    a618:	699b      	ldr	r3, [r3, #24]
    a61a:	0019      	movs	r1, r3
    a61c:	0010      	movs	r0, r2
    a61e:	4b29      	ldr	r3, [pc, #164]	; (a6c4 <f_write+0x340>)
    a620:	4798      	blx	r3
    a622:	1e03      	subs	r3, r0, #0
    a624:	d009      	beq.n	a63a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a626:	68fb      	ldr	r3, [r7, #12]
    a628:	799b      	ldrb	r3, [r3, #6]
    a62a:	2280      	movs	r2, #128	; 0x80
    a62c:	4252      	negs	r2, r2
    a62e:	4313      	orrs	r3, r2
    a630:	b2da      	uxtb	r2, r3
    a632:	68fb      	ldr	r3, [r7, #12]
    a634:	719a      	strb	r2, [r3, #6]
    a636:	2301      	movs	r3, #1
    a638:	e03c      	b.n	a6b4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a63a:	68fb      	ldr	r3, [r7, #12]
    a63c:	681a      	ldr	r2, [r3, #0]
    a63e:	68fb      	ldr	r3, [r7, #12]
    a640:	689b      	ldr	r3, [r3, #8]
    a642:	05db      	lsls	r3, r3, #23
    a644:	0ddb      	lsrs	r3, r3, #23
    a646:	3330      	adds	r3, #48	; 0x30
    a648:	18d3      	adds	r3, r2, r3
    a64a:	6a3a      	ldr	r2, [r7, #32]
    a64c:	69b9      	ldr	r1, [r7, #24]
    a64e:	0018      	movs	r0, r3
    a650:	4b1f      	ldr	r3, [pc, #124]	; (a6d0 <f_write+0x34c>)
    a652:	4798      	blx	r3
		fp->fs->wflag = 1;
    a654:	68fb      	ldr	r3, [r7, #12]
    a656:	681b      	ldr	r3, [r3, #0]
    a658:	2201      	movs	r2, #1
    a65a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a65c:	69ba      	ldr	r2, [r7, #24]
    a65e:	6a3b      	ldr	r3, [r7, #32]
    a660:	18d3      	adds	r3, r2, r3
    a662:	61bb      	str	r3, [r7, #24]
    a664:	68fb      	ldr	r3, [r7, #12]
    a666:	689a      	ldr	r2, [r3, #8]
    a668:	6a3b      	ldr	r3, [r7, #32]
    a66a:	18d2      	adds	r2, r2, r3
    a66c:	68fb      	ldr	r3, [r7, #12]
    a66e:	609a      	str	r2, [r3, #8]
    a670:	683b      	ldr	r3, [r7, #0]
    a672:	681a      	ldr	r2, [r3, #0]
    a674:	6a3b      	ldr	r3, [r7, #32]
    a676:	18d2      	adds	r2, r2, r3
    a678:	683b      	ldr	r3, [r7, #0]
    a67a:	601a      	str	r2, [r3, #0]
    a67c:	687a      	ldr	r2, [r7, #4]
    a67e:	6a3b      	ldr	r3, [r7, #32]
    a680:	1ad3      	subs	r3, r2, r3
    a682:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a684:	687b      	ldr	r3, [r7, #4]
    a686:	2b00      	cmp	r3, #0
    a688:	d000      	beq.n	a68c <f_write+0x308>
    a68a:	e6b7      	b.n	a3fc <f_write+0x78>
    a68c:	e000      	b.n	a690 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a68e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a690:	68fb      	ldr	r3, [r7, #12]
    a692:	689a      	ldr	r2, [r3, #8]
    a694:	68fb      	ldr	r3, [r7, #12]
    a696:	68db      	ldr	r3, [r3, #12]
    a698:	429a      	cmp	r2, r3
    a69a:	d903      	bls.n	a6a4 <f_write+0x320>
    a69c:	68fb      	ldr	r3, [r7, #12]
    a69e:	689a      	ldr	r2, [r3, #8]
    a6a0:	68fb      	ldr	r3, [r7, #12]
    a6a2:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a6a4:	68fb      	ldr	r3, [r7, #12]
    a6a6:	799b      	ldrb	r3, [r3, #6]
    a6a8:	2220      	movs	r2, #32
    a6aa:	4313      	orrs	r3, r2
    a6ac:	b2da      	uxtb	r2, r3
    a6ae:	68fb      	ldr	r3, [r7, #12]
    a6b0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a6b2:	2300      	movs	r3, #0
}
    a6b4:	0018      	movs	r0, r3
    a6b6:	46bd      	mov	sp, r7
    a6b8:	b00b      	add	sp, #44	; 0x2c
    a6ba:	bd90      	pop	{r4, r7, pc}
    a6bc:	00009b0d 	.word	0x00009b0d
    a6c0:	00007e19 	.word	0x00007e19
    a6c4:	00007711 	.word	0x00007711
    a6c8:	00007971 	.word	0x00007971
    a6cc:	000073fd 	.word	0x000073fd
    a6d0:	0000762d 	.word	0x0000762d

0000a6d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a6d4:	b590      	push	{r4, r7, lr}
    a6d6:	b087      	sub	sp, #28
    a6d8:	af00      	add	r7, sp, #0
    a6da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	681a      	ldr	r2, [r3, #0]
    a6e0:	687b      	ldr	r3, [r7, #4]
    a6e2:	889b      	ldrh	r3, [r3, #4]
    a6e4:	2117      	movs	r1, #23
    a6e6:	187c      	adds	r4, r7, r1
    a6e8:	0019      	movs	r1, r3
    a6ea:	0010      	movs	r0, r2
    a6ec:	4b55      	ldr	r3, [pc, #340]	; (a844 <f_sync+0x170>)
    a6ee:	4798      	blx	r3
    a6f0:	0003      	movs	r3, r0
    a6f2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a6f4:	2317      	movs	r3, #23
    a6f6:	18fb      	adds	r3, r7, r3
    a6f8:	781b      	ldrb	r3, [r3, #0]
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d000      	beq.n	a700 <f_sync+0x2c>
    a6fe:	e09a      	b.n	a836 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a700:	687b      	ldr	r3, [r7, #4]
    a702:	799b      	ldrb	r3, [r3, #6]
    a704:	001a      	movs	r2, r3
    a706:	2320      	movs	r3, #32
    a708:	4013      	ands	r3, r2
    a70a:	d100      	bne.n	a70e <f_sync+0x3a>
    a70c:	e093      	b.n	a836 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	681a      	ldr	r2, [r3, #0]
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	69db      	ldr	r3, [r3, #28]
    a716:	2117      	movs	r1, #23
    a718:	187c      	adds	r4, r7, r1
    a71a:	0019      	movs	r1, r3
    a71c:	0010      	movs	r0, r2
    a71e:	4b4a      	ldr	r3, [pc, #296]	; (a848 <f_sync+0x174>)
    a720:	4798      	blx	r3
    a722:	0003      	movs	r3, r0
    a724:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a726:	2317      	movs	r3, #23
    a728:	18fb      	adds	r3, r7, r3
    a72a:	781b      	ldrb	r3, [r3, #0]
    a72c:	2b00      	cmp	r3, #0
    a72e:	d000      	beq.n	a732 <f_sync+0x5e>
    a730:	e081      	b.n	a836 <f_sync+0x162>
				dir = fp->dir_ptr;
    a732:	687b      	ldr	r3, [r7, #4]
    a734:	6a1b      	ldr	r3, [r3, #32]
    a736:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a738:	693b      	ldr	r3, [r7, #16]
    a73a:	330b      	adds	r3, #11
    a73c:	693a      	ldr	r2, [r7, #16]
    a73e:	320b      	adds	r2, #11
    a740:	7812      	ldrb	r2, [r2, #0]
    a742:	2120      	movs	r1, #32
    a744:	430a      	orrs	r2, r1
    a746:	b2d2      	uxtb	r2, r2
    a748:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a74a:	693b      	ldr	r3, [r7, #16]
    a74c:	331c      	adds	r3, #28
    a74e:	001a      	movs	r2, r3
    a750:	687b      	ldr	r3, [r7, #4]
    a752:	68db      	ldr	r3, [r3, #12]
    a754:	b2db      	uxtb	r3, r3
    a756:	7013      	strb	r3, [r2, #0]
    a758:	693b      	ldr	r3, [r7, #16]
    a75a:	331d      	adds	r3, #29
    a75c:	001a      	movs	r2, r3
    a75e:	687b      	ldr	r3, [r7, #4]
    a760:	68db      	ldr	r3, [r3, #12]
    a762:	b29b      	uxth	r3, r3
    a764:	0a1b      	lsrs	r3, r3, #8
    a766:	b29b      	uxth	r3, r3
    a768:	b2db      	uxtb	r3, r3
    a76a:	7013      	strb	r3, [r2, #0]
    a76c:	693b      	ldr	r3, [r7, #16]
    a76e:	331e      	adds	r3, #30
    a770:	001a      	movs	r2, r3
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	68db      	ldr	r3, [r3, #12]
    a776:	0c1b      	lsrs	r3, r3, #16
    a778:	b2db      	uxtb	r3, r3
    a77a:	7013      	strb	r3, [r2, #0]
    a77c:	693b      	ldr	r3, [r7, #16]
    a77e:	331f      	adds	r3, #31
    a780:	001a      	movs	r2, r3
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	68db      	ldr	r3, [r3, #12]
    a786:	0e1b      	lsrs	r3, r3, #24
    a788:	b2db      	uxtb	r3, r3
    a78a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a78c:	693b      	ldr	r3, [r7, #16]
    a78e:	331a      	adds	r3, #26
    a790:	001a      	movs	r2, r3
    a792:	687b      	ldr	r3, [r7, #4]
    a794:	691b      	ldr	r3, [r3, #16]
    a796:	b2db      	uxtb	r3, r3
    a798:	7013      	strb	r3, [r2, #0]
    a79a:	693b      	ldr	r3, [r7, #16]
    a79c:	331b      	adds	r3, #27
    a79e:	001a      	movs	r2, r3
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	691b      	ldr	r3, [r3, #16]
    a7a4:	b29b      	uxth	r3, r3
    a7a6:	0a1b      	lsrs	r3, r3, #8
    a7a8:	b29b      	uxth	r3, r3
    a7aa:	b2db      	uxtb	r3, r3
    a7ac:	7013      	strb	r3, [r2, #0]
    a7ae:	693b      	ldr	r3, [r7, #16]
    a7b0:	3314      	adds	r3, #20
    a7b2:	001a      	movs	r2, r3
    a7b4:	687b      	ldr	r3, [r7, #4]
    a7b6:	691b      	ldr	r3, [r3, #16]
    a7b8:	0c1b      	lsrs	r3, r3, #16
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	7013      	strb	r3, [r2, #0]
    a7be:	693b      	ldr	r3, [r7, #16]
    a7c0:	3315      	adds	r3, #21
    a7c2:	001a      	movs	r2, r3
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	691b      	ldr	r3, [r3, #16]
    a7c8:	0c1b      	lsrs	r3, r3, #16
    a7ca:	b29b      	uxth	r3, r3
    a7cc:	0a1b      	lsrs	r3, r3, #8
    a7ce:	b29b      	uxth	r3, r3
    a7d0:	b2db      	uxtb	r3, r3
    a7d2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a7d4:	4b1d      	ldr	r3, [pc, #116]	; (a84c <f_sync+0x178>)
    a7d6:	4798      	blx	r3
    a7d8:	0003      	movs	r3, r0
    a7da:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a7dc:	693b      	ldr	r3, [r7, #16]
    a7de:	3316      	adds	r3, #22
    a7e0:	68fa      	ldr	r2, [r7, #12]
    a7e2:	b2d2      	uxtb	r2, r2
    a7e4:	701a      	strb	r2, [r3, #0]
    a7e6:	693b      	ldr	r3, [r7, #16]
    a7e8:	3317      	adds	r3, #23
    a7ea:	68fa      	ldr	r2, [r7, #12]
    a7ec:	b292      	uxth	r2, r2
    a7ee:	0a12      	lsrs	r2, r2, #8
    a7f0:	b292      	uxth	r2, r2
    a7f2:	b2d2      	uxtb	r2, r2
    a7f4:	701a      	strb	r2, [r3, #0]
    a7f6:	693b      	ldr	r3, [r7, #16]
    a7f8:	3318      	adds	r3, #24
    a7fa:	68fa      	ldr	r2, [r7, #12]
    a7fc:	0c12      	lsrs	r2, r2, #16
    a7fe:	b2d2      	uxtb	r2, r2
    a800:	701a      	strb	r2, [r3, #0]
    a802:	693b      	ldr	r3, [r7, #16]
    a804:	3319      	adds	r3, #25
    a806:	68fa      	ldr	r2, [r7, #12]
    a808:	0e12      	lsrs	r2, r2, #24
    a80a:	b2d2      	uxtb	r2, r2
    a80c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a80e:	687b      	ldr	r3, [r7, #4]
    a810:	799b      	ldrb	r3, [r3, #6]
    a812:	2220      	movs	r2, #32
    a814:	4393      	bics	r3, r2
    a816:	b2da      	uxtb	r2, r3
    a818:	687b      	ldr	r3, [r7, #4]
    a81a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a81c:	687b      	ldr	r3, [r7, #4]
    a81e:	681b      	ldr	r3, [r3, #0]
    a820:	2201      	movs	r2, #1
    a822:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a824:	687b      	ldr	r3, [r7, #4]
    a826:	681b      	ldr	r3, [r3, #0]
    a828:	2217      	movs	r2, #23
    a82a:	18bc      	adds	r4, r7, r2
    a82c:	0018      	movs	r0, r3
    a82e:	4b08      	ldr	r3, [pc, #32]	; (a850 <f_sync+0x17c>)
    a830:	4798      	blx	r3
    a832:	0003      	movs	r3, r0
    a834:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a836:	2317      	movs	r3, #23
    a838:	18fb      	adds	r3, r7, r3
    a83a:	781b      	ldrb	r3, [r3, #0]
}
    a83c:	0018      	movs	r0, r3
    a83e:	46bd      	mov	sp, r7
    a840:	b007      	add	sp, #28
    a842:	bd90      	pop	{r4, r7, pc}
    a844:	00009b0d 	.word	0x00009b0d
    a848:	00007711 	.word	0x00007711
    a84c:	000075cd 	.word	0x000075cd
    a850:	000077d9 	.word	0x000077d9

0000a854 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a854:	b590      	push	{r4, r7, lr}
    a856:	b085      	sub	sp, #20
    a858:	af00      	add	r7, sp, #0
    a85a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a85c:	230f      	movs	r3, #15
    a85e:	18fc      	adds	r4, r7, r3
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	0018      	movs	r0, r3
    a864:	4b09      	ldr	r3, [pc, #36]	; (a88c <f_close+0x38>)
    a866:	4798      	blx	r3
    a868:	0003      	movs	r3, r0
    a86a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a86c:	230f      	movs	r3, #15
    a86e:	18fb      	adds	r3, r7, r3
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	2b00      	cmp	r3, #0
    a874:	d102      	bne.n	a87c <f_close+0x28>
    a876:	687b      	ldr	r3, [r7, #4]
    a878:	2200      	movs	r2, #0
    a87a:	601a      	str	r2, [r3, #0]
	return res;
    a87c:	230f      	movs	r3, #15
    a87e:	18fb      	adds	r3, r7, r3
    a880:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a882:	0018      	movs	r0, r3
    a884:	46bd      	mov	sp, r7
    a886:	b005      	add	sp, #20
    a888:	bd90      	pop	{r4, r7, pc}
    a88a:	46c0      	nop			; (mov r8, r8)
    a88c:	0000a6d5 	.word	0x0000a6d5

0000a890 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a890:	b590      	push	{r4, r7, lr}
    a892:	4c8d      	ldr	r4, [pc, #564]	; (aac8 <f_unlink+0x238>)
    a894:	44a5      	add	sp, r4
    a896:	af00      	add	r7, sp, #0
    a898:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a89a:	4b8c      	ldr	r3, [pc, #560]	; (aacc <f_unlink+0x23c>)
    a89c:	18fc      	adds	r4, r7, r3
    a89e:	238e      	movs	r3, #142	; 0x8e
    a8a0:	009b      	lsls	r3, r3, #2
    a8a2:	18f9      	adds	r1, r7, r3
    a8a4:	1d3b      	adds	r3, r7, #4
    a8a6:	2201      	movs	r2, #1
    a8a8:	0018      	movs	r0, r3
    a8aa:	4b89      	ldr	r3, [pc, #548]	; (aad0 <f_unlink+0x240>)
    a8ac:	4798      	blx	r3
    a8ae:	0003      	movs	r3, r0
    a8b0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a8b2:	4b86      	ldr	r3, [pc, #536]	; (aacc <f_unlink+0x23c>)
    a8b4:	18fb      	adds	r3, r7, r3
    a8b6:	781b      	ldrb	r3, [r3, #0]
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d000      	beq.n	a8be <f_unlink+0x2e>
    a8bc:	e0fb      	b.n	aab6 <f_unlink+0x226>
		INIT_BUF(dj);
    a8be:	238e      	movs	r3, #142	; 0x8e
    a8c0:	009b      	lsls	r3, r3, #2
    a8c2:	18fb      	adds	r3, r7, r3
    a8c4:	2282      	movs	r2, #130	; 0x82
    a8c6:	0092      	lsls	r2, r2, #2
    a8c8:	18ba      	adds	r2, r7, r2
    a8ca:	619a      	str	r2, [r3, #24]
    a8cc:	238e      	movs	r3, #142	; 0x8e
    a8ce:	009b      	lsls	r3, r3, #2
    a8d0:	18fb      	adds	r3, r7, r3
    a8d2:	2208      	movs	r2, #8
    a8d4:	18ba      	adds	r2, r7, r2
    a8d6:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a8d8:	687a      	ldr	r2, [r7, #4]
    a8da:	4b7c      	ldr	r3, [pc, #496]	; (aacc <f_unlink+0x23c>)
    a8dc:	18fc      	adds	r4, r7, r3
    a8de:	238e      	movs	r3, #142	; 0x8e
    a8e0:	009b      	lsls	r3, r3, #2
    a8e2:	18fb      	adds	r3, r7, r3
    a8e4:	0011      	movs	r1, r2
    a8e6:	0018      	movs	r0, r3
    a8e8:	4b7a      	ldr	r3, [pc, #488]	; (aad4 <f_unlink+0x244>)
    a8ea:	4798      	blx	r3
    a8ec:	0003      	movs	r3, r0
    a8ee:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a8f0:	4b76      	ldr	r3, [pc, #472]	; (aacc <f_unlink+0x23c>)
    a8f2:	18fb      	adds	r3, r7, r3
    a8f4:	781b      	ldrb	r3, [r3, #0]
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	d000      	beq.n	a8fc <f_unlink+0x6c>
    a8fa:	e0dc      	b.n	aab6 <f_unlink+0x226>
			dir = dj.dir;
    a8fc:	238e      	movs	r3, #142	; 0x8e
    a8fe:	009b      	lsls	r3, r3, #2
    a900:	18fb      	adds	r3, r7, r3
    a902:	695b      	ldr	r3, [r3, #20]
    a904:	2298      	movs	r2, #152	; 0x98
    a906:	0092      	lsls	r2, r2, #2
    a908:	18ba      	adds	r2, r7, r2
    a90a:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a90c:	2398      	movs	r3, #152	; 0x98
    a90e:	009b      	lsls	r3, r3, #2
    a910:	18fb      	adds	r3, r7, r3
    a912:	681b      	ldr	r3, [r3, #0]
    a914:	2b00      	cmp	r3, #0
    a916:	d104      	bne.n	a922 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a918:	4b6c      	ldr	r3, [pc, #432]	; (aacc <f_unlink+0x23c>)
    a91a:	18fb      	adds	r3, r7, r3
    a91c:	2206      	movs	r2, #6
    a91e:	701a      	strb	r2, [r3, #0]
    a920:	e00d      	b.n	a93e <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a922:	2398      	movs	r3, #152	; 0x98
    a924:	009b      	lsls	r3, r3, #2
    a926:	18fb      	adds	r3, r7, r3
    a928:	681b      	ldr	r3, [r3, #0]
    a92a:	330b      	adds	r3, #11
    a92c:	781b      	ldrb	r3, [r3, #0]
    a92e:	001a      	movs	r2, r3
    a930:	2301      	movs	r3, #1
    a932:	4013      	ands	r3, r2
    a934:	d003      	beq.n	a93e <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a936:	4b65      	ldr	r3, [pc, #404]	; (aacc <f_unlink+0x23c>)
    a938:	18fb      	adds	r3, r7, r3
    a93a:	2207      	movs	r2, #7
    a93c:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a93e:	2398      	movs	r3, #152	; 0x98
    a940:	009b      	lsls	r3, r3, #2
    a942:	18fb      	adds	r3, r7, r3
    a944:	681b      	ldr	r3, [r3, #0]
    a946:	3315      	adds	r3, #21
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	021b      	lsls	r3, r3, #8
    a94c:	b21a      	sxth	r2, r3
    a94e:	2398      	movs	r3, #152	; 0x98
    a950:	009b      	lsls	r3, r3, #2
    a952:	18fb      	adds	r3, r7, r3
    a954:	681b      	ldr	r3, [r3, #0]
    a956:	3314      	adds	r3, #20
    a958:	781b      	ldrb	r3, [r3, #0]
    a95a:	b21b      	sxth	r3, r3
    a95c:	4313      	orrs	r3, r2
    a95e:	b21b      	sxth	r3, r3
    a960:	b29b      	uxth	r3, r3
    a962:	041b      	lsls	r3, r3, #16
    a964:	2298      	movs	r2, #152	; 0x98
    a966:	0092      	lsls	r2, r2, #2
    a968:	18ba      	adds	r2, r7, r2
    a96a:	6812      	ldr	r2, [r2, #0]
    a96c:	321b      	adds	r2, #27
    a96e:	7812      	ldrb	r2, [r2, #0]
    a970:	0212      	lsls	r2, r2, #8
    a972:	b211      	sxth	r1, r2
    a974:	2298      	movs	r2, #152	; 0x98
    a976:	0092      	lsls	r2, r2, #2
    a978:	18ba      	adds	r2, r7, r2
    a97a:	6812      	ldr	r2, [r2, #0]
    a97c:	321a      	adds	r2, #26
    a97e:	7812      	ldrb	r2, [r2, #0]
    a980:	b212      	sxth	r2, r2
    a982:	430a      	orrs	r2, r1
    a984:	b212      	sxth	r2, r2
    a986:	b292      	uxth	r2, r2
    a988:	4313      	orrs	r3, r2
    a98a:	2297      	movs	r2, #151	; 0x97
    a98c:	0092      	lsls	r2, r2, #2
    a98e:	18ba      	adds	r2, r7, r2
    a990:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    a992:	4b4e      	ldr	r3, [pc, #312]	; (aacc <f_unlink+0x23c>)
    a994:	18fb      	adds	r3, r7, r3
    a996:	781b      	ldrb	r3, [r3, #0]
    a998:	2b00      	cmp	r3, #0
    a99a:	d152      	bne.n	aa42 <f_unlink+0x1b2>
    a99c:	2398      	movs	r3, #152	; 0x98
    a99e:	009b      	lsls	r3, r3, #2
    a9a0:	18fb      	adds	r3, r7, r3
    a9a2:	681b      	ldr	r3, [r3, #0]
    a9a4:	330b      	adds	r3, #11
    a9a6:	781b      	ldrb	r3, [r3, #0]
    a9a8:	001a      	movs	r2, r3
    a9aa:	2310      	movs	r3, #16
    a9ac:	4013      	ands	r3, r2
    a9ae:	d048      	beq.n	aa42 <f_unlink+0x1b2>
				if (dclst < 2) {
    a9b0:	2397      	movs	r3, #151	; 0x97
    a9b2:	009b      	lsls	r3, r3, #2
    a9b4:	18fb      	adds	r3, r7, r3
    a9b6:	681b      	ldr	r3, [r3, #0]
    a9b8:	2b01      	cmp	r3, #1
    a9ba:	d804      	bhi.n	a9c6 <f_unlink+0x136>
					res = FR_INT_ERR;
    a9bc:	4b43      	ldr	r3, [pc, #268]	; (aacc <f_unlink+0x23c>)
    a9be:	18fb      	adds	r3, r7, r3
    a9c0:	2202      	movs	r2, #2
    a9c2:	701a      	strb	r2, [r3, #0]
    a9c4:	e03d      	b.n	aa42 <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    a9c6:	238e      	movs	r3, #142	; 0x8e
    a9c8:	009b      	lsls	r3, r3, #2
    a9ca:	18f9      	adds	r1, r7, r3
    a9cc:	2385      	movs	r3, #133	; 0x85
    a9ce:	009b      	lsls	r3, r3, #2
    a9d0:	18fb      	adds	r3, r7, r3
    a9d2:	2224      	movs	r2, #36	; 0x24
    a9d4:	0018      	movs	r0, r3
    a9d6:	4b40      	ldr	r3, [pc, #256]	; (aad8 <f_unlink+0x248>)
    a9d8:	4798      	blx	r3
					sdj.sclust = dclst;
    a9da:	2385      	movs	r3, #133	; 0x85
    a9dc:	009b      	lsls	r3, r3, #2
    a9de:	18fb      	adds	r3, r7, r3
    a9e0:	2297      	movs	r2, #151	; 0x97
    a9e2:	0092      	lsls	r2, r2, #2
    a9e4:	18ba      	adds	r2, r7, r2
    a9e6:	6812      	ldr	r2, [r2, #0]
    a9e8:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    a9ea:	4b38      	ldr	r3, [pc, #224]	; (aacc <f_unlink+0x23c>)
    a9ec:	18fc      	adds	r4, r7, r3
    a9ee:	2385      	movs	r3, #133	; 0x85
    a9f0:	009b      	lsls	r3, r3, #2
    a9f2:	18fb      	adds	r3, r7, r3
    a9f4:	2102      	movs	r1, #2
    a9f6:	0018      	movs	r0, r3
    a9f8:	4b38      	ldr	r3, [pc, #224]	; (aadc <f_unlink+0x24c>)
    a9fa:	4798      	blx	r3
    a9fc:	0003      	movs	r3, r0
    a9fe:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    aa00:	4b32      	ldr	r3, [pc, #200]	; (aacc <f_unlink+0x23c>)
    aa02:	18fb      	adds	r3, r7, r3
    aa04:	781b      	ldrb	r3, [r3, #0]
    aa06:	2b00      	cmp	r3, #0
    aa08:	d11b      	bne.n	aa42 <f_unlink+0x1b2>
						res = dir_read(&sdj);
    aa0a:	4b30      	ldr	r3, [pc, #192]	; (aacc <f_unlink+0x23c>)
    aa0c:	18fc      	adds	r4, r7, r3
    aa0e:	2385      	movs	r3, #133	; 0x85
    aa10:	009b      	lsls	r3, r3, #2
    aa12:	18fb      	adds	r3, r7, r3
    aa14:	0018      	movs	r0, r3
    aa16:	4b32      	ldr	r3, [pc, #200]	; (aae0 <f_unlink+0x250>)
    aa18:	4798      	blx	r3
    aa1a:	0003      	movs	r3, r0
    aa1c:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    aa1e:	4b2b      	ldr	r3, [pc, #172]	; (aacc <f_unlink+0x23c>)
    aa20:	18fb      	adds	r3, r7, r3
    aa22:	781b      	ldrb	r3, [r3, #0]
    aa24:	2b00      	cmp	r3, #0
    aa26:	d103      	bne.n	aa30 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    aa28:	4b28      	ldr	r3, [pc, #160]	; (aacc <f_unlink+0x23c>)
    aa2a:	18fb      	adds	r3, r7, r3
    aa2c:	2207      	movs	r2, #7
    aa2e:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    aa30:	4b26      	ldr	r3, [pc, #152]	; (aacc <f_unlink+0x23c>)
    aa32:	18fb      	adds	r3, r7, r3
    aa34:	781b      	ldrb	r3, [r3, #0]
    aa36:	2b04      	cmp	r3, #4
    aa38:	d103      	bne.n	aa42 <f_unlink+0x1b2>
    aa3a:	4b24      	ldr	r3, [pc, #144]	; (aacc <f_unlink+0x23c>)
    aa3c:	18fb      	adds	r3, r7, r3
    aa3e:	2200      	movs	r2, #0
    aa40:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    aa42:	4b22      	ldr	r3, [pc, #136]	; (aacc <f_unlink+0x23c>)
    aa44:	18fb      	adds	r3, r7, r3
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d134      	bne.n	aab6 <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    aa4c:	4b1f      	ldr	r3, [pc, #124]	; (aacc <f_unlink+0x23c>)
    aa4e:	18fc      	adds	r4, r7, r3
    aa50:	238e      	movs	r3, #142	; 0x8e
    aa52:	009b      	lsls	r3, r3, #2
    aa54:	18fb      	adds	r3, r7, r3
    aa56:	0018      	movs	r0, r3
    aa58:	4b22      	ldr	r3, [pc, #136]	; (aae4 <f_unlink+0x254>)
    aa5a:	4798      	blx	r3
    aa5c:	0003      	movs	r3, r0
    aa5e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    aa60:	4b1a      	ldr	r3, [pc, #104]	; (aacc <f_unlink+0x23c>)
    aa62:	18fb      	adds	r3, r7, r3
    aa64:	781b      	ldrb	r3, [r3, #0]
    aa66:	2b00      	cmp	r3, #0
    aa68:	d125      	bne.n	aab6 <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    aa6a:	2397      	movs	r3, #151	; 0x97
    aa6c:	009b      	lsls	r3, r3, #2
    aa6e:	18fb      	adds	r3, r7, r3
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	2b00      	cmp	r3, #0
    aa74:	d00f      	beq.n	aa96 <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    aa76:	238e      	movs	r3, #142	; 0x8e
    aa78:	009b      	lsls	r3, r3, #2
    aa7a:	18fb      	adds	r3, r7, r3
    aa7c:	681b      	ldr	r3, [r3, #0]
    aa7e:	4a13      	ldr	r2, [pc, #76]	; (aacc <f_unlink+0x23c>)
    aa80:	18bc      	adds	r4, r7, r2
    aa82:	2297      	movs	r2, #151	; 0x97
    aa84:	0092      	lsls	r2, r2, #2
    aa86:	18ba      	adds	r2, r7, r2
    aa88:	6812      	ldr	r2, [r2, #0]
    aa8a:	0011      	movs	r1, r2
    aa8c:	0018      	movs	r0, r3
    aa8e:	4b16      	ldr	r3, [pc, #88]	; (aae8 <f_unlink+0x258>)
    aa90:	4798      	blx	r3
    aa92:	0003      	movs	r3, r0
    aa94:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    aa96:	4b0d      	ldr	r3, [pc, #52]	; (aacc <f_unlink+0x23c>)
    aa98:	18fb      	adds	r3, r7, r3
    aa9a:	781b      	ldrb	r3, [r3, #0]
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d10a      	bne.n	aab6 <f_unlink+0x226>
    aaa0:	238e      	movs	r3, #142	; 0x8e
    aaa2:	009b      	lsls	r3, r3, #2
    aaa4:	18fb      	adds	r3, r7, r3
    aaa6:	681b      	ldr	r3, [r3, #0]
    aaa8:	4a08      	ldr	r2, [pc, #32]	; (aacc <f_unlink+0x23c>)
    aaaa:	18bc      	adds	r4, r7, r2
    aaac:	0018      	movs	r0, r3
    aaae:	4b0f      	ldr	r3, [pc, #60]	; (aaec <f_unlink+0x25c>)
    aab0:	4798      	blx	r3
    aab2:	0003      	movs	r3, r0
    aab4:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    aab6:	4b05      	ldr	r3, [pc, #20]	; (aacc <f_unlink+0x23c>)
    aab8:	18fb      	adds	r3, r7, r3
    aaba:	781b      	ldrb	r3, [r3, #0]
}
    aabc:	0018      	movs	r0, r3
    aabe:	46bd      	mov	sp, r7
    aac0:	239b      	movs	r3, #155	; 0x9b
    aac2:	009b      	lsls	r3, r3, #2
    aac4:	449d      	add	sp, r3
    aac6:	bd90      	pop	{r4, r7, pc}
    aac8:	fffffd94 	.word	0xfffffd94
    aacc:	00000267 	.word	0x00000267
    aad0:	00009511 	.word	0x00009511
    aad4:	00009305 	.word	0x00009305
    aad8:	0000762d 	.word	0x0000762d
    aadc:	00007f55 	.word	0x00007f55
    aae0:	000088b9 	.word	0x000088b9
    aae4:	00008de5 	.word	0x00008de5
    aae8:	00007d51 	.word	0x00007d51
    aaec:	000077d9 	.word	0x000077d9

0000aaf0 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    aaf0:	b590      	push	{r4, r7, lr}
    aaf2:	b087      	sub	sp, #28
    aaf4:	af00      	add	r7, sp, #0
    aaf6:	0002      	movs	r2, r0
    aaf8:	6039      	str	r1, [r7, #0]
    aafa:	1dfb      	adds	r3, r7, #7
    aafc:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    aafe:	230c      	movs	r3, #12
    ab00:	18fb      	adds	r3, r7, r3
    ab02:	1dfa      	adds	r2, r7, #7
    ab04:	7812      	ldrb	r2, [r2, #0]
    ab06:	701a      	strb	r2, [r3, #0]
	btw = 1;
    ab08:	2301      	movs	r3, #1
    ab0a:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    ab0c:	2310      	movs	r3, #16
    ab0e:	18fb      	adds	r3, r7, r3
    ab10:	697a      	ldr	r2, [r7, #20]
    ab12:	210c      	movs	r1, #12
    ab14:	1879      	adds	r1, r7, r1
    ab16:	6838      	ldr	r0, [r7, #0]
    ab18:	4c06      	ldr	r4, [pc, #24]	; (ab34 <f_putc+0x44>)
    ab1a:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    ab1c:	693a      	ldr	r2, [r7, #16]
    ab1e:	697b      	ldr	r3, [r7, #20]
    ab20:	429a      	cmp	r2, r3
    ab22:	d101      	bne.n	ab28 <f_putc+0x38>
    ab24:	2301      	movs	r3, #1
    ab26:	e001      	b.n	ab2c <f_putc+0x3c>
    ab28:	2301      	movs	r3, #1
    ab2a:	425b      	negs	r3, r3
}
    ab2c:	0018      	movs	r0, r3
    ab2e:	46bd      	mov	sp, r7
    ab30:	b007      	add	sp, #28
    ab32:	bd90      	pop	{r4, r7, pc}
    ab34:	0000a385 	.word	0x0000a385

0000ab38 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    ab38:	b580      	push	{r7, lr}
    ab3a:	b084      	sub	sp, #16
    ab3c:	af00      	add	r7, sp, #0
    ab3e:	6078      	str	r0, [r7, #4]
    ab40:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    ab42:	2300      	movs	r3, #0
    ab44:	60fb      	str	r3, [r7, #12]
    ab46:	e012      	b.n	ab6e <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    ab48:	687b      	ldr	r3, [r7, #4]
    ab4a:	781b      	ldrb	r3, [r3, #0]
    ab4c:	683a      	ldr	r2, [r7, #0]
    ab4e:	0011      	movs	r1, r2
    ab50:	0018      	movs	r0, r3
    ab52:	4b0b      	ldr	r3, [pc, #44]	; (ab80 <f_puts+0x48>)
    ab54:	4798      	blx	r3
    ab56:	0003      	movs	r3, r0
    ab58:	3301      	adds	r3, #1
    ab5a:	d102      	bne.n	ab62 <f_puts+0x2a>
    ab5c:	2301      	movs	r3, #1
    ab5e:	425b      	negs	r3, r3
    ab60:	e00a      	b.n	ab78 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	3301      	adds	r3, #1
    ab66:	607b      	str	r3, [r7, #4]
    ab68:	68fb      	ldr	r3, [r7, #12]
    ab6a:	3301      	adds	r3, #1
    ab6c:	60fb      	str	r3, [r7, #12]
    ab6e:	687b      	ldr	r3, [r7, #4]
    ab70:	781b      	ldrb	r3, [r3, #0]
    ab72:	2b00      	cmp	r3, #0
    ab74:	d1e8      	bne.n	ab48 <f_puts+0x10>
	}
	return n;
    ab76:	68fb      	ldr	r3, [r7, #12]
}
    ab78:	0018      	movs	r0, r3
    ab7a:	46bd      	mov	sp, r7
    ab7c:	b004      	add	sp, #16
    ab7e:	bd80      	pop	{r7, pc}
    ab80:	0000aaf1 	.word	0x0000aaf1

0000ab84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b084      	sub	sp, #16
    ab88:	af00      	add	r7, sp, #0
    ab8a:	0002      	movs	r2, r0
    ab8c:	6039      	str	r1, [r7, #0]
    ab8e:	1dbb      	adds	r3, r7, #6
    ab90:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    ab92:	1dbb      	adds	r3, r7, #6
    ab94:	881b      	ldrh	r3, [r3, #0]
    ab96:	2b7f      	cmp	r3, #127	; 0x7f
    ab98:	d805      	bhi.n	aba6 <ff_convert+0x22>
		c = src;
    ab9a:	230e      	movs	r3, #14
    ab9c:	18fb      	adds	r3, r7, r3
    ab9e:	1dba      	adds	r2, r7, #6
    aba0:	8812      	ldrh	r2, [r2, #0]
    aba2:	801a      	strh	r2, [r3, #0]
    aba4:	e03a      	b.n	ac1c <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    aba6:	683b      	ldr	r3, [r7, #0]
    aba8:	2b00      	cmp	r3, #0
    abaa:	d010      	beq.n	abce <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    abac:	1dbb      	adds	r3, r7, #6
    abae:	881b      	ldrh	r3, [r3, #0]
    abb0:	2bff      	cmp	r3, #255	; 0xff
    abb2:	d807      	bhi.n	abc4 <ff_convert+0x40>
    abb4:	1dbb      	adds	r3, r7, #6
    abb6:	881b      	ldrh	r3, [r3, #0]
    abb8:	3b80      	subs	r3, #128	; 0x80
    abba:	001a      	movs	r2, r3
    abbc:	4b1b      	ldr	r3, [pc, #108]	; (ac2c <ff_convert+0xa8>)
    abbe:	0052      	lsls	r2, r2, #1
    abc0:	5ad2      	ldrh	r2, [r2, r3]
    abc2:	e000      	b.n	abc6 <ff_convert+0x42>
    abc4:	2200      	movs	r2, #0
    abc6:	230e      	movs	r3, #14
    abc8:	18fb      	adds	r3, r7, r3
    abca:	801a      	strh	r2, [r3, #0]
    abcc:	e026      	b.n	ac1c <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    abce:	230e      	movs	r3, #14
    abd0:	18fb      	adds	r3, r7, r3
    abd2:	2200      	movs	r2, #0
    abd4:	801a      	strh	r2, [r3, #0]
    abd6:	e010      	b.n	abfa <ff_convert+0x76>
				if (src == Tbl[c]) break;
    abd8:	230e      	movs	r3, #14
    abda:	18fb      	adds	r3, r7, r3
    abdc:	881a      	ldrh	r2, [r3, #0]
    abde:	4b13      	ldr	r3, [pc, #76]	; (ac2c <ff_convert+0xa8>)
    abe0:	0052      	lsls	r2, r2, #1
    abe2:	5ad3      	ldrh	r3, [r2, r3]
    abe4:	1dba      	adds	r2, r7, #6
    abe6:	8812      	ldrh	r2, [r2, #0]
    abe8:	429a      	cmp	r2, r3
    abea:	d00c      	beq.n	ac06 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    abec:	230e      	movs	r3, #14
    abee:	18fb      	adds	r3, r7, r3
    abf0:	881a      	ldrh	r2, [r3, #0]
    abf2:	230e      	movs	r3, #14
    abf4:	18fb      	adds	r3, r7, r3
    abf6:	3201      	adds	r2, #1
    abf8:	801a      	strh	r2, [r3, #0]
    abfa:	230e      	movs	r3, #14
    abfc:	18fb      	adds	r3, r7, r3
    abfe:	881b      	ldrh	r3, [r3, #0]
    ac00:	2b7f      	cmp	r3, #127	; 0x7f
    ac02:	d9e9      	bls.n	abd8 <ff_convert+0x54>
    ac04:	e000      	b.n	ac08 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    ac06:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    ac08:	230e      	movs	r3, #14
    ac0a:	18fb      	adds	r3, r7, r3
    ac0c:	881b      	ldrh	r3, [r3, #0]
    ac0e:	3380      	adds	r3, #128	; 0x80
    ac10:	b29a      	uxth	r2, r3
    ac12:	230e      	movs	r3, #14
    ac14:	18fb      	adds	r3, r7, r3
    ac16:	21ff      	movs	r1, #255	; 0xff
    ac18:	400a      	ands	r2, r1
    ac1a:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    ac1c:	230e      	movs	r3, #14
    ac1e:	18fb      	adds	r3, r7, r3
    ac20:	881b      	ldrh	r3, [r3, #0]
}
    ac22:	0018      	movs	r0, r3
    ac24:	46bd      	mov	sp, r7
    ac26:	b004      	add	sp, #16
    ac28:	bd80      	pop	{r7, pc}
    ac2a:	46c0      	nop			; (mov r8, r8)
    ac2c:	0000cb5c 	.word	0x0000cb5c

0000ac30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    ac30:	b580      	push	{r7, lr}
    ac32:	b084      	sub	sp, #16
    ac34:	af00      	add	r7, sp, #0
    ac36:	0002      	movs	r2, r0
    ac38:	1dbb      	adds	r3, r7, #6
    ac3a:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    ac3c:	2300      	movs	r3, #0
    ac3e:	60fb      	str	r3, [r7, #12]
    ac40:	e002      	b.n	ac48 <ff_wtoupper+0x18>
    ac42:	68fb      	ldr	r3, [r7, #12]
    ac44:	3301      	adds	r3, #1
    ac46:	60fb      	str	r3, [r7, #12]
    ac48:	4b0f      	ldr	r3, [pc, #60]	; (ac88 <ff_wtoupper+0x58>)
    ac4a:	68fa      	ldr	r2, [r7, #12]
    ac4c:	0052      	lsls	r2, r2, #1
    ac4e:	5ad3      	ldrh	r3, [r2, r3]
    ac50:	2b00      	cmp	r3, #0
    ac52:	d007      	beq.n	ac64 <ff_wtoupper+0x34>
    ac54:	4b0c      	ldr	r3, [pc, #48]	; (ac88 <ff_wtoupper+0x58>)
    ac56:	68fa      	ldr	r2, [r7, #12]
    ac58:	0052      	lsls	r2, r2, #1
    ac5a:	5ad3      	ldrh	r3, [r2, r3]
    ac5c:	1dba      	adds	r2, r7, #6
    ac5e:	8812      	ldrh	r2, [r2, #0]
    ac60:	429a      	cmp	r2, r3
    ac62:	d1ee      	bne.n	ac42 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    ac64:	4b08      	ldr	r3, [pc, #32]	; (ac88 <ff_wtoupper+0x58>)
    ac66:	68fa      	ldr	r2, [r7, #12]
    ac68:	0052      	lsls	r2, r2, #1
    ac6a:	5ad3      	ldrh	r3, [r2, r3]
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d004      	beq.n	ac7a <ff_wtoupper+0x4a>
    ac70:	4b06      	ldr	r3, [pc, #24]	; (ac8c <ff_wtoupper+0x5c>)
    ac72:	68fa      	ldr	r2, [r7, #12]
    ac74:	0052      	lsls	r2, r2, #1
    ac76:	5ad3      	ldrh	r3, [r2, r3]
    ac78:	e001      	b.n	ac7e <ff_wtoupper+0x4e>
    ac7a:	1dbb      	adds	r3, r7, #6
    ac7c:	881b      	ldrh	r3, [r3, #0]
}
    ac7e:	0018      	movs	r0, r3
    ac80:	46bd      	mov	sp, r7
    ac82:	b004      	add	sp, #16
    ac84:	bd80      	pop	{r7, pc}
    ac86:	46c0      	nop			; (mov r8, r8)
    ac88:	0000cc5c 	.word	0x0000cc5c
    ac8c:	0000ce3c 	.word	0x0000ce3c

0000ac90 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    ac90:	b580      	push	{r7, lr}
    ac92:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    ac94:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ac98:	4b02      	ldr	r3, [pc, #8]	; (aca4 <NVIC_SystemReset+0x14>)
    ac9a:	4a03      	ldr	r2, [pc, #12]	; (aca8 <NVIC_SystemReset+0x18>)
    ac9c:	60da      	str	r2, [r3, #12]
    ac9e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    aca2:	e7fe      	b.n	aca2 <NVIC_SystemReset+0x12>
    aca4:	e000ed00 	.word	0xe000ed00
    aca8:	05fa0004 	.word	0x05fa0004

0000acac <system_apb_clock_set_mask>:
{
    acac:	b580      	push	{r7, lr}
    acae:	b082      	sub	sp, #8
    acb0:	af00      	add	r7, sp, #0
    acb2:	0002      	movs	r2, r0
    acb4:	6039      	str	r1, [r7, #0]
    acb6:	1dfb      	adds	r3, r7, #7
    acb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    acba:	1dfb      	adds	r3, r7, #7
    acbc:	781b      	ldrb	r3, [r3, #0]
    acbe:	2b01      	cmp	r3, #1
    acc0:	d00a      	beq.n	acd8 <system_apb_clock_set_mask+0x2c>
    acc2:	2b02      	cmp	r3, #2
    acc4:	d00f      	beq.n	ace6 <system_apb_clock_set_mask+0x3a>
    acc6:	2b00      	cmp	r3, #0
    acc8:	d114      	bne.n	acf4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    acca:	4b0e      	ldr	r3, [pc, #56]	; (ad04 <system_apb_clock_set_mask+0x58>)
    accc:	4a0d      	ldr	r2, [pc, #52]	; (ad04 <system_apb_clock_set_mask+0x58>)
    acce:	6991      	ldr	r1, [r2, #24]
    acd0:	683a      	ldr	r2, [r7, #0]
    acd2:	430a      	orrs	r2, r1
    acd4:	619a      	str	r2, [r3, #24]
			break;
    acd6:	e00f      	b.n	acf8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    acd8:	4b0a      	ldr	r3, [pc, #40]	; (ad04 <system_apb_clock_set_mask+0x58>)
    acda:	4a0a      	ldr	r2, [pc, #40]	; (ad04 <system_apb_clock_set_mask+0x58>)
    acdc:	69d1      	ldr	r1, [r2, #28]
    acde:	683a      	ldr	r2, [r7, #0]
    ace0:	430a      	orrs	r2, r1
    ace2:	61da      	str	r2, [r3, #28]
			break;
    ace4:	e008      	b.n	acf8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ace6:	4b07      	ldr	r3, [pc, #28]	; (ad04 <system_apb_clock_set_mask+0x58>)
    ace8:	4a06      	ldr	r2, [pc, #24]	; (ad04 <system_apb_clock_set_mask+0x58>)
    acea:	6a11      	ldr	r1, [r2, #32]
    acec:	683a      	ldr	r2, [r7, #0]
    acee:	430a      	orrs	r2, r1
    acf0:	621a      	str	r2, [r3, #32]
			break;
    acf2:	e001      	b.n	acf8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    acf4:	2317      	movs	r3, #23
    acf6:	e000      	b.n	acfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    acf8:	2300      	movs	r3, #0
}
    acfa:	0018      	movs	r0, r3
    acfc:	46bd      	mov	sp, r7
    acfe:	b002      	add	sp, #8
    ad00:	bd80      	pop	{r7, pc}
    ad02:	46c0      	nop			; (mov r8, r8)
    ad04:	40000400 	.word	0x40000400

0000ad08 <nvm_get_config_defaults>:
{
    ad08:	b580      	push	{r7, lr}
    ad0a:	b082      	sub	sp, #8
    ad0c:	af00      	add	r7, sp, #0
    ad0e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ad10:	687b      	ldr	r3, [r7, #4]
    ad12:	2200      	movs	r2, #0
    ad14:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    ad16:	687b      	ldr	r3, [r7, #4]
    ad18:	2201      	movs	r2, #1
    ad1a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ad1c:	4b08      	ldr	r3, [pc, #32]	; (ad40 <nvm_get_config_defaults+0x38>)
    ad1e:	685b      	ldr	r3, [r3, #4]
    ad20:	06db      	lsls	r3, r3, #27
    ad22:	0f1b      	lsrs	r3, r3, #28
    ad24:	b2db      	uxtb	r3, r3
    ad26:	001a      	movs	r2, r3
    ad28:	687b      	ldr	r3, [r7, #4]
    ad2a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    ad2c:	687b      	ldr	r3, [r7, #4]
    ad2e:	2200      	movs	r2, #0
    ad30:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ad32:	687b      	ldr	r3, [r7, #4]
    ad34:	2200      	movs	r2, #0
    ad36:	711a      	strb	r2, [r3, #4]
}
    ad38:	46c0      	nop			; (mov r8, r8)
    ad3a:	46bd      	mov	sp, r7
    ad3c:	b002      	add	sp, #8
    ad3e:	bd80      	pop	{r7, pc}
    ad40:	41004000 	.word	0x41004000

0000ad44 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    ad44:	b580      	push	{r7, lr}
    ad46:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    ad48:	4b02      	ldr	r3, [pc, #8]	; (ad54 <system_reset+0x10>)
    ad4a:	4798      	blx	r3
}
    ad4c:	46c0      	nop			; (mov r8, r8)
    ad4e:	46bd      	mov	sp, r7
    ad50:	bd80      	pop	{r7, pc}
    ad52:	46c0      	nop			; (mov r8, r8)
    ad54:	0000ac91 	.word	0x0000ac91

0000ad58 <system_interrupt_enable_global>:
{
    ad58:	b580      	push	{r7, lr}
    ad5a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    ad5c:	4b04      	ldr	r3, [pc, #16]	; (ad70 <system_interrupt_enable_global+0x18>)
    ad5e:	2201      	movs	r2, #1
    ad60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    ad62:	f3bf 8f5f 	dmb	sy
    ad66:	b662      	cpsie	i
}
    ad68:	46c0      	nop			; (mov r8, r8)
    ad6a:	46bd      	mov	sp, r7
    ad6c:	bd80      	pop	{r7, pc}
    ad6e:	46c0      	nop			; (mov r8, r8)
    ad70:	20000009 	.word	0x20000009

0000ad74 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    ad74:	b580      	push	{r7, lr}
    ad76:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    ad78:	2102      	movs	r1, #2
    ad7a:	2001      	movs	r0, #1
    ad7c:	4b02      	ldr	r3, [pc, #8]	; (ad88 <dsu_crc32_init+0x14>)
    ad7e:	4798      	blx	r3
#endif

}
    ad80:	46c0      	nop			; (mov r8, r8)
    ad82:	46bd      	mov	sp, r7
    ad84:	bd80      	pop	{r7, pc}
    ad86:	46c0      	nop			; (mov r8, r8)
    ad88:	0000acad 	.word	0x0000acad

0000ad8c <nvm_update>:
* @param    bytes_to_read - number of bytes to be read from the SDcard.
* @return	Unused (ANSI-C compatibility).
* @note
*****************************************************************************/
FRESULT nvm_update(uint32_t row_no, uint32_t bytes_to_read)
{
    ad8c:	b590      	push	{r4, r7, lr}
    ad8e:	b0e1      	sub	sp, #388	; 0x184
    ad90:	af02      	add	r7, sp, #8
    ad92:	6078      	str	r0, [r7, #4]
    ad94:	6039      	str	r1, [r7, #0]
uint8_t readBuffer[256]; //Buffer the size of one row
int numBytesRead = 0;
    ad96:	2300      	movs	r3, #0
    ad98:	65fb      	str	r3, [r7, #92]	; 0x5c
int numberBytesTotal = 0;
    ad9a:	2300      	movs	r3, #0
    ad9c:	22b6      	movs	r2, #182	; 0xb6
    ad9e:	0052      	lsls	r2, r2, #1
    ada0:	18ba      	adds	r2, r7, r2
    ada2:	6013      	str	r3, [r2, #0]

enum status_code nvmError = nvm_erase_row(APP_START_ADDRESS + (row_no)*NVM_ROW_FACTOR);
    ada4:	687b      	ldr	r3, [r7, #4]
    ada6:	3321      	adds	r3, #33	; 0x21
    ada8:	33ff      	adds	r3, #255	; 0xff
    adaa:	021b      	lsls	r3, r3, #8
    adac:	226c      	movs	r2, #108	; 0x6c
    adae:	32ff      	adds	r2, #255	; 0xff
    adb0:	18bc      	adds	r4, r7, r2
    adb2:	0018      	movs	r0, r3
    adb4:	4b83      	ldr	r3, [pc, #524]	; (afc4 <nvm_update+0x238>)
    adb6:	4798      	blx	r3
    adb8:	0003      	movs	r3, r0
    adba:	7023      	strb	r3, [r4, #0]
if(nvmError != STATUS_OK)
    adbc:	236c      	movs	r3, #108	; 0x6c
    adbe:	33ff      	adds	r3, #255	; 0xff
    adc0:	18fb      	adds	r3, r7, r3
    adc2:	781b      	ldrb	r3, [r3, #0]
    adc4:	2b00      	cmp	r3, #0
    adc6:	d004      	beq.n	add2 <nvm_update+0x46>
{
SerialConsoleWriteString("Erase error");
    adc8:	4b7f      	ldr	r3, [pc, #508]	; (afc8 <nvm_update+0x23c>)
    adca:	0018      	movs	r0, r3
    adcc:	4b7f      	ldr	r3, [pc, #508]	; (afcc <nvm_update+0x240>)
    adce:	4798      	blx	r3
goto error_exit;
    add0:	e0f2      	b.n	afb8 <nvm_update+0x22c>
}

//Make sure it got erased - we read the page. Erasure in NVM is an 0xFF
for(int iter = 0; iter < NVM_ROW_FACTOR; iter++)
    add2:	2300      	movs	r3, #0
    add4:	22ba      	movs	r2, #186	; 0xba
    add6:	0052      	lsls	r2, r2, #1
    add8:	18ba      	adds	r2, r7, r2
    adda:	6013      	str	r3, [r2, #0]
    addc:	e021      	b.n	ae22 <nvm_update+0x96>
{
char *a = (char *)(APP_START_ADDRESS + row_no*NVM_ROW_FACTOR + iter); //Pointer pointing to address APP_START_ADDRESS
    adde:	687b      	ldr	r3, [r7, #4]
    ade0:	3321      	adds	r3, #33	; 0x21
    ade2:	33ff      	adds	r3, #255	; 0xff
    ade4:	021a      	lsls	r2, r3, #8
    ade6:	23ba      	movs	r3, #186	; 0xba
    ade8:	005b      	lsls	r3, r3, #1
    adea:	18fb      	adds	r3, r7, r3
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	18d3      	adds	r3, r2, r3
    adf0:	22b2      	movs	r2, #178	; 0xb2
    adf2:	0052      	lsls	r2, r2, #1
    adf4:	18ba      	adds	r2, r7, r2
    adf6:	6013      	str	r3, [r2, #0]
if(*a != 0xFF)
    adf8:	23b2      	movs	r3, #178	; 0xb2
    adfa:	005b      	lsls	r3, r3, #1
    adfc:	18fb      	adds	r3, r7, r3
    adfe:	681b      	ldr	r3, [r3, #0]
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	2bff      	cmp	r3, #255	; 0xff
    ae04:	d004      	beq.n	ae10 <nvm_update+0x84>
{
SerialConsoleWriteString("Error - test page is not erased!");
    ae06:	4b72      	ldr	r3, [pc, #456]	; (afd0 <nvm_update+0x244>)
    ae08:	0018      	movs	r0, r3
    ae0a:	4b70      	ldr	r3, [pc, #448]	; (afcc <nvm_update+0x240>)
    ae0c:	4798      	blx	r3
break;
    ae0e:	e00e      	b.n	ae2e <nvm_update+0xa2>
for(int iter = 0; iter < NVM_ROW_FACTOR; iter++)
    ae10:	23ba      	movs	r3, #186	; 0xba
    ae12:	005b      	lsls	r3, r3, #1
    ae14:	18fb      	adds	r3, r7, r3
    ae16:	681b      	ldr	r3, [r3, #0]
    ae18:	3301      	adds	r3, #1
    ae1a:	22ba      	movs	r2, #186	; 0xba
    ae1c:	0052      	lsls	r2, r2, #1
    ae1e:	18ba      	adds	r2, r7, r2
    ae20:	6013      	str	r3, [r2, #0]
    ae22:	23ba      	movs	r3, #186	; 0xba
    ae24:	005b      	lsls	r3, r3, #1
    ae26:	18fb      	adds	r3, r7, r3
    ae28:	681b      	ldr	r3, [r3, #0]
    ae2a:	2bff      	cmp	r3, #255	; 0xff
    ae2c:	ddd7      	ble.n	adde <nvm_update+0x52>
}
}

res = f_read(&file_object, readBuffer, bytes_to_read, &numBytesRead);
    ae2e:	235c      	movs	r3, #92	; 0x5c
    ae30:	18fb      	adds	r3, r7, r3
    ae32:	683a      	ldr	r2, [r7, #0]
    ae34:	2160      	movs	r1, #96	; 0x60
    ae36:	1879      	adds	r1, r7, r1
    ae38:	4866      	ldr	r0, [pc, #408]	; (afd4 <nvm_update+0x248>)
    ae3a:	4c67      	ldr	r4, [pc, #412]	; (afd8 <nvm_update+0x24c>)
    ae3c:	47a0      	blx	r4
    ae3e:	0003      	movs	r3, r0
    ae40:	001a      	movs	r2, r3
    ae42:	4b66      	ldr	r3, [pc, #408]	; (afdc <nvm_update+0x250>)
    ae44:	701a      	strb	r2, [r3, #0]
if (res != FR_OK)
    ae46:	4b65      	ldr	r3, [pc, #404]	; (afdc <nvm_update+0x250>)
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	d004      	beq.n	ae58 <nvm_update+0xcc>
{
SerialConsoleWriteString("Couldn't read from!\r\n");
    ae4e:	4b64      	ldr	r3, [pc, #400]	; (afe0 <nvm_update+0x254>)
    ae50:	0018      	movs	r0, r3
    ae52:	4b5e      	ldr	r3, [pc, #376]	; (afcc <nvm_update+0x240>)
    ae54:	4798      	blx	r3
goto error_exit;
    ae56:	e0af      	b.n	afb8 <nvm_update+0x22c>
}

//Write data to first row. Writes are per page, so we need four writes to write a complete row
numberBytesTotal += numBytesRead;
    ae58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ae5a:	22b6      	movs	r2, #182	; 0xb6
    ae5c:	0052      	lsls	r2, r2, #1
    ae5e:	18ba      	adds	r2, r7, r2
    ae60:	6812      	ldr	r2, [r2, #0]
    ae62:	18d3      	adds	r3, r2, r3
    ae64:	22b6      	movs	r2, #182	; 0xb6
    ae66:	0052      	lsls	r2, r2, #1
    ae68:	18ba      	adds	r2, r7, r2
    ae6a:	6013      	str	r3, [r2, #0]

for (int i = 0; i < NVM_ROW_FACTOR/NVM_PAGE_FACTOR; i++ ) {
    ae6c:	2300      	movs	r3, #0
    ae6e:	22b8      	movs	r2, #184	; 0xb8
    ae70:	0052      	lsls	r2, r2, #1
    ae72:	18ba      	adds	r2, r7, r2
    ae74:	6013      	str	r3, [r2, #0]
    ae76:	e02b      	b.n	aed0 <nvm_update+0x144>
res = nvm_write_buffer (APP_START_ADDRESS + (row_no * NVM_ROW_FACTOR) + (i * NVM_PAGE_FACTOR),
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	3321      	adds	r3, #33	; 0x21
    ae7c:	33ff      	adds	r3, #255	; 0xff
    ae7e:	021b      	lsls	r3, r3, #8
    ae80:	22b8      	movs	r2, #184	; 0xb8
    ae82:	0052      	lsls	r2, r2, #1
    ae84:	18ba      	adds	r2, r7, r2
    ae86:	6812      	ldr	r2, [r2, #0]
    ae88:	0192      	lsls	r2, r2, #6
    ae8a:	1898      	adds	r0, r3, r2
&readBuffer[i*NVM_PAGE_FACTOR], NVM_PAGE_FACTOR);
    ae8c:	23b8      	movs	r3, #184	; 0xb8
    ae8e:	005b      	lsls	r3, r3, #1
    ae90:	18fb      	adds	r3, r7, r3
    ae92:	681b      	ldr	r3, [r3, #0]
    ae94:	019b      	lsls	r3, r3, #6
    ae96:	2260      	movs	r2, #96	; 0x60
    ae98:	18ba      	adds	r2, r7, r2
    ae9a:	18d3      	adds	r3, r2, r3
res = nvm_write_buffer (APP_START_ADDRESS + (row_no * NVM_ROW_FACTOR) + (i * NVM_PAGE_FACTOR),
    ae9c:	2240      	movs	r2, #64	; 0x40
    ae9e:	0019      	movs	r1, r3
    aea0:	4b50      	ldr	r3, [pc, #320]	; (afe4 <nvm_update+0x258>)
    aea2:	4798      	blx	r3
    aea4:	0003      	movs	r3, r0
    aea6:	001a      	movs	r2, r3
    aea8:	4b4c      	ldr	r3, [pc, #304]	; (afdc <nvm_update+0x250>)
    aeaa:	701a      	strb	r2, [r3, #0]
if (res != FR_OK)
    aeac:	4b4b      	ldr	r3, [pc, #300]	; (afdc <nvm_update+0x250>)
    aeae:	781b      	ldrb	r3, [r3, #0]
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	d004      	beq.n	aebe <nvm_update+0x132>
{
SerialConsoleWriteString("Couldn't write in the NVM memory!\r\n");
    aeb4:	4b4c      	ldr	r3, [pc, #304]	; (afe8 <nvm_update+0x25c>)
    aeb6:	0018      	movs	r0, r3
    aeb8:	4b44      	ldr	r3, [pc, #272]	; (afcc <nvm_update+0x240>)
    aeba:	4798      	blx	r3
goto error_exit;
    aebc:	e07c      	b.n	afb8 <nvm_update+0x22c>
for (int i = 0; i < NVM_ROW_FACTOR/NVM_PAGE_FACTOR; i++ ) {
    aebe:	23b8      	movs	r3, #184	; 0xb8
    aec0:	005b      	lsls	r3, r3, #1
    aec2:	18fb      	adds	r3, r7, r3
    aec4:	681b      	ldr	r3, [r3, #0]
    aec6:	3301      	adds	r3, #1
    aec8:	22b8      	movs	r2, #184	; 0xb8
    aeca:	0052      	lsls	r2, r2, #1
    aecc:	18ba      	adds	r2, r7, r2
    aece:	6013      	str	r3, [r2, #0]
    aed0:	23b8      	movs	r3, #184	; 0xb8
    aed2:	005b      	lsls	r3, r3, #1
    aed4:	18fb      	adds	r3, r7, r3
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	2b03      	cmp	r3, #3
    aeda:	ddcd      	ble.n	ae78 <nvm_update+0xec>

//Check out the NVM API at http://asf.atmel.com/docs/latest/samd21/html/group_asfdocsam0nvm_group.html#asfdoc_sam0_nvm_examples . It provides important information too!
//We will ask the NVM driver for information on the MCU (SAMD21)
struct nvm_parameters parameters;
char helpStr[64]; //Used to help print values
nvm_get_parameters (&parameters); //Get NVM parameters
    aedc:	2350      	movs	r3, #80	; 0x50
    aede:	18fb      	adds	r3, r7, r3
    aee0:	0018      	movs	r0, r3
    aee2:	4b42      	ldr	r3, [pc, #264]	; (afec <nvm_update+0x260>)
    aee4:	4798      	blx	r3

////CRC32 Calculation example: Please read http://asf.atmel.com/docs/latest/samd21/html/group_asfdocsam0driverscrc32_group.html
snprintf(helpStr, 63,"NVM Info: Number of Pages %d. Size of a page: %d bytes. \r\n", parameters.nvm_number_of_pages, parameters.page_size);
    aee6:	4b42      	ldr	r3, [pc, #264]	; (aff0 <nvm_update+0x264>)
    aee8:	22bc      	movs	r2, #188	; 0xbc
    aeea:	0052      	lsls	r2, r2, #1
    aeec:	4694      	mov	ip, r2
    aeee:	44bc      	add	ip, r7
    aef0:	4463      	add	r3, ip
    aef2:	885b      	ldrh	r3, [r3, #2]
    aef4:	0019      	movs	r1, r3
    aef6:	4b3e      	ldr	r3, [pc, #248]	; (aff0 <nvm_update+0x264>)
    aef8:	22bc      	movs	r2, #188	; 0xbc
    aefa:	0052      	lsls	r2, r2, #1
    aefc:	4694      	mov	ip, r2
    aefe:	44bc      	add	ip, r7
    af00:	4463      	add	r3, ip
    af02:	781b      	ldrb	r3, [r3, #0]
    af04:	4a3b      	ldr	r2, [pc, #236]	; (aff4 <nvm_update+0x268>)
    af06:	2010      	movs	r0, #16
    af08:	1838      	adds	r0, r7, r0
    af0a:	9300      	str	r3, [sp, #0]
    af0c:	000b      	movs	r3, r1
    af0e:	213f      	movs	r1, #63	; 0x3f
    af10:	4c39      	ldr	r4, [pc, #228]	; (aff8 <nvm_update+0x26c>)
    af12:	47a0      	blx	r4
SerialConsoleWriteString(helpStr);
    af14:	2310      	movs	r3, #16
    af16:	18fb      	adds	r3, r7, r3
    af18:	0018      	movs	r0, r3
    af1a:	4b2c      	ldr	r3, [pc, #176]	; (afcc <nvm_update+0x240>)
    af1c:	4798      	blx	r3

//ERRATA Part 1 - To be done before RAM CRC
//CRC of SD Card. Errata 1.8.3 determines we should run this code every time we do CRC32 from a RAM source. See http://ww1.microchip.com/downloads/en/DeviceDoc/SAM-D21-Family-Silicon-Errata-and-DataSheet-Clarification-DS80000760D.pdf Section 1.8.3
uint32_t resultCrcSd = 0;
    af1e:	2300      	movs	r3, #0
    af20:	60fb      	str	r3, [r7, #12]
(*(volatile unsigned int*) 0x41007058) &= ~0x30000UL;
    af22:	4b36      	ldr	r3, [pc, #216]	; (affc <nvm_update+0x270>)
    af24:	4a35      	ldr	r2, [pc, #212]	; (affc <nvm_update+0x270>)
    af26:	6812      	ldr	r2, [r2, #0]
    af28:	4935      	ldr	r1, [pc, #212]	; (b000 <nvm_update+0x274>)
    af2a:	400a      	ands	r2, r1
    af2c:	601a      	str	r2, [r3, #0]

//CRC of SD Card
enum status_code crcres = dsu_crc32_cal	(readBuffer	,256, &resultCrcSd); 
    af2e:	2360      	movs	r3, #96	; 0x60
    af30:	18f8      	adds	r0, r7, r3
    af32:	2364      	movs	r3, #100	; 0x64
    af34:	33ff      	adds	r3, #255	; 0xff
    af36:	18fc      	adds	r4, r7, r3
    af38:	230c      	movs	r3, #12
    af3a:	18fa      	adds	r2, r7, r3
    af3c:	2380      	movs	r3, #128	; 0x80
    af3e:	005b      	lsls	r3, r3, #1
    af40:	0019      	movs	r1, r3
    af42:	4b30      	ldr	r3, [pc, #192]	; (b004 <nvm_update+0x278>)
    af44:	4798      	blx	r3
    af46:	0003      	movs	r3, r0
    af48:	7023      	strb	r3, [r4, #0]

//Errata Part 2 - To be done after RAM CRC
(*(volatile unsigned int*) 0x41007058) |= 0x20000UL;
    af4a:	4b2c      	ldr	r3, [pc, #176]	; (affc <nvm_update+0x270>)
    af4c:	4a2b      	ldr	r2, [pc, #172]	; (affc <nvm_update+0x270>)
    af4e:	6812      	ldr	r2, [r2, #0]
    af50:	2180      	movs	r1, #128	; 0x80
    af52:	0289      	lsls	r1, r1, #10
    af54:	430a      	orrs	r2, r1
    af56:	601a      	str	r2, [r3, #0]


//CRC of memory (NVM)
uint32_t resultCrcNvm = 0;
    af58:	2300      	movs	r3, #0
    af5a:	60bb      	str	r3, [r7, #8]
crcres |= dsu_crc32_cal	(APP_START_ADDRESS	,256, &resultCrcNvm);
    af5c:	2308      	movs	r3, #8
    af5e:	18fa      	adds	r2, r7, r3
    af60:	2380      	movs	r3, #128	; 0x80
    af62:	0059      	lsls	r1, r3, #1
    af64:	2390      	movs	r3, #144	; 0x90
    af66:	025b      	lsls	r3, r3, #9
    af68:	0018      	movs	r0, r3
    af6a:	4b26      	ldr	r3, [pc, #152]	; (b004 <nvm_update+0x278>)
    af6c:	4798      	blx	r3
    af6e:	0003      	movs	r3, r0
    af70:	0019      	movs	r1, r3
    af72:	2364      	movs	r3, #100	; 0x64
    af74:	33ff      	adds	r3, #255	; 0xff
    af76:	18fb      	adds	r3, r7, r3
    af78:	2264      	movs	r2, #100	; 0x64
    af7a:	32ff      	adds	r2, #255	; 0xff
    af7c:	18ba      	adds	r2, r7, r2
    af7e:	7812      	ldrb	r2, [r2, #0]
    af80:	430a      	orrs	r2, r1
    af82:	701a      	strb	r2, [r3, #0]

if (crcres != STATUS_OK)
    af84:	2364      	movs	r3, #100	; 0x64
    af86:	33ff      	adds	r3, #255	; 0xff
    af88:	18fb      	adds	r3, r7, r3
    af8a:	781b      	ldrb	r3, [r3, #0]
    af8c:	2b00      	cmp	r3, #0
    af8e:	d004      	beq.n	af9a <nvm_update+0x20e>
{
SerialConsoleWriteString("Could not calculate CRC!!\r\n");
    af90:	4b1d      	ldr	r3, [pc, #116]	; (b008 <nvm_update+0x27c>)
    af92:	0018      	movs	r0, r3
    af94:	4b0d      	ldr	r3, [pc, #52]	; (afcc <nvm_update+0x240>)
    af96:	4798      	blx	r3
    af98:	e00e      	b.n	afb8 <nvm_update+0x22c>
}
else
{
snprintf(helpStr, 63,"CRC SD CARD: %d  CRC NVM: %d \r\n", resultCrcSd, resultCrcNvm);
    af9a:	68f9      	ldr	r1, [r7, #12]
    af9c:	68bb      	ldr	r3, [r7, #8]
    af9e:	4a1b      	ldr	r2, [pc, #108]	; (b00c <nvm_update+0x280>)
    afa0:	2010      	movs	r0, #16
    afa2:	1838      	adds	r0, r7, r0
    afa4:	9300      	str	r3, [sp, #0]
    afa6:	000b      	movs	r3, r1
    afa8:	213f      	movs	r1, #63	; 0x3f
    afaa:	4c13      	ldr	r4, [pc, #76]	; (aff8 <nvm_update+0x26c>)
    afac:	47a0      	blx	r4
SerialConsoleWriteString(helpStr);
    afae:	2310      	movs	r3, #16
    afb0:	18fb      	adds	r3, r7, r3
    afb2:	0018      	movs	r0, r3
    afb4:	4b05      	ldr	r3, [pc, #20]	; (afcc <nvm_update+0x240>)
    afb6:	4798      	blx	r3
}

error_exit:
return res;
    afb8:	4b08      	ldr	r3, [pc, #32]	; (afdc <nvm_update+0x250>)
    afba:	781b      	ldrb	r3, [r3, #0]
}
    afbc:	0018      	movs	r0, r3
    afbe:	46bd      	mov	sp, r7
    afc0:	b05f      	add	sp, #380	; 0x17c
    afc2:	bd90      	pop	{r4, r7, pc}
    afc4:	00000809 	.word	0x00000809
    afc8:	0000d01c 	.word	0x0000d01c
    afcc:	000010a5 	.word	0x000010a5
    afd0:	0000d028 	.word	0x0000d028
    afd4:	20000c5c 	.word	0x20000c5c
    afd8:	0000a0e9 	.word	0x0000a0e9
    afdc:	20000d02 	.word	0x20000d02
    afe0:	0000d04c 	.word	0x0000d04c
    afe4:	000006bd 	.word	0x000006bd
    afe8:	0000d064 	.word	0x0000d064
    afec:	000008b1 	.word	0x000008b1
    aff0:	fffffed8 	.word	0xfffffed8
    aff4:	0000d088 	.word	0x0000d088
    aff8:	0000bc5d 	.word	0x0000bc5d
    affc:	41007058 	.word	0x41007058
    b000:	fffcffff 	.word	0xfffcffff
    b004:	00000391 	.word	0x00000391
    b008:	0000d0c4 	.word	0x0000d0c4
    b00c:	0000d0e0 	.word	0x0000d0e0

0000b010 <main>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void) {
    b010:	b580      	push	{r7, lr}
    b012:	b0c4      	sub	sp, #272	; 0x110
    b014:	af00      	add	r7, sp, #0

    /*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
    system_init();
    b016:	4b80      	ldr	r3, [pc, #512]	; (b218 <main+0x208>)
    b018:	4798      	blx	r3
    delay_init();
    b01a:	4b80      	ldr	r3, [pc, #512]	; (b21c <main+0x20c>)
    b01c:	4798      	blx	r3
    InitializeSerialConsole();
    b01e:	4b80      	ldr	r3, [pc, #512]	; (b220 <main+0x210>)
    b020:	4798      	blx	r3
    system_interrupt_enable_global();
    b022:	4b80      	ldr	r3, [pc, #512]	; (b224 <main+0x214>)
    b024:	4798      	blx	r3

    /* Initialize SD MMC stack */
    sd_mmc_init();
    b026:	4b80      	ldr	r3, [pc, #512]	; (b228 <main+0x218>)
    b028:	4798      	blx	r3

    // Initialize the NVM driver
    configure_nvm();
    b02a:	4b80      	ldr	r3, [pc, #512]	; (b22c <main+0x21c>)
    b02c:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
    b02e:	4b80      	ldr	r3, [pc, #512]	; (b230 <main+0x220>)
    b030:	2201      	movs	r2, #1
    b032:	701a      	strb	r2, [r3, #0]
    b034:	f3bf 8f5f 	dmb	sy
    b038:	b662      	cpsie	i

    // Configure CRC32
    dsu_crc32_init();
    b03a:	4b7e      	ldr	r3, [pc, #504]	; (b234 <main+0x224>)
    b03c:	4798      	blx	r3

    SerialConsoleWriteString("ESE5160 - ENTER BOOTLOADER");   // Order to add string to TX Buffer
    b03e:	4b7e      	ldr	r3, [pc, #504]	; (b238 <main+0x228>)
    b040:	0018      	movs	r0, r3
    b042:	4b7e      	ldr	r3, [pc, #504]	; (b23c <main+0x22c>)
    b044:	4798      	blx	r3

    /*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

    // EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
    // See function inside to see how to open a file
    SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    b046:	4b7e      	ldr	r3, [pc, #504]	; (b240 <main+0x230>)
    b048:	0018      	movs	r0, r3
    b04a:	4b7c      	ldr	r3, [pc, #496]	; (b23c <main+0x22c>)
    b04c:	4798      	blx	r3

    if (StartFilesystemAndTest() == false) {
    b04e:	4b7d      	ldr	r3, [pc, #500]	; (b244 <main+0x234>)
    b050:	4798      	blx	r3
    b052:	0003      	movs	r3, r0
    b054:	001a      	movs	r2, r3
    b056:	2301      	movs	r3, #1
    b058:	4053      	eors	r3, r2
    b05a:	b2db      	uxtb	r3, r3
    b05c:	2b00      	cmp	r3, #0
    b05e:	d00a      	beq.n	b076 <main+0x66>
        SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    b060:	4b79      	ldr	r3, [pc, #484]	; (b248 <main+0x238>)
    b062:	0018      	movs	r0, r3
    b064:	4b75      	ldr	r3, [pc, #468]	; (b23c <main+0x22c>)
    b066:	4798      	blx	r3
        delay_cycles_ms(5000);
    b068:	4b78      	ldr	r3, [pc, #480]	; (b24c <main+0x23c>)
    b06a:	0018      	movs	r0, r3
    b06c:	4b78      	ldr	r3, [pc, #480]	; (b250 <main+0x240>)
    b06e:	4798      	blx	r3
        system_reset();
    b070:	4b78      	ldr	r3, [pc, #480]	; (b254 <main+0x244>)
    b072:	4798      	blx	r3
    b074:	e003      	b.n	b07e <main+0x6e>
    } else {
        SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    b076:	4b78      	ldr	r3, [pc, #480]	; (b258 <main+0x248>)
    b078:	0018      	movs	r0, r3
    b07a:	4b70      	ldr	r3, [pc, #448]	; (b23c <main+0x22c>)
    b07c:	4798      	blx	r3
    /*END SIMPLE SD CARD MOUNTING AND TEST!*/

    /*3.) STARTS BOOTLOADER HERE!*/
	uint8_t readBuffer[256]; //Buffer the size of one row

	resA = f_open(&file_object_A, (char const *)testA_file_name, FA_READ);
    b07e:	4977      	ldr	r1, [pc, #476]	; (b25c <main+0x24c>)
    b080:	4b77      	ldr	r3, [pc, #476]	; (b260 <main+0x250>)
    b082:	2201      	movs	r2, #1
    b084:	0018      	movs	r0, r3
    b086:	4b77      	ldr	r3, [pc, #476]	; (b264 <main+0x254>)
    b088:	4798      	blx	r3
    b08a:	0003      	movs	r3, r0
    b08c:	001a      	movs	r2, r3
    b08e:	4b76      	ldr	r3, [pc, #472]	; (b268 <main+0x258>)
    b090:	701a      	strb	r2, [r3, #0]
	boot_res = f_open(&file_object_boot, (char const *)boot_file_name, FA_READ);
    b092:	4976      	ldr	r1, [pc, #472]	; (b26c <main+0x25c>)
    b094:	4b76      	ldr	r3, [pc, #472]	; (b270 <main+0x260>)
    b096:	2201      	movs	r2, #1
    b098:	0018      	movs	r0, r3
    b09a:	4b72      	ldr	r3, [pc, #456]	; (b264 <main+0x254>)
    b09c:	4798      	blx	r3
    b09e:	0003      	movs	r3, r0
    b0a0:	001a      	movs	r2, r3
    b0a2:	4b74      	ldr	r3, [pc, #464]	; (b274 <main+0x264>)
    b0a4:	701a      	strb	r2, [r3, #0]
	
	// Checking if the the flag txt files are present.
	resA = f_open(&file_object_A, (char const *)testA_file_name, FA_READ);
    b0a6:	496d      	ldr	r1, [pc, #436]	; (b25c <main+0x24c>)
    b0a8:	4b6d      	ldr	r3, [pc, #436]	; (b260 <main+0x250>)
    b0aa:	2201      	movs	r2, #1
    b0ac:	0018      	movs	r0, r3
    b0ae:	4b6d      	ldr	r3, [pc, #436]	; (b264 <main+0x254>)
    b0b0:	4798      	blx	r3
    b0b2:	0003      	movs	r3, r0
    b0b4:	001a      	movs	r2, r3
    b0b6:	4b6c      	ldr	r3, [pc, #432]	; (b268 <main+0x258>)
    b0b8:	701a      	strb	r2, [r3, #0]
	boot_res = f_open(&file_object_boot, (char const *)boot_file_name, FA_READ);
    b0ba:	496c      	ldr	r1, [pc, #432]	; (b26c <main+0x25c>)
    b0bc:	4b6c      	ldr	r3, [pc, #432]	; (b270 <main+0x260>)
    b0be:	2201      	movs	r2, #1
    b0c0:	0018      	movs	r0, r3
    b0c2:	4b68      	ldr	r3, [pc, #416]	; (b264 <main+0x254>)
    b0c4:	4798      	blx	r3
    b0c6:	0003      	movs	r3, r0
    b0c8:	001a      	movs	r2, r3
    b0ca:	4b6a      	ldr	r3, [pc, #424]	; (b274 <main+0x264>)
    b0cc:	701a      	strb	r2, [r3, #0]

	if (boot_res == FR_OK) {
    b0ce:	4b69      	ldr	r3, [pc, #420]	; (b274 <main+0x264>)
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	d107      	bne.n	b0e6 <main+0xd6>
		f_unlink(boot_file_name);
    b0d6:	4b65      	ldr	r3, [pc, #404]	; (b26c <main+0x25c>)
    b0d8:	0018      	movs	r0, r3
    b0da:	4b67      	ldr	r3, [pc, #412]	; (b278 <main+0x268>)
    b0dc:	4798      	blx	r3
		SerialConsoleWriteString("Found boot flag !\r\n");
    b0de:	4b67      	ldr	r3, [pc, #412]	; (b27c <main+0x26c>)
    b0e0:	0018      	movs	r0, r3
    b0e2:	4b56      	ldr	r3, [pc, #344]	; (b23c <main+0x22c>)
    b0e4:	4798      	blx	r3
	}

	if (resA == FR_OK) {
    b0e6:	4b60      	ldr	r3, [pc, #384]	; (b268 <main+0x258>)
    b0e8:	781b      	ldrb	r3, [r3, #0]
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d107      	bne.n	b0fe <main+0xee>
		// Now that, we found FlagA.txt we can delete it.
		f_unlink(testA_file_name);
    b0ee:	4b5b      	ldr	r3, [pc, #364]	; (b25c <main+0x24c>)
    b0f0:	0018      	movs	r0, r3
    b0f2:	4b61      	ldr	r3, [pc, #388]	; (b278 <main+0x268>)
    b0f4:	4798      	blx	r3
		SerialConsoleWriteString("found test A flag !\r\n");
    b0f6:	4b62      	ldr	r3, [pc, #392]	; (b280 <main+0x270>)
    b0f8:	0018      	movs	r0, r3
    b0fa:	4b50      	ldr	r3, [pc, #320]	; (b23c <main+0x22c>)
    b0fc:	4798      	blx	r3
	}

	// We flash file only if it was download properly.
	if (resA == FR_OK && boot_res == FR_OK) {
    b0fe:	4b5a      	ldr	r3, [pc, #360]	; (b268 <main+0x258>)
    b100:	781b      	ldrb	r3, [r3, #0]
    b102:	2b00      	cmp	r3, #0
    b104:	d169      	bne.n	b1da <main+0x1ca>
    b106:	4b5b      	ldr	r3, [pc, #364]	; (b274 <main+0x264>)
    b108:	781b      	ldrb	r3, [r3, #0]
    b10a:	2b00      	cmp	r3, #0
    b10c:	d165      	bne.n	b1da <main+0x1ca>
		boot_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b10e:	4b5d      	ldr	r3, [pc, #372]	; (b284 <main+0x274>)
    b110:	2230      	movs	r2, #48	; 0x30
    b112:	701a      	strb	r2, [r3, #0]
		if(f_open(&file_object, (char const *)boot_bin_file, FA_READ) != FR_OK) {
    b114:	495b      	ldr	r1, [pc, #364]	; (b284 <main+0x274>)
    b116:	4b5c      	ldr	r3, [pc, #368]	; (b288 <main+0x278>)
    b118:	2201      	movs	r2, #1
    b11a:	0018      	movs	r0, r3
    b11c:	4b51      	ldr	r3, [pc, #324]	; (b264 <main+0x254>)
    b11e:	4798      	blx	r3
    b120:	1e03      	subs	r3, r0, #0
    b122:	d004      	beq.n	b12e <main+0x11e>
			SerialConsoleWriteString("Couldn't find the file !\r\n");
    b124:	4b59      	ldr	r3, [pc, #356]	; (b28c <main+0x27c>)
    b126:	0018      	movs	r0, r3
    b128:	4b44      	ldr	r3, [pc, #272]	; (b23c <main+0x22c>)
    b12a:	4798      	blx	r3
			goto exit_boot;
    b12c:	e055      	b.n	b1da <main+0x1ca>
		}
		
		// Calculating the multiple of read/write for the files.
		int loop_factor = file_object.fsize / 256;
    b12e:	4b56      	ldr	r3, [pc, #344]	; (b288 <main+0x278>)
    b130:	68db      	ldr	r3, [r3, #12]
    b132:	0a1b      	lsrs	r3, r3, #8
    b134:	2284      	movs	r2, #132	; 0x84
    b136:	0052      	lsls	r2, r2, #1
    b138:	18ba      	adds	r2, r7, r2
    b13a:	6013      	str	r3, [r2, #0]
		int remaining_data = file_object.fsize % 256;
    b13c:	4b52      	ldr	r3, [pc, #328]	; (b288 <main+0x278>)
    b13e:	68db      	ldr	r3, [r3, #12]
    b140:	001a      	movs	r2, r3
    b142:	23ff      	movs	r3, #255	; 0xff
    b144:	4013      	ands	r3, r2
    b146:	1d7a      	adds	r2, r7, #5
    b148:	32ff      	adds	r2, #255	; 0xff
    b14a:	6013      	str	r3, [r2, #0]
		
		for(int iter = 0; iter < loop_factor; iter++)
    b14c:	2300      	movs	r3, #0
    b14e:	2286      	movs	r2, #134	; 0x86
    b150:	0052      	lsls	r2, r2, #1
    b152:	18ba      	adds	r2, r7, r2
    b154:	6013      	str	r3, [r2, #0]
    b156:	e016      	b.n	b186 <main+0x176>
		{
			res = nvm_update(iter, NVM_ROW_FACTOR);
    b158:	2386      	movs	r3, #134	; 0x86
    b15a:	005b      	lsls	r3, r3, #1
    b15c:	18fb      	adds	r3, r7, r3
    b15e:	681a      	ldr	r2, [r3, #0]
    b160:	2380      	movs	r3, #128	; 0x80
    b162:	005b      	lsls	r3, r3, #1
    b164:	0019      	movs	r1, r3
    b166:	0010      	movs	r0, r2
    b168:	4b49      	ldr	r3, [pc, #292]	; (b290 <main+0x280>)
    b16a:	4798      	blx	r3
    b16c:	0003      	movs	r3, r0
    b16e:	001a      	movs	r2, r3
    b170:	4b48      	ldr	r3, [pc, #288]	; (b294 <main+0x284>)
    b172:	701a      	strb	r2, [r3, #0]
		for(int iter = 0; iter < loop_factor; iter++)
    b174:	2386      	movs	r3, #134	; 0x86
    b176:	005b      	lsls	r3, r3, #1
    b178:	18fb      	adds	r3, r7, r3
    b17a:	681b      	ldr	r3, [r3, #0]
    b17c:	3301      	adds	r3, #1
    b17e:	2286      	movs	r2, #134	; 0x86
    b180:	0052      	lsls	r2, r2, #1
    b182:	18ba      	adds	r2, r7, r2
    b184:	6013      	str	r3, [r2, #0]
    b186:	2386      	movs	r3, #134	; 0x86
    b188:	005b      	lsls	r3, r3, #1
    b18a:	18fb      	adds	r3, r7, r3
    b18c:	681a      	ldr	r2, [r3, #0]
    b18e:	2384      	movs	r3, #132	; 0x84
    b190:	005b      	lsls	r3, r3, #1
    b192:	18fb      	adds	r3, r7, r3
    b194:	681b      	ldr	r3, [r3, #0]
    b196:	429a      	cmp	r2, r3
    b198:	dbde      	blt.n	b158 <main+0x148>
		}
		
		if (remaining_data) {
    b19a:	1d7b      	adds	r3, r7, #5
    b19c:	33ff      	adds	r3, #255	; 0xff
    b19e:	681b      	ldr	r3, [r3, #0]
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d00d      	beq.n	b1c0 <main+0x1b0>
			res = nvm_update(loop_factor, NVM_ROW_FACTOR);
    b1a4:	2384      	movs	r3, #132	; 0x84
    b1a6:	005b      	lsls	r3, r3, #1
    b1a8:	18fb      	adds	r3, r7, r3
    b1aa:	681a      	ldr	r2, [r3, #0]
    b1ac:	2380      	movs	r3, #128	; 0x80
    b1ae:	005b      	lsls	r3, r3, #1
    b1b0:	0019      	movs	r1, r3
    b1b2:	0010      	movs	r0, r2
    b1b4:	4b36      	ldr	r3, [pc, #216]	; (b290 <main+0x280>)
    b1b6:	4798      	blx	r3
    b1b8:	0003      	movs	r3, r0
    b1ba:	001a      	movs	r2, r3
    b1bc:	4b35      	ldr	r3, [pc, #212]	; (b294 <main+0x284>)
    b1be:	701a      	strb	r2, [r3, #0]
		}

		if (res != FR_OK)
    b1c0:	4b34      	ldr	r3, [pc, #208]	; (b294 <main+0x284>)
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	2b00      	cmp	r3, #0
    b1c6:	d004      	beq.n	b1d2 <main+0x1c2>
		{
			SerialConsoleWriteString("Test write to NVM failed!\r\n");
    b1c8:	4b33      	ldr	r3, [pc, #204]	; (b298 <main+0x288>)
    b1ca:	0018      	movs	r0, r3
    b1cc:	4b1b      	ldr	r3, [pc, #108]	; (b23c <main+0x22c>)
    b1ce:	4798      	blx	r3
    b1d0:	e003      	b.n	b1da <main+0x1ca>
		} else {
			SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    b1d2:	4b32      	ldr	r3, [pc, #200]	; (b29c <main+0x28c>)
    b1d4:	0018      	movs	r0, r3
    b1d6:	4b19      	ldr	r3, [pc, #100]	; (b23c <main+0x22c>)
    b1d8:	4798      	blx	r3
		}
	}
/* END BOOTLOADER HERE!*/

exit_boot:
	f_unlink(boot_file_name);
    b1da:	4b24      	ldr	r3, [pc, #144]	; (b26c <main+0x25c>)
    b1dc:	0018      	movs	r0, r3
    b1de:	4b26      	ldr	r3, [pc, #152]	; (b278 <main+0x268>)
    b1e0:	4798      	blx	r3
	f_unlink(boot_bin_file);
    b1e2:	4b28      	ldr	r3, [pc, #160]	; (b284 <main+0x274>)
    b1e4:	0018      	movs	r0, r3
    b1e6:	4b24      	ldr	r3, [pc, #144]	; (b278 <main+0x268>)
    b1e8:	4798      	blx	r3
	f_unlink(testA_file_name);
    b1ea:	4b1c      	ldr	r3, [pc, #112]	; (b25c <main+0x24c>)
    b1ec:	0018      	movs	r0, r3
    b1ee:	4b22      	ldr	r3, [pc, #136]	; (b278 <main+0x268>)
    b1f0:	4798      	blx	r3


    

    // 4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
    SerialConsoleWriteString("ESE5160 - EXIT BOOTLOADER");   // Order to add string to TX Buffer
    b1f2:	4b2b      	ldr	r3, [pc, #172]	; (b2a0 <main+0x290>)
    b1f4:	0018      	movs	r0, r3
    b1f6:	4b11      	ldr	r3, [pc, #68]	; (b23c <main+0x22c>)
    b1f8:	4798      	blx	r3
    delay_cycles_ms(100);                                    // Delay to allow print
    b1fa:	2064      	movs	r0, #100	; 0x64
    b1fc:	4b14      	ldr	r3, [pc, #80]	; (b250 <main+0x240>)
    b1fe:	4798      	blx	r3

    // Deinitialize HW - deinitialize started HW here!
    DeinitializeSerialConsole();   // Deinitializes UART
    b200:	4b28      	ldr	r3, [pc, #160]	; (b2a4 <main+0x294>)
    b202:	4798      	blx	r3
    sd_mmc_deinit();               // Deinitialize SD CARD
    b204:	4b28      	ldr	r3, [pc, #160]	; (b2a8 <main+0x298>)
    b206:	4798      	blx	r3

    // Jump to application
    jumpToApplication();
    b208:	4b28      	ldr	r3, [pc, #160]	; (b2ac <main+0x29c>)
    b20a:	4798      	blx	r3
    b20c:	2300      	movs	r3, #0

    // Should not reach here! The device should have jumped to the main FW.
}
    b20e:	0018      	movs	r0, r3
    b210:	46bd      	mov	sp, r7
    b212:	b044      	add	sp, #272	; 0x110
    b214:	bd80      	pop	{r7, pc}
    b216:	46c0      	nop			; (mov r8, r8)
    b218:	00006e7d 	.word	0x00006e7d
    b21c:	00000149 	.word	0x00000149
    b220:	00001019 	.word	0x00001019
    b224:	0000ad59 	.word	0x0000ad59
    b228:	00001ec5 	.word	0x00001ec5
    b22c:	0000b591 	.word	0x0000b591
    b230:	20000009 	.word	0x20000009
    b234:	0000ad75 	.word	0x0000ad75
    b238:	0000d100 	.word	0x0000d100
    b23c:	000010a5 	.word	0x000010a5
    b240:	0000d11c 	.word	0x0000d11c
    b244:	0000b2b1 	.word	0x0000b2b1
    b248:	0000d144 	.word	0x0000d144
    b24c:	00001388 	.word	0x00001388
    b250:	000001a1 	.word	0x000001a1
    b254:	0000ad45 	.word	0x0000ad45
    b258:	0000d190 	.word	0x0000d190
    b25c:	20000030 	.word	0x20000030
    b260:	20000d04 	.word	0x20000d04
    b264:	00009bb9 	.word	0x00009bb9
    b268:	20000d00 	.word	0x20000d00
    b26c:	2000003c 	.word	0x2000003c
    b270:	20000c80 	.word	0x20000c80
    b274:	20000d01 	.word	0x20000d01
    b278:	0000a891 	.word	0x0000a891
    b27c:	0000d1c4 	.word	0x0000d1c4
    b280:	0000d1d8 	.word	0x0000d1d8
    b284:	2000004c 	.word	0x2000004c
    b288:	20000c5c 	.word	0x20000c5c
    b28c:	0000d1f0 	.word	0x0000d1f0
    b290:	0000ad8d 	.word	0x0000ad8d
    b294:	20000d02 	.word	0x20000d02
    b298:	0000d20c 	.word	0x0000d20c
    b29c:	0000d228 	.word	0x0000d228
    b2a0:	0000d248 	.word	0x0000d248
    b2a4:	00001089 	.word	0x00001089
    b2a8:	00002c6d 	.word	0x00002c6d
    b2ac:	0000b559 	.word	0x0000b559

0000b2b0 <StartFilesystemAndTest>:
 * @brief        Starts the filesystem and tests it. Sets the filesystem to the global variable fs
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return       Returns true is SD card and file system test passed. False otherwise.
 ******************************************************************************/
static bool StartFilesystemAndTest(void) {
    b2b0:	b590      	push	{r4, r7, lr}
    b2b2:	b0c5      	sub	sp, #276	; 0x114
    b2b4:	af00      	add	r7, sp, #0
    bool sdCardPass = true;
    b2b6:	2310      	movs	r3, #16
    b2b8:	33ff      	adds	r3, #255	; 0xff
    b2ba:	18fb      	adds	r3, r7, r3
    b2bc:	2201      	movs	r2, #1
    b2be:	701a      	strb	r2, [r3, #0]
    uint8_t binbuff[256];

    // Before we begin - fill buffer for binary write test
    // Fill binbuff with values 0x00 - 0xFF
    for (int i = 0; i < 256; i++) {
    b2c0:	2300      	movs	r3, #0
    b2c2:	2284      	movs	r2, #132	; 0x84
    b2c4:	0052      	lsls	r2, r2, #1
    b2c6:	18ba      	adds	r2, r7, r2
    b2c8:	6013      	str	r3, [r2, #0]
    b2ca:	e019      	b.n	b300 <StartFilesystemAndTest+0x50>
        binbuff[i] = i;
    b2cc:	2384      	movs	r3, #132	; 0x84
    b2ce:	005b      	lsls	r3, r3, #1
    b2d0:	18fb      	adds	r3, r7, r3
    b2d2:	681b      	ldr	r3, [r3, #0]
    b2d4:	b2d9      	uxtb	r1, r3
    b2d6:	4b84      	ldr	r3, [pc, #528]	; (b4e8 <StartFilesystemAndTest+0x238>)
    b2d8:	2288      	movs	r2, #136	; 0x88
    b2da:	0052      	lsls	r2, r2, #1
    b2dc:	18ba      	adds	r2, r7, r2
    b2de:	18d2      	adds	r2, r2, r3
    b2e0:	2384      	movs	r3, #132	; 0x84
    b2e2:	005b      	lsls	r3, r3, #1
    b2e4:	18fb      	adds	r3, r7, r3
    b2e6:	681b      	ldr	r3, [r3, #0]
    b2e8:	18d3      	adds	r3, r2, r3
    b2ea:	1c0a      	adds	r2, r1, #0
    b2ec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
    b2ee:	2384      	movs	r3, #132	; 0x84
    b2f0:	005b      	lsls	r3, r3, #1
    b2f2:	18fb      	adds	r3, r7, r3
    b2f4:	681b      	ldr	r3, [r3, #0]
    b2f6:	3301      	adds	r3, #1
    b2f8:	2284      	movs	r2, #132	; 0x84
    b2fa:	0052      	lsls	r2, r2, #1
    b2fc:	18ba      	adds	r2, r7, r2
    b2fe:	6013      	str	r3, [r2, #0]
    b300:	2384      	movs	r3, #132	; 0x84
    b302:	005b      	lsls	r3, r3, #1
    b304:	18fb      	adds	r3, r7, r3
    b306:	681b      	ldr	r3, [r3, #0]
    b308:	2bff      	cmp	r3, #255	; 0xff
    b30a:	dddf      	ble.n	b2cc <StartFilesystemAndTest+0x1c>
    }

    // MOUNT SD CARD
    Ctrl_status sdStatus = SdCard_Initiate();
    b30c:	2308      	movs	r3, #8
    b30e:	33ff      	adds	r3, #255	; 0xff
    b310:	18fc      	adds	r4, r7, r3
    b312:	4b76      	ldr	r3, [pc, #472]	; (b4ec <StartFilesystemAndTest+0x23c>)
    b314:	4798      	blx	r3
    b316:	0003      	movs	r3, r0
    b318:	7023      	strb	r3, [r4, #0]
    if (sdStatus == CTRL_GOOD)   // If the SD card is good we continue mounting the system!
    b31a:	2308      	movs	r3, #8
    b31c:	33ff      	adds	r3, #255	; 0xff
    b31e:	18fb      	adds	r3, r7, r3
    b320:	781b      	ldrb	r3, [r3, #0]
    b322:	2b00      	cmp	r3, #0
    b324:	d000      	beq.n	b328 <StartFilesystemAndTest+0x78>
    b326:	e0ce      	b.n	b4c6 <StartFilesystemAndTest+0x216>
    {
        SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    b328:	4b71      	ldr	r3, [pc, #452]	; (b4f0 <StartFilesystemAndTest+0x240>)
    b32a:	0018      	movs	r0, r3
    b32c:	4b71      	ldr	r3, [pc, #452]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b32e:	4798      	blx	r3

        // Attempt to mount a FAT file system on the SD Card using FATFS
        SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    b330:	4b71      	ldr	r3, [pc, #452]	; (b4f8 <StartFilesystemAndTest+0x248>)
    b332:	0018      	movs	r0, r3
    b334:	4b6f      	ldr	r3, [pc, #444]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b336:	4798      	blx	r3
        memset(&fs, 0, sizeof(FATFS));
    b338:	238c      	movs	r3, #140	; 0x8c
    b33a:	009a      	lsls	r2, r3, #2
    b33c:	4b6f      	ldr	r3, [pc, #444]	; (b4fc <StartFilesystemAndTest+0x24c>)
    b33e:	2100      	movs	r1, #0
    b340:	0018      	movs	r0, r3
    b342:	4b6f      	ldr	r3, [pc, #444]	; (b500 <StartFilesystemAndTest+0x250>)
    b344:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);   // Order FATFS Mount
    b346:	4b6d      	ldr	r3, [pc, #436]	; (b4fc <StartFilesystemAndTest+0x24c>)
    b348:	0019      	movs	r1, r3
    b34a:	2000      	movs	r0, #0
    b34c:	4b6d      	ldr	r3, [pc, #436]	; (b504 <StartFilesystemAndTest+0x254>)
    b34e:	4798      	blx	r3
    b350:	0003      	movs	r3, r0
    b352:	001a      	movs	r2, r3
    b354:	4b6c      	ldr	r3, [pc, #432]	; (b508 <StartFilesystemAndTest+0x258>)
    b356:	701a      	strb	r2, [r3, #0]
        if (FR_INVALID_DRIVE == res) {
    b358:	4b6b      	ldr	r3, [pc, #428]	; (b508 <StartFilesystemAndTest+0x258>)
    b35a:	781b      	ldrb	r3, [r3, #0]
    b35c:	2b0b      	cmp	r3, #11
    b35e:	d10d      	bne.n	b37c <StartFilesystemAndTest+0xcc>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b360:	4b69      	ldr	r3, [pc, #420]	; (b508 <StartFilesystemAndTest+0x258>)
    b362:	781b      	ldrb	r3, [r3, #0]
    b364:	001a      	movs	r2, r3
    b366:	4b69      	ldr	r3, [pc, #420]	; (b50c <StartFilesystemAndTest+0x25c>)
    b368:	0019      	movs	r1, r3
    b36a:	2000      	movs	r0, #0
    b36c:	4b68      	ldr	r3, [pc, #416]	; (b510 <StartFilesystemAndTest+0x260>)
    b36e:	4798      	blx	r3
            sdCardPass = false;
    b370:	2310      	movs	r3, #16
    b372:	33ff      	adds	r3, #255	; 0xff
    b374:	18fb      	adds	r3, r7, r3
    b376:	2200      	movs	r2, #0
    b378:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b37a:	e09f      	b.n	b4bc <StartFilesystemAndTest+0x20c>
        }
        SerialConsoleWriteString("[OK]\r\n");
    b37c:	4b65      	ldr	r3, [pc, #404]	; (b514 <StartFilesystemAndTest+0x264>)
    b37e:	0018      	movs	r0, r3
    b380:	4b5c      	ldr	r3, [pc, #368]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b382:	4798      	blx	r3

        // Create and open a file
        SerialConsoleWriteString("Create a file (f_open)...\r\n");
    b384:	4b64      	ldr	r3, [pc, #400]	; (b518 <StartFilesystemAndTest+0x268>)
    b386:	0018      	movs	r0, r3
    b388:	4b5a      	ldr	r3, [pc, #360]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b38a:	4798      	blx	r3

        test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b38c:	4b63      	ldr	r3, [pc, #396]	; (b51c <StartFilesystemAndTest+0x26c>)
    b38e:	2230      	movs	r2, #48	; 0x30
    b390:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    b392:	4962      	ldr	r1, [pc, #392]	; (b51c <StartFilesystemAndTest+0x26c>)
    b394:	4b62      	ldr	r3, [pc, #392]	; (b520 <StartFilesystemAndTest+0x270>)
    b396:	220a      	movs	r2, #10
    b398:	0018      	movs	r0, r3
    b39a:	4b62      	ldr	r3, [pc, #392]	; (b524 <StartFilesystemAndTest+0x274>)
    b39c:	4798      	blx	r3
    b39e:	0003      	movs	r3, r0
    b3a0:	001a      	movs	r2, r3
    b3a2:	4b59      	ldr	r3, [pc, #356]	; (b508 <StartFilesystemAndTest+0x258>)
    b3a4:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    b3a6:	4b58      	ldr	r3, [pc, #352]	; (b508 <StartFilesystemAndTest+0x258>)
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	d00d      	beq.n	b3ca <StartFilesystemAndTest+0x11a>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b3ae:	4b56      	ldr	r3, [pc, #344]	; (b508 <StartFilesystemAndTest+0x258>)
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	001a      	movs	r2, r3
    b3b4:	4b55      	ldr	r3, [pc, #340]	; (b50c <StartFilesystemAndTest+0x25c>)
    b3b6:	0019      	movs	r1, r3
    b3b8:	2000      	movs	r0, #0
    b3ba:	4b55      	ldr	r3, [pc, #340]	; (b510 <StartFilesystemAndTest+0x260>)
    b3bc:	4798      	blx	r3
            sdCardPass = false;
    b3be:	2310      	movs	r3, #16
    b3c0:	33ff      	adds	r3, #255	; 0xff
    b3c2:	18fb      	adds	r3, r7, r3
    b3c4:	2200      	movs	r2, #0
    b3c6:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b3c8:	e078      	b.n	b4bc <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b3ca:	4b52      	ldr	r3, [pc, #328]	; (b514 <StartFilesystemAndTest+0x264>)
    b3cc:	0018      	movs	r0, r3
    b3ce:	4b49      	ldr	r3, [pc, #292]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b3d0:	4798      	blx	r3

        // Write to a file
        SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    b3d2:	4b55      	ldr	r3, [pc, #340]	; (b528 <StartFilesystemAndTest+0x278>)
    b3d4:	0018      	movs	r0, r3
    b3d6:	4b47      	ldr	r3, [pc, #284]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b3d8:	4798      	blx	r3

        if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    b3da:	4a51      	ldr	r2, [pc, #324]	; (b520 <StartFilesystemAndTest+0x270>)
    b3dc:	4b53      	ldr	r3, [pc, #332]	; (b52c <StartFilesystemAndTest+0x27c>)
    b3de:	0011      	movs	r1, r2
    b3e0:	0018      	movs	r0, r3
    b3e2:	4b53      	ldr	r3, [pc, #332]	; (b530 <StartFilesystemAndTest+0x280>)
    b3e4:	4798      	blx	r3
    b3e6:	1e03      	subs	r3, r0, #0
    b3e8:	d10e      	bne.n	b408 <StartFilesystemAndTest+0x158>
            f_close(&file_object);
    b3ea:	4b4d      	ldr	r3, [pc, #308]	; (b520 <StartFilesystemAndTest+0x270>)
    b3ec:	0018      	movs	r0, r3
    b3ee:	4b51      	ldr	r3, [pc, #324]	; (b534 <StartFilesystemAndTest+0x284>)
    b3f0:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b3f2:	4b51      	ldr	r3, [pc, #324]	; (b538 <StartFilesystemAndTest+0x288>)
    b3f4:	0019      	movs	r1, r3
    b3f6:	2000      	movs	r0, #0
    b3f8:	4b45      	ldr	r3, [pc, #276]	; (b510 <StartFilesystemAndTest+0x260>)
    b3fa:	4798      	blx	r3
            sdCardPass = false;
    b3fc:	2310      	movs	r3, #16
    b3fe:	33ff      	adds	r3, #255	; 0xff
    b400:	18fb      	adds	r3, r7, r3
    b402:	2200      	movs	r2, #0
    b404:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b406:	e059      	b.n	b4bc <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b408:	4b42      	ldr	r3, [pc, #264]	; (b514 <StartFilesystemAndTest+0x264>)
    b40a:	0018      	movs	r0, r3
    b40c:	4b39      	ldr	r3, [pc, #228]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b40e:	4798      	blx	r3
        f_close(&file_object);   // Close file
    b410:	4b43      	ldr	r3, [pc, #268]	; (b520 <StartFilesystemAndTest+0x270>)
    b412:	0018      	movs	r0, r3
    b414:	4b47      	ldr	r3, [pc, #284]	; (b534 <StartFilesystemAndTest+0x284>)
    b416:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b418:	4b48      	ldr	r3, [pc, #288]	; (b53c <StartFilesystemAndTest+0x28c>)
    b41a:	0018      	movs	r0, r3
    b41c:	4b35      	ldr	r3, [pc, #212]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b41e:	4798      	blx	r3

        // Write binary file
        // Read SD Card File
        test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b420:	4b47      	ldr	r3, [pc, #284]	; (b540 <StartFilesystemAndTest+0x290>)
    b422:	2230      	movs	r2, #48	; 0x30
    b424:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b426:	4946      	ldr	r1, [pc, #280]	; (b540 <StartFilesystemAndTest+0x290>)
    b428:	4b3d      	ldr	r3, [pc, #244]	; (b520 <StartFilesystemAndTest+0x270>)
    b42a:	220a      	movs	r2, #10
    b42c:	0018      	movs	r0, r3
    b42e:	4b3d      	ldr	r3, [pc, #244]	; (b524 <StartFilesystemAndTest+0x274>)
    b430:	4798      	blx	r3
    b432:	0003      	movs	r3, r0
    b434:	001a      	movs	r2, r3
    b436:	4b34      	ldr	r3, [pc, #208]	; (b508 <StartFilesystemAndTest+0x258>)
    b438:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    b43a:	4b33      	ldr	r3, [pc, #204]	; (b508 <StartFilesystemAndTest+0x258>)
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	2b00      	cmp	r3, #0
    b440:	d011      	beq.n	b466 <StartFilesystemAndTest+0x1b6>
            SerialConsoleWriteString("Could not open binary file!\r\n");
    b442:	4b40      	ldr	r3, [pc, #256]	; (b544 <StartFilesystemAndTest+0x294>)
    b444:	0018      	movs	r0, r3
    b446:	4b2b      	ldr	r3, [pc, #172]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b448:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b44a:	4b2f      	ldr	r3, [pc, #188]	; (b508 <StartFilesystemAndTest+0x258>)
    b44c:	781b      	ldrb	r3, [r3, #0]
    b44e:	001a      	movs	r2, r3
    b450:	4b2e      	ldr	r3, [pc, #184]	; (b50c <StartFilesystemAndTest+0x25c>)
    b452:	0019      	movs	r1, r3
    b454:	2000      	movs	r0, #0
    b456:	4b2e      	ldr	r3, [pc, #184]	; (b510 <StartFilesystemAndTest+0x260>)
    b458:	4798      	blx	r3
            sdCardPass = false;
    b45a:	2310      	movs	r3, #16
    b45c:	33ff      	adds	r3, #255	; 0xff
    b45e:	18fb      	adds	r3, r7, r3
    b460:	2200      	movs	r2, #0
    b462:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b464:	e02a      	b.n	b4bc <StartFilesystemAndTest+0x20c>
        }

        // Write to a binaryfile
        SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b466:	4b38      	ldr	r3, [pc, #224]	; (b548 <StartFilesystemAndTest+0x298>)
    b468:	0018      	movs	r0, r3
    b46a:	4b22      	ldr	r3, [pc, #136]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b46c:	4798      	blx	r3
        uint32_t varWrite = 0;
    b46e:	2300      	movs	r3, #0
    b470:	603b      	str	r3, [r7, #0]
        if (0 != f_write(&file_object, binbuff, 256, &varWrite)) {
    b472:	003c      	movs	r4, r7
    b474:	2380      	movs	r3, #128	; 0x80
    b476:	005a      	lsls	r2, r3, #1
    b478:	1d39      	adds	r1, r7, #4
    b47a:	4829      	ldr	r0, [pc, #164]	; (b520 <StartFilesystemAndTest+0x270>)
    b47c:	0023      	movs	r3, r4
    b47e:	4c33      	ldr	r4, [pc, #204]	; (b54c <StartFilesystemAndTest+0x29c>)
    b480:	47a0      	blx	r4
    b482:	1e03      	subs	r3, r0, #0
    b484:	d00e      	beq.n	b4a4 <StartFilesystemAndTest+0x1f4>
            f_close(&file_object);
    b486:	4b26      	ldr	r3, [pc, #152]	; (b520 <StartFilesystemAndTest+0x270>)
    b488:	0018      	movs	r0, r3
    b48a:	4b2a      	ldr	r3, [pc, #168]	; (b534 <StartFilesystemAndTest+0x284>)
    b48c:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b48e:	4b2a      	ldr	r3, [pc, #168]	; (b538 <StartFilesystemAndTest+0x288>)
    b490:	0019      	movs	r1, r3
    b492:	2000      	movs	r0, #0
    b494:	4b1e      	ldr	r3, [pc, #120]	; (b510 <StartFilesystemAndTest+0x260>)
    b496:	4798      	blx	r3
            sdCardPass = false;
    b498:	2310      	movs	r3, #16
    b49a:	33ff      	adds	r3, #255	; 0xff
    b49c:	18fb      	adds	r3, r7, r3
    b49e:	2200      	movs	r2, #0
    b4a0:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b4a2:	e00b      	b.n	b4bc <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b4a4:	4b1b      	ldr	r3, [pc, #108]	; (b514 <StartFilesystemAndTest+0x264>)
    b4a6:	0018      	movs	r0, r3
    b4a8:	4b12      	ldr	r3, [pc, #72]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b4aa:	4798      	blx	r3
        f_close(&file_object);   // Close file
    b4ac:	4b1c      	ldr	r3, [pc, #112]	; (b520 <StartFilesystemAndTest+0x270>)
    b4ae:	0018      	movs	r0, r3
    b4b0:	4b20      	ldr	r3, [pc, #128]	; (b534 <StartFilesystemAndTest+0x284>)
    b4b2:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b4b4:	4b21      	ldr	r3, [pc, #132]	; (b53c <StartFilesystemAndTest+0x28c>)
    b4b6:	0018      	movs	r0, r3
    b4b8:	4b0e      	ldr	r3, [pc, #56]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b4ba:	4798      	blx	r3

    main_end_of_test:
        SerialConsoleWriteString("End of Test.\n\r");
    b4bc:	4b24      	ldr	r3, [pc, #144]	; (b550 <StartFilesystemAndTest+0x2a0>)
    b4be:	0018      	movs	r0, r3
    b4c0:	4b0c      	ldr	r3, [pc, #48]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b4c2:	4798      	blx	r3
    b4c4:	e008      	b.n	b4d8 <StartFilesystemAndTest+0x228>

    } else {
        SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    b4c6:	4b23      	ldr	r3, [pc, #140]	; (b554 <StartFilesystemAndTest+0x2a4>)
    b4c8:	0018      	movs	r0, r3
    b4ca:	4b0a      	ldr	r3, [pc, #40]	; (b4f4 <StartFilesystemAndTest+0x244>)
    b4cc:	4798      	blx	r3
        sdCardPass = false;
    b4ce:	2310      	movs	r3, #16
    b4d0:	33ff      	adds	r3, #255	; 0xff
    b4d2:	18fb      	adds	r3, r7, r3
    b4d4:	2200      	movs	r2, #0
    b4d6:	701a      	strb	r2, [r3, #0]
    }

    return sdCardPass;
    b4d8:	2310      	movs	r3, #16
    b4da:	33ff      	adds	r3, #255	; 0xff
    b4dc:	18fb      	adds	r3, r7, r3
    b4de:	781b      	ldrb	r3, [r3, #0]
}
    b4e0:	0018      	movs	r0, r3
    b4e2:	46bd      	mov	sp, r7
    b4e4:	b045      	add	sp, #276	; 0x114
    b4e6:	bd90      	pop	{r4, r7, pc}
    b4e8:	fffffef4 	.word	0xfffffef4
    b4ec:	00000af9 	.word	0x00000af9
    b4f0:	0000d264 	.word	0x0000d264
    b4f4:	000010a5 	.word	0x000010a5
    b4f8:	0000d284 	.word	0x0000d284
    b4fc:	20000a2c 	.word	0x20000a2c
    b500:	0000b96b 	.word	0x0000b96b
    b504:	00009b61 	.word	0x00009b61
    b508:	20000d02 	.word	0x20000d02
    b50c:	0000d2a0 	.word	0x0000d2a0
    b510:	00001131 	.word	0x00001131
    b514:	0000d2b0 	.word	0x0000d2b0
    b518:	0000d2b8 	.word	0x0000d2b8
    b51c:	2000000c 	.word	0x2000000c
    b520:	20000c5c 	.word	0x20000c5c
    b524:	00009bb9 	.word	0x00009bb9
    b528:	0000d2d4 	.word	0x0000d2d4
    b52c:	0000d2f8 	.word	0x0000d2f8
    b530:	0000ab39 	.word	0x0000ab39
    b534:	0000a855 	.word	0x0000a855
    b538:	0000d30c 	.word	0x0000d30c
    b53c:	0000d318 	.word	0x0000d318
    b540:	20000020 	.word	0x20000020
    b544:	0000d330 	.word	0x0000d330
    b548:	0000d350 	.word	0x0000d350
    b54c:	0000a385 	.word	0x0000a385
    b550:	0000d374 	.word	0x0000d374
    b554:	0000d384 	.word	0x0000d384

0000b558 <jumpToApplication>:
 * @brief        Jumps to main application
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return
 ******************************************************************************/
static void jumpToApplication(void) {
    b558:	b580      	push	{r7, lr}
    b55a:	b082      	sub	sp, #8
    b55c:	af00      	add	r7, sp, #0
    // Function pointer to application section
    void (*applicationCodeEntry)(void);

    // Rebase stack pointer
    __set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b55e:	2390      	movs	r3, #144	; 0x90
    b560:	025b      	lsls	r3, r3, #9
    b562:	681b      	ldr	r3, [r3, #0]
    b564:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b566:	683b      	ldr	r3, [r7, #0]
    b568:	f383 8808 	msr	MSP, r3

    // Rebase vector table
    SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b56c:	4b06      	ldr	r3, [pc, #24]	; (b588 <jumpToApplication+0x30>)
    b56e:	2290      	movs	r2, #144	; 0x90
    b570:	0252      	lsls	r2, r2, #9
    b572:	609a      	str	r2, [r3, #8]

    // Set pointer to application section
    applicationCodeEntry = (void (*)(void))(unsigned *) (*(unsigned *) (APP_START_RESET_VEC_ADDRESS));
    b574:	4b05      	ldr	r3, [pc, #20]	; (b58c <jumpToApplication+0x34>)
    b576:	681b      	ldr	r3, [r3, #0]
    b578:	607b      	str	r3, [r7, #4]

    // Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry,
    // which should be the start of the main FW.
    applicationCodeEntry();
    b57a:	687b      	ldr	r3, [r7, #4]
    b57c:	4798      	blx	r3
}
    b57e:	46c0      	nop			; (mov r8, r8)
    b580:	46bd      	mov	sp, r7
    b582:	b002      	add	sp, #8
    b584:	bd80      	pop	{r7, pc}
    b586:	46c0      	nop			; (mov r8, r8)
    b588:	e000ed00 	.word	0xe000ed00
    b58c:	00012004 	.word	0x00012004

0000b590 <configure_nvm>:
 * function      static void configure_nvm(void)
 * @brief        Configures the NVM driver
 * @details
 * @return
 ******************************************************************************/
static void configure_nvm(void) {
    b590:	b580      	push	{r7, lr}
    b592:	b082      	sub	sp, #8
    b594:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    b596:	003b      	movs	r3, r7
    b598:	0018      	movs	r0, r3
    b59a:	4b06      	ldr	r3, [pc, #24]	; (b5b4 <configure_nvm+0x24>)
    b59c:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    b59e:	003b      	movs	r3, r7
    b5a0:	2200      	movs	r2, #0
    b5a2:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    b5a4:	003b      	movs	r3, r7
    b5a6:	0018      	movs	r0, r3
    b5a8:	4b03      	ldr	r3, [pc, #12]	; (b5b8 <configure_nvm+0x28>)
    b5aa:	4798      	blx	r3
}
    b5ac:	46c0      	nop			; (mov r8, r8)
    b5ae:	46bd      	mov	sp, r7
    b5b0:	b002      	add	sp, #8
    b5b2:	bd80      	pop	{r7, pc}
    b5b4:	0000ad09 	.word	0x0000ad09
    b5b8:	000004cd 	.word	0x000004cd

0000b5bc <__udivsi3>:
    b5bc:	2200      	movs	r2, #0
    b5be:	0843      	lsrs	r3, r0, #1
    b5c0:	428b      	cmp	r3, r1
    b5c2:	d374      	bcc.n	b6ae <__udivsi3+0xf2>
    b5c4:	0903      	lsrs	r3, r0, #4
    b5c6:	428b      	cmp	r3, r1
    b5c8:	d35f      	bcc.n	b68a <__udivsi3+0xce>
    b5ca:	0a03      	lsrs	r3, r0, #8
    b5cc:	428b      	cmp	r3, r1
    b5ce:	d344      	bcc.n	b65a <__udivsi3+0x9e>
    b5d0:	0b03      	lsrs	r3, r0, #12
    b5d2:	428b      	cmp	r3, r1
    b5d4:	d328      	bcc.n	b628 <__udivsi3+0x6c>
    b5d6:	0c03      	lsrs	r3, r0, #16
    b5d8:	428b      	cmp	r3, r1
    b5da:	d30d      	bcc.n	b5f8 <__udivsi3+0x3c>
    b5dc:	22ff      	movs	r2, #255	; 0xff
    b5de:	0209      	lsls	r1, r1, #8
    b5e0:	ba12      	rev	r2, r2
    b5e2:	0c03      	lsrs	r3, r0, #16
    b5e4:	428b      	cmp	r3, r1
    b5e6:	d302      	bcc.n	b5ee <__udivsi3+0x32>
    b5e8:	1212      	asrs	r2, r2, #8
    b5ea:	0209      	lsls	r1, r1, #8
    b5ec:	d065      	beq.n	b6ba <__udivsi3+0xfe>
    b5ee:	0b03      	lsrs	r3, r0, #12
    b5f0:	428b      	cmp	r3, r1
    b5f2:	d319      	bcc.n	b628 <__udivsi3+0x6c>
    b5f4:	e000      	b.n	b5f8 <__udivsi3+0x3c>
    b5f6:	0a09      	lsrs	r1, r1, #8
    b5f8:	0bc3      	lsrs	r3, r0, #15
    b5fa:	428b      	cmp	r3, r1
    b5fc:	d301      	bcc.n	b602 <__udivsi3+0x46>
    b5fe:	03cb      	lsls	r3, r1, #15
    b600:	1ac0      	subs	r0, r0, r3
    b602:	4152      	adcs	r2, r2
    b604:	0b83      	lsrs	r3, r0, #14
    b606:	428b      	cmp	r3, r1
    b608:	d301      	bcc.n	b60e <__udivsi3+0x52>
    b60a:	038b      	lsls	r3, r1, #14
    b60c:	1ac0      	subs	r0, r0, r3
    b60e:	4152      	adcs	r2, r2
    b610:	0b43      	lsrs	r3, r0, #13
    b612:	428b      	cmp	r3, r1
    b614:	d301      	bcc.n	b61a <__udivsi3+0x5e>
    b616:	034b      	lsls	r3, r1, #13
    b618:	1ac0      	subs	r0, r0, r3
    b61a:	4152      	adcs	r2, r2
    b61c:	0b03      	lsrs	r3, r0, #12
    b61e:	428b      	cmp	r3, r1
    b620:	d301      	bcc.n	b626 <__udivsi3+0x6a>
    b622:	030b      	lsls	r3, r1, #12
    b624:	1ac0      	subs	r0, r0, r3
    b626:	4152      	adcs	r2, r2
    b628:	0ac3      	lsrs	r3, r0, #11
    b62a:	428b      	cmp	r3, r1
    b62c:	d301      	bcc.n	b632 <__udivsi3+0x76>
    b62e:	02cb      	lsls	r3, r1, #11
    b630:	1ac0      	subs	r0, r0, r3
    b632:	4152      	adcs	r2, r2
    b634:	0a83      	lsrs	r3, r0, #10
    b636:	428b      	cmp	r3, r1
    b638:	d301      	bcc.n	b63e <__udivsi3+0x82>
    b63a:	028b      	lsls	r3, r1, #10
    b63c:	1ac0      	subs	r0, r0, r3
    b63e:	4152      	adcs	r2, r2
    b640:	0a43      	lsrs	r3, r0, #9
    b642:	428b      	cmp	r3, r1
    b644:	d301      	bcc.n	b64a <__udivsi3+0x8e>
    b646:	024b      	lsls	r3, r1, #9
    b648:	1ac0      	subs	r0, r0, r3
    b64a:	4152      	adcs	r2, r2
    b64c:	0a03      	lsrs	r3, r0, #8
    b64e:	428b      	cmp	r3, r1
    b650:	d301      	bcc.n	b656 <__udivsi3+0x9a>
    b652:	020b      	lsls	r3, r1, #8
    b654:	1ac0      	subs	r0, r0, r3
    b656:	4152      	adcs	r2, r2
    b658:	d2cd      	bcs.n	b5f6 <__udivsi3+0x3a>
    b65a:	09c3      	lsrs	r3, r0, #7
    b65c:	428b      	cmp	r3, r1
    b65e:	d301      	bcc.n	b664 <__udivsi3+0xa8>
    b660:	01cb      	lsls	r3, r1, #7
    b662:	1ac0      	subs	r0, r0, r3
    b664:	4152      	adcs	r2, r2
    b666:	0983      	lsrs	r3, r0, #6
    b668:	428b      	cmp	r3, r1
    b66a:	d301      	bcc.n	b670 <__udivsi3+0xb4>
    b66c:	018b      	lsls	r3, r1, #6
    b66e:	1ac0      	subs	r0, r0, r3
    b670:	4152      	adcs	r2, r2
    b672:	0943      	lsrs	r3, r0, #5
    b674:	428b      	cmp	r3, r1
    b676:	d301      	bcc.n	b67c <__udivsi3+0xc0>
    b678:	014b      	lsls	r3, r1, #5
    b67a:	1ac0      	subs	r0, r0, r3
    b67c:	4152      	adcs	r2, r2
    b67e:	0903      	lsrs	r3, r0, #4
    b680:	428b      	cmp	r3, r1
    b682:	d301      	bcc.n	b688 <__udivsi3+0xcc>
    b684:	010b      	lsls	r3, r1, #4
    b686:	1ac0      	subs	r0, r0, r3
    b688:	4152      	adcs	r2, r2
    b68a:	08c3      	lsrs	r3, r0, #3
    b68c:	428b      	cmp	r3, r1
    b68e:	d301      	bcc.n	b694 <__udivsi3+0xd8>
    b690:	00cb      	lsls	r3, r1, #3
    b692:	1ac0      	subs	r0, r0, r3
    b694:	4152      	adcs	r2, r2
    b696:	0883      	lsrs	r3, r0, #2
    b698:	428b      	cmp	r3, r1
    b69a:	d301      	bcc.n	b6a0 <__udivsi3+0xe4>
    b69c:	008b      	lsls	r3, r1, #2
    b69e:	1ac0      	subs	r0, r0, r3
    b6a0:	4152      	adcs	r2, r2
    b6a2:	0843      	lsrs	r3, r0, #1
    b6a4:	428b      	cmp	r3, r1
    b6a6:	d301      	bcc.n	b6ac <__udivsi3+0xf0>
    b6a8:	004b      	lsls	r3, r1, #1
    b6aa:	1ac0      	subs	r0, r0, r3
    b6ac:	4152      	adcs	r2, r2
    b6ae:	1a41      	subs	r1, r0, r1
    b6b0:	d200      	bcs.n	b6b4 <__udivsi3+0xf8>
    b6b2:	4601      	mov	r1, r0
    b6b4:	4152      	adcs	r2, r2
    b6b6:	4610      	mov	r0, r2
    b6b8:	4770      	bx	lr
    b6ba:	e7ff      	b.n	b6bc <__udivsi3+0x100>
    b6bc:	b501      	push	{r0, lr}
    b6be:	2000      	movs	r0, #0
    b6c0:	f000 f8f0 	bl	b8a4 <__aeabi_idiv0>
    b6c4:	bd02      	pop	{r1, pc}
    b6c6:	46c0      	nop			; (mov r8, r8)

0000b6c8 <__aeabi_uidivmod>:
    b6c8:	2900      	cmp	r1, #0
    b6ca:	d0f7      	beq.n	b6bc <__udivsi3+0x100>
    b6cc:	e776      	b.n	b5bc <__udivsi3>
    b6ce:	4770      	bx	lr

0000b6d0 <__divsi3>:
    b6d0:	4603      	mov	r3, r0
    b6d2:	430b      	orrs	r3, r1
    b6d4:	d47f      	bmi.n	b7d6 <__divsi3+0x106>
    b6d6:	2200      	movs	r2, #0
    b6d8:	0843      	lsrs	r3, r0, #1
    b6da:	428b      	cmp	r3, r1
    b6dc:	d374      	bcc.n	b7c8 <__divsi3+0xf8>
    b6de:	0903      	lsrs	r3, r0, #4
    b6e0:	428b      	cmp	r3, r1
    b6e2:	d35f      	bcc.n	b7a4 <__divsi3+0xd4>
    b6e4:	0a03      	lsrs	r3, r0, #8
    b6e6:	428b      	cmp	r3, r1
    b6e8:	d344      	bcc.n	b774 <__divsi3+0xa4>
    b6ea:	0b03      	lsrs	r3, r0, #12
    b6ec:	428b      	cmp	r3, r1
    b6ee:	d328      	bcc.n	b742 <__divsi3+0x72>
    b6f0:	0c03      	lsrs	r3, r0, #16
    b6f2:	428b      	cmp	r3, r1
    b6f4:	d30d      	bcc.n	b712 <__divsi3+0x42>
    b6f6:	22ff      	movs	r2, #255	; 0xff
    b6f8:	0209      	lsls	r1, r1, #8
    b6fa:	ba12      	rev	r2, r2
    b6fc:	0c03      	lsrs	r3, r0, #16
    b6fe:	428b      	cmp	r3, r1
    b700:	d302      	bcc.n	b708 <__divsi3+0x38>
    b702:	1212      	asrs	r2, r2, #8
    b704:	0209      	lsls	r1, r1, #8
    b706:	d065      	beq.n	b7d4 <__divsi3+0x104>
    b708:	0b03      	lsrs	r3, r0, #12
    b70a:	428b      	cmp	r3, r1
    b70c:	d319      	bcc.n	b742 <__divsi3+0x72>
    b70e:	e000      	b.n	b712 <__divsi3+0x42>
    b710:	0a09      	lsrs	r1, r1, #8
    b712:	0bc3      	lsrs	r3, r0, #15
    b714:	428b      	cmp	r3, r1
    b716:	d301      	bcc.n	b71c <__divsi3+0x4c>
    b718:	03cb      	lsls	r3, r1, #15
    b71a:	1ac0      	subs	r0, r0, r3
    b71c:	4152      	adcs	r2, r2
    b71e:	0b83      	lsrs	r3, r0, #14
    b720:	428b      	cmp	r3, r1
    b722:	d301      	bcc.n	b728 <__divsi3+0x58>
    b724:	038b      	lsls	r3, r1, #14
    b726:	1ac0      	subs	r0, r0, r3
    b728:	4152      	adcs	r2, r2
    b72a:	0b43      	lsrs	r3, r0, #13
    b72c:	428b      	cmp	r3, r1
    b72e:	d301      	bcc.n	b734 <__divsi3+0x64>
    b730:	034b      	lsls	r3, r1, #13
    b732:	1ac0      	subs	r0, r0, r3
    b734:	4152      	adcs	r2, r2
    b736:	0b03      	lsrs	r3, r0, #12
    b738:	428b      	cmp	r3, r1
    b73a:	d301      	bcc.n	b740 <__divsi3+0x70>
    b73c:	030b      	lsls	r3, r1, #12
    b73e:	1ac0      	subs	r0, r0, r3
    b740:	4152      	adcs	r2, r2
    b742:	0ac3      	lsrs	r3, r0, #11
    b744:	428b      	cmp	r3, r1
    b746:	d301      	bcc.n	b74c <__divsi3+0x7c>
    b748:	02cb      	lsls	r3, r1, #11
    b74a:	1ac0      	subs	r0, r0, r3
    b74c:	4152      	adcs	r2, r2
    b74e:	0a83      	lsrs	r3, r0, #10
    b750:	428b      	cmp	r3, r1
    b752:	d301      	bcc.n	b758 <__divsi3+0x88>
    b754:	028b      	lsls	r3, r1, #10
    b756:	1ac0      	subs	r0, r0, r3
    b758:	4152      	adcs	r2, r2
    b75a:	0a43      	lsrs	r3, r0, #9
    b75c:	428b      	cmp	r3, r1
    b75e:	d301      	bcc.n	b764 <__divsi3+0x94>
    b760:	024b      	lsls	r3, r1, #9
    b762:	1ac0      	subs	r0, r0, r3
    b764:	4152      	adcs	r2, r2
    b766:	0a03      	lsrs	r3, r0, #8
    b768:	428b      	cmp	r3, r1
    b76a:	d301      	bcc.n	b770 <__divsi3+0xa0>
    b76c:	020b      	lsls	r3, r1, #8
    b76e:	1ac0      	subs	r0, r0, r3
    b770:	4152      	adcs	r2, r2
    b772:	d2cd      	bcs.n	b710 <__divsi3+0x40>
    b774:	09c3      	lsrs	r3, r0, #7
    b776:	428b      	cmp	r3, r1
    b778:	d301      	bcc.n	b77e <__divsi3+0xae>
    b77a:	01cb      	lsls	r3, r1, #7
    b77c:	1ac0      	subs	r0, r0, r3
    b77e:	4152      	adcs	r2, r2
    b780:	0983      	lsrs	r3, r0, #6
    b782:	428b      	cmp	r3, r1
    b784:	d301      	bcc.n	b78a <__divsi3+0xba>
    b786:	018b      	lsls	r3, r1, #6
    b788:	1ac0      	subs	r0, r0, r3
    b78a:	4152      	adcs	r2, r2
    b78c:	0943      	lsrs	r3, r0, #5
    b78e:	428b      	cmp	r3, r1
    b790:	d301      	bcc.n	b796 <__divsi3+0xc6>
    b792:	014b      	lsls	r3, r1, #5
    b794:	1ac0      	subs	r0, r0, r3
    b796:	4152      	adcs	r2, r2
    b798:	0903      	lsrs	r3, r0, #4
    b79a:	428b      	cmp	r3, r1
    b79c:	d301      	bcc.n	b7a2 <__divsi3+0xd2>
    b79e:	010b      	lsls	r3, r1, #4
    b7a0:	1ac0      	subs	r0, r0, r3
    b7a2:	4152      	adcs	r2, r2
    b7a4:	08c3      	lsrs	r3, r0, #3
    b7a6:	428b      	cmp	r3, r1
    b7a8:	d301      	bcc.n	b7ae <__divsi3+0xde>
    b7aa:	00cb      	lsls	r3, r1, #3
    b7ac:	1ac0      	subs	r0, r0, r3
    b7ae:	4152      	adcs	r2, r2
    b7b0:	0883      	lsrs	r3, r0, #2
    b7b2:	428b      	cmp	r3, r1
    b7b4:	d301      	bcc.n	b7ba <__divsi3+0xea>
    b7b6:	008b      	lsls	r3, r1, #2
    b7b8:	1ac0      	subs	r0, r0, r3
    b7ba:	4152      	adcs	r2, r2
    b7bc:	0843      	lsrs	r3, r0, #1
    b7be:	428b      	cmp	r3, r1
    b7c0:	d301      	bcc.n	b7c6 <__divsi3+0xf6>
    b7c2:	004b      	lsls	r3, r1, #1
    b7c4:	1ac0      	subs	r0, r0, r3
    b7c6:	4152      	adcs	r2, r2
    b7c8:	1a41      	subs	r1, r0, r1
    b7ca:	d200      	bcs.n	b7ce <__divsi3+0xfe>
    b7cc:	4601      	mov	r1, r0
    b7ce:	4152      	adcs	r2, r2
    b7d0:	4610      	mov	r0, r2
    b7d2:	4770      	bx	lr
    b7d4:	e05d      	b.n	b892 <__divsi3+0x1c2>
    b7d6:	0fca      	lsrs	r2, r1, #31
    b7d8:	d000      	beq.n	b7dc <__divsi3+0x10c>
    b7da:	4249      	negs	r1, r1
    b7dc:	1003      	asrs	r3, r0, #32
    b7de:	d300      	bcc.n	b7e2 <__divsi3+0x112>
    b7e0:	4240      	negs	r0, r0
    b7e2:	4053      	eors	r3, r2
    b7e4:	2200      	movs	r2, #0
    b7e6:	469c      	mov	ip, r3
    b7e8:	0903      	lsrs	r3, r0, #4
    b7ea:	428b      	cmp	r3, r1
    b7ec:	d32d      	bcc.n	b84a <__divsi3+0x17a>
    b7ee:	0a03      	lsrs	r3, r0, #8
    b7f0:	428b      	cmp	r3, r1
    b7f2:	d312      	bcc.n	b81a <__divsi3+0x14a>
    b7f4:	22fc      	movs	r2, #252	; 0xfc
    b7f6:	0189      	lsls	r1, r1, #6
    b7f8:	ba12      	rev	r2, r2
    b7fa:	0a03      	lsrs	r3, r0, #8
    b7fc:	428b      	cmp	r3, r1
    b7fe:	d30c      	bcc.n	b81a <__divsi3+0x14a>
    b800:	0189      	lsls	r1, r1, #6
    b802:	1192      	asrs	r2, r2, #6
    b804:	428b      	cmp	r3, r1
    b806:	d308      	bcc.n	b81a <__divsi3+0x14a>
    b808:	0189      	lsls	r1, r1, #6
    b80a:	1192      	asrs	r2, r2, #6
    b80c:	428b      	cmp	r3, r1
    b80e:	d304      	bcc.n	b81a <__divsi3+0x14a>
    b810:	0189      	lsls	r1, r1, #6
    b812:	d03a      	beq.n	b88a <__divsi3+0x1ba>
    b814:	1192      	asrs	r2, r2, #6
    b816:	e000      	b.n	b81a <__divsi3+0x14a>
    b818:	0989      	lsrs	r1, r1, #6
    b81a:	09c3      	lsrs	r3, r0, #7
    b81c:	428b      	cmp	r3, r1
    b81e:	d301      	bcc.n	b824 <__divsi3+0x154>
    b820:	01cb      	lsls	r3, r1, #7
    b822:	1ac0      	subs	r0, r0, r3
    b824:	4152      	adcs	r2, r2
    b826:	0983      	lsrs	r3, r0, #6
    b828:	428b      	cmp	r3, r1
    b82a:	d301      	bcc.n	b830 <__divsi3+0x160>
    b82c:	018b      	lsls	r3, r1, #6
    b82e:	1ac0      	subs	r0, r0, r3
    b830:	4152      	adcs	r2, r2
    b832:	0943      	lsrs	r3, r0, #5
    b834:	428b      	cmp	r3, r1
    b836:	d301      	bcc.n	b83c <__divsi3+0x16c>
    b838:	014b      	lsls	r3, r1, #5
    b83a:	1ac0      	subs	r0, r0, r3
    b83c:	4152      	adcs	r2, r2
    b83e:	0903      	lsrs	r3, r0, #4
    b840:	428b      	cmp	r3, r1
    b842:	d301      	bcc.n	b848 <__divsi3+0x178>
    b844:	010b      	lsls	r3, r1, #4
    b846:	1ac0      	subs	r0, r0, r3
    b848:	4152      	adcs	r2, r2
    b84a:	08c3      	lsrs	r3, r0, #3
    b84c:	428b      	cmp	r3, r1
    b84e:	d301      	bcc.n	b854 <__divsi3+0x184>
    b850:	00cb      	lsls	r3, r1, #3
    b852:	1ac0      	subs	r0, r0, r3
    b854:	4152      	adcs	r2, r2
    b856:	0883      	lsrs	r3, r0, #2
    b858:	428b      	cmp	r3, r1
    b85a:	d301      	bcc.n	b860 <__divsi3+0x190>
    b85c:	008b      	lsls	r3, r1, #2
    b85e:	1ac0      	subs	r0, r0, r3
    b860:	4152      	adcs	r2, r2
    b862:	d2d9      	bcs.n	b818 <__divsi3+0x148>
    b864:	0843      	lsrs	r3, r0, #1
    b866:	428b      	cmp	r3, r1
    b868:	d301      	bcc.n	b86e <__divsi3+0x19e>
    b86a:	004b      	lsls	r3, r1, #1
    b86c:	1ac0      	subs	r0, r0, r3
    b86e:	4152      	adcs	r2, r2
    b870:	1a41      	subs	r1, r0, r1
    b872:	d200      	bcs.n	b876 <__divsi3+0x1a6>
    b874:	4601      	mov	r1, r0
    b876:	4663      	mov	r3, ip
    b878:	4152      	adcs	r2, r2
    b87a:	105b      	asrs	r3, r3, #1
    b87c:	4610      	mov	r0, r2
    b87e:	d301      	bcc.n	b884 <__divsi3+0x1b4>
    b880:	4240      	negs	r0, r0
    b882:	2b00      	cmp	r3, #0
    b884:	d500      	bpl.n	b888 <__divsi3+0x1b8>
    b886:	4249      	negs	r1, r1
    b888:	4770      	bx	lr
    b88a:	4663      	mov	r3, ip
    b88c:	105b      	asrs	r3, r3, #1
    b88e:	d300      	bcc.n	b892 <__divsi3+0x1c2>
    b890:	4240      	negs	r0, r0
    b892:	b501      	push	{r0, lr}
    b894:	2000      	movs	r0, #0
    b896:	f000 f805 	bl	b8a4 <__aeabi_idiv0>
    b89a:	bd02      	pop	{r1, pc}

0000b89c <__aeabi_idivmod>:
    b89c:	2900      	cmp	r1, #0
    b89e:	d0f8      	beq.n	b892 <__divsi3+0x1c2>
    b8a0:	e716      	b.n	b6d0 <__divsi3>
    b8a2:	4770      	bx	lr

0000b8a4 <__aeabi_idiv0>:
    b8a4:	4770      	bx	lr
    b8a6:	46c0      	nop			; (mov r8, r8)

0000b8a8 <__aeabi_lmul>:
    b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8aa:	46ce      	mov	lr, r9
    b8ac:	4647      	mov	r7, r8
    b8ae:	0415      	lsls	r5, r2, #16
    b8b0:	0c2d      	lsrs	r5, r5, #16
    b8b2:	002e      	movs	r6, r5
    b8b4:	b580      	push	{r7, lr}
    b8b6:	0407      	lsls	r7, r0, #16
    b8b8:	0c14      	lsrs	r4, r2, #16
    b8ba:	0c3f      	lsrs	r7, r7, #16
    b8bc:	4699      	mov	r9, r3
    b8be:	0c03      	lsrs	r3, r0, #16
    b8c0:	437e      	muls	r6, r7
    b8c2:	435d      	muls	r5, r3
    b8c4:	4367      	muls	r7, r4
    b8c6:	4363      	muls	r3, r4
    b8c8:	197f      	adds	r7, r7, r5
    b8ca:	0c34      	lsrs	r4, r6, #16
    b8cc:	19e4      	adds	r4, r4, r7
    b8ce:	469c      	mov	ip, r3
    b8d0:	42a5      	cmp	r5, r4
    b8d2:	d903      	bls.n	b8dc <__aeabi_lmul+0x34>
    b8d4:	2380      	movs	r3, #128	; 0x80
    b8d6:	025b      	lsls	r3, r3, #9
    b8d8:	4698      	mov	r8, r3
    b8da:	44c4      	add	ip, r8
    b8dc:	464b      	mov	r3, r9
    b8de:	4351      	muls	r1, r2
    b8e0:	4343      	muls	r3, r0
    b8e2:	0436      	lsls	r6, r6, #16
    b8e4:	0c36      	lsrs	r6, r6, #16
    b8e6:	0c25      	lsrs	r5, r4, #16
    b8e8:	0424      	lsls	r4, r4, #16
    b8ea:	4465      	add	r5, ip
    b8ec:	19a4      	adds	r4, r4, r6
    b8ee:	1859      	adds	r1, r3, r1
    b8f0:	1949      	adds	r1, r1, r5
    b8f2:	0020      	movs	r0, r4
    b8f4:	bc0c      	pop	{r2, r3}
    b8f6:	4690      	mov	r8, r2
    b8f8:	4699      	mov	r9, r3
    b8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b8fc <__libc_init_array>:
    b8fc:	b570      	push	{r4, r5, r6, lr}
    b8fe:	2600      	movs	r6, #0
    b900:	4d0c      	ldr	r5, [pc, #48]	; (b934 <__libc_init_array+0x38>)
    b902:	4c0d      	ldr	r4, [pc, #52]	; (b938 <__libc_init_array+0x3c>)
    b904:	1b64      	subs	r4, r4, r5
    b906:	10a4      	asrs	r4, r4, #2
    b908:	42a6      	cmp	r6, r4
    b90a:	d109      	bne.n	b920 <__libc_init_array+0x24>
    b90c:	2600      	movs	r6, #0
    b90e:	f001 fd9d 	bl	d44c <_init>
    b912:	4d0a      	ldr	r5, [pc, #40]	; (b93c <__libc_init_array+0x40>)
    b914:	4c0a      	ldr	r4, [pc, #40]	; (b940 <__libc_init_array+0x44>)
    b916:	1b64      	subs	r4, r4, r5
    b918:	10a4      	asrs	r4, r4, #2
    b91a:	42a6      	cmp	r6, r4
    b91c:	d105      	bne.n	b92a <__libc_init_array+0x2e>
    b91e:	bd70      	pop	{r4, r5, r6, pc}
    b920:	00b3      	lsls	r3, r6, #2
    b922:	58eb      	ldr	r3, [r5, r3]
    b924:	4798      	blx	r3
    b926:	3601      	adds	r6, #1
    b928:	e7ee      	b.n	b908 <__libc_init_array+0xc>
    b92a:	00b3      	lsls	r3, r6, #2
    b92c:	58eb      	ldr	r3, [r5, r3]
    b92e:	4798      	blx	r3
    b930:	3601      	adds	r6, #1
    b932:	e7f2      	b.n	b91a <__libc_init_array+0x1e>
    b934:	0000d458 	.word	0x0000d458
    b938:	0000d458 	.word	0x0000d458
    b93c:	0000d458 	.word	0x0000d458
    b940:	0000d45c 	.word	0x0000d45c

0000b944 <malloc>:
    b944:	b510      	push	{r4, lr}
    b946:	4b03      	ldr	r3, [pc, #12]	; (b954 <malloc+0x10>)
    b948:	0001      	movs	r1, r0
    b94a:	6818      	ldr	r0, [r3, #0]
    b94c:	f000 f860 	bl	ba10 <_malloc_r>
    b950:	bd10      	pop	{r4, pc}
    b952:	46c0      	nop			; (mov r8, r8)
    b954:	20000058 	.word	0x20000058

0000b958 <memcpy>:
    b958:	2300      	movs	r3, #0
    b95a:	b510      	push	{r4, lr}
    b95c:	429a      	cmp	r2, r3
    b95e:	d100      	bne.n	b962 <memcpy+0xa>
    b960:	bd10      	pop	{r4, pc}
    b962:	5ccc      	ldrb	r4, [r1, r3]
    b964:	54c4      	strb	r4, [r0, r3]
    b966:	3301      	adds	r3, #1
    b968:	e7f8      	b.n	b95c <memcpy+0x4>

0000b96a <memset>:
    b96a:	0003      	movs	r3, r0
    b96c:	1882      	adds	r2, r0, r2
    b96e:	4293      	cmp	r3, r2
    b970:	d100      	bne.n	b974 <memset+0xa>
    b972:	4770      	bx	lr
    b974:	7019      	strb	r1, [r3, #0]
    b976:	3301      	adds	r3, #1
    b978:	e7f9      	b.n	b96e <memset+0x4>
	...

0000b97c <_free_r>:
    b97c:	b570      	push	{r4, r5, r6, lr}
    b97e:	0005      	movs	r5, r0
    b980:	2900      	cmp	r1, #0
    b982:	d010      	beq.n	b9a6 <_free_r+0x2a>
    b984:	1f0c      	subs	r4, r1, #4
    b986:	6823      	ldr	r3, [r4, #0]
    b988:	2b00      	cmp	r3, #0
    b98a:	da00      	bge.n	b98e <_free_r+0x12>
    b98c:	18e4      	adds	r4, r4, r3
    b98e:	0028      	movs	r0, r5
    b990:	f000 fb54 	bl	c03c <__malloc_lock>
    b994:	4a1d      	ldr	r2, [pc, #116]	; (ba0c <_free_r+0x90>)
    b996:	6813      	ldr	r3, [r2, #0]
    b998:	2b00      	cmp	r3, #0
    b99a:	d105      	bne.n	b9a8 <_free_r+0x2c>
    b99c:	6063      	str	r3, [r4, #4]
    b99e:	6014      	str	r4, [r2, #0]
    b9a0:	0028      	movs	r0, r5
    b9a2:	f000 fb4c 	bl	c03e <__malloc_unlock>
    b9a6:	bd70      	pop	{r4, r5, r6, pc}
    b9a8:	42a3      	cmp	r3, r4
    b9aa:	d909      	bls.n	b9c0 <_free_r+0x44>
    b9ac:	6821      	ldr	r1, [r4, #0]
    b9ae:	1860      	adds	r0, r4, r1
    b9b0:	4283      	cmp	r3, r0
    b9b2:	d1f3      	bne.n	b99c <_free_r+0x20>
    b9b4:	6818      	ldr	r0, [r3, #0]
    b9b6:	685b      	ldr	r3, [r3, #4]
    b9b8:	1841      	adds	r1, r0, r1
    b9ba:	6021      	str	r1, [r4, #0]
    b9bc:	e7ee      	b.n	b99c <_free_r+0x20>
    b9be:	0013      	movs	r3, r2
    b9c0:	685a      	ldr	r2, [r3, #4]
    b9c2:	2a00      	cmp	r2, #0
    b9c4:	d001      	beq.n	b9ca <_free_r+0x4e>
    b9c6:	42a2      	cmp	r2, r4
    b9c8:	d9f9      	bls.n	b9be <_free_r+0x42>
    b9ca:	6819      	ldr	r1, [r3, #0]
    b9cc:	1858      	adds	r0, r3, r1
    b9ce:	42a0      	cmp	r0, r4
    b9d0:	d10b      	bne.n	b9ea <_free_r+0x6e>
    b9d2:	6820      	ldr	r0, [r4, #0]
    b9d4:	1809      	adds	r1, r1, r0
    b9d6:	1858      	adds	r0, r3, r1
    b9d8:	6019      	str	r1, [r3, #0]
    b9da:	4282      	cmp	r2, r0
    b9dc:	d1e0      	bne.n	b9a0 <_free_r+0x24>
    b9de:	6810      	ldr	r0, [r2, #0]
    b9e0:	6852      	ldr	r2, [r2, #4]
    b9e2:	1841      	adds	r1, r0, r1
    b9e4:	6019      	str	r1, [r3, #0]
    b9e6:	605a      	str	r2, [r3, #4]
    b9e8:	e7da      	b.n	b9a0 <_free_r+0x24>
    b9ea:	42a0      	cmp	r0, r4
    b9ec:	d902      	bls.n	b9f4 <_free_r+0x78>
    b9ee:	230c      	movs	r3, #12
    b9f0:	602b      	str	r3, [r5, #0]
    b9f2:	e7d5      	b.n	b9a0 <_free_r+0x24>
    b9f4:	6821      	ldr	r1, [r4, #0]
    b9f6:	1860      	adds	r0, r4, r1
    b9f8:	4282      	cmp	r2, r0
    b9fa:	d103      	bne.n	ba04 <_free_r+0x88>
    b9fc:	6810      	ldr	r0, [r2, #0]
    b9fe:	6852      	ldr	r2, [r2, #4]
    ba00:	1841      	adds	r1, r0, r1
    ba02:	6021      	str	r1, [r4, #0]
    ba04:	6062      	str	r2, [r4, #4]
    ba06:	605c      	str	r4, [r3, #4]
    ba08:	e7ca      	b.n	b9a0 <_free_r+0x24>
    ba0a:	46c0      	nop			; (mov r8, r8)
    ba0c:	200001ac 	.word	0x200001ac

0000ba10 <_malloc_r>:
    ba10:	2303      	movs	r3, #3
    ba12:	b570      	push	{r4, r5, r6, lr}
    ba14:	1ccd      	adds	r5, r1, #3
    ba16:	439d      	bics	r5, r3
    ba18:	3508      	adds	r5, #8
    ba1a:	0006      	movs	r6, r0
    ba1c:	2d0c      	cmp	r5, #12
    ba1e:	d21e      	bcs.n	ba5e <_malloc_r+0x4e>
    ba20:	250c      	movs	r5, #12
    ba22:	42a9      	cmp	r1, r5
    ba24:	d81d      	bhi.n	ba62 <_malloc_r+0x52>
    ba26:	0030      	movs	r0, r6
    ba28:	f000 fb08 	bl	c03c <__malloc_lock>
    ba2c:	4a25      	ldr	r2, [pc, #148]	; (bac4 <_malloc_r+0xb4>)
    ba2e:	6814      	ldr	r4, [r2, #0]
    ba30:	0021      	movs	r1, r4
    ba32:	2900      	cmp	r1, #0
    ba34:	d119      	bne.n	ba6a <_malloc_r+0x5a>
    ba36:	4c24      	ldr	r4, [pc, #144]	; (bac8 <_malloc_r+0xb8>)
    ba38:	6823      	ldr	r3, [r4, #0]
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d103      	bne.n	ba46 <_malloc_r+0x36>
    ba3e:	0030      	movs	r0, r6
    ba40:	f000 f844 	bl	bacc <_sbrk_r>
    ba44:	6020      	str	r0, [r4, #0]
    ba46:	0029      	movs	r1, r5
    ba48:	0030      	movs	r0, r6
    ba4a:	f000 f83f 	bl	bacc <_sbrk_r>
    ba4e:	1c43      	adds	r3, r0, #1
    ba50:	d12c      	bne.n	baac <_malloc_r+0x9c>
    ba52:	230c      	movs	r3, #12
    ba54:	0030      	movs	r0, r6
    ba56:	6033      	str	r3, [r6, #0]
    ba58:	f000 faf1 	bl	c03e <__malloc_unlock>
    ba5c:	e003      	b.n	ba66 <_malloc_r+0x56>
    ba5e:	2d00      	cmp	r5, #0
    ba60:	dadf      	bge.n	ba22 <_malloc_r+0x12>
    ba62:	230c      	movs	r3, #12
    ba64:	6033      	str	r3, [r6, #0]
    ba66:	2000      	movs	r0, #0
    ba68:	bd70      	pop	{r4, r5, r6, pc}
    ba6a:	680b      	ldr	r3, [r1, #0]
    ba6c:	1b5b      	subs	r3, r3, r5
    ba6e:	d41a      	bmi.n	baa6 <_malloc_r+0x96>
    ba70:	2b0b      	cmp	r3, #11
    ba72:	d903      	bls.n	ba7c <_malloc_r+0x6c>
    ba74:	600b      	str	r3, [r1, #0]
    ba76:	18cc      	adds	r4, r1, r3
    ba78:	6025      	str	r5, [r4, #0]
    ba7a:	e003      	b.n	ba84 <_malloc_r+0x74>
    ba7c:	428c      	cmp	r4, r1
    ba7e:	d10e      	bne.n	ba9e <_malloc_r+0x8e>
    ba80:	6863      	ldr	r3, [r4, #4]
    ba82:	6013      	str	r3, [r2, #0]
    ba84:	0030      	movs	r0, r6
    ba86:	f000 fada 	bl	c03e <__malloc_unlock>
    ba8a:	0020      	movs	r0, r4
    ba8c:	2207      	movs	r2, #7
    ba8e:	300b      	adds	r0, #11
    ba90:	1d23      	adds	r3, r4, #4
    ba92:	4390      	bics	r0, r2
    ba94:	1ac3      	subs	r3, r0, r3
    ba96:	d0e7      	beq.n	ba68 <_malloc_r+0x58>
    ba98:	425a      	negs	r2, r3
    ba9a:	50e2      	str	r2, [r4, r3]
    ba9c:	e7e4      	b.n	ba68 <_malloc_r+0x58>
    ba9e:	684b      	ldr	r3, [r1, #4]
    baa0:	6063      	str	r3, [r4, #4]
    baa2:	000c      	movs	r4, r1
    baa4:	e7ee      	b.n	ba84 <_malloc_r+0x74>
    baa6:	000c      	movs	r4, r1
    baa8:	6849      	ldr	r1, [r1, #4]
    baaa:	e7c2      	b.n	ba32 <_malloc_r+0x22>
    baac:	2303      	movs	r3, #3
    baae:	1cc4      	adds	r4, r0, #3
    bab0:	439c      	bics	r4, r3
    bab2:	42a0      	cmp	r0, r4
    bab4:	d0e0      	beq.n	ba78 <_malloc_r+0x68>
    bab6:	1a21      	subs	r1, r4, r0
    bab8:	0030      	movs	r0, r6
    baba:	f000 f807 	bl	bacc <_sbrk_r>
    babe:	1c43      	adds	r3, r0, #1
    bac0:	d1da      	bne.n	ba78 <_malloc_r+0x68>
    bac2:	e7c6      	b.n	ba52 <_malloc_r+0x42>
    bac4:	200001ac 	.word	0x200001ac
    bac8:	200001b0 	.word	0x200001b0

0000bacc <_sbrk_r>:
    bacc:	2300      	movs	r3, #0
    bace:	b570      	push	{r4, r5, r6, lr}
    bad0:	4c06      	ldr	r4, [pc, #24]	; (baec <_sbrk_r+0x20>)
    bad2:	0005      	movs	r5, r0
    bad4:	0008      	movs	r0, r1
    bad6:	6023      	str	r3, [r4, #0]
    bad8:	f7fb faca 	bl	7070 <_sbrk>
    badc:	1c43      	adds	r3, r0, #1
    bade:	d103      	bne.n	bae8 <_sbrk_r+0x1c>
    bae0:	6823      	ldr	r3, [r4, #0]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d000      	beq.n	bae8 <_sbrk_r+0x1c>
    bae6:	602b      	str	r3, [r5, #0]
    bae8:	bd70      	pop	{r4, r5, r6, pc}
    baea:	46c0      	nop			; (mov r8, r8)
    baec:	20000d2c 	.word	0x20000d2c

0000baf0 <setbuf>:
    baf0:	424a      	negs	r2, r1
    baf2:	414a      	adcs	r2, r1
    baf4:	2380      	movs	r3, #128	; 0x80
    baf6:	b510      	push	{r4, lr}
    baf8:	0052      	lsls	r2, r2, #1
    bafa:	00db      	lsls	r3, r3, #3
    bafc:	f000 f802 	bl	bb04 <setvbuf>
    bb00:	bd10      	pop	{r4, pc}
	...

0000bb04 <setvbuf>:
    bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb06:	001d      	movs	r5, r3
    bb08:	4b4f      	ldr	r3, [pc, #316]	; (bc48 <setvbuf+0x144>)
    bb0a:	b085      	sub	sp, #20
    bb0c:	681e      	ldr	r6, [r3, #0]
    bb0e:	0004      	movs	r4, r0
    bb10:	000f      	movs	r7, r1
    bb12:	9200      	str	r2, [sp, #0]
    bb14:	2e00      	cmp	r6, #0
    bb16:	d005      	beq.n	bb24 <setvbuf+0x20>
    bb18:	69b3      	ldr	r3, [r6, #24]
    bb1a:	2b00      	cmp	r3, #0
    bb1c:	d102      	bne.n	bb24 <setvbuf+0x20>
    bb1e:	0030      	movs	r0, r6
    bb20:	f000 f9ce 	bl	bec0 <__sinit>
    bb24:	4b49      	ldr	r3, [pc, #292]	; (bc4c <setvbuf+0x148>)
    bb26:	429c      	cmp	r4, r3
    bb28:	d150      	bne.n	bbcc <setvbuf+0xc8>
    bb2a:	6874      	ldr	r4, [r6, #4]
    bb2c:	9b00      	ldr	r3, [sp, #0]
    bb2e:	2b02      	cmp	r3, #2
    bb30:	d005      	beq.n	bb3e <setvbuf+0x3a>
    bb32:	2b01      	cmp	r3, #1
    bb34:	d900      	bls.n	bb38 <setvbuf+0x34>
    bb36:	e084      	b.n	bc42 <setvbuf+0x13e>
    bb38:	2d00      	cmp	r5, #0
    bb3a:	da00      	bge.n	bb3e <setvbuf+0x3a>
    bb3c:	e081      	b.n	bc42 <setvbuf+0x13e>
    bb3e:	0021      	movs	r1, r4
    bb40:	0030      	movs	r0, r6
    bb42:	f000 f94f 	bl	bde4 <_fflush_r>
    bb46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bb48:	2900      	cmp	r1, #0
    bb4a:	d008      	beq.n	bb5e <setvbuf+0x5a>
    bb4c:	0023      	movs	r3, r4
    bb4e:	3344      	adds	r3, #68	; 0x44
    bb50:	4299      	cmp	r1, r3
    bb52:	d002      	beq.n	bb5a <setvbuf+0x56>
    bb54:	0030      	movs	r0, r6
    bb56:	f7ff ff11 	bl	b97c <_free_r>
    bb5a:	2300      	movs	r3, #0
    bb5c:	6363      	str	r3, [r4, #52]	; 0x34
    bb5e:	2300      	movs	r3, #0
    bb60:	61a3      	str	r3, [r4, #24]
    bb62:	6063      	str	r3, [r4, #4]
    bb64:	89a3      	ldrh	r3, [r4, #12]
    bb66:	061b      	lsls	r3, r3, #24
    bb68:	d503      	bpl.n	bb72 <setvbuf+0x6e>
    bb6a:	6921      	ldr	r1, [r4, #16]
    bb6c:	0030      	movs	r0, r6
    bb6e:	f7ff ff05 	bl	b97c <_free_r>
    bb72:	89a3      	ldrh	r3, [r4, #12]
    bb74:	4a36      	ldr	r2, [pc, #216]	; (bc50 <setvbuf+0x14c>)
    bb76:	4013      	ands	r3, r2
    bb78:	81a3      	strh	r3, [r4, #12]
    bb7a:	9b00      	ldr	r3, [sp, #0]
    bb7c:	2b02      	cmp	r3, #2
    bb7e:	d05a      	beq.n	bc36 <setvbuf+0x132>
    bb80:	ab03      	add	r3, sp, #12
    bb82:	aa02      	add	r2, sp, #8
    bb84:	0021      	movs	r1, r4
    bb86:	0030      	movs	r0, r6
    bb88:	f000 fa30 	bl	bfec <__swhatbuf_r>
    bb8c:	89a3      	ldrh	r3, [r4, #12]
    bb8e:	4318      	orrs	r0, r3
    bb90:	81a0      	strh	r0, [r4, #12]
    bb92:	2d00      	cmp	r5, #0
    bb94:	d124      	bne.n	bbe0 <setvbuf+0xdc>
    bb96:	9d02      	ldr	r5, [sp, #8]
    bb98:	0028      	movs	r0, r5
    bb9a:	f7ff fed3 	bl	b944 <malloc>
    bb9e:	9501      	str	r5, [sp, #4]
    bba0:	1e07      	subs	r7, r0, #0
    bba2:	d142      	bne.n	bc2a <setvbuf+0x126>
    bba4:	9b02      	ldr	r3, [sp, #8]
    bba6:	9301      	str	r3, [sp, #4]
    bba8:	42ab      	cmp	r3, r5
    bbaa:	d139      	bne.n	bc20 <setvbuf+0x11c>
    bbac:	2001      	movs	r0, #1
    bbae:	4240      	negs	r0, r0
    bbb0:	2302      	movs	r3, #2
    bbb2:	89a2      	ldrh	r2, [r4, #12]
    bbb4:	4313      	orrs	r3, r2
    bbb6:	81a3      	strh	r3, [r4, #12]
    bbb8:	2300      	movs	r3, #0
    bbba:	60a3      	str	r3, [r4, #8]
    bbbc:	0023      	movs	r3, r4
    bbbe:	3347      	adds	r3, #71	; 0x47
    bbc0:	6023      	str	r3, [r4, #0]
    bbc2:	6123      	str	r3, [r4, #16]
    bbc4:	2301      	movs	r3, #1
    bbc6:	6163      	str	r3, [r4, #20]
    bbc8:	b005      	add	sp, #20
    bbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbcc:	4b21      	ldr	r3, [pc, #132]	; (bc54 <setvbuf+0x150>)
    bbce:	429c      	cmp	r4, r3
    bbd0:	d101      	bne.n	bbd6 <setvbuf+0xd2>
    bbd2:	68b4      	ldr	r4, [r6, #8]
    bbd4:	e7aa      	b.n	bb2c <setvbuf+0x28>
    bbd6:	4b20      	ldr	r3, [pc, #128]	; (bc58 <setvbuf+0x154>)
    bbd8:	429c      	cmp	r4, r3
    bbda:	d1a7      	bne.n	bb2c <setvbuf+0x28>
    bbdc:	68f4      	ldr	r4, [r6, #12]
    bbde:	e7a5      	b.n	bb2c <setvbuf+0x28>
    bbe0:	2f00      	cmp	r7, #0
    bbe2:	d0d9      	beq.n	bb98 <setvbuf+0x94>
    bbe4:	69b3      	ldr	r3, [r6, #24]
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	d102      	bne.n	bbf0 <setvbuf+0xec>
    bbea:	0030      	movs	r0, r6
    bbec:	f000 f968 	bl	bec0 <__sinit>
    bbf0:	9b00      	ldr	r3, [sp, #0]
    bbf2:	2b01      	cmp	r3, #1
    bbf4:	d103      	bne.n	bbfe <setvbuf+0xfa>
    bbf6:	89a3      	ldrh	r3, [r4, #12]
    bbf8:	9a00      	ldr	r2, [sp, #0]
    bbfa:	431a      	orrs	r2, r3
    bbfc:	81a2      	strh	r2, [r4, #12]
    bbfe:	2008      	movs	r0, #8
    bc00:	89a3      	ldrh	r3, [r4, #12]
    bc02:	6027      	str	r7, [r4, #0]
    bc04:	6127      	str	r7, [r4, #16]
    bc06:	6165      	str	r5, [r4, #20]
    bc08:	4018      	ands	r0, r3
    bc0a:	d018      	beq.n	bc3e <setvbuf+0x13a>
    bc0c:	2001      	movs	r0, #1
    bc0e:	4018      	ands	r0, r3
    bc10:	2300      	movs	r3, #0
    bc12:	4298      	cmp	r0, r3
    bc14:	d011      	beq.n	bc3a <setvbuf+0x136>
    bc16:	426d      	negs	r5, r5
    bc18:	60a3      	str	r3, [r4, #8]
    bc1a:	61a5      	str	r5, [r4, #24]
    bc1c:	0018      	movs	r0, r3
    bc1e:	e7d3      	b.n	bbc8 <setvbuf+0xc4>
    bc20:	9801      	ldr	r0, [sp, #4]
    bc22:	f7ff fe8f 	bl	b944 <malloc>
    bc26:	1e07      	subs	r7, r0, #0
    bc28:	d0c0      	beq.n	bbac <setvbuf+0xa8>
    bc2a:	2380      	movs	r3, #128	; 0x80
    bc2c:	89a2      	ldrh	r2, [r4, #12]
    bc2e:	9d01      	ldr	r5, [sp, #4]
    bc30:	4313      	orrs	r3, r2
    bc32:	81a3      	strh	r3, [r4, #12]
    bc34:	e7d6      	b.n	bbe4 <setvbuf+0xe0>
    bc36:	2000      	movs	r0, #0
    bc38:	e7ba      	b.n	bbb0 <setvbuf+0xac>
    bc3a:	60a5      	str	r5, [r4, #8]
    bc3c:	e7c4      	b.n	bbc8 <setvbuf+0xc4>
    bc3e:	60a0      	str	r0, [r4, #8]
    bc40:	e7c2      	b.n	bbc8 <setvbuf+0xc4>
    bc42:	2001      	movs	r0, #1
    bc44:	4240      	negs	r0, r0
    bc46:	e7bf      	b.n	bbc8 <setvbuf+0xc4>
    bc48:	20000058 	.word	0x20000058
    bc4c:	0000d3d8 	.word	0x0000d3d8
    bc50:	fffff35c 	.word	0xfffff35c
    bc54:	0000d3f8 	.word	0x0000d3f8
    bc58:	0000d3b8 	.word	0x0000d3b8

0000bc5c <sniprintf>:
    bc5c:	b40c      	push	{r2, r3}
    bc5e:	b530      	push	{r4, r5, lr}
    bc60:	4b16      	ldr	r3, [pc, #88]	; (bcbc <sniprintf+0x60>)
    bc62:	b09d      	sub	sp, #116	; 0x74
    bc64:	1e0c      	subs	r4, r1, #0
    bc66:	681d      	ldr	r5, [r3, #0]
    bc68:	da08      	bge.n	bc7c <sniprintf+0x20>
    bc6a:	238b      	movs	r3, #139	; 0x8b
    bc6c:	2001      	movs	r0, #1
    bc6e:	602b      	str	r3, [r5, #0]
    bc70:	4240      	negs	r0, r0
    bc72:	b01d      	add	sp, #116	; 0x74
    bc74:	bc30      	pop	{r4, r5}
    bc76:	bc08      	pop	{r3}
    bc78:	b002      	add	sp, #8
    bc7a:	4718      	bx	r3
    bc7c:	2382      	movs	r3, #130	; 0x82
    bc7e:	a902      	add	r1, sp, #8
    bc80:	009b      	lsls	r3, r3, #2
    bc82:	818b      	strh	r3, [r1, #12]
    bc84:	2300      	movs	r3, #0
    bc86:	9002      	str	r0, [sp, #8]
    bc88:	6108      	str	r0, [r1, #16]
    bc8a:	429c      	cmp	r4, r3
    bc8c:	d000      	beq.n	bc90 <sniprintf+0x34>
    bc8e:	1e63      	subs	r3, r4, #1
    bc90:	608b      	str	r3, [r1, #8]
    bc92:	614b      	str	r3, [r1, #20]
    bc94:	2301      	movs	r3, #1
    bc96:	425b      	negs	r3, r3
    bc98:	81cb      	strh	r3, [r1, #14]
    bc9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    bc9c:	ab21      	add	r3, sp, #132	; 0x84
    bc9e:	0028      	movs	r0, r5
    bca0:	9301      	str	r3, [sp, #4]
    bca2:	f000 fa2f 	bl	c104 <_svfiprintf_r>
    bca6:	1c43      	adds	r3, r0, #1
    bca8:	da01      	bge.n	bcae <sniprintf+0x52>
    bcaa:	238b      	movs	r3, #139	; 0x8b
    bcac:	602b      	str	r3, [r5, #0]
    bcae:	2c00      	cmp	r4, #0
    bcb0:	d0df      	beq.n	bc72 <sniprintf+0x16>
    bcb2:	2300      	movs	r3, #0
    bcb4:	9a02      	ldr	r2, [sp, #8]
    bcb6:	7013      	strb	r3, [r2, #0]
    bcb8:	e7db      	b.n	bc72 <sniprintf+0x16>
    bcba:	46c0      	nop			; (mov r8, r8)
    bcbc:	20000058 	.word	0x20000058

0000bcc0 <strlen>:
    bcc0:	2300      	movs	r3, #0
    bcc2:	5cc2      	ldrb	r2, [r0, r3]
    bcc4:	3301      	adds	r3, #1
    bcc6:	2a00      	cmp	r2, #0
    bcc8:	d1fb      	bne.n	bcc2 <strlen+0x2>
    bcca:	1e58      	subs	r0, r3, #1
    bccc:	4770      	bx	lr
	...

0000bcd0 <__sflush_r>:
    bcd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bcd2:	898a      	ldrh	r2, [r1, #12]
    bcd4:	0005      	movs	r5, r0
    bcd6:	000c      	movs	r4, r1
    bcd8:	0713      	lsls	r3, r2, #28
    bcda:	d460      	bmi.n	bd9e <__sflush_r+0xce>
    bcdc:	684b      	ldr	r3, [r1, #4]
    bcde:	2b00      	cmp	r3, #0
    bce0:	dc04      	bgt.n	bcec <__sflush_r+0x1c>
    bce2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    bce4:	2b00      	cmp	r3, #0
    bce6:	dc01      	bgt.n	bcec <__sflush_r+0x1c>
    bce8:	2000      	movs	r0, #0
    bcea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bcec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bcee:	2f00      	cmp	r7, #0
    bcf0:	d0fa      	beq.n	bce8 <__sflush_r+0x18>
    bcf2:	2300      	movs	r3, #0
    bcf4:	682e      	ldr	r6, [r5, #0]
    bcf6:	602b      	str	r3, [r5, #0]
    bcf8:	2380      	movs	r3, #128	; 0x80
    bcfa:	015b      	lsls	r3, r3, #5
    bcfc:	401a      	ands	r2, r3
    bcfe:	d034      	beq.n	bd6a <__sflush_r+0x9a>
    bd00:	6d60      	ldr	r0, [r4, #84]	; 0x54
    bd02:	89a3      	ldrh	r3, [r4, #12]
    bd04:	075b      	lsls	r3, r3, #29
    bd06:	d506      	bpl.n	bd16 <__sflush_r+0x46>
    bd08:	6863      	ldr	r3, [r4, #4]
    bd0a:	1ac0      	subs	r0, r0, r3
    bd0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bd0e:	2b00      	cmp	r3, #0
    bd10:	d001      	beq.n	bd16 <__sflush_r+0x46>
    bd12:	6c23      	ldr	r3, [r4, #64]	; 0x40
    bd14:	1ac0      	subs	r0, r0, r3
    bd16:	0002      	movs	r2, r0
    bd18:	6a21      	ldr	r1, [r4, #32]
    bd1a:	2300      	movs	r3, #0
    bd1c:	0028      	movs	r0, r5
    bd1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bd20:	47b8      	blx	r7
    bd22:	89a1      	ldrh	r1, [r4, #12]
    bd24:	1c43      	adds	r3, r0, #1
    bd26:	d106      	bne.n	bd36 <__sflush_r+0x66>
    bd28:	682b      	ldr	r3, [r5, #0]
    bd2a:	2b1d      	cmp	r3, #29
    bd2c:	d831      	bhi.n	bd92 <__sflush_r+0xc2>
    bd2e:	4a2c      	ldr	r2, [pc, #176]	; (bde0 <__sflush_r+0x110>)
    bd30:	40da      	lsrs	r2, r3
    bd32:	07d3      	lsls	r3, r2, #31
    bd34:	d52d      	bpl.n	bd92 <__sflush_r+0xc2>
    bd36:	2300      	movs	r3, #0
    bd38:	6063      	str	r3, [r4, #4]
    bd3a:	6923      	ldr	r3, [r4, #16]
    bd3c:	6023      	str	r3, [r4, #0]
    bd3e:	04cb      	lsls	r3, r1, #19
    bd40:	d505      	bpl.n	bd4e <__sflush_r+0x7e>
    bd42:	1c43      	adds	r3, r0, #1
    bd44:	d102      	bne.n	bd4c <__sflush_r+0x7c>
    bd46:	682b      	ldr	r3, [r5, #0]
    bd48:	2b00      	cmp	r3, #0
    bd4a:	d100      	bne.n	bd4e <__sflush_r+0x7e>
    bd4c:	6560      	str	r0, [r4, #84]	; 0x54
    bd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bd50:	602e      	str	r6, [r5, #0]
    bd52:	2900      	cmp	r1, #0
    bd54:	d0c8      	beq.n	bce8 <__sflush_r+0x18>
    bd56:	0023      	movs	r3, r4
    bd58:	3344      	adds	r3, #68	; 0x44
    bd5a:	4299      	cmp	r1, r3
    bd5c:	d002      	beq.n	bd64 <__sflush_r+0x94>
    bd5e:	0028      	movs	r0, r5
    bd60:	f7ff fe0c 	bl	b97c <_free_r>
    bd64:	2000      	movs	r0, #0
    bd66:	6360      	str	r0, [r4, #52]	; 0x34
    bd68:	e7bf      	b.n	bcea <__sflush_r+0x1a>
    bd6a:	2301      	movs	r3, #1
    bd6c:	6a21      	ldr	r1, [r4, #32]
    bd6e:	0028      	movs	r0, r5
    bd70:	47b8      	blx	r7
    bd72:	1c43      	adds	r3, r0, #1
    bd74:	d1c5      	bne.n	bd02 <__sflush_r+0x32>
    bd76:	682b      	ldr	r3, [r5, #0]
    bd78:	2b00      	cmp	r3, #0
    bd7a:	d0c2      	beq.n	bd02 <__sflush_r+0x32>
    bd7c:	2b1d      	cmp	r3, #29
    bd7e:	d001      	beq.n	bd84 <__sflush_r+0xb4>
    bd80:	2b16      	cmp	r3, #22
    bd82:	d101      	bne.n	bd88 <__sflush_r+0xb8>
    bd84:	602e      	str	r6, [r5, #0]
    bd86:	e7af      	b.n	bce8 <__sflush_r+0x18>
    bd88:	2340      	movs	r3, #64	; 0x40
    bd8a:	89a2      	ldrh	r2, [r4, #12]
    bd8c:	4313      	orrs	r3, r2
    bd8e:	81a3      	strh	r3, [r4, #12]
    bd90:	e7ab      	b.n	bcea <__sflush_r+0x1a>
    bd92:	2340      	movs	r3, #64	; 0x40
    bd94:	430b      	orrs	r3, r1
    bd96:	2001      	movs	r0, #1
    bd98:	81a3      	strh	r3, [r4, #12]
    bd9a:	4240      	negs	r0, r0
    bd9c:	e7a5      	b.n	bcea <__sflush_r+0x1a>
    bd9e:	690f      	ldr	r7, [r1, #16]
    bda0:	2f00      	cmp	r7, #0
    bda2:	d0a1      	beq.n	bce8 <__sflush_r+0x18>
    bda4:	680b      	ldr	r3, [r1, #0]
    bda6:	600f      	str	r7, [r1, #0]
    bda8:	1bdb      	subs	r3, r3, r7
    bdaa:	9301      	str	r3, [sp, #4]
    bdac:	2300      	movs	r3, #0
    bdae:	0792      	lsls	r2, r2, #30
    bdb0:	d100      	bne.n	bdb4 <__sflush_r+0xe4>
    bdb2:	694b      	ldr	r3, [r1, #20]
    bdb4:	60a3      	str	r3, [r4, #8]
    bdb6:	9b01      	ldr	r3, [sp, #4]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	dc00      	bgt.n	bdbe <__sflush_r+0xee>
    bdbc:	e794      	b.n	bce8 <__sflush_r+0x18>
    bdbe:	9b01      	ldr	r3, [sp, #4]
    bdc0:	003a      	movs	r2, r7
    bdc2:	6a21      	ldr	r1, [r4, #32]
    bdc4:	0028      	movs	r0, r5
    bdc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bdc8:	47b0      	blx	r6
    bdca:	2800      	cmp	r0, #0
    bdcc:	dc03      	bgt.n	bdd6 <__sflush_r+0x106>
    bdce:	2340      	movs	r3, #64	; 0x40
    bdd0:	89a2      	ldrh	r2, [r4, #12]
    bdd2:	4313      	orrs	r3, r2
    bdd4:	e7df      	b.n	bd96 <__sflush_r+0xc6>
    bdd6:	9b01      	ldr	r3, [sp, #4]
    bdd8:	183f      	adds	r7, r7, r0
    bdda:	1a1b      	subs	r3, r3, r0
    bddc:	9301      	str	r3, [sp, #4]
    bdde:	e7ea      	b.n	bdb6 <__sflush_r+0xe6>
    bde0:	20400001 	.word	0x20400001

0000bde4 <_fflush_r>:
    bde4:	690b      	ldr	r3, [r1, #16]
    bde6:	b570      	push	{r4, r5, r6, lr}
    bde8:	0005      	movs	r5, r0
    bdea:	000c      	movs	r4, r1
    bdec:	2b00      	cmp	r3, #0
    bdee:	d101      	bne.n	bdf4 <_fflush_r+0x10>
    bdf0:	2000      	movs	r0, #0
    bdf2:	bd70      	pop	{r4, r5, r6, pc}
    bdf4:	2800      	cmp	r0, #0
    bdf6:	d004      	beq.n	be02 <_fflush_r+0x1e>
    bdf8:	6983      	ldr	r3, [r0, #24]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d101      	bne.n	be02 <_fflush_r+0x1e>
    bdfe:	f000 f85f 	bl	bec0 <__sinit>
    be02:	4b0b      	ldr	r3, [pc, #44]	; (be30 <_fflush_r+0x4c>)
    be04:	429c      	cmp	r4, r3
    be06:	d109      	bne.n	be1c <_fflush_r+0x38>
    be08:	686c      	ldr	r4, [r5, #4]
    be0a:	220c      	movs	r2, #12
    be0c:	5ea3      	ldrsh	r3, [r4, r2]
    be0e:	2b00      	cmp	r3, #0
    be10:	d0ee      	beq.n	bdf0 <_fflush_r+0xc>
    be12:	0021      	movs	r1, r4
    be14:	0028      	movs	r0, r5
    be16:	f7ff ff5b 	bl	bcd0 <__sflush_r>
    be1a:	e7ea      	b.n	bdf2 <_fflush_r+0xe>
    be1c:	4b05      	ldr	r3, [pc, #20]	; (be34 <_fflush_r+0x50>)
    be1e:	429c      	cmp	r4, r3
    be20:	d101      	bne.n	be26 <_fflush_r+0x42>
    be22:	68ac      	ldr	r4, [r5, #8]
    be24:	e7f1      	b.n	be0a <_fflush_r+0x26>
    be26:	4b04      	ldr	r3, [pc, #16]	; (be38 <_fflush_r+0x54>)
    be28:	429c      	cmp	r4, r3
    be2a:	d1ee      	bne.n	be0a <_fflush_r+0x26>
    be2c:	68ec      	ldr	r4, [r5, #12]
    be2e:	e7ec      	b.n	be0a <_fflush_r+0x26>
    be30:	0000d3d8 	.word	0x0000d3d8
    be34:	0000d3f8 	.word	0x0000d3f8
    be38:	0000d3b8 	.word	0x0000d3b8

0000be3c <_cleanup_r>:
    be3c:	b510      	push	{r4, lr}
    be3e:	4902      	ldr	r1, [pc, #8]	; (be48 <_cleanup_r+0xc>)
    be40:	f000 f8b2 	bl	bfa8 <_fwalk_reent>
    be44:	bd10      	pop	{r4, pc}
    be46:	46c0      	nop			; (mov r8, r8)
    be48:	0000bde5 	.word	0x0000bde5

0000be4c <std.isra.0>:
    be4c:	2300      	movs	r3, #0
    be4e:	b510      	push	{r4, lr}
    be50:	0004      	movs	r4, r0
    be52:	6003      	str	r3, [r0, #0]
    be54:	6043      	str	r3, [r0, #4]
    be56:	6083      	str	r3, [r0, #8]
    be58:	8181      	strh	r1, [r0, #12]
    be5a:	6643      	str	r3, [r0, #100]	; 0x64
    be5c:	81c2      	strh	r2, [r0, #14]
    be5e:	6103      	str	r3, [r0, #16]
    be60:	6143      	str	r3, [r0, #20]
    be62:	6183      	str	r3, [r0, #24]
    be64:	0019      	movs	r1, r3
    be66:	2208      	movs	r2, #8
    be68:	305c      	adds	r0, #92	; 0x5c
    be6a:	f7ff fd7e 	bl	b96a <memset>
    be6e:	4b05      	ldr	r3, [pc, #20]	; (be84 <std.isra.0+0x38>)
    be70:	6224      	str	r4, [r4, #32]
    be72:	6263      	str	r3, [r4, #36]	; 0x24
    be74:	4b04      	ldr	r3, [pc, #16]	; (be88 <std.isra.0+0x3c>)
    be76:	62a3      	str	r3, [r4, #40]	; 0x28
    be78:	4b04      	ldr	r3, [pc, #16]	; (be8c <std.isra.0+0x40>)
    be7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    be7c:	4b04      	ldr	r3, [pc, #16]	; (be90 <std.isra.0+0x44>)
    be7e:	6323      	str	r3, [r4, #48]	; 0x30
    be80:	bd10      	pop	{r4, pc}
    be82:	46c0      	nop			; (mov r8, r8)
    be84:	0000c61d 	.word	0x0000c61d
    be88:	0000c645 	.word	0x0000c645
    be8c:	0000c67d 	.word	0x0000c67d
    be90:	0000c6a9 	.word	0x0000c6a9

0000be94 <__sfmoreglue>:
    be94:	b570      	push	{r4, r5, r6, lr}
    be96:	2568      	movs	r5, #104	; 0x68
    be98:	1e4a      	subs	r2, r1, #1
    be9a:	4355      	muls	r5, r2
    be9c:	000e      	movs	r6, r1
    be9e:	0029      	movs	r1, r5
    bea0:	3174      	adds	r1, #116	; 0x74
    bea2:	f7ff fdb5 	bl	ba10 <_malloc_r>
    bea6:	1e04      	subs	r4, r0, #0
    bea8:	d008      	beq.n	bebc <__sfmoreglue+0x28>
    beaa:	2100      	movs	r1, #0
    beac:	002a      	movs	r2, r5
    beae:	6001      	str	r1, [r0, #0]
    beb0:	6046      	str	r6, [r0, #4]
    beb2:	300c      	adds	r0, #12
    beb4:	60a0      	str	r0, [r4, #8]
    beb6:	3268      	adds	r2, #104	; 0x68
    beb8:	f7ff fd57 	bl	b96a <memset>
    bebc:	0020      	movs	r0, r4
    bebe:	bd70      	pop	{r4, r5, r6, pc}

0000bec0 <__sinit>:
    bec0:	6983      	ldr	r3, [r0, #24]
    bec2:	b513      	push	{r0, r1, r4, lr}
    bec4:	0004      	movs	r4, r0
    bec6:	2b00      	cmp	r3, #0
    bec8:	d128      	bne.n	bf1c <__sinit+0x5c>
    beca:	6483      	str	r3, [r0, #72]	; 0x48
    becc:	64c3      	str	r3, [r0, #76]	; 0x4c
    bece:	6503      	str	r3, [r0, #80]	; 0x50
    bed0:	4b13      	ldr	r3, [pc, #76]	; (bf20 <__sinit+0x60>)
    bed2:	4a14      	ldr	r2, [pc, #80]	; (bf24 <__sinit+0x64>)
    bed4:	681b      	ldr	r3, [r3, #0]
    bed6:	6282      	str	r2, [r0, #40]	; 0x28
    bed8:	9301      	str	r3, [sp, #4]
    beda:	4298      	cmp	r0, r3
    bedc:	d101      	bne.n	bee2 <__sinit+0x22>
    bede:	2301      	movs	r3, #1
    bee0:	6183      	str	r3, [r0, #24]
    bee2:	0020      	movs	r0, r4
    bee4:	f000 f820 	bl	bf28 <__sfp>
    bee8:	6060      	str	r0, [r4, #4]
    beea:	0020      	movs	r0, r4
    beec:	f000 f81c 	bl	bf28 <__sfp>
    bef0:	60a0      	str	r0, [r4, #8]
    bef2:	0020      	movs	r0, r4
    bef4:	f000 f818 	bl	bf28 <__sfp>
    bef8:	2200      	movs	r2, #0
    befa:	60e0      	str	r0, [r4, #12]
    befc:	2104      	movs	r1, #4
    befe:	6860      	ldr	r0, [r4, #4]
    bf00:	f7ff ffa4 	bl	be4c <std.isra.0>
    bf04:	2201      	movs	r2, #1
    bf06:	2109      	movs	r1, #9
    bf08:	68a0      	ldr	r0, [r4, #8]
    bf0a:	f7ff ff9f 	bl	be4c <std.isra.0>
    bf0e:	2202      	movs	r2, #2
    bf10:	2112      	movs	r1, #18
    bf12:	68e0      	ldr	r0, [r4, #12]
    bf14:	f7ff ff9a 	bl	be4c <std.isra.0>
    bf18:	2301      	movs	r3, #1
    bf1a:	61a3      	str	r3, [r4, #24]
    bf1c:	bd13      	pop	{r0, r1, r4, pc}
    bf1e:	46c0      	nop			; (mov r8, r8)
    bf20:	0000d3b4 	.word	0x0000d3b4
    bf24:	0000be3d 	.word	0x0000be3d

0000bf28 <__sfp>:
    bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf2a:	4b1e      	ldr	r3, [pc, #120]	; (bfa4 <__sfp+0x7c>)
    bf2c:	0007      	movs	r7, r0
    bf2e:	681e      	ldr	r6, [r3, #0]
    bf30:	69b3      	ldr	r3, [r6, #24]
    bf32:	2b00      	cmp	r3, #0
    bf34:	d102      	bne.n	bf3c <__sfp+0x14>
    bf36:	0030      	movs	r0, r6
    bf38:	f7ff ffc2 	bl	bec0 <__sinit>
    bf3c:	3648      	adds	r6, #72	; 0x48
    bf3e:	68b4      	ldr	r4, [r6, #8]
    bf40:	6873      	ldr	r3, [r6, #4]
    bf42:	3b01      	subs	r3, #1
    bf44:	d504      	bpl.n	bf50 <__sfp+0x28>
    bf46:	6833      	ldr	r3, [r6, #0]
    bf48:	2b00      	cmp	r3, #0
    bf4a:	d007      	beq.n	bf5c <__sfp+0x34>
    bf4c:	6836      	ldr	r6, [r6, #0]
    bf4e:	e7f6      	b.n	bf3e <__sfp+0x16>
    bf50:	220c      	movs	r2, #12
    bf52:	5ea5      	ldrsh	r5, [r4, r2]
    bf54:	2d00      	cmp	r5, #0
    bf56:	d00d      	beq.n	bf74 <__sfp+0x4c>
    bf58:	3468      	adds	r4, #104	; 0x68
    bf5a:	e7f2      	b.n	bf42 <__sfp+0x1a>
    bf5c:	2104      	movs	r1, #4
    bf5e:	0038      	movs	r0, r7
    bf60:	f7ff ff98 	bl	be94 <__sfmoreglue>
    bf64:	6030      	str	r0, [r6, #0]
    bf66:	2800      	cmp	r0, #0
    bf68:	d1f0      	bne.n	bf4c <__sfp+0x24>
    bf6a:	230c      	movs	r3, #12
    bf6c:	0004      	movs	r4, r0
    bf6e:	603b      	str	r3, [r7, #0]
    bf70:	0020      	movs	r0, r4
    bf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf74:	2301      	movs	r3, #1
    bf76:	0020      	movs	r0, r4
    bf78:	425b      	negs	r3, r3
    bf7a:	81e3      	strh	r3, [r4, #14]
    bf7c:	3302      	adds	r3, #2
    bf7e:	81a3      	strh	r3, [r4, #12]
    bf80:	6665      	str	r5, [r4, #100]	; 0x64
    bf82:	6025      	str	r5, [r4, #0]
    bf84:	60a5      	str	r5, [r4, #8]
    bf86:	6065      	str	r5, [r4, #4]
    bf88:	6125      	str	r5, [r4, #16]
    bf8a:	6165      	str	r5, [r4, #20]
    bf8c:	61a5      	str	r5, [r4, #24]
    bf8e:	2208      	movs	r2, #8
    bf90:	0029      	movs	r1, r5
    bf92:	305c      	adds	r0, #92	; 0x5c
    bf94:	f7ff fce9 	bl	b96a <memset>
    bf98:	6365      	str	r5, [r4, #52]	; 0x34
    bf9a:	63a5      	str	r5, [r4, #56]	; 0x38
    bf9c:	64a5      	str	r5, [r4, #72]	; 0x48
    bf9e:	64e5      	str	r5, [r4, #76]	; 0x4c
    bfa0:	e7e6      	b.n	bf70 <__sfp+0x48>
    bfa2:	46c0      	nop			; (mov r8, r8)
    bfa4:	0000d3b4 	.word	0x0000d3b4

0000bfa8 <_fwalk_reent>:
    bfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bfaa:	0004      	movs	r4, r0
    bfac:	0007      	movs	r7, r0
    bfae:	2600      	movs	r6, #0
    bfb0:	9101      	str	r1, [sp, #4]
    bfb2:	3448      	adds	r4, #72	; 0x48
    bfb4:	2c00      	cmp	r4, #0
    bfb6:	d101      	bne.n	bfbc <_fwalk_reent+0x14>
    bfb8:	0030      	movs	r0, r6
    bfba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bfbc:	6863      	ldr	r3, [r4, #4]
    bfbe:	68a5      	ldr	r5, [r4, #8]
    bfc0:	9300      	str	r3, [sp, #0]
    bfc2:	9b00      	ldr	r3, [sp, #0]
    bfc4:	3b01      	subs	r3, #1
    bfc6:	9300      	str	r3, [sp, #0]
    bfc8:	d501      	bpl.n	bfce <_fwalk_reent+0x26>
    bfca:	6824      	ldr	r4, [r4, #0]
    bfcc:	e7f2      	b.n	bfb4 <_fwalk_reent+0xc>
    bfce:	89ab      	ldrh	r3, [r5, #12]
    bfd0:	2b01      	cmp	r3, #1
    bfd2:	d908      	bls.n	bfe6 <_fwalk_reent+0x3e>
    bfd4:	220e      	movs	r2, #14
    bfd6:	5eab      	ldrsh	r3, [r5, r2]
    bfd8:	3301      	adds	r3, #1
    bfda:	d004      	beq.n	bfe6 <_fwalk_reent+0x3e>
    bfdc:	0029      	movs	r1, r5
    bfde:	0038      	movs	r0, r7
    bfe0:	9b01      	ldr	r3, [sp, #4]
    bfe2:	4798      	blx	r3
    bfe4:	4306      	orrs	r6, r0
    bfe6:	3568      	adds	r5, #104	; 0x68
    bfe8:	e7eb      	b.n	bfc2 <_fwalk_reent+0x1a>
	...

0000bfec <__swhatbuf_r>:
    bfec:	b570      	push	{r4, r5, r6, lr}
    bfee:	000e      	movs	r6, r1
    bff0:	001d      	movs	r5, r3
    bff2:	230e      	movs	r3, #14
    bff4:	5ec9      	ldrsh	r1, [r1, r3]
    bff6:	b090      	sub	sp, #64	; 0x40
    bff8:	0014      	movs	r4, r2
    bffa:	2900      	cmp	r1, #0
    bffc:	da07      	bge.n	c00e <__swhatbuf_r+0x22>
    bffe:	2300      	movs	r3, #0
    c000:	602b      	str	r3, [r5, #0]
    c002:	89b3      	ldrh	r3, [r6, #12]
    c004:	061b      	lsls	r3, r3, #24
    c006:	d411      	bmi.n	c02c <__swhatbuf_r+0x40>
    c008:	2380      	movs	r3, #128	; 0x80
    c00a:	00db      	lsls	r3, r3, #3
    c00c:	e00f      	b.n	c02e <__swhatbuf_r+0x42>
    c00e:	aa01      	add	r2, sp, #4
    c010:	f000 fb76 	bl	c700 <_fstat_r>
    c014:	2800      	cmp	r0, #0
    c016:	dbf2      	blt.n	bffe <__swhatbuf_r+0x12>
    c018:	22f0      	movs	r2, #240	; 0xf0
    c01a:	9b02      	ldr	r3, [sp, #8]
    c01c:	0212      	lsls	r2, r2, #8
    c01e:	4013      	ands	r3, r2
    c020:	4a05      	ldr	r2, [pc, #20]	; (c038 <__swhatbuf_r+0x4c>)
    c022:	189b      	adds	r3, r3, r2
    c024:	425a      	negs	r2, r3
    c026:	4153      	adcs	r3, r2
    c028:	602b      	str	r3, [r5, #0]
    c02a:	e7ed      	b.n	c008 <__swhatbuf_r+0x1c>
    c02c:	2340      	movs	r3, #64	; 0x40
    c02e:	2000      	movs	r0, #0
    c030:	6023      	str	r3, [r4, #0]
    c032:	b010      	add	sp, #64	; 0x40
    c034:	bd70      	pop	{r4, r5, r6, pc}
    c036:	46c0      	nop			; (mov r8, r8)
    c038:	ffffe000 	.word	0xffffe000

0000c03c <__malloc_lock>:
    c03c:	4770      	bx	lr

0000c03e <__malloc_unlock>:
    c03e:	4770      	bx	lr

0000c040 <__ssputs_r>:
    c040:	b5f0      	push	{r4, r5, r6, r7, lr}
    c042:	688e      	ldr	r6, [r1, #8]
    c044:	b085      	sub	sp, #20
    c046:	0007      	movs	r7, r0
    c048:	000c      	movs	r4, r1
    c04a:	9203      	str	r2, [sp, #12]
    c04c:	9301      	str	r3, [sp, #4]
    c04e:	429e      	cmp	r6, r3
    c050:	d839      	bhi.n	c0c6 <__ssputs_r+0x86>
    c052:	2390      	movs	r3, #144	; 0x90
    c054:	898a      	ldrh	r2, [r1, #12]
    c056:	00db      	lsls	r3, r3, #3
    c058:	421a      	tst	r2, r3
    c05a:	d034      	beq.n	c0c6 <__ssputs_r+0x86>
    c05c:	2503      	movs	r5, #3
    c05e:	6909      	ldr	r1, [r1, #16]
    c060:	6823      	ldr	r3, [r4, #0]
    c062:	1a5b      	subs	r3, r3, r1
    c064:	9302      	str	r3, [sp, #8]
    c066:	6963      	ldr	r3, [r4, #20]
    c068:	9802      	ldr	r0, [sp, #8]
    c06a:	435d      	muls	r5, r3
    c06c:	0feb      	lsrs	r3, r5, #31
    c06e:	195d      	adds	r5, r3, r5
    c070:	9b01      	ldr	r3, [sp, #4]
    c072:	106d      	asrs	r5, r5, #1
    c074:	3301      	adds	r3, #1
    c076:	181b      	adds	r3, r3, r0
    c078:	42ab      	cmp	r3, r5
    c07a:	d900      	bls.n	c07e <__ssputs_r+0x3e>
    c07c:	001d      	movs	r5, r3
    c07e:	0553      	lsls	r3, r2, #21
    c080:	d532      	bpl.n	c0e8 <__ssputs_r+0xa8>
    c082:	0029      	movs	r1, r5
    c084:	0038      	movs	r0, r7
    c086:	f7ff fcc3 	bl	ba10 <_malloc_r>
    c08a:	1e06      	subs	r6, r0, #0
    c08c:	d109      	bne.n	c0a2 <__ssputs_r+0x62>
    c08e:	230c      	movs	r3, #12
    c090:	603b      	str	r3, [r7, #0]
    c092:	2340      	movs	r3, #64	; 0x40
    c094:	2001      	movs	r0, #1
    c096:	89a2      	ldrh	r2, [r4, #12]
    c098:	4240      	negs	r0, r0
    c09a:	4313      	orrs	r3, r2
    c09c:	81a3      	strh	r3, [r4, #12]
    c09e:	b005      	add	sp, #20
    c0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0a2:	9a02      	ldr	r2, [sp, #8]
    c0a4:	6921      	ldr	r1, [r4, #16]
    c0a6:	f7ff fc57 	bl	b958 <memcpy>
    c0aa:	89a3      	ldrh	r3, [r4, #12]
    c0ac:	4a14      	ldr	r2, [pc, #80]	; (c100 <__ssputs_r+0xc0>)
    c0ae:	401a      	ands	r2, r3
    c0b0:	2380      	movs	r3, #128	; 0x80
    c0b2:	4313      	orrs	r3, r2
    c0b4:	81a3      	strh	r3, [r4, #12]
    c0b6:	9b02      	ldr	r3, [sp, #8]
    c0b8:	6126      	str	r6, [r4, #16]
    c0ba:	18f6      	adds	r6, r6, r3
    c0bc:	6026      	str	r6, [r4, #0]
    c0be:	6165      	str	r5, [r4, #20]
    c0c0:	9e01      	ldr	r6, [sp, #4]
    c0c2:	1aed      	subs	r5, r5, r3
    c0c4:	60a5      	str	r5, [r4, #8]
    c0c6:	9b01      	ldr	r3, [sp, #4]
    c0c8:	42b3      	cmp	r3, r6
    c0ca:	d200      	bcs.n	c0ce <__ssputs_r+0x8e>
    c0cc:	001e      	movs	r6, r3
    c0ce:	0032      	movs	r2, r6
    c0d0:	9903      	ldr	r1, [sp, #12]
    c0d2:	6820      	ldr	r0, [r4, #0]
    c0d4:	f000 fb45 	bl	c762 <memmove>
    c0d8:	68a3      	ldr	r3, [r4, #8]
    c0da:	2000      	movs	r0, #0
    c0dc:	1b9b      	subs	r3, r3, r6
    c0de:	60a3      	str	r3, [r4, #8]
    c0e0:	6823      	ldr	r3, [r4, #0]
    c0e2:	199e      	adds	r6, r3, r6
    c0e4:	6026      	str	r6, [r4, #0]
    c0e6:	e7da      	b.n	c09e <__ssputs_r+0x5e>
    c0e8:	002a      	movs	r2, r5
    c0ea:	0038      	movs	r0, r7
    c0ec:	f000 fb4b 	bl	c786 <_realloc_r>
    c0f0:	1e06      	subs	r6, r0, #0
    c0f2:	d1e0      	bne.n	c0b6 <__ssputs_r+0x76>
    c0f4:	6921      	ldr	r1, [r4, #16]
    c0f6:	0038      	movs	r0, r7
    c0f8:	f7ff fc40 	bl	b97c <_free_r>
    c0fc:	e7c7      	b.n	c08e <__ssputs_r+0x4e>
    c0fe:	46c0      	nop			; (mov r8, r8)
    c100:	fffffb7f 	.word	0xfffffb7f

0000c104 <_svfiprintf_r>:
    c104:	b5f0      	push	{r4, r5, r6, r7, lr}
    c106:	b09f      	sub	sp, #124	; 0x7c
    c108:	9002      	str	r0, [sp, #8]
    c10a:	9305      	str	r3, [sp, #20]
    c10c:	898b      	ldrh	r3, [r1, #12]
    c10e:	000f      	movs	r7, r1
    c110:	0016      	movs	r6, r2
    c112:	061b      	lsls	r3, r3, #24
    c114:	d511      	bpl.n	c13a <_svfiprintf_r+0x36>
    c116:	690b      	ldr	r3, [r1, #16]
    c118:	2b00      	cmp	r3, #0
    c11a:	d10e      	bne.n	c13a <_svfiprintf_r+0x36>
    c11c:	2140      	movs	r1, #64	; 0x40
    c11e:	f7ff fc77 	bl	ba10 <_malloc_r>
    c122:	6038      	str	r0, [r7, #0]
    c124:	6138      	str	r0, [r7, #16]
    c126:	2800      	cmp	r0, #0
    c128:	d105      	bne.n	c136 <_svfiprintf_r+0x32>
    c12a:	230c      	movs	r3, #12
    c12c:	9a02      	ldr	r2, [sp, #8]
    c12e:	3801      	subs	r0, #1
    c130:	6013      	str	r3, [r2, #0]
    c132:	b01f      	add	sp, #124	; 0x7c
    c134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c136:	2340      	movs	r3, #64	; 0x40
    c138:	617b      	str	r3, [r7, #20]
    c13a:	2300      	movs	r3, #0
    c13c:	ad06      	add	r5, sp, #24
    c13e:	616b      	str	r3, [r5, #20]
    c140:	3320      	adds	r3, #32
    c142:	766b      	strb	r3, [r5, #25]
    c144:	3310      	adds	r3, #16
    c146:	76ab      	strb	r3, [r5, #26]
    c148:	0034      	movs	r4, r6
    c14a:	7823      	ldrb	r3, [r4, #0]
    c14c:	2b00      	cmp	r3, #0
    c14e:	d147      	bne.n	c1e0 <_svfiprintf_r+0xdc>
    c150:	1ba3      	subs	r3, r4, r6
    c152:	9304      	str	r3, [sp, #16]
    c154:	d00d      	beq.n	c172 <_svfiprintf_r+0x6e>
    c156:	1ba3      	subs	r3, r4, r6
    c158:	0032      	movs	r2, r6
    c15a:	0039      	movs	r1, r7
    c15c:	9802      	ldr	r0, [sp, #8]
    c15e:	f7ff ff6f 	bl	c040 <__ssputs_r>
    c162:	1c43      	adds	r3, r0, #1
    c164:	d100      	bne.n	c168 <_svfiprintf_r+0x64>
    c166:	e0b5      	b.n	c2d4 <_svfiprintf_r+0x1d0>
    c168:	696a      	ldr	r2, [r5, #20]
    c16a:	9b04      	ldr	r3, [sp, #16]
    c16c:	4694      	mov	ip, r2
    c16e:	4463      	add	r3, ip
    c170:	616b      	str	r3, [r5, #20]
    c172:	7823      	ldrb	r3, [r4, #0]
    c174:	2b00      	cmp	r3, #0
    c176:	d100      	bne.n	c17a <_svfiprintf_r+0x76>
    c178:	e0ac      	b.n	c2d4 <_svfiprintf_r+0x1d0>
    c17a:	2201      	movs	r2, #1
    c17c:	2300      	movs	r3, #0
    c17e:	4252      	negs	r2, r2
    c180:	606a      	str	r2, [r5, #4]
    c182:	a902      	add	r1, sp, #8
    c184:	3254      	adds	r2, #84	; 0x54
    c186:	1852      	adds	r2, r2, r1
    c188:	3401      	adds	r4, #1
    c18a:	602b      	str	r3, [r5, #0]
    c18c:	60eb      	str	r3, [r5, #12]
    c18e:	60ab      	str	r3, [r5, #8]
    c190:	7013      	strb	r3, [r2, #0]
    c192:	65ab      	str	r3, [r5, #88]	; 0x58
    c194:	4e58      	ldr	r6, [pc, #352]	; (c2f8 <_svfiprintf_r+0x1f4>)
    c196:	2205      	movs	r2, #5
    c198:	7821      	ldrb	r1, [r4, #0]
    c19a:	0030      	movs	r0, r6
    c19c:	f000 fad6 	bl	c74c <memchr>
    c1a0:	1c62      	adds	r2, r4, #1
    c1a2:	2800      	cmp	r0, #0
    c1a4:	d120      	bne.n	c1e8 <_svfiprintf_r+0xe4>
    c1a6:	6829      	ldr	r1, [r5, #0]
    c1a8:	06cb      	lsls	r3, r1, #27
    c1aa:	d504      	bpl.n	c1b6 <_svfiprintf_r+0xb2>
    c1ac:	2353      	movs	r3, #83	; 0x53
    c1ae:	ae02      	add	r6, sp, #8
    c1b0:	3020      	adds	r0, #32
    c1b2:	199b      	adds	r3, r3, r6
    c1b4:	7018      	strb	r0, [r3, #0]
    c1b6:	070b      	lsls	r3, r1, #28
    c1b8:	d504      	bpl.n	c1c4 <_svfiprintf_r+0xc0>
    c1ba:	2353      	movs	r3, #83	; 0x53
    c1bc:	202b      	movs	r0, #43	; 0x2b
    c1be:	ae02      	add	r6, sp, #8
    c1c0:	199b      	adds	r3, r3, r6
    c1c2:	7018      	strb	r0, [r3, #0]
    c1c4:	7823      	ldrb	r3, [r4, #0]
    c1c6:	2b2a      	cmp	r3, #42	; 0x2a
    c1c8:	d016      	beq.n	c1f8 <_svfiprintf_r+0xf4>
    c1ca:	2000      	movs	r0, #0
    c1cc:	210a      	movs	r1, #10
    c1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1d0:	7822      	ldrb	r2, [r4, #0]
    c1d2:	3a30      	subs	r2, #48	; 0x30
    c1d4:	2a09      	cmp	r2, #9
    c1d6:	d955      	bls.n	c284 <_svfiprintf_r+0x180>
    c1d8:	2800      	cmp	r0, #0
    c1da:	d015      	beq.n	c208 <_svfiprintf_r+0x104>
    c1dc:	9309      	str	r3, [sp, #36]	; 0x24
    c1de:	e013      	b.n	c208 <_svfiprintf_r+0x104>
    c1e0:	2b25      	cmp	r3, #37	; 0x25
    c1e2:	d0b5      	beq.n	c150 <_svfiprintf_r+0x4c>
    c1e4:	3401      	adds	r4, #1
    c1e6:	e7b0      	b.n	c14a <_svfiprintf_r+0x46>
    c1e8:	2301      	movs	r3, #1
    c1ea:	1b80      	subs	r0, r0, r6
    c1ec:	4083      	lsls	r3, r0
    c1ee:	6829      	ldr	r1, [r5, #0]
    c1f0:	0014      	movs	r4, r2
    c1f2:	430b      	orrs	r3, r1
    c1f4:	602b      	str	r3, [r5, #0]
    c1f6:	e7cd      	b.n	c194 <_svfiprintf_r+0x90>
    c1f8:	9b05      	ldr	r3, [sp, #20]
    c1fa:	1d18      	adds	r0, r3, #4
    c1fc:	681b      	ldr	r3, [r3, #0]
    c1fe:	9005      	str	r0, [sp, #20]
    c200:	2b00      	cmp	r3, #0
    c202:	db39      	blt.n	c278 <_svfiprintf_r+0x174>
    c204:	9309      	str	r3, [sp, #36]	; 0x24
    c206:	0014      	movs	r4, r2
    c208:	7823      	ldrb	r3, [r4, #0]
    c20a:	2b2e      	cmp	r3, #46	; 0x2e
    c20c:	d10b      	bne.n	c226 <_svfiprintf_r+0x122>
    c20e:	7863      	ldrb	r3, [r4, #1]
    c210:	1c62      	adds	r2, r4, #1
    c212:	2b2a      	cmp	r3, #42	; 0x2a
    c214:	d13e      	bne.n	c294 <_svfiprintf_r+0x190>
    c216:	9b05      	ldr	r3, [sp, #20]
    c218:	3402      	adds	r4, #2
    c21a:	1d1a      	adds	r2, r3, #4
    c21c:	681b      	ldr	r3, [r3, #0]
    c21e:	9205      	str	r2, [sp, #20]
    c220:	2b00      	cmp	r3, #0
    c222:	db34      	blt.n	c28e <_svfiprintf_r+0x18a>
    c224:	9307      	str	r3, [sp, #28]
    c226:	4e35      	ldr	r6, [pc, #212]	; (c2fc <_svfiprintf_r+0x1f8>)
    c228:	7821      	ldrb	r1, [r4, #0]
    c22a:	2203      	movs	r2, #3
    c22c:	0030      	movs	r0, r6
    c22e:	f000 fa8d 	bl	c74c <memchr>
    c232:	2800      	cmp	r0, #0
    c234:	d006      	beq.n	c244 <_svfiprintf_r+0x140>
    c236:	2340      	movs	r3, #64	; 0x40
    c238:	1b80      	subs	r0, r0, r6
    c23a:	4083      	lsls	r3, r0
    c23c:	682a      	ldr	r2, [r5, #0]
    c23e:	3401      	adds	r4, #1
    c240:	4313      	orrs	r3, r2
    c242:	602b      	str	r3, [r5, #0]
    c244:	7821      	ldrb	r1, [r4, #0]
    c246:	2206      	movs	r2, #6
    c248:	482d      	ldr	r0, [pc, #180]	; (c300 <_svfiprintf_r+0x1fc>)
    c24a:	1c66      	adds	r6, r4, #1
    c24c:	7629      	strb	r1, [r5, #24]
    c24e:	f000 fa7d 	bl	c74c <memchr>
    c252:	2800      	cmp	r0, #0
    c254:	d046      	beq.n	c2e4 <_svfiprintf_r+0x1e0>
    c256:	4b2b      	ldr	r3, [pc, #172]	; (c304 <_svfiprintf_r+0x200>)
    c258:	2b00      	cmp	r3, #0
    c25a:	d12f      	bne.n	c2bc <_svfiprintf_r+0x1b8>
    c25c:	6829      	ldr	r1, [r5, #0]
    c25e:	9b05      	ldr	r3, [sp, #20]
    c260:	2207      	movs	r2, #7
    c262:	05c9      	lsls	r1, r1, #23
    c264:	d528      	bpl.n	c2b8 <_svfiprintf_r+0x1b4>
    c266:	189b      	adds	r3, r3, r2
    c268:	4393      	bics	r3, r2
    c26a:	3308      	adds	r3, #8
    c26c:	9305      	str	r3, [sp, #20]
    c26e:	696b      	ldr	r3, [r5, #20]
    c270:	9a03      	ldr	r2, [sp, #12]
    c272:	189b      	adds	r3, r3, r2
    c274:	616b      	str	r3, [r5, #20]
    c276:	e767      	b.n	c148 <_svfiprintf_r+0x44>
    c278:	425b      	negs	r3, r3
    c27a:	60eb      	str	r3, [r5, #12]
    c27c:	2302      	movs	r3, #2
    c27e:	430b      	orrs	r3, r1
    c280:	602b      	str	r3, [r5, #0]
    c282:	e7c0      	b.n	c206 <_svfiprintf_r+0x102>
    c284:	434b      	muls	r3, r1
    c286:	3401      	adds	r4, #1
    c288:	189b      	adds	r3, r3, r2
    c28a:	2001      	movs	r0, #1
    c28c:	e7a0      	b.n	c1d0 <_svfiprintf_r+0xcc>
    c28e:	2301      	movs	r3, #1
    c290:	425b      	negs	r3, r3
    c292:	e7c7      	b.n	c224 <_svfiprintf_r+0x120>
    c294:	2300      	movs	r3, #0
    c296:	0014      	movs	r4, r2
    c298:	200a      	movs	r0, #10
    c29a:	001a      	movs	r2, r3
    c29c:	606b      	str	r3, [r5, #4]
    c29e:	7821      	ldrb	r1, [r4, #0]
    c2a0:	3930      	subs	r1, #48	; 0x30
    c2a2:	2909      	cmp	r1, #9
    c2a4:	d903      	bls.n	c2ae <_svfiprintf_r+0x1aa>
    c2a6:	2b00      	cmp	r3, #0
    c2a8:	d0bd      	beq.n	c226 <_svfiprintf_r+0x122>
    c2aa:	9207      	str	r2, [sp, #28]
    c2ac:	e7bb      	b.n	c226 <_svfiprintf_r+0x122>
    c2ae:	4342      	muls	r2, r0
    c2b0:	3401      	adds	r4, #1
    c2b2:	1852      	adds	r2, r2, r1
    c2b4:	2301      	movs	r3, #1
    c2b6:	e7f2      	b.n	c29e <_svfiprintf_r+0x19a>
    c2b8:	3307      	adds	r3, #7
    c2ba:	e7d5      	b.n	c268 <_svfiprintf_r+0x164>
    c2bc:	ab05      	add	r3, sp, #20
    c2be:	9300      	str	r3, [sp, #0]
    c2c0:	003a      	movs	r2, r7
    c2c2:	4b11      	ldr	r3, [pc, #68]	; (c308 <_svfiprintf_r+0x204>)
    c2c4:	0029      	movs	r1, r5
    c2c6:	9802      	ldr	r0, [sp, #8]
    c2c8:	e000      	b.n	c2cc <_svfiprintf_r+0x1c8>
    c2ca:	bf00      	nop
    c2cc:	9003      	str	r0, [sp, #12]
    c2ce:	9b03      	ldr	r3, [sp, #12]
    c2d0:	3301      	adds	r3, #1
    c2d2:	d1cc      	bne.n	c26e <_svfiprintf_r+0x16a>
    c2d4:	89bb      	ldrh	r3, [r7, #12]
    c2d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c2d8:	065b      	lsls	r3, r3, #25
    c2da:	d400      	bmi.n	c2de <_svfiprintf_r+0x1da>
    c2dc:	e729      	b.n	c132 <_svfiprintf_r+0x2e>
    c2de:	2001      	movs	r0, #1
    c2e0:	4240      	negs	r0, r0
    c2e2:	e726      	b.n	c132 <_svfiprintf_r+0x2e>
    c2e4:	ab05      	add	r3, sp, #20
    c2e6:	9300      	str	r3, [sp, #0]
    c2e8:	003a      	movs	r2, r7
    c2ea:	4b07      	ldr	r3, [pc, #28]	; (c308 <_svfiprintf_r+0x204>)
    c2ec:	0029      	movs	r1, r5
    c2ee:	9802      	ldr	r0, [sp, #8]
    c2f0:	f000 f87a 	bl	c3e8 <_printf_i>
    c2f4:	e7ea      	b.n	c2cc <_svfiprintf_r+0x1c8>
    c2f6:	46c0      	nop			; (mov r8, r8)
    c2f8:	0000d418 	.word	0x0000d418
    c2fc:	0000d41e 	.word	0x0000d41e
    c300:	0000d422 	.word	0x0000d422
    c304:	00000000 	.word	0x00000000
    c308:	0000c041 	.word	0x0000c041

0000c30c <_printf_common>:
    c30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c30e:	0015      	movs	r5, r2
    c310:	9301      	str	r3, [sp, #4]
    c312:	688a      	ldr	r2, [r1, #8]
    c314:	690b      	ldr	r3, [r1, #16]
    c316:	9000      	str	r0, [sp, #0]
    c318:	000c      	movs	r4, r1
    c31a:	4293      	cmp	r3, r2
    c31c:	da00      	bge.n	c320 <_printf_common+0x14>
    c31e:	0013      	movs	r3, r2
    c320:	0022      	movs	r2, r4
    c322:	602b      	str	r3, [r5, #0]
    c324:	3243      	adds	r2, #67	; 0x43
    c326:	7812      	ldrb	r2, [r2, #0]
    c328:	2a00      	cmp	r2, #0
    c32a:	d001      	beq.n	c330 <_printf_common+0x24>
    c32c:	3301      	adds	r3, #1
    c32e:	602b      	str	r3, [r5, #0]
    c330:	6823      	ldr	r3, [r4, #0]
    c332:	069b      	lsls	r3, r3, #26
    c334:	d502      	bpl.n	c33c <_printf_common+0x30>
    c336:	682b      	ldr	r3, [r5, #0]
    c338:	3302      	adds	r3, #2
    c33a:	602b      	str	r3, [r5, #0]
    c33c:	2706      	movs	r7, #6
    c33e:	6823      	ldr	r3, [r4, #0]
    c340:	401f      	ands	r7, r3
    c342:	d027      	beq.n	c394 <_printf_common+0x88>
    c344:	0023      	movs	r3, r4
    c346:	3343      	adds	r3, #67	; 0x43
    c348:	781b      	ldrb	r3, [r3, #0]
    c34a:	1e5a      	subs	r2, r3, #1
    c34c:	4193      	sbcs	r3, r2
    c34e:	6822      	ldr	r2, [r4, #0]
    c350:	0692      	lsls	r2, r2, #26
    c352:	d430      	bmi.n	c3b6 <_printf_common+0xaa>
    c354:	0022      	movs	r2, r4
    c356:	9901      	ldr	r1, [sp, #4]
    c358:	3243      	adds	r2, #67	; 0x43
    c35a:	9800      	ldr	r0, [sp, #0]
    c35c:	9e08      	ldr	r6, [sp, #32]
    c35e:	47b0      	blx	r6
    c360:	1c43      	adds	r3, r0, #1
    c362:	d025      	beq.n	c3b0 <_printf_common+0xa4>
    c364:	2306      	movs	r3, #6
    c366:	6820      	ldr	r0, [r4, #0]
    c368:	682a      	ldr	r2, [r5, #0]
    c36a:	68e1      	ldr	r1, [r4, #12]
    c36c:	4003      	ands	r3, r0
    c36e:	2500      	movs	r5, #0
    c370:	2b04      	cmp	r3, #4
    c372:	d103      	bne.n	c37c <_printf_common+0x70>
    c374:	1a8d      	subs	r5, r1, r2
    c376:	43eb      	mvns	r3, r5
    c378:	17db      	asrs	r3, r3, #31
    c37a:	401d      	ands	r5, r3
    c37c:	68a3      	ldr	r3, [r4, #8]
    c37e:	6922      	ldr	r2, [r4, #16]
    c380:	4293      	cmp	r3, r2
    c382:	dd01      	ble.n	c388 <_printf_common+0x7c>
    c384:	1a9b      	subs	r3, r3, r2
    c386:	18ed      	adds	r5, r5, r3
    c388:	2700      	movs	r7, #0
    c38a:	42bd      	cmp	r5, r7
    c38c:	d120      	bne.n	c3d0 <_printf_common+0xc4>
    c38e:	2000      	movs	r0, #0
    c390:	e010      	b.n	c3b4 <_printf_common+0xa8>
    c392:	3701      	adds	r7, #1
    c394:	68e3      	ldr	r3, [r4, #12]
    c396:	682a      	ldr	r2, [r5, #0]
    c398:	1a9b      	subs	r3, r3, r2
    c39a:	429f      	cmp	r7, r3
    c39c:	dad2      	bge.n	c344 <_printf_common+0x38>
    c39e:	0022      	movs	r2, r4
    c3a0:	2301      	movs	r3, #1
    c3a2:	3219      	adds	r2, #25
    c3a4:	9901      	ldr	r1, [sp, #4]
    c3a6:	9800      	ldr	r0, [sp, #0]
    c3a8:	9e08      	ldr	r6, [sp, #32]
    c3aa:	47b0      	blx	r6
    c3ac:	1c43      	adds	r3, r0, #1
    c3ae:	d1f0      	bne.n	c392 <_printf_common+0x86>
    c3b0:	2001      	movs	r0, #1
    c3b2:	4240      	negs	r0, r0
    c3b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c3b6:	2030      	movs	r0, #48	; 0x30
    c3b8:	18e1      	adds	r1, r4, r3
    c3ba:	3143      	adds	r1, #67	; 0x43
    c3bc:	7008      	strb	r0, [r1, #0]
    c3be:	0021      	movs	r1, r4
    c3c0:	1c5a      	adds	r2, r3, #1
    c3c2:	3145      	adds	r1, #69	; 0x45
    c3c4:	7809      	ldrb	r1, [r1, #0]
    c3c6:	18a2      	adds	r2, r4, r2
    c3c8:	3243      	adds	r2, #67	; 0x43
    c3ca:	3302      	adds	r3, #2
    c3cc:	7011      	strb	r1, [r2, #0]
    c3ce:	e7c1      	b.n	c354 <_printf_common+0x48>
    c3d0:	0022      	movs	r2, r4
    c3d2:	2301      	movs	r3, #1
    c3d4:	321a      	adds	r2, #26
    c3d6:	9901      	ldr	r1, [sp, #4]
    c3d8:	9800      	ldr	r0, [sp, #0]
    c3da:	9e08      	ldr	r6, [sp, #32]
    c3dc:	47b0      	blx	r6
    c3de:	1c43      	adds	r3, r0, #1
    c3e0:	d0e6      	beq.n	c3b0 <_printf_common+0xa4>
    c3e2:	3701      	adds	r7, #1
    c3e4:	e7d1      	b.n	c38a <_printf_common+0x7e>
	...

0000c3e8 <_printf_i>:
    c3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3ea:	b08b      	sub	sp, #44	; 0x2c
    c3ec:	9206      	str	r2, [sp, #24]
    c3ee:	000a      	movs	r2, r1
    c3f0:	3243      	adds	r2, #67	; 0x43
    c3f2:	9307      	str	r3, [sp, #28]
    c3f4:	9005      	str	r0, [sp, #20]
    c3f6:	9204      	str	r2, [sp, #16]
    c3f8:	7e0a      	ldrb	r2, [r1, #24]
    c3fa:	000c      	movs	r4, r1
    c3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3fe:	2a6e      	cmp	r2, #110	; 0x6e
    c400:	d100      	bne.n	c404 <_printf_i+0x1c>
    c402:	e08f      	b.n	c524 <_printf_i+0x13c>
    c404:	d817      	bhi.n	c436 <_printf_i+0x4e>
    c406:	2a63      	cmp	r2, #99	; 0x63
    c408:	d02c      	beq.n	c464 <_printf_i+0x7c>
    c40a:	d808      	bhi.n	c41e <_printf_i+0x36>
    c40c:	2a00      	cmp	r2, #0
    c40e:	d100      	bne.n	c412 <_printf_i+0x2a>
    c410:	e099      	b.n	c546 <_printf_i+0x15e>
    c412:	2a58      	cmp	r2, #88	; 0x58
    c414:	d054      	beq.n	c4c0 <_printf_i+0xd8>
    c416:	0026      	movs	r6, r4
    c418:	3642      	adds	r6, #66	; 0x42
    c41a:	7032      	strb	r2, [r6, #0]
    c41c:	e029      	b.n	c472 <_printf_i+0x8a>
    c41e:	2a64      	cmp	r2, #100	; 0x64
    c420:	d001      	beq.n	c426 <_printf_i+0x3e>
    c422:	2a69      	cmp	r2, #105	; 0x69
    c424:	d1f7      	bne.n	c416 <_printf_i+0x2e>
    c426:	6821      	ldr	r1, [r4, #0]
    c428:	681a      	ldr	r2, [r3, #0]
    c42a:	0608      	lsls	r0, r1, #24
    c42c:	d523      	bpl.n	c476 <_printf_i+0x8e>
    c42e:	1d11      	adds	r1, r2, #4
    c430:	6019      	str	r1, [r3, #0]
    c432:	6815      	ldr	r5, [r2, #0]
    c434:	e025      	b.n	c482 <_printf_i+0x9a>
    c436:	2a73      	cmp	r2, #115	; 0x73
    c438:	d100      	bne.n	c43c <_printf_i+0x54>
    c43a:	e088      	b.n	c54e <_printf_i+0x166>
    c43c:	d808      	bhi.n	c450 <_printf_i+0x68>
    c43e:	2a6f      	cmp	r2, #111	; 0x6f
    c440:	d029      	beq.n	c496 <_printf_i+0xae>
    c442:	2a70      	cmp	r2, #112	; 0x70
    c444:	d1e7      	bne.n	c416 <_printf_i+0x2e>
    c446:	2220      	movs	r2, #32
    c448:	6809      	ldr	r1, [r1, #0]
    c44a:	430a      	orrs	r2, r1
    c44c:	6022      	str	r2, [r4, #0]
    c44e:	e003      	b.n	c458 <_printf_i+0x70>
    c450:	2a75      	cmp	r2, #117	; 0x75
    c452:	d020      	beq.n	c496 <_printf_i+0xae>
    c454:	2a78      	cmp	r2, #120	; 0x78
    c456:	d1de      	bne.n	c416 <_printf_i+0x2e>
    c458:	0022      	movs	r2, r4
    c45a:	2178      	movs	r1, #120	; 0x78
    c45c:	3245      	adds	r2, #69	; 0x45
    c45e:	7011      	strb	r1, [r2, #0]
    c460:	4a6c      	ldr	r2, [pc, #432]	; (c614 <_printf_i+0x22c>)
    c462:	e030      	b.n	c4c6 <_printf_i+0xde>
    c464:	000e      	movs	r6, r1
    c466:	681a      	ldr	r2, [r3, #0]
    c468:	3642      	adds	r6, #66	; 0x42
    c46a:	1d11      	adds	r1, r2, #4
    c46c:	6019      	str	r1, [r3, #0]
    c46e:	6813      	ldr	r3, [r2, #0]
    c470:	7033      	strb	r3, [r6, #0]
    c472:	2301      	movs	r3, #1
    c474:	e079      	b.n	c56a <_printf_i+0x182>
    c476:	0649      	lsls	r1, r1, #25
    c478:	d5d9      	bpl.n	c42e <_printf_i+0x46>
    c47a:	1d11      	adds	r1, r2, #4
    c47c:	6019      	str	r1, [r3, #0]
    c47e:	2300      	movs	r3, #0
    c480:	5ed5      	ldrsh	r5, [r2, r3]
    c482:	2d00      	cmp	r5, #0
    c484:	da03      	bge.n	c48e <_printf_i+0xa6>
    c486:	232d      	movs	r3, #45	; 0x2d
    c488:	9a04      	ldr	r2, [sp, #16]
    c48a:	426d      	negs	r5, r5
    c48c:	7013      	strb	r3, [r2, #0]
    c48e:	4b62      	ldr	r3, [pc, #392]	; (c618 <_printf_i+0x230>)
    c490:	270a      	movs	r7, #10
    c492:	9303      	str	r3, [sp, #12]
    c494:	e02f      	b.n	c4f6 <_printf_i+0x10e>
    c496:	6820      	ldr	r0, [r4, #0]
    c498:	6819      	ldr	r1, [r3, #0]
    c49a:	0605      	lsls	r5, r0, #24
    c49c:	d503      	bpl.n	c4a6 <_printf_i+0xbe>
    c49e:	1d08      	adds	r0, r1, #4
    c4a0:	6018      	str	r0, [r3, #0]
    c4a2:	680d      	ldr	r5, [r1, #0]
    c4a4:	e005      	b.n	c4b2 <_printf_i+0xca>
    c4a6:	0640      	lsls	r0, r0, #25
    c4a8:	d5f9      	bpl.n	c49e <_printf_i+0xb6>
    c4aa:	680d      	ldr	r5, [r1, #0]
    c4ac:	1d08      	adds	r0, r1, #4
    c4ae:	6018      	str	r0, [r3, #0]
    c4b0:	b2ad      	uxth	r5, r5
    c4b2:	4b59      	ldr	r3, [pc, #356]	; (c618 <_printf_i+0x230>)
    c4b4:	2708      	movs	r7, #8
    c4b6:	9303      	str	r3, [sp, #12]
    c4b8:	2a6f      	cmp	r2, #111	; 0x6f
    c4ba:	d018      	beq.n	c4ee <_printf_i+0x106>
    c4bc:	270a      	movs	r7, #10
    c4be:	e016      	b.n	c4ee <_printf_i+0x106>
    c4c0:	3145      	adds	r1, #69	; 0x45
    c4c2:	700a      	strb	r2, [r1, #0]
    c4c4:	4a54      	ldr	r2, [pc, #336]	; (c618 <_printf_i+0x230>)
    c4c6:	9203      	str	r2, [sp, #12]
    c4c8:	681a      	ldr	r2, [r3, #0]
    c4ca:	6821      	ldr	r1, [r4, #0]
    c4cc:	1d10      	adds	r0, r2, #4
    c4ce:	6018      	str	r0, [r3, #0]
    c4d0:	6815      	ldr	r5, [r2, #0]
    c4d2:	0608      	lsls	r0, r1, #24
    c4d4:	d522      	bpl.n	c51c <_printf_i+0x134>
    c4d6:	07cb      	lsls	r3, r1, #31
    c4d8:	d502      	bpl.n	c4e0 <_printf_i+0xf8>
    c4da:	2320      	movs	r3, #32
    c4dc:	4319      	orrs	r1, r3
    c4de:	6021      	str	r1, [r4, #0]
    c4e0:	2710      	movs	r7, #16
    c4e2:	2d00      	cmp	r5, #0
    c4e4:	d103      	bne.n	c4ee <_printf_i+0x106>
    c4e6:	2320      	movs	r3, #32
    c4e8:	6822      	ldr	r2, [r4, #0]
    c4ea:	439a      	bics	r2, r3
    c4ec:	6022      	str	r2, [r4, #0]
    c4ee:	0023      	movs	r3, r4
    c4f0:	2200      	movs	r2, #0
    c4f2:	3343      	adds	r3, #67	; 0x43
    c4f4:	701a      	strb	r2, [r3, #0]
    c4f6:	6863      	ldr	r3, [r4, #4]
    c4f8:	60a3      	str	r3, [r4, #8]
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	db5c      	blt.n	c5b8 <_printf_i+0x1d0>
    c4fe:	2204      	movs	r2, #4
    c500:	6821      	ldr	r1, [r4, #0]
    c502:	4391      	bics	r1, r2
    c504:	6021      	str	r1, [r4, #0]
    c506:	2d00      	cmp	r5, #0
    c508:	d158      	bne.n	c5bc <_printf_i+0x1d4>
    c50a:	9e04      	ldr	r6, [sp, #16]
    c50c:	2b00      	cmp	r3, #0
    c50e:	d064      	beq.n	c5da <_printf_i+0x1f2>
    c510:	0026      	movs	r6, r4
    c512:	9b03      	ldr	r3, [sp, #12]
    c514:	3642      	adds	r6, #66	; 0x42
    c516:	781b      	ldrb	r3, [r3, #0]
    c518:	7033      	strb	r3, [r6, #0]
    c51a:	e05e      	b.n	c5da <_printf_i+0x1f2>
    c51c:	0648      	lsls	r0, r1, #25
    c51e:	d5da      	bpl.n	c4d6 <_printf_i+0xee>
    c520:	b2ad      	uxth	r5, r5
    c522:	e7d8      	b.n	c4d6 <_printf_i+0xee>
    c524:	6809      	ldr	r1, [r1, #0]
    c526:	681a      	ldr	r2, [r3, #0]
    c528:	0608      	lsls	r0, r1, #24
    c52a:	d505      	bpl.n	c538 <_printf_i+0x150>
    c52c:	1d11      	adds	r1, r2, #4
    c52e:	6019      	str	r1, [r3, #0]
    c530:	6813      	ldr	r3, [r2, #0]
    c532:	6962      	ldr	r2, [r4, #20]
    c534:	601a      	str	r2, [r3, #0]
    c536:	e006      	b.n	c546 <_printf_i+0x15e>
    c538:	0649      	lsls	r1, r1, #25
    c53a:	d5f7      	bpl.n	c52c <_printf_i+0x144>
    c53c:	1d11      	adds	r1, r2, #4
    c53e:	6019      	str	r1, [r3, #0]
    c540:	6813      	ldr	r3, [r2, #0]
    c542:	8aa2      	ldrh	r2, [r4, #20]
    c544:	801a      	strh	r2, [r3, #0]
    c546:	2300      	movs	r3, #0
    c548:	9e04      	ldr	r6, [sp, #16]
    c54a:	6123      	str	r3, [r4, #16]
    c54c:	e054      	b.n	c5f8 <_printf_i+0x210>
    c54e:	681a      	ldr	r2, [r3, #0]
    c550:	1d11      	adds	r1, r2, #4
    c552:	6019      	str	r1, [r3, #0]
    c554:	6816      	ldr	r6, [r2, #0]
    c556:	2100      	movs	r1, #0
    c558:	6862      	ldr	r2, [r4, #4]
    c55a:	0030      	movs	r0, r6
    c55c:	f000 f8f6 	bl	c74c <memchr>
    c560:	2800      	cmp	r0, #0
    c562:	d001      	beq.n	c568 <_printf_i+0x180>
    c564:	1b80      	subs	r0, r0, r6
    c566:	6060      	str	r0, [r4, #4]
    c568:	6863      	ldr	r3, [r4, #4]
    c56a:	6123      	str	r3, [r4, #16]
    c56c:	2300      	movs	r3, #0
    c56e:	9a04      	ldr	r2, [sp, #16]
    c570:	7013      	strb	r3, [r2, #0]
    c572:	e041      	b.n	c5f8 <_printf_i+0x210>
    c574:	6923      	ldr	r3, [r4, #16]
    c576:	0032      	movs	r2, r6
    c578:	9906      	ldr	r1, [sp, #24]
    c57a:	9805      	ldr	r0, [sp, #20]
    c57c:	9d07      	ldr	r5, [sp, #28]
    c57e:	47a8      	blx	r5
    c580:	1c43      	adds	r3, r0, #1
    c582:	d043      	beq.n	c60c <_printf_i+0x224>
    c584:	6823      	ldr	r3, [r4, #0]
    c586:	2500      	movs	r5, #0
    c588:	079b      	lsls	r3, r3, #30
    c58a:	d40f      	bmi.n	c5ac <_printf_i+0x1c4>
    c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c58e:	68e0      	ldr	r0, [r4, #12]
    c590:	4298      	cmp	r0, r3
    c592:	da3d      	bge.n	c610 <_printf_i+0x228>
    c594:	0018      	movs	r0, r3
    c596:	e03b      	b.n	c610 <_printf_i+0x228>
    c598:	0022      	movs	r2, r4
    c59a:	2301      	movs	r3, #1
    c59c:	3219      	adds	r2, #25
    c59e:	9906      	ldr	r1, [sp, #24]
    c5a0:	9805      	ldr	r0, [sp, #20]
    c5a2:	9e07      	ldr	r6, [sp, #28]
    c5a4:	47b0      	blx	r6
    c5a6:	1c43      	adds	r3, r0, #1
    c5a8:	d030      	beq.n	c60c <_printf_i+0x224>
    c5aa:	3501      	adds	r5, #1
    c5ac:	68e3      	ldr	r3, [r4, #12]
    c5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c5b0:	1a9b      	subs	r3, r3, r2
    c5b2:	429d      	cmp	r5, r3
    c5b4:	dbf0      	blt.n	c598 <_printf_i+0x1b0>
    c5b6:	e7e9      	b.n	c58c <_printf_i+0x1a4>
    c5b8:	2d00      	cmp	r5, #0
    c5ba:	d0a9      	beq.n	c510 <_printf_i+0x128>
    c5bc:	9e04      	ldr	r6, [sp, #16]
    c5be:	0028      	movs	r0, r5
    c5c0:	0039      	movs	r1, r7
    c5c2:	f7ff f881 	bl	b6c8 <__aeabi_uidivmod>
    c5c6:	9b03      	ldr	r3, [sp, #12]
    c5c8:	3e01      	subs	r6, #1
    c5ca:	5c5b      	ldrb	r3, [r3, r1]
    c5cc:	0028      	movs	r0, r5
    c5ce:	7033      	strb	r3, [r6, #0]
    c5d0:	0039      	movs	r1, r7
    c5d2:	f7fe fff3 	bl	b5bc <__udivsi3>
    c5d6:	1e05      	subs	r5, r0, #0
    c5d8:	d1f1      	bne.n	c5be <_printf_i+0x1d6>
    c5da:	2f08      	cmp	r7, #8
    c5dc:	d109      	bne.n	c5f2 <_printf_i+0x20a>
    c5de:	6823      	ldr	r3, [r4, #0]
    c5e0:	07db      	lsls	r3, r3, #31
    c5e2:	d506      	bpl.n	c5f2 <_printf_i+0x20a>
    c5e4:	6863      	ldr	r3, [r4, #4]
    c5e6:	6922      	ldr	r2, [r4, #16]
    c5e8:	4293      	cmp	r3, r2
    c5ea:	dc02      	bgt.n	c5f2 <_printf_i+0x20a>
    c5ec:	2330      	movs	r3, #48	; 0x30
    c5ee:	3e01      	subs	r6, #1
    c5f0:	7033      	strb	r3, [r6, #0]
    c5f2:	9b04      	ldr	r3, [sp, #16]
    c5f4:	1b9b      	subs	r3, r3, r6
    c5f6:	6123      	str	r3, [r4, #16]
    c5f8:	9b07      	ldr	r3, [sp, #28]
    c5fa:	aa09      	add	r2, sp, #36	; 0x24
    c5fc:	9300      	str	r3, [sp, #0]
    c5fe:	0021      	movs	r1, r4
    c600:	9b06      	ldr	r3, [sp, #24]
    c602:	9805      	ldr	r0, [sp, #20]
    c604:	f7ff fe82 	bl	c30c <_printf_common>
    c608:	1c43      	adds	r3, r0, #1
    c60a:	d1b3      	bne.n	c574 <_printf_i+0x18c>
    c60c:	2001      	movs	r0, #1
    c60e:	4240      	negs	r0, r0
    c610:	b00b      	add	sp, #44	; 0x2c
    c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c614:	0000d43a 	.word	0x0000d43a
    c618:	0000d429 	.word	0x0000d429

0000c61c <__sread>:
    c61c:	b570      	push	{r4, r5, r6, lr}
    c61e:	000c      	movs	r4, r1
    c620:	250e      	movs	r5, #14
    c622:	5f49      	ldrsh	r1, [r1, r5]
    c624:	f000 f8d6 	bl	c7d4 <_read_r>
    c628:	2800      	cmp	r0, #0
    c62a:	db03      	blt.n	c634 <__sread+0x18>
    c62c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c62e:	181b      	adds	r3, r3, r0
    c630:	6563      	str	r3, [r4, #84]	; 0x54
    c632:	bd70      	pop	{r4, r5, r6, pc}
    c634:	89a3      	ldrh	r3, [r4, #12]
    c636:	4a02      	ldr	r2, [pc, #8]	; (c640 <__sread+0x24>)
    c638:	4013      	ands	r3, r2
    c63a:	81a3      	strh	r3, [r4, #12]
    c63c:	e7f9      	b.n	c632 <__sread+0x16>
    c63e:	46c0      	nop			; (mov r8, r8)
    c640:	ffffefff 	.word	0xffffefff

0000c644 <__swrite>:
    c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c646:	001f      	movs	r7, r3
    c648:	898b      	ldrh	r3, [r1, #12]
    c64a:	0005      	movs	r5, r0
    c64c:	000c      	movs	r4, r1
    c64e:	0016      	movs	r6, r2
    c650:	05db      	lsls	r3, r3, #23
    c652:	d505      	bpl.n	c660 <__swrite+0x1c>
    c654:	230e      	movs	r3, #14
    c656:	5ec9      	ldrsh	r1, [r1, r3]
    c658:	2200      	movs	r2, #0
    c65a:	2302      	movs	r3, #2
    c65c:	f000 f862 	bl	c724 <_lseek_r>
    c660:	89a3      	ldrh	r3, [r4, #12]
    c662:	4a05      	ldr	r2, [pc, #20]	; (c678 <__swrite+0x34>)
    c664:	0028      	movs	r0, r5
    c666:	4013      	ands	r3, r2
    c668:	81a3      	strh	r3, [r4, #12]
    c66a:	0032      	movs	r2, r6
    c66c:	230e      	movs	r3, #14
    c66e:	5ee1      	ldrsh	r1, [r4, r3]
    c670:	003b      	movs	r3, r7
    c672:	f000 f81f 	bl	c6b4 <_write_r>
    c676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c678:	ffffefff 	.word	0xffffefff

0000c67c <__sseek>:
    c67c:	b570      	push	{r4, r5, r6, lr}
    c67e:	000c      	movs	r4, r1
    c680:	250e      	movs	r5, #14
    c682:	5f49      	ldrsh	r1, [r1, r5]
    c684:	f000 f84e 	bl	c724 <_lseek_r>
    c688:	89a3      	ldrh	r3, [r4, #12]
    c68a:	1c42      	adds	r2, r0, #1
    c68c:	d103      	bne.n	c696 <__sseek+0x1a>
    c68e:	4a05      	ldr	r2, [pc, #20]	; (c6a4 <__sseek+0x28>)
    c690:	4013      	ands	r3, r2
    c692:	81a3      	strh	r3, [r4, #12]
    c694:	bd70      	pop	{r4, r5, r6, pc}
    c696:	2280      	movs	r2, #128	; 0x80
    c698:	0152      	lsls	r2, r2, #5
    c69a:	4313      	orrs	r3, r2
    c69c:	81a3      	strh	r3, [r4, #12]
    c69e:	6560      	str	r0, [r4, #84]	; 0x54
    c6a0:	e7f8      	b.n	c694 <__sseek+0x18>
    c6a2:	46c0      	nop			; (mov r8, r8)
    c6a4:	ffffefff 	.word	0xffffefff

0000c6a8 <__sclose>:
    c6a8:	b510      	push	{r4, lr}
    c6aa:	230e      	movs	r3, #14
    c6ac:	5ec9      	ldrsh	r1, [r1, r3]
    c6ae:	f000 f815 	bl	c6dc <_close_r>
    c6b2:	bd10      	pop	{r4, pc}

0000c6b4 <_write_r>:
    c6b4:	b570      	push	{r4, r5, r6, lr}
    c6b6:	0005      	movs	r5, r0
    c6b8:	0008      	movs	r0, r1
    c6ba:	0011      	movs	r1, r2
    c6bc:	2200      	movs	r2, #0
    c6be:	4c06      	ldr	r4, [pc, #24]	; (c6d8 <_write_r+0x24>)
    c6c0:	6022      	str	r2, [r4, #0]
    c6c2:	001a      	movs	r2, r3
    c6c4:	f7fa fc9e 	bl	7004 <_write>
    c6c8:	1c43      	adds	r3, r0, #1
    c6ca:	d103      	bne.n	c6d4 <_write_r+0x20>
    c6cc:	6823      	ldr	r3, [r4, #0]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d000      	beq.n	c6d4 <_write_r+0x20>
    c6d2:	602b      	str	r3, [r5, #0]
    c6d4:	bd70      	pop	{r4, r5, r6, pc}
    c6d6:	46c0      	nop			; (mov r8, r8)
    c6d8:	20000d2c 	.word	0x20000d2c

0000c6dc <_close_r>:
    c6dc:	2300      	movs	r3, #0
    c6de:	b570      	push	{r4, r5, r6, lr}
    c6e0:	4c06      	ldr	r4, [pc, #24]	; (c6fc <_close_r+0x20>)
    c6e2:	0005      	movs	r5, r0
    c6e4:	0008      	movs	r0, r1
    c6e6:	6023      	str	r3, [r4, #0]
    c6e8:	f7fa fce0 	bl	70ac <_close>
    c6ec:	1c43      	adds	r3, r0, #1
    c6ee:	d103      	bne.n	c6f8 <_close_r+0x1c>
    c6f0:	6823      	ldr	r3, [r4, #0]
    c6f2:	2b00      	cmp	r3, #0
    c6f4:	d000      	beq.n	c6f8 <_close_r+0x1c>
    c6f6:	602b      	str	r3, [r5, #0]
    c6f8:	bd70      	pop	{r4, r5, r6, pc}
    c6fa:	46c0      	nop			; (mov r8, r8)
    c6fc:	20000d2c 	.word	0x20000d2c

0000c700 <_fstat_r>:
    c700:	2300      	movs	r3, #0
    c702:	b570      	push	{r4, r5, r6, lr}
    c704:	4c06      	ldr	r4, [pc, #24]	; (c720 <_fstat_r+0x20>)
    c706:	0005      	movs	r5, r0
    c708:	0008      	movs	r0, r1
    c70a:	0011      	movs	r1, r2
    c70c:	6023      	str	r3, [r4, #0]
    c70e:	f7fa fcd7 	bl	70c0 <_fstat>
    c712:	1c43      	adds	r3, r0, #1
    c714:	d103      	bne.n	c71e <_fstat_r+0x1e>
    c716:	6823      	ldr	r3, [r4, #0]
    c718:	2b00      	cmp	r3, #0
    c71a:	d000      	beq.n	c71e <_fstat_r+0x1e>
    c71c:	602b      	str	r3, [r5, #0]
    c71e:	bd70      	pop	{r4, r5, r6, pc}
    c720:	20000d2c 	.word	0x20000d2c

0000c724 <_lseek_r>:
    c724:	b570      	push	{r4, r5, r6, lr}
    c726:	0005      	movs	r5, r0
    c728:	0008      	movs	r0, r1
    c72a:	0011      	movs	r1, r2
    c72c:	2200      	movs	r2, #0
    c72e:	4c06      	ldr	r4, [pc, #24]	; (c748 <_lseek_r+0x24>)
    c730:	6022      	str	r2, [r4, #0]
    c732:	001a      	movs	r2, r3
    c734:	f7fa fcd2 	bl	70dc <_lseek>
    c738:	1c43      	adds	r3, r0, #1
    c73a:	d103      	bne.n	c744 <_lseek_r+0x20>
    c73c:	6823      	ldr	r3, [r4, #0]
    c73e:	2b00      	cmp	r3, #0
    c740:	d000      	beq.n	c744 <_lseek_r+0x20>
    c742:	602b      	str	r3, [r5, #0]
    c744:	bd70      	pop	{r4, r5, r6, pc}
    c746:	46c0      	nop			; (mov r8, r8)
    c748:	20000d2c 	.word	0x20000d2c

0000c74c <memchr>:
    c74c:	b2c9      	uxtb	r1, r1
    c74e:	1882      	adds	r2, r0, r2
    c750:	4290      	cmp	r0, r2
    c752:	d101      	bne.n	c758 <memchr+0xc>
    c754:	2000      	movs	r0, #0
    c756:	4770      	bx	lr
    c758:	7803      	ldrb	r3, [r0, #0]
    c75a:	428b      	cmp	r3, r1
    c75c:	d0fb      	beq.n	c756 <memchr+0xa>
    c75e:	3001      	adds	r0, #1
    c760:	e7f6      	b.n	c750 <memchr+0x4>

0000c762 <memmove>:
    c762:	b510      	push	{r4, lr}
    c764:	4288      	cmp	r0, r1
    c766:	d902      	bls.n	c76e <memmove+0xc>
    c768:	188b      	adds	r3, r1, r2
    c76a:	4298      	cmp	r0, r3
    c76c:	d308      	bcc.n	c780 <memmove+0x1e>
    c76e:	2300      	movs	r3, #0
    c770:	429a      	cmp	r2, r3
    c772:	d007      	beq.n	c784 <memmove+0x22>
    c774:	5ccc      	ldrb	r4, [r1, r3]
    c776:	54c4      	strb	r4, [r0, r3]
    c778:	3301      	adds	r3, #1
    c77a:	e7f9      	b.n	c770 <memmove+0xe>
    c77c:	5c8b      	ldrb	r3, [r1, r2]
    c77e:	5483      	strb	r3, [r0, r2]
    c780:	3a01      	subs	r2, #1
    c782:	d2fb      	bcs.n	c77c <memmove+0x1a>
    c784:	bd10      	pop	{r4, pc}

0000c786 <_realloc_r>:
    c786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c788:	0007      	movs	r7, r0
    c78a:	000d      	movs	r5, r1
    c78c:	0016      	movs	r6, r2
    c78e:	2900      	cmp	r1, #0
    c790:	d105      	bne.n	c79e <_realloc_r+0x18>
    c792:	0011      	movs	r1, r2
    c794:	f7ff f93c 	bl	ba10 <_malloc_r>
    c798:	0004      	movs	r4, r0
    c79a:	0020      	movs	r0, r4
    c79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c79e:	2a00      	cmp	r2, #0
    c7a0:	d103      	bne.n	c7aa <_realloc_r+0x24>
    c7a2:	f7ff f8eb 	bl	b97c <_free_r>
    c7a6:	0034      	movs	r4, r6
    c7a8:	e7f7      	b.n	c79a <_realloc_r+0x14>
    c7aa:	f000 f827 	bl	c7fc <_malloc_usable_size_r>
    c7ae:	002c      	movs	r4, r5
    c7b0:	4286      	cmp	r6, r0
    c7b2:	d9f2      	bls.n	c79a <_realloc_r+0x14>
    c7b4:	0031      	movs	r1, r6
    c7b6:	0038      	movs	r0, r7
    c7b8:	f7ff f92a 	bl	ba10 <_malloc_r>
    c7bc:	1e04      	subs	r4, r0, #0
    c7be:	d0ec      	beq.n	c79a <_realloc_r+0x14>
    c7c0:	0029      	movs	r1, r5
    c7c2:	0032      	movs	r2, r6
    c7c4:	f7ff f8c8 	bl	b958 <memcpy>
    c7c8:	0029      	movs	r1, r5
    c7ca:	0038      	movs	r0, r7
    c7cc:	f7ff f8d6 	bl	b97c <_free_r>
    c7d0:	e7e3      	b.n	c79a <_realloc_r+0x14>
	...

0000c7d4 <_read_r>:
    c7d4:	b570      	push	{r4, r5, r6, lr}
    c7d6:	0005      	movs	r5, r0
    c7d8:	0008      	movs	r0, r1
    c7da:	0011      	movs	r1, r2
    c7dc:	2200      	movs	r2, #0
    c7de:	4c06      	ldr	r4, [pc, #24]	; (c7f8 <_read_r+0x24>)
    c7e0:	6022      	str	r2, [r4, #0]
    c7e2:	001a      	movs	r2, r3
    c7e4:	f7fa fbe4 	bl	6fb0 <_read>
    c7e8:	1c43      	adds	r3, r0, #1
    c7ea:	d103      	bne.n	c7f4 <_read_r+0x20>
    c7ec:	6823      	ldr	r3, [r4, #0]
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	d000      	beq.n	c7f4 <_read_r+0x20>
    c7f2:	602b      	str	r3, [r5, #0]
    c7f4:	bd70      	pop	{r4, r5, r6, pc}
    c7f6:	46c0      	nop			; (mov r8, r8)
    c7f8:	20000d2c 	.word	0x20000d2c

0000c7fc <_malloc_usable_size_r>:
    c7fc:	1f0b      	subs	r3, r1, #4
    c7fe:	681b      	ldr	r3, [r3, #0]
    c800:	1f18      	subs	r0, r3, #4
    c802:	2b00      	cmp	r3, #0
    c804:	da01      	bge.n	c80a <_malloc_usable_size_r+0xe>
    c806:	580b      	ldr	r3, [r1, r0]
    c808:	18c0      	adds	r0, r0, r3
    c80a:	4770      	bx	lr
    c80c:	0000065c 	.word	0x0000065c
    c810:	0000065c 	.word	0x0000065c
    c814:	00000650 	.word	0x00000650
    c818:	0000065c 	.word	0x0000065c
    c81c:	00000650 	.word	0x00000650
    c820:	0000062a 	.word	0x0000062a
    c824:	0000062a 	.word	0x0000062a
    c828:	0000065c 	.word	0x0000065c
    c82c:	0000065c 	.word	0x0000065c
    c830:	0000065c 	.word	0x0000065c
    c834:	0000065c 	.word	0x0000065c
    c838:	0000065c 	.word	0x0000065c
    c83c:	0000065c 	.word	0x0000065c
    c840:	0000065c 	.word	0x0000065c
    c844:	0000065c 	.word	0x0000065c
    c848:	0000065c 	.word	0x0000065c
    c84c:	0000065c 	.word	0x0000065c
    c850:	0000065c 	.word	0x0000065c
    c854:	0000065c 	.word	0x0000065c
    c858:	0000065c 	.word	0x0000065c
    c85c:	0000065c 	.word	0x0000065c
    c860:	0000065c 	.word	0x0000065c
    c864:	0000065c 	.word	0x0000065c
    c868:	0000065c 	.word	0x0000065c
    c86c:	0000065c 	.word	0x0000065c
    c870:	0000065c 	.word	0x0000065c
    c874:	0000065c 	.word	0x0000065c
    c878:	0000065c 	.word	0x0000065c
    c87c:	0000065c 	.word	0x0000065c
    c880:	0000065c 	.word	0x0000065c
    c884:	0000065c 	.word	0x0000065c
    c888:	0000065c 	.word	0x0000065c
    c88c:	0000065c 	.word	0x0000065c
    c890:	0000065c 	.word	0x0000065c
    c894:	0000065c 	.word	0x0000065c
    c898:	0000065c 	.word	0x0000065c
    c89c:	0000065c 	.word	0x0000065c
    c8a0:	0000065c 	.word	0x0000065c
    c8a4:	0000065c 	.word	0x0000065c
    c8a8:	0000065c 	.word	0x0000065c
    c8ac:	0000065c 	.word	0x0000065c
    c8b0:	0000065c 	.word	0x0000065c
    c8b4:	0000065c 	.word	0x0000065c
    c8b8:	0000065c 	.word	0x0000065c
    c8bc:	0000065c 	.word	0x0000065c
    c8c0:	0000065c 	.word	0x0000065c
    c8c4:	0000065c 	.word	0x0000065c
    c8c8:	0000065c 	.word	0x0000065c
    c8cc:	0000065c 	.word	0x0000065c
    c8d0:	0000065c 	.word	0x0000065c
    c8d4:	0000065c 	.word	0x0000065c
    c8d8:	0000065c 	.word	0x0000065c
    c8dc:	0000065c 	.word	0x0000065c
    c8e0:	0000065c 	.word	0x0000065c
    c8e4:	0000065c 	.word	0x0000065c
    c8e8:	0000065c 	.word	0x0000065c
    c8ec:	0000065c 	.word	0x0000065c
    c8f0:	0000065c 	.word	0x0000065c
    c8f4:	0000065c 	.word	0x0000065c
    c8f8:	0000065c 	.word	0x0000065c
    c8fc:	0000065c 	.word	0x0000065c
    c900:	0000065c 	.word	0x0000065c
    c904:	0000065c 	.word	0x0000065c
    c908:	0000065c 	.word	0x0000065c
    c90c:	00000650 	.word	0x00000650
    c910:	00000650 	.word	0x00000650
    c914:	00000666 	.word	0x00000666
    c918:	00000666 	.word	0x00000666
    c91c:	00000666 	.word	0x00000666
    c920:	00000666 	.word	0x00000666

0000c924 <sd_mmc_trans_units>:
    c924:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000c940 <sd_trans_multipliers>:
    c940:	00000000 0000000a 0000000c 0000000d     ................
    c950:	0000000f 00000014 00000019 0000001e     ................
    c960:	00000023 00000028 0000002d 00000032     #...(...-...2...
    c970:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000c980 <mmc_trans_multipliers>:
    c980:	00000000 0000000a 0000000c 0000000d     ................
    c990:	0000000f 00000014 0000001a 0000001e     ................
    c9a0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    c9b0:	00000037 0000003c 00000046 00000050     7...<...F...P...
    c9c0:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    c9d0:	22302074 00000000                       t 0"....

0000c9d8 <lun_desc>:
    c9d8:	00002419 00002471 000024bd 00002509     .$..q$...$...%..
    c9e8:	00002539 000025bd 0000264d 0000c9c0     9%...%..M&......
    c9f8:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    ca08:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    ca18:	0000612e 000061a8 000061a8 0000614c     .a...a...a..La..
    ca28:	00006146 00006152 00006134 00006158     Fa..Ra..4a..Xa..
    ca38:	0000618e 00006474 000064c4 000064c4     .a..td...d...d..
    ca48:	000064c0 00006466 00006486 00006456     .d..fd...d..Vd..
    ca58:	00006498 000064aa 00006512 00006540     .d...d...e..@e..
    ca68:	00006540 0000653c 0000650c 00006518     @e..<e...e...e..
    ca78:	00006506 0000651e 00006524              .e...e..$e..

0000ca84 <LfnOfs>:
    ca84:	07050301 12100e09 1c181614 0000001e     ................
    ca94:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    caa4:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    cab4:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    cac4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    cad4:	20205441 00202020                       AT     .

0000cadc <excvt.4558>:
    cadc:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    caec:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    cafc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    cb0c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    cb1c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    cb2c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    cb3c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    cb4c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000cb5c <Tbl>:
    cb5c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    cb6c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    cb7c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    cb8c:	00d600ff 00f800dc 00d800a3 019200d7     ................
    cb9c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    cbac:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    cbbc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    cbcc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    cbdc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    cbec:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    cbfc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    cc0c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    cc1c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    cc2c:	00da00de 00d900db 00dd00fd 00b400af     ................
    cc3c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    cc4c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000cc5c <tbl_lower.4308>:
    cc5c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    cc6c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    cc7c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    cc8c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    cc9c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    ccac:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    ccbc:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    cccc:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    ccdc:	01050103 01090107 010d010b 0111010f     ................
    ccec:	01150113 01190117 011d011b 0121011f     ..............!.
    ccfc:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    cd0c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    cd1c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    cd2c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    cd3c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    cd4c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    cd5c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    cd6c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    cd7c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    cd8c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    cd9c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    cdac:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    cdbc:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    cdcc:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    cddc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    cdec:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    cdfc:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    ce0c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    ce1c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    ce2c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000ce3c <tbl_upper.4309>:
    ce3c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    ce4c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    ce5c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    ce6c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    ce7c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    ce8c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    ce9c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    ceac:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    cebc:	01040102 01080106 010c010a 0110010e     ................
    cecc:	01140112 01180116 011c011a 0120011e     .............. .
    cedc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    ceec:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    cefc:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    cf0c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    cf1c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    cf2c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    cf3c:	03940393 03960395 03980397 039a0399     ................
    cf4c:	039c039b 039e039d 03a0039f 03a303a1     ................
    cf5c:	03a503a4 03a703a6 03a903a8 041003aa     ................
    cf6c:	04120411 04140413 04160415 04180417     ................
    cf7c:	041a0419 041c041b 041e041d 0420041f     .............. .
    cf8c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    cf9c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    cfac:	04030402 04050404 04070406 04090408     ................
    cfbc:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    cfcc:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    cfdc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    cfec:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    cffc:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    d00c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    d01c:	73617245 72652065 00726f72 6f727245     Erase error.Erro
    d02c:	202d2072 74736574 67617020 73692065     r - test page is
    d03c:	746f6e20 61726520 21646573 00000000      not erased!....
    d04c:	6c756f43 74276e64 61657220 72662064     Couldn't read fr
    d05c:	0d216d6f 0000000a 6c756f43 74276e64     om!.....Couldn't
    d06c:	69727720 69206574 6874206e 564e2065      write in the NV
    d07c:	656d204d 79726f6d 000a0d21 204d564e     M memory!...NVM 
    d08c:	6f666e49 754e203a 7265626d 20666f20     Info: Number of 
    d09c:	65676150 64252073 6953202e 6f20657a     Pages %d. Size o
    d0ac:	20612066 65676170 6425203a 74796220     f a page: %d byt
    d0bc:	202e7365 00000a0d 6c756f43 6f6e2064     es. ....Could no
    d0cc:	61632074 6c75636c 20657461 21435243     t calculate CRC!
    d0dc:	000a0d21 20435243 43204453 3a445241     !...CRC SD CARD:
    d0ec:	20642520 43524320 4d564e20 6425203a      %d  CRC NVM: %d
    d0fc:	000a0d20 35455345 20303631 4e45202d      ...ESE5160 - EN
    d10c:	20524554 544f4f42 44414f4c 00005245     TER BOOTLOADER..
    d11c:	2d0d0a0c 4453202d 434d4d2f 72614320     ...-- SD/MMC Car
    d12c:	78452064 6c706d61 6e6f2065 74614620     d Example on Fat
    d13c:	2d207346 000d0a2d 43204453 20445241     Fs --...SD CARD 
    d14c:	6c696166 20216465 63656843 6f79206b     failed! Check yo
    d15c:	63207275 656e6e6f 6f697463 202e736e     ur connections. 
    d16c:	74737953 77206d65 206c6c69 74736572     System will rest
    d17c:	20747261 35206e69 63657320 73646e6f     art in 5 seconds
    d18c:	002e2e2e 43204453 20445241 6e756f6d     ....SD CARD moun
    d19c:	75732074 73656363 46202173 73656c69     t success! Files
    d1ac:	65747379 6c61206d 6d206f73 746e756f     ystem also mount
    d1bc:	202e6465 00000a0d 6e756f46 6f622064     ed. ....Found bo
    d1cc:	6620746f 2067616c 000a0d21 6e756f66     ot flag !...foun
    d1dc:	65742064 41207473 616c6620 0d212067     d test A flag !.
    d1ec:	0000000a 6c756f43 74276e64 6e696620     ....Couldn't fin
    d1fc:	68742064 69662065 2120656c 00000a0d     d the file !....
    d20c:	74736554 69727720 74206574 564e206f     Test write to NV
    d21c:	6166204d 64656c69 000a0d21 74736554     M failed!...Test
    d22c:	69727720 74206574 564e206f 7573204d      write to NVM su
    d23c:	65656363 21646564 00000a0d 35455345     cceeded!....ESE5
    d24c:	20303631 5845202d 42205449 4c544f4f     160 - EXIT BOOTL
    d25c:	4544414f 00000052 43204453 20647261     OADER...SD Card 
    d26c:	74696e69 65746169 6f632064 63657272     initiated correc
    d27c:	21796c74 00000d0a 6e756f4d 69642074     tly!....Mount di
    d28c:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    d29c:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    d2ac:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    d2bc:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    d2cc:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    d2dc:	73657420 69662074 2820656c 75705f66      test file (f_pu
    d2ec:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    d2fc:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    d30c:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    d31c:	20736920 63637573 66737365 0a2e6c75      is successful..
    d32c:	0000000d 6c756f43 6f6e2064 706f2074     ....Could not op
    d33c:	62206e65 72616e69 69662079 0d21656c     en binary file!.
    d34c:	0000000a 74697257 6f742065 73657420     ....Write to tes
    d35c:	69662074 2820656c 72775f66 29657469     t file (f_write)
    d36c:	0d2e2e2e 0000000a 20646e45 5420666f     ........End of T
    d37c:	2e747365 00000d0a 43204453 20647261     est.....SD Card 
    d38c:	6c696166 69206465 6974696e 6f697461     failed initiatio
    d39c:	4320216e 6b636568 6e6f6320 7463656e     n! Check connect
    d3ac:	736e6f69 000d0a21                       ions!...

0000d3b4 <_global_impure_ptr>:
    d3b4:	2000005c                                \.. 

0000d3b8 <__sf_fake_stderr>:
	...

0000d3d8 <__sf_fake_stdin>:
	...

0000d3f8 <__sf_fake_stdout>:
	...
    d418:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d428:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d438:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d448:	00006665                                ef..

0000d44c <_init>:
    d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d44e:	46c0      	nop			; (mov r8, r8)
    d450:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d452:	bc08      	pop	{r3}
    d454:	469e      	mov	lr, r3
    d456:	4770      	bx	lr

0000d458 <__init_array_start>:
    d458:	000000dd 	.word	0x000000dd

0000d45c <_fini>:
    d45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d45e:	46c0      	nop			; (mov r8, r8)
    d460:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d462:	bc08      	pop	{r3}
    d464:	469e      	mov	lr, r3
    d466:	4770      	bx	lr

0000d468 <__fini_array_start>:
    d468:	000000b5 	.word	0x000000b5
